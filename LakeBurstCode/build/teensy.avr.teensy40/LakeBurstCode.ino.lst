
C:\Users\mason\AppData\Local\arduino\sketches\3B457678A0E2D8C6916A98DA0EC77E02/LakeBurstCode.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200042c0 	.word	0x200042c0
6000142c:	20004c20 	.word	0x20004c20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d4 	bl	600017ec <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f972 	bl	600017fc <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f9de 	bl	6000190c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fb6d 	bl	60001c40 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fb12 	bl	60001bd4 <analog_init>
	pwm_init();
600015b0:	f000 fb52 	bl	60001c58 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f9d8 	bl	60001968 <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f91a 	bl	600017f0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 fa69 	bl	60001a98 <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f913 	bl	600017f8 <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f90f 	bl	600017f4 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fb2f 	bl	60001c38 <____libc_init_array_veneer>
	main();
600015da:	f000 fb35 	bl	60001c48 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	000119c8 	.word	0x000119c8
600015ec:	60001e74 	.word	0x60001e74
600015f0:	00000000 	.word	0x00000000
600015f4:	200042c0 	.word	0x200042c0
600015f8:	60013840 	.word	0x60013840
600015fc:	20000000 	.word	0x20000000
60001600:	20004000 	.word	0x20004000
60001604:	0000b335 	.word	0x0000b335
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00009c55 	.word	0x00009c55
60001618:	20004bc0 	.word	0x20004bc0
6000161c:	00009c59 	.word	0x00009c59
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20004bc4 	.word	0x20004bc4
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaabf 	.word	0xaaaaaabf
60001668:	00200007 	.word	0x00200007
6000166c:	20068000 	.word	0x20068000

60001670 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001670:	6943      	ldr	r3, [r0, #20]
60001672:	4a0a      	ldr	r2, [pc, #40]	; (6000169c <TwoWire::configSDApin(unsigned char)+0x2c>)
60001674:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001678:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167a:	7a03      	ldrb	r3, [r0, #8]
6000167c:	4c08      	ldr	r4, [pc, #32]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x30>)
6000167e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001682:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001688:	68c2      	ldr	r2, [r0, #12]
6000168a:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000168c:	6903      	ldr	r3, [r0, #16]
6000168e:	b10b      	cbz	r3, 60001694 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001690:	6942      	ldr	r2, [r0, #20]
60001692:	601a      	str	r2, [r3, #0]
	}
}
60001694:	f85d 4b04 	ldr.w	r4, [sp], #4
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	20002e18 	.word	0x20002e18
600016a0:	0001f861 	.word	0x0001f861

600016a4 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a4:	6943      	ldr	r3, [r0, #20]
600016a6:	7e02      	ldrb	r2, [r0, #24]
600016a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016ac:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b0:	458c      	cmp	ip, r1
600016b2:	d01c      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b4:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016b6:	2aff      	cmp	r2, #255	; 0xff
600016b8:	d019      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016ba:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016bc:	b510      	push	{r4, lr}
600016be:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c0:	d016      	beq.n	600016f0 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c2:	7e1a      	ldrb	r2, [r3, #24]
600016c4:	2aff      	cmp	r2, #255	; 0xff
600016c6:	d006      	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016c8:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
600016ce:	6812      	ldr	r2, [r2, #0]
600016d0:	421a      	tst	r2, r3
600016d2:	d101      	bne.n	600016d8 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d4:	7621      	strb	r1, [r4, #24]
}
600016d6:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016d8:	4b06      	ldr	r3, [pc, #24]	; (600016f4 <TwoWire::setSDA(unsigned char)+0x50>)
600016da:	2205      	movs	r2, #5
		configSDApin(newindex);
600016dc:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016de:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e2:	685b      	ldr	r3, [r3, #4]
600016e4:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016e6:	f7ff ffc3 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ea:	7621      	strb	r1, [r4, #24]
600016ec:	e7f3      	b.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016ee:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f0:	2100      	movs	r1, #0
600016f2:	e7ea      	b.n	600016ca <TwoWire::setSDA(unsigned char)+0x26>
600016f4:	20002e18 	.word	0x20002e18

600016f8 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f8:	6943      	ldr	r3, [r0, #20]
600016fa:	4a0a      	ldr	r2, [pc, #40]	; (60001724 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016fc:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001700:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001702:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
60001706:	4c08      	ldr	r4, [pc, #32]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001708:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000170c:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001710:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001712:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001714:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001716:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001718:	b10b      	cbz	r3, 6000171e <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171a:	6b42      	ldr	r2, [r0, #52]	; 0x34
6000171c:	601a      	str	r2, [r3, #0]
	}
}
6000171e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001722:	4770      	bx	lr
60001724:	20002e18 	.word	0x20002e18
60001728:	0001f861 	.word	0x0001f861

6000172c <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000172c:	6943      	ldr	r3, [r0, #20]
6000172e:	7e42      	ldrb	r2, [r0, #25]
60001730:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001734:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
60001738:	458c      	cmp	ip, r1
6000173a:	d01e      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000173c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001740:	2aff      	cmp	r2, #255	; 0xff
60001742:	d01a      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001744:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001746:	b510      	push	{r4, lr}
60001748:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174a:	d017      	beq.n	6000177c <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
6000174c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001750:	2aff      	cmp	r2, #255	; 0xff
60001752:	d006      	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
60001754:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001756:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175a:	6812      	ldr	r2, [r2, #0]
6000175c:	421a      	tst	r2, r3
6000175e:	d101      	bne.n	60001764 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001760:	7661      	strb	r1, [r4, #25]
}
60001762:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001764:	4b06      	ldr	r3, [pc, #24]	; (60001780 <TwoWire::setSCL(unsigned char)+0x54>)
60001766:	2205      	movs	r2, #5
		configSCLpin(newindex);
60001768:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001772:	f7ff ffc1 	bl	600016f8 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
60001776:	7661      	strb	r1, [r4, #25]
60001778:	e7f3      	b.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
6000177a:	4770      	bx	lr
		if (scl_pin == pin) break;
6000177c:	2100      	movs	r1, #0
6000177e:	e7ea      	b.n	60001756 <TwoWire::setSCL(unsigned char)+0x2a>
60001780:	20002e18 	.word	0x20002e18

60001784 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001784:	4916      	ldr	r1, [pc, #88]	; (600017e0 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001786:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178a:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
6000178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001792:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001794:	638b      	str	r3, [r1, #56]	; 0x38
{
60001796:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
60001798:	4d12      	ldr	r5, [pc, #72]	; (600017e4 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179a:	e9d2 1300 	ldrd	r1, r3, [r2]
6000179e:	680a      	ldr	r2, [r1, #0]
600017a0:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a2:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a4:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017a6:	2202      	movs	r2, #2
	port->MCR = 0;
600017a8:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017aa:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017ac:	4a0e      	ldr	r2, [pc, #56]	; (600017e8 <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017ae:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b2:	2201      	movs	r2, #1
600017b4:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017b6:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017b8:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017bc:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017be:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c4:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017c6:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c8:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ca:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017cc:	7e01      	ldrb	r1, [r0, #24]
600017ce:	f7ff ff4f 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d2:	7e61      	ldrb	r1, [r4, #25]
600017d4:	4620      	mov	r0, r4
}
600017d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017da:	f7ff bf8d 	b.w	600016f8 <TwoWire::configSCLpin(unsigned char)>
600017de:	bf00      	nop
600017e0:	400fc000 	.word	0x400fc000
600017e4:	05050bb8 	.word	0x05050bb8
600017e8:	1928373b 	.word	0x1928373b

600017ec <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017ec:	4770      	bx	lr
600017ee:	bf00      	nop

600017f0 <startup_default_middle_hook>:
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_late_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017f8:	bf00      	nop
600017fa:	4770      	bx	lr

600017fc <configure_cache>:
{
600017fc:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001802:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001804:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001806:	4831      	ldr	r0, [pc, #196]	; (600018cc <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001808:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000180c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001810:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001812:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001816:	482e      	ldr	r0, [pc, #184]	; (600018d0 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001818:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000181c:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001822:	482c      	ldr	r0, [pc, #176]	; (600018d4 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001824:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001828:	4a2b      	ldr	r2, [pc, #172]	; (600018d8 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000182e:	4c2b      	ldr	r4, [pc, #172]	; (600018dc <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001834:	482a      	ldr	r0, [pc, #168]	; (600018e0 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001836:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000183e:	4c29      	ldr	r4, [pc, #164]	; (600018e4 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001840:	4829      	ldr	r0, [pc, #164]	; (600018e8 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001846:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184a:	4c28      	ldr	r4, [pc, #160]	; (600018ec <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000184c:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001850:	4827      	ldr	r0, [pc, #156]	; (600018f0 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001852:	4a28      	ldr	r2, [pc, #160]	; (600018f4 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001854:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000185c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001860:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001864:	4c24      	ldr	r4, [pc, #144]	; (600018f8 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001866:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001868:	4824      	ldr	r0, [pc, #144]	; (600018fc <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001872:	4a23      	ldr	r2, [pc, #140]	; (60001900 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001874:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001878:	4c22      	ldr	r4, [pc, #136]	; (60001904 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000187e:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001882:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001886:	4820      	ldr	r0, [pc, #128]	; (60001908 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001888:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000188c:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188e:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001892:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001896:	bf00      	nop
	asm("nop");
60001898:	bf00      	nop
	asm("nop");
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a0:	2201      	movs	r2, #1
600018a2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018aa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018ae:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018b6:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018ba:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018be:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018c6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ca:	4770      	bx	lr
600018cc:	1000003f 	.word	0x1000003f
600018d0:	07080025 	.word	0x07080025
600018d4:	00100009 	.word	0x00100009
600018d8:	20004c20 	.word	0x20004c20
600018dc:	00200013 	.word	0x00200013
600018e0:	07020021 	.word	0x07020021
600018e4:	20000014 	.word	0x20000014
600018e8:	13080025 	.word	0x13080025
600018ec:	10000009 	.word	0x10000009
600018f0:	20200016 	.word	0x20200016
600018f4:	130b0027 	.word	0x130b0027
600018f8:	40000017 	.word	0x40000017
600018fc:	60000018 	.word	0x60000018
60001900:	070b002f 	.word	0x070b002f
60001904:	70000019 	.word	0x70000019
60001908:	8000001a 	.word	0x8000001a

6000190c <usb_pll_start>:
{
6000190c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000190e:	4a15      	ldr	r2, [pc, #84]	; (60001964 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001910:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001912:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001916:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000191a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000191e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001922:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001926:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001928:	f013 0f02 	tst.w	r3, #2
6000192c:	d10e      	bne.n	6000194c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000192e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001932:	d00f      	beq.n	60001954 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001934:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001938:	d00e      	beq.n	60001958 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000193a:	2b00      	cmp	r3, #0
6000193c:	daf3      	bge.n	60001926 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000193e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001942:	d10b      	bne.n	6000195c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001944:	065b      	lsls	r3, r3, #25
60001946:	d50b      	bpl.n	60001960 <usb_pll_start+0x54>
}
60001948:	bcf0      	pop	{r4, r5, r6, r7}
6000194a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000194c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000194e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001950:	6190      	str	r0, [r2, #24]
			continue;
60001952:	e7e8      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001954:	6155      	str	r5, [r2, #20]
			continue;
60001956:	e7e6      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001958:	6156      	str	r6, [r2, #20]
			continue;
6000195a:	e7e4      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000195c:	6191      	str	r1, [r2, #24]
			continue;
6000195e:	e7e2      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001960:	6157      	str	r7, [r2, #20]
			continue;
60001962:	e7e0      	b.n	60001926 <usb_pll_start+0x1a>
60001964:	400d8000 	.word	0x400d8000

60001968 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001968:	4a3f      	ldr	r2, [pc, #252]	; (60001a68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000196a:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000196c:	493f      	ldr	r1, [pc, #252]	; (60001a6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000196e:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001972:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001976:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000197a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001a70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000197e:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001982:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001a74 <tempmon_init+0x10c>
{
60001986:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000198c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001990:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001994:	4d38      	ldr	r5, [pc, #224]	; (60001a78 <tempmon_init+0x110>)
60001996:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001998:	4c38      	ldr	r4, [pc, #224]	; (60001a7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000199a:	4839      	ldr	r0, [pc, #228]	; (60001a80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000199c:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000199e:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600019a2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019a4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600019ac:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019b0:	ee07 1a10 	vmov	s14, r1
600019b4:	4b33      	ldr	r3, [pc, #204]	; (60001a84 <tempmon_init+0x11c>)
600019b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019ba:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019c0:	4931      	ldr	r1, [pc, #196]	; (60001a88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019c2:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019c6:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019ca:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019ce:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019d2:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019d6:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019da:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600019de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019e2:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019e6:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019ea:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019ee:	4827      	ldr	r0, [pc, #156]	; (60001a8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019f0:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019f4:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019f8:	ee75 5a87 	vadd.f32	s11, s11, s14
600019fc:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a00:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a04:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a08:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a0c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a10:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a18:	ee16 3a10 	vmov	r3, s12
60001a1c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a24:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001a28:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a2a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a2e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001a36:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001a3a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001a3c:	4914      	ldr	r1, [pc, #80]	; (60001a90 <tempmon_init+0x128>)
60001a3e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001a42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001a46:	f043 0302 	orr.w	r3, r3, #2
60001a4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001a4e:	4b11      	ldr	r3, [pc, #68]	; (60001a94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001a50:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001a54:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001a58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001a5c:	2201      	movs	r2, #1
}
60001a5e:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001a60:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001a64:	4770      	bx	lr
60001a66:	bf00      	nop
60001a68:	400d8100 	.word	0x400d8100
60001a6c:	401f4400 	.word	0x401f4400
60001a70:	42aa0000 	.word	0x42aa0000
60001a74:	42b40000 	.word	0x42b40000
60001a78:	20004b8c 	.word	0x20004b8c
60001a7c:	20004b88 	.word	0x20004b88
60001a80:	20004b90 	.word	0x20004b90
60001a84:	20004b94 	.word	0x20004b94
60001a88:	0fff0000 	.word	0x0fff0000
60001a8c:	e000e400 	.word	0xe000e400
60001a90:	20004000 	.word	0x20004000
60001a94:	0000b521 	.word	0x0000b521

60001a98 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001a98:	4b31      	ldr	r3, [pc, #196]	; (60001b60 <usb_init+0xc8>)
60001a9a:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001a9e:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001aa0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001aa4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001aa8:	f000 f8de 	bl	60001c68 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001aac:	4a2d      	ldr	r2, [pc, #180]	; (60001b64 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001aae:	492e      	ldr	r1, [pc, #184]	; (60001b68 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001ab0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ab4:	482d      	ldr	r0, [pc, #180]	; (60001b6c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001ab6:	f043 0303 	orr.w	r3, r3, #3
60001aba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001abe:	4b2c      	ldr	r3, [pc, #176]	; (60001b70 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ac0:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ac4:	6802      	ldr	r2, [r0, #0]
60001ac6:	421a      	tst	r2, r3
60001ac8:	d103      	bne.n	60001ad2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001aca:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ace:	079a      	lsls	r2, r3, #30
60001ad0:	d01b      	beq.n	60001b0a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ad2:	4a25      	ldr	r2, [pc, #148]	; (60001b68 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ad4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ad8:	4b24      	ldr	r3, [pc, #144]	; (60001b6c <usb_init+0xd4>)
60001ada:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001adc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001ae0:	f043 0302 	orr.w	r3, r3, #2
60001ae4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001ae8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001aec:	079b      	lsls	r3, r3, #30
60001aee:	d4fb      	bmi.n	60001ae8 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001af0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001af4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001af8:	4b1c      	ldr	r3, [pc, #112]	; (60001b6c <usb_init+0xd4>)
60001afa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001afe:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001b02:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001b04:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001b06:	f000 f8a3 	bl	60001c50 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b0a:	4a18      	ldr	r2, [pc, #96]	; (60001b6c <usb_init+0xd4>)
60001b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b10:	4c15      	ldr	r4, [pc, #84]	; (60001b68 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001b12:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b14:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b16:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b18:	4b16      	ldr	r3, [pc, #88]	; (60001b74 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001b1a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b1c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b20:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b24:	4618      	mov	r0, r3
60001b26:	f000 f89b 	bl	60001c60 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001b2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b2e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b30:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b34:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b38:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001b3a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001b3e:	641a      	str	r2, [r3, #64]	; 0x40
60001b40:	4b0d      	ldr	r3, [pc, #52]	; (60001b78 <usb_init+0xe0>)
60001b42:	4a0e      	ldr	r2, [pc, #56]	; (60001b7c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b44:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001b48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001b4c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001b50:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001b54:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001b56:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001b5a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001b5e:	bd10      	pop	{r4, pc}
60001b60:	400d8000 	.word	0x400d8000
60001b64:	400fc000 	.word	0x400fc000
60001b68:	402e0000 	.word	0x402e0000
60001b6c:	400d9000 	.word	0x400d9000
60001b70:	001e1c00 	.word	0x001e1c00
60001b74:	20000000 	.word	0x20000000
60001b78:	20004000 	.word	0x20004000
60001b7c:	0000b709 	.word	0x0000b709

60001b80 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001b80:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001b82:	4b0e      	ldr	r3, [pc, #56]	; (60001bbc <_reboot_Teensyduino_+0x3c>)
60001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001b86:	079b      	lsls	r3, r3, #30
60001b88:	d400      	bmi.n	60001b8c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001b8a:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001b8c:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001b8e:	4b0c      	ldr	r3, [pc, #48]	; (60001bc0 <_reboot_Teensyduino_+0x40>)
60001b90:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001b92:	4a0c      	ldr	r2, [pc, #48]	; (60001bc4 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001b94:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001b98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001b9c:	490a      	ldr	r1, [pc, #40]	; (60001bc8 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001b9e:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ba2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ba4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ba6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001baa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001bae:	4807      	ldr	r0, [pc, #28]	; (60001bcc <_reboot_Teensyduino_+0x4c>)
60001bb0:	4a07      	ldr	r2, [pc, #28]	; (60001bd0 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001bb2:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001bb4:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001bb6:	689b      	ldr	r3, [r3, #8]
60001bb8:	4798      	blx	r3
	}
	__builtin_unreachable();
60001bba:	bf00      	nop
60001bbc:	401f4400 	.word	0x401f4400
60001bc0:	402e0000 	.word	0x402e0000
60001bc4:	400ac000 	.word	0x400ac000
60001bc8:	00200003 	.word	0x00200003
60001bcc:	20208000 	.word	0x20208000
60001bd0:	eb120000 	.word	0xeb120000

60001bd4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001bd4:	4b10      	ldr	r3, [pc, #64]	; (60001c18 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001bd6:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001bd8:	4a10      	ldr	r2, [pc, #64]	; (60001c1c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001bda:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001bdc:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001be0:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001be2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001be4:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001be8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001bea:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001bee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001bf0:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001bf2:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001bf4:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001bf6:	061b      	lsls	r3, r3, #24
60001bf8:	d4fc      	bmi.n	60001bf4 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001bfa:	4a09      	ldr	r2, [pc, #36]	; (60001c20 <analog_init+0x4c>)
60001bfc:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001c00:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001c02:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001c04:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001c06:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001c08:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001c0c:	d1fb      	bne.n	60001c06 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001c0e:	4a05      	ldr	r2, [pc, #20]	; (60001c24 <analog_init+0x50>)
60001c10:	7013      	strb	r3, [r2, #0]
}
60001c12:	f85d 4b04 	ldr.w	r4, [sp], #4
60001c16:	4770      	bx	lr
60001c18:	400fc000 	.word	0x400fc000
60001c1c:	400c4000 	.word	0x400c4000
60001c20:	400c8000 	.word	0x400c8000
60001c24:	20004bf0 	.word	0x20004bf0

60001c28 <_init>:
60001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001c2a:	bf00      	nop
60001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001c2e:	bc08      	pop	{r3}
60001c30:	469e      	mov	lr, r3
60001c32:	4770      	bx	lr
60001c34:	0000      	movs	r0, r0
	...

60001c38 <____libc_init_array_veneer>:
60001c38:	f85f f000 	ldr.w	pc, [pc]	; 60001c3c <____libc_init_array_veneer+0x4>
60001c3c:	0000e151 	.word	0x0000e151

60001c40 <__set_arm_clock_veneer>:
60001c40:	f85f f000 	ldr.w	pc, [pc]	; 60001c44 <__set_arm_clock_veneer+0x4>
60001c44:	0000a755 	.word	0x0000a755

60001c48 <__main_veneer>:
60001c48:	f85f f000 	ldr.w	pc, [pc]	; 60001c4c <__main_veneer+0x4>
60001c4c:	0000ac1d 	.word	0x0000ac1d

60001c50 <__delay_veneer>:
60001c50:	f85f f000 	ldr.w	pc, [pc]	; 60001c54 <__delay_veneer+0x4>
60001c54:	0000aa45 	.word	0x0000aa45

60001c58 <__pwm_init_veneer>:
60001c58:	f85f f000 	ldr.w	pc, [pc]	; 60001c5c <__pwm_init_veneer+0x4>
60001c5c:	0000b241 	.word	0x0000b241

60001c60 <__memset_veneer>:
60001c60:	f85f f000 	ldr.w	pc, [pc]	; 60001c64 <__memset_veneer+0x4>
60001c64:	0000df65 	.word	0x0000df65

60001c68 <__usb_init_serialnumber_veneer>:
60001c68:	f85f f000 	ldr.w	pc, [pc]	; 60001c6c <__usb_init_serialnumber_veneer+0x4>
60001c6c:	0000be79 	.word	0x0000be79

60001c70 <__frame_dummy_init_array_entry>:
60001c70:	00000045 00000891 00000b51              E.......Q...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    return startTime + duration - millis();
}

float Timer::progress() {
    return (float) time() / duration;
}
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
      38:	200042c0 	.word	0x200042c0
      3c:	200042c0 	.word	0x200042c0
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
  DEBUG_SERIAL.print(_addr, HEX);
#endif
#ifdef ARDUINO_ARCH_MBED
  _wire->write(0); // forces a write request instead of a read
#endif
  if (_wire->endTransmission() == 0) {
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20004b34 	.word	0x20004b34
      64:	60018800 	.word	0x60018800

00000068 <SHC_BME280::~SHC_BME280()>:
#include "Utils.h"
#include <BME280.h>



class SHC_BME280: Sensor {
      68:	4b04      	ldr	r3, [pc, #16]	; (7c <SHC_BME280::~SHC_BME280()+0x14>)
      6a:	b510      	push	{r4, lr}
      6c:	4604      	mov	r4, r0
      6e:	f840 3b0c 	str.w	r3, [r0], #12
      72:	f001 fbdf 	bl	1834 <BME280_Class::~BME280_Class()>
      76:	4620      	mov	r0, r4
      78:	bd10      	pop	{r4, pc}
      7a:	bf00      	nop
      7c:	20002a94 	.word	0x20002a94

00000080 <dataString(int)>:
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
      80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			break;
      84:	4dd4      	ldr	r5, [pc, #848]	; (3d8 <dataString(int)+0x358>)
      86:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
      8a:	4ed4      	ldr	r6, [pc, #848]	; (3dc <dataString(int)+0x35c>)
      8c:	4607      	mov	r7, r0
      8e:	f8df 8360 	ldr.w	r8, [pc, #864]	; 3f0 <dataString(int)+0x370>
      92:	4628      	mov	r0, r5
		} while (n > 0);
      94:	468a      	mov	sl, r1
      96:	f000 fcf3 	bl	a80 <BNO055::prefetchData()>
			write(iaddress.b[n]);
      9a:	4630      	mov	r0, r6
		} while (n > 0);
      9c:	4cd0      	ldr	r4, [pc, #832]	; (3e0 <dataString(int)+0x360>)
			write(iaddress.b[n]);
      9e:	f001 fb4b 	bl	1738 <SHC_BME280::prefetchData()>
      a2:	4640      	mov	r0, r8
		} while (n > 0);
      a4:	f002 fe72 	bl	2d8c <M9N::prefetchData()>
      a8:	49ce      	ldr	r1, [pc, #824]	; (3e4 <dataString(int)+0x364>)
      aa:	a802      	add	r0, sp, #8
}
      ac:	f04f 090a 	mov.w	r9, #10
					*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;

					// now set new pin info.
					*(portControlRegister(hardware->rx_pins[rx_pin_new_index].pin)) =  IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;;
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
      b0:	f00a fa2a 	bl	a508 <String::String(char const*)>
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
      b4:	a902      	add	r1, sp, #8
					}
				}		
				rx_pin_index_ = rx_pin_new_index;
      b6:	a808      	add	r0, sp, #32
				//Serial.printf("  PINCFG: %x MODIR: %x\n", port->PINCFG, port->MODIR);	
				return;
			}
		}
	}
}
      b8:	f00a fa44 	bl	a544 <String::String(String const&)>
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      bc:	4621      	mov	r1, r4
      be:	a805      	add	r0, sp, #20
      c0:	f00a fa22 	bl	a508 <String::String(char const*)>
      c4:	a905      	add	r1, sp, #20
      c6:	a808      	add	r0, sp, #32
      c8:	f00a fb20 	bl	a70c <operator+(StringSumHelper const&, String const&)>
      cc:	4683      	mov	fp, r0
      ce:	f009 fd13 	bl	9af8 <now()>
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
      d2:	4bc5      	ldr	r3, [pc, #788]	; (3e8 <dataString(int)+0x368>)
      d4:	f8cd 9000 	str.w	r9, [sp]
      d8:	681b      	ldr	r3, [r3, #0]
      da:	1ac2      	subs	r2, r0, r3
  if(sensor==HumiditySensor)           // If we have a humidity setting, read the buffer bits
    returnValue = readByte(BME280_CONTROLHUMID_REG)&B00000111;
  else if (sensor==TemperatureSensor)  // otherwise if we have temperature
    returnValue = readByte(BME280_CONTROL_REG)>>5;
  else
    returnValue = (readByte(BME280_CONTROL_REG)>>2)&B00000111;
      dc:	a80b      	add	r0, sp, #44	; 0x2c
  if (actual) // If the actual flag has been set then return the oversampling
  {
    if      (returnValue == 3) returnValue = 4;
      de:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
    else if (returnValue == 4) returnValue = 8;
      e2:	f00a fa9d 	bl	a620 <String::String(long long, unsigned char)>
    else if (returnValue>4)    returnValue = 16;
      e6:	a90b      	add	r1, sp, #44	; 0x2c
      e8:	4658      	mov	r0, fp
    Time2        =  500;
  } // of if-then-else typical time or maximum time
  if (getOversampling(TemperatureSensor))
    returnValue += Time1*getOversampling(TemperatureSensor,true);
  if (getOversampling(PressureSensor))
    returnValue += (Time1*getOversampling(PressureSensor,true)) + Time2;
      ea:	f00a fb0f 	bl	a70c <operator+(StringSumHelper const&, String const&)>
      ee:	4683      	mov	fp, r0
      f0:	4621      	mov	r1, r4
      f2:	a80e      	add	r0, sp, #56	; 0x38
      f4:	f00a fa08 	bl	a508 <String::String(char const*)>
      f8:	a90e      	add	r1, sp, #56	; 0x38
      fa:	4658      	mov	r0, fp
      fc:	f00a fb06 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     100:	4683      	mov	fp, r0
     102:	f009 fcf9 	bl	9af8 <now()>
     106:	f8cd 9000 	str.w	r9, [sp]
     10a:	460b      	mov	r3, r1
     10c:	4602      	mov	r2, r0
     10e:	a811      	add	r0, sp, #68	; 0x44
     110:	f00a fa86 	bl	a620 <String::String(long long, unsigned char)>
     114:	a911      	add	r1, sp, #68	; 0x44
     116:	4658      	mov	r0, fp
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
     118:	f00a faf8 	bl	a70c <operator+(StringSumHelper const&, String const&)>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
     11c:	4683      	mov	fp, r0
     11e:	4621      	mov	r1, r4
     120:	a814      	add	r0, sp, #80	; 0x50
     122:	f00a f9f1 	bl	a508 <String::String(char const*)>
     126:	a914      	add	r1, sp, #80	; 0x50
     128:	4658      	mov	r0, fp
     12a:	f00a faef 	bl	a70c <operator+(StringSumHelper const&, String const&)>
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4651      	mov	r1, sl
     130:	4682      	mov	sl, r0
	pinmode = *(p->reg + 1);
     132:	464a      	mov	r2, r9
	mask = p->mask;
     134:	a817      	add	r0, sp, #92	; 0x5c
	if (pinmode & mask) {
     136:	f00a fa5d 	bl	a5f4 <String::String(int, unsigned char)>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	a917      	add	r1, sp, #92	; 0x5c
     13c:	4650      	mov	r0, sl
     13e:	f00a fae5 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     142:	4682      	mov	sl, r0
     144:	4621      	mov	r1, r4
     146:	a81a      	add	r0, sp, #104	; 0x68
     148:	f00a f9de 	bl	a508 <String::String(char const*)>
     14c:	a91a      	add	r1, sp, #104	; 0x68
     14e:	4650      	mov	r0, sl
     150:	f00a fadc 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     154:	4ba5      	ldr	r3, [pc, #660]	; (3ec <dataString(int)+0x36c>)
     156:	464a      	mov	r2, r9
     158:	4681      	mov	r9, r0
     15a:	7819      	ldrb	r1, [r3, #0]
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	a81d      	add	r0, sp, #116	; 0x74
     15e:	f00a fa49 	bl	a5f4 <String::String(int, unsigned char)>
     162:	a91d      	add	r1, sp, #116	; 0x74
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
     164:	4648      	mov	r0, r9
     166:	f00a fad1 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     16a:	4681      	mov	r9, r0
     16c:	4621      	mov	r1, r4
     16e:	a820      	add	r0, sp, #128	; 0x80
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     170:	f00a f9ca 	bl	a508 <String::String(char const*)>
     174:	a920      	add	r1, sp, #128	; 0x80
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     176:	4648      	mov	r0, r9
     178:	f00a fac8 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     17c:	4681      	mov	r9, r0
     17e:	4630      	mov	r0, r6
     180:	f001 fb40 	bl	1804 <SHC_BME280::getPressure()>
	uint32_t begin = ARM_DWT_CYCCNT;
     184:	2102      	movs	r1, #2
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     186:	a823      	add	r0, sp, #140	; 0x8c
     188:	f00a fa64 	bl	a654 <String::String(float, unsigned char)>
     18c:	a923      	add	r1, sp, #140	; 0x8c
     18e:	4648      	mov	r0, r9
     190:	f00a fabc 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     194:	4681      	mov	r9, r0
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     196:	4621      	mov	r1, r4
     198:	a826      	add	r0, sp, #152	; 0x98
     19a:	f00a f9b5 	bl	a508 <String::String(char const*)>
     19e:	a926      	add	r1, sp, #152	; 0x98

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        BUSIO_SET_CLOCK_HIGH();
     1a0:	4648      	mov	r0, r9
     1a2:	f00a fab3 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     1a6:	4681      	mov	r9, r0
     1a8:	4630      	mov	r0, r6
	uint32_t begin = ARM_DWT_CYCCNT;
     1aa:	f001 fb33 	bl	1814 <SHC_BME280::getAltitude()>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     1ae:	2102      	movs	r1, #2
     1b0:	a829      	add	r0, sp, #164	; 0xa4
     1b2:	f00a fa4f 	bl	a654 <String::String(float, unsigned char)>
     1b6:	a929      	add	r1, sp, #164	; 0xa4
     1b8:	4648      	mov	r0, r9
     1ba:	f00a faa7 	bl	a70c <operator+(StringSumHelper const&, String const&)>
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     1be:	4681      	mov	r9, r0
     1c0:	4621      	mov	r1, r4
     1c2:	a82c      	add	r0, sp, #176	; 0xb0
     1c4:	f00a f9a0 	bl	a508 <String::String(char const*)>
     1c8:	a92c      	add	r1, sp, #176	; 0xb0
	uint32_t begin = ARM_DWT_CYCCNT;
     1ca:	4648      	mov	r0, r9
     1cc:	f00a fa9e 	bl	a70c <operator+(StringSumHelper const&, String const&)>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     1d0:	4681      	mov	r9, r0
     1d2:	4630      	mov	r0, r6
     1d4:	f001 fb1a 	bl	180c <SHC_BME280::getTemperature()>
     1d8:	2102      	movs	r1, #2
     1da:	a82f      	add	r0, sp, #188	; 0xbc
     1dc:	f00a fa3a 	bl	a654 <String::String(float, unsigned char)>
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     1e0:	a92f      	add	r1, sp, #188	; 0xbc
     1e2:	4648      	mov	r0, r9
     1e4:	f00a fa92 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     1e8:	4681      	mov	r9, r0
    if (_miso != -1) {
      buffer[i] = reply;
    }
  }
  return;
}
     1ea:	4621      	mov	r1, r4
     1ec:	a832      	add	r0, sp, #200	; 0xc8
     1ee:	f00a f98b 	bl	a508 <String::String(char const*)>
     1f2:	a932      	add	r1, sp, #200	; 0xc8
     1f4:	4648      	mov	r0, r9
     1f6:	f00a fa89 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     1fa:	4603      	mov	r3, r0
     1fc:	4630      	mov	r0, r6
     1fe:	461e      	mov	r6, r3
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     200:	f001 fb0c 	bl	181c <SHC_BME280::getHumidity()>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	2102      	movs	r1, #2
     206:	a835      	add	r0, sp, #212	; 0xd4
     208:	f00a fa24 	bl	a654 <String::String(float, unsigned char)>
     20c:	a935      	add	r1, sp, #212	; 0xd4
     20e:	4630      	mov	r0, r6
     210:	f00a fa7c 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     214:	4606      	mov	r6, r0
     216:	4621      	mov	r1, r4
     218:	a838      	add	r0, sp, #224	; 0xe0
     21a:	f00a f975 	bl	a508 <String::String(char const*)>
     21e:	a938      	add	r1, sp, #224	; 0xe0
     220:	4630      	mov	r0, r6
     222:	f00a fa73 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     226:	4606      	mov	r6, r0
     228:	4628      	mov	r0, r5
     22a:	f000 fc65 	bl	af8 <BNO055::getAccelerationX()>
     22e:	2102      	movs	r1, #2
     230:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
  uint8_t buffer[1] = {reg};
     234:	a83b      	add	r0, sp, #236	; 0xec
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     236:	f00a fa0d 	bl	a654 <String::String(float, unsigned char)>
     23a:	a93b      	add	r1, sp, #236	; 0xec
     23c:	4630      	mov	r0, r6
     23e:	f00a fa65 	bl	a70c <operator+(StringSumHelper const&, String const&)>
  uint8_t buffer[1] = {reg};
     242:	4606      	mov	r6, r0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     244:	4621      	mov	r1, r4
     246:	a83e      	add	r0, sp, #248	; 0xf8
  return (byte)buffer[0];
     248:	f00a f95e 	bl	a508 <String::String(char const*)>
  uint8_t buffer[1] = {reg};
     24c:	a93e      	add	r1, sp, #248	; 0xf8
     24e:	4630      	mov	r0, r6
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     250:	f00a fa5c 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     254:	4606      	mov	r6, r0
     256:	4628      	mov	r0, r5
     258:	f000 fc52 	bl	b00 <BNO055::getAccelerationY()>
  return (byte)buffer[0];
     25c:	2102      	movs	r1, #2
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     25e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        (read8(GYRO_OFFSET_Z_MSB_ADDR) << 8) | (read8(GYRO_OFFSET_Z_LSB_ADDR));
     262:	a841      	add	r0, sp, #260	; 0x104
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     264:	f00a f9f6 	bl	a654 <String::String(float, unsigned char)>
    offsets_type.gyro_offset_z =
     268:	a941      	add	r1, sp, #260	; 0x104
  uint8_t buffer[1] = {reg};
     26a:	4630      	mov	r0, r6
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     26c:	f00a fa4e 	bl	a70c <operator+(StringSumHelper const&, String const&)>
  uint8_t buffer[1] = {reg};
     270:	4606      	mov	r6, r0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     272:	4621      	mov	r1, r4
     274:	a844      	add	r0, sp, #272	; 0x110
     276:	f00a f947 	bl	a508 <String::String(char const*)>
     27a:	a944      	add	r1, sp, #272	; 0x110
  uint8_t buffer[1] = {reg};
     27c:	4630      	mov	r0, r6
     27e:	f00a fa45 	bl	a70c <operator+(StringSumHelper const&, String const&)>
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     282:	4606      	mov	r6, r0
  return (byte)buffer[0];
     284:	4628      	mov	r0, r5
     286:	f000 fc3f 	bl	b08 <BNO055::getAccelerationZ()>
  uint8_t buffer[1] = {reg};
     28a:	2102      	movs	r1, #2
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     28c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     290:	a847      	add	r0, sp, #284	; 0x11c
     292:	f00a f9df 	bl	a654 <String::String(float, unsigned char)>
  return (byte)buffer[0];
     296:	a947      	add	r1, sp, #284	; 0x11c
     298:	4630      	mov	r0, r6
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     29a:	f00a fa37 	bl	a70c <operator+(StringSumHelper const&, String const&)>
        (read8(ACCEL_RADIUS_MSB_ADDR) << 8) | (read8(ACCEL_RADIUS_LSB_ADDR));
     29e:	4606      	mov	r6, r0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     2a0:	4621      	mov	r1, r4
     2a2:	a84a      	add	r0, sp, #296	; 0x128
    offsets_type.accel_radius =
     2a4:	f00a f930 	bl	a508 <String::String(char const*)>
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     2a8:	a94a      	add	r1, sp, #296	; 0x128
  uint8_t buffer[1] = {reg};
     2aa:	4630      	mov	r0, r6
     2ac:	f00a fa2e 	bl	a70c <operator+(StringSumHelper const&, String const&)>
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     2b0:	4606      	mov	r6, r0
     2b2:	4628      	mov	r0, r5
     2b4:	f000 fc2c 	bl	b10 <BNO055::getGyroX()>
  uint8_t buffer[1] = {reg};
     2b8:	2102      	movs	r1, #2
     2ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     2be:	a84d      	add	r0, sp, #308	; 0x134
  return (byte)buffer[0];
     2c0:	f00a f9c8 	bl	a654 <String::String(float, unsigned char)>
  uint8_t buffer[1] = {reg};
     2c4:	a94d      	add	r1, sp, #308	; 0x134
     2c6:	4630      	mov	r0, r6
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     2c8:	f00a fa20 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     2cc:	4606      	mov	r6, r0
     2ce:	4621      	mov	r1, r4
     2d0:	a850      	add	r0, sp, #320	; 0x140
  return (byte)buffer[0];
     2d2:	f00a f919 	bl	a508 <String::String(char const*)>
  return i2c_dev->write(buffer, 2);
     2d6:	a950      	add	r1, sp, #320	; 0x140
     2d8:	4630      	mov	r0, r6
        (read8(MAG_RADIUS_MSB_ADDR) << 8) | (read8(MAG_RADIUS_LSB_ADDR));
     2da:	f00a fa17 	bl	a70c <operator+(StringSumHelper const&, String const&)>
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     2de:	4606      	mov	r6, r0
     2e0:	4628      	mov	r0, r5
     2e2:	f000 fc19 	bl	b18 <BNO055::getGyroY()>
  return i2c_dev->write(buffer, 2);
     2e6:	2102      	movs	r1, #2
     2e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     2ec:	a853      	add	r0, sp, #332	; 0x14c
     2ee:	f00a f9b1 	bl	a654 <String::String(float, unsigned char)>
  _mode = mode;
     2f2:	a953      	add	r1, sp, #332	; 0x14c
  return i2c_dev->write(buffer, 2);
     2f4:	4630      	mov	r0, r6
     2f6:	f00a fa09 	bl	a70c <operator+(StringSumHelper const&, String const&)>
  delay(30);
     2fa:	4606      	mov	r6, r0
     2fc:	4621      	mov	r1, r4
}
     2fe:	a856      	add	r0, sp, #344	; 0x158
     300:	f00a f902 	bl	a508 <String::String(char const*)>
     304:	a956      	add	r1, sp, #344	; 0x158
      String(bnowo.getAccelerationY()) + String(",") + 
      String(bnowo.getAccelerationZ()) + String(",") + 
      
      // Append Gyro Axis.
      String(bnowo.getGyroX()) + String(",") + 
      String(bnowo.getGyroY()) + String(",") + 
     306:	4630      	mov	r0, r6
     308:	f00a fa00 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     30c:	4606      	mov	r6, r0
      String(bnowo.getGyroZ()) + String(",") + 
     30e:	4628      	mov	r0, r5
     310:	f000 fc06 	bl	b20 <BNO055::getGyroZ()>
	String(long, unsigned char base=10);
	String(unsigned long, unsigned char base=10);
	String(long long, unsigned char base=10);
	String(unsigned long long, unsigned char base=10);
        String(float num, unsigned char digits=2);
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
     314:	2102      	movs	r1, #2
     316:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     31a:	a859      	add	r0, sp, #356	; 0x164
     31c:	f00a f99a 	bl	a654 <String::String(float, unsigned char)>
     320:	a959      	add	r1, sp, #356	; 0x164
     322:	4630      	mov	r0, r6
     324:	f00a f9f2 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     328:	4606      	mov	r6, r0
     32a:	4621      	mov	r1, r4
     32c:	a85c      	add	r0, sp, #368	; 0x170
     32e:	f00a f8eb 	bl	a508 <String::String(char const*)>
     332:	a95c      	add	r1, sp, #368	; 0x170
     334:	4630      	mov	r0, r6
     336:	f00a f9e9 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     33a:	4606      	mov	r6, r0
      
      // Append the Orientation.
      String(bnowo.getOrientationX()) + String(",") + 
     33c:	4628      	mov	r0, r5
     33e:	f000 fbf3 	bl	b28 <BNO055::getOrientationX()>
     342:	2102      	movs	r1, #2
     344:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     348:	a85f      	add	r0, sp, #380	; 0x17c
     34a:	f00a f983 	bl	a654 <String::String(float, unsigned char)>
     34e:	a95f      	add	r1, sp, #380	; 0x17c
     350:	4630      	mov	r0, r6
     352:	f00a f9db 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     356:	4606      	mov	r6, r0
     358:	4621      	mov	r1, r4
     35a:	a862      	add	r0, sp, #392	; 0x188
     35c:	f00a f8d4 	bl	a508 <String::String(char const*)>
     360:	a962      	add	r1, sp, #392	; 0x188
     362:	4630      	mov	r0, r6
     364:	f00a f9d2 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     368:	4606      	mov	r6, r0
      String(bnowo.getOrientationY()) + String(",") + 
     36a:	4628      	mov	r0, r5
     36c:	f000 fbe0 	bl	b30 <BNO055::getOrientationY()>
     370:	2102      	movs	r1, #2
     372:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     376:	a865      	add	r0, sp, #404	; 0x194
     378:	f00a f96c 	bl	a654 <String::String(float, unsigned char)>
     37c:	a965      	add	r1, sp, #404	; 0x194
     37e:	4630      	mov	r0, r6
     380:	f00a f9c4 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     384:	4606      	mov	r6, r0
     386:	4621      	mov	r1, r4
     388:	a868      	add	r0, sp, #416	; 0x1a0
     38a:	f00a f8bd 	bl	a508 <String::String(char const*)>
     38e:	a968      	add	r1, sp, #416	; 0x1a0
     390:	4630      	mov	r0, r6
     392:	f00a f9bb 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     396:	4603      	mov	r3, r0
      String(bnowo.getOrientationZ()) + String(",") + 
     398:	4628      	mov	r0, r5
      String(bnowo.getOrientationY()) + String(",") + 
     39a:	461d      	mov	r5, r3
      String(bnowo.getOrientationZ()) + String(",") + 
     39c:	f000 fbcc 	bl	b38 <BNO055::getOrientationZ()>
     3a0:	2102      	movs	r1, #2
     3a2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     3a6:	a86b      	add	r0, sp, #428	; 0x1ac
     3a8:	f00a f954 	bl	a654 <String::String(float, unsigned char)>
     3ac:	a96b      	add	r1, sp, #428	; 0x1ac
     3ae:	4628      	mov	r0, r5
     3b0:	f00a f9ac 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     3b4:	4605      	mov	r5, r0
     3b6:	4621      	mov	r1, r4
     3b8:	a86e      	add	r0, sp, #440	; 0x1b8
     3ba:	f00a f8a5 	bl	a508 <String::String(char const*)>
     3be:	a96e      	add	r1, sp, #440	; 0x1b8
     3c0:	4628      	mov	r0, r5
     3c2:	f00a f9a3 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     3c6:	4605      	mov	r5, r0
      
      // Append the 3d coordinates.
      String(miners.getLatitude()) + String(",") +
     3c8:	4640      	mov	r0, r8
     3ca:	f002 fd2b 	bl	2e24 <M9N::getLatitude()>
     3ce:	2102      	movs	r1, #2
     3d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     3d4:	e00e      	b.n	3f4 <dataString(int)+0x374>
     3d6:	bf00      	nop
     3d8:	20004480 	.word	0x20004480
     3dc:	20004a90 	.word	0x20004a90
     3e0:	20001d28 	.word	0x20001d28
     3e4:	20001d1c 	.word	0x20001d1c
     3e8:	20004bbc 	.word	0x20004bbc
     3ec:	20004bf5 	.word	0x20004bf5
     3f0:	200044e0 	.word	0x200044e0
     3f4:	a871      	add	r0, sp, #452	; 0x1c4
     3f6:	f00a f92d 	bl	a654 <String::String(float, unsigned char)>
     3fa:	a971      	add	r1, sp, #452	; 0x1c4
     3fc:	4628      	mov	r0, r5
     3fe:	f00a f985 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     402:	4605      	mov	r5, r0
     404:	4621      	mov	r1, r4
     406:	a874      	add	r0, sp, #464	; 0x1d0
     408:	f00a f87e 	bl	a508 <String::String(char const*)>
     40c:	a974      	add	r1, sp, #464	; 0x1d0
     40e:	4628      	mov	r0, r5
     410:	f00a f97c 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     414:	4605      	mov	r5, r0
      String(miners.getLongitude()) + String(",") + 
     416:	4640      	mov	r0, r8
     418:	f002 fd08 	bl	2e2c <M9N::getLongitude()>
     41c:	2102      	movs	r1, #2
     41e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     422:	a877      	add	r0, sp, #476	; 0x1dc
     424:	f00a f916 	bl	a654 <String::String(float, unsigned char)>
     428:	a977      	add	r1, sp, #476	; 0x1dc
     42a:	4628      	mov	r0, r5
     42c:	f00a f96e 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     430:	4621      	mov	r1, r4
     432:	4604      	mov	r4, r0
     434:	a87a      	add	r0, sp, #488	; 0x1e8
     436:	f00a f867 	bl	a508 <String::String(char const*)>
     43a:	a97a      	add	r1, sp, #488	; 0x1e8
     43c:	4620      	mov	r0, r4
     43e:	f00a f965 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     442:	4604      	mov	r4, r0
      String(miners.getAltitude()));
     444:	4640      	mov	r0, r8
     446:	f002 fcf5 	bl	2e34 <M9N::getAltitude()>
     44a:	2102      	movs	r1, #2
     44c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     450:	a87d      	add	r0, sp, #500	; 0x1f4
     452:	f00a f8ff 	bl	a654 <String::String(float, unsigned char)>
     456:	a97d      	add	r1, sp, #500	; 0x1f4
     458:	4620      	mov	r0, r4
     45a:	f00a f957 	bl	a70c <operator+(StringSumHelper const&, String const&)>
     45e:	4601      	mov	r1, r0
     460:	4638      	mov	r0, r7
     462:	f00a f86f 	bl	a544 <String::String(String const&)>
     466:	a87d      	add	r0, sp, #500	; 0x1f4
     468:	f00a f888 	bl	a57c <String::~String()>
      String(miners.getLongitude()) + String(",") + 
     46c:	a87a      	add	r0, sp, #488	; 0x1e8
     46e:	f00a f885 	bl	a57c <String::~String()>
     472:	a877      	add	r0, sp, #476	; 0x1dc
     474:	f00a f882 	bl	a57c <String::~String()>
      String(miners.getLatitude()) + String(",") +
     478:	a874      	add	r0, sp, #464	; 0x1d0
     47a:	f00a f87f 	bl	a57c <String::~String()>
     47e:	a871      	add	r0, sp, #452	; 0x1c4
     480:	f00a f87c 	bl	a57c <String::~String()>
      String(bnowo.getOrientationZ()) + String(",") + 
     484:	a86e      	add	r0, sp, #440	; 0x1b8
     486:	f00a f879 	bl	a57c <String::~String()>
     48a:	a86b      	add	r0, sp, #428	; 0x1ac
     48c:	f00a f876 	bl	a57c <String::~String()>
      String(bnowo.getOrientationY()) + String(",") + 
     490:	a868      	add	r0, sp, #416	; 0x1a0
     492:	f00a f873 	bl	a57c <String::~String()>
     496:	a865      	add	r0, sp, #404	; 0x194
     498:	f00a f870 	bl	a57c <String::~String()>
      String(bnowo.getOrientationX()) + String(",") + 
     49c:	a862      	add	r0, sp, #392	; 0x188
     49e:	f00a f86d 	bl	a57c <String::~String()>
     4a2:	a85f      	add	r0, sp, #380	; 0x17c
     4a4:	f00a f86a 	bl	a57c <String::~String()>
      String(bnowo.getGyroZ()) + String(",") + 
     4a8:	a85c      	add	r0, sp, #368	; 0x170
     4aa:	f00a f867 	bl	a57c <String::~String()>
     4ae:	a859      	add	r0, sp, #356	; 0x164
     4b0:	f00a f864 	bl	a57c <String::~String()>
      String(bnowo.getGyroY()) + String(",") + 
     4b4:	a856      	add	r0, sp, #344	; 0x158
     4b6:	f00a f861 	bl	a57c <String::~String()>
     4ba:	a853      	add	r0, sp, #332	; 0x14c
     4bc:	f00a f85e 	bl	a57c <String::~String()>
      String(bnowo.getGyroX()) + String(",") + 
     4c0:	a850      	add	r0, sp, #320	; 0x140
     4c2:	f00a f85b 	bl	a57c <String::~String()>
     4c6:	a84d      	add	r0, sp, #308	; 0x134
     4c8:	f00a f858 	bl	a57c <String::~String()>
      String(bnowo.getAccelerationZ()) + String(",") + 
     4cc:	a84a      	add	r0, sp, #296	; 0x128
     4ce:	f00a f855 	bl	a57c <String::~String()>
     4d2:	a847      	add	r0, sp, #284	; 0x11c
     4d4:	f00a f852 	bl	a57c <String::~String()>
      String(bnowo.getAccelerationY()) + String(",") + 
     4d8:	a844      	add	r0, sp, #272	; 0x110
     4da:	f00a f84f 	bl	a57c <String::~String()>
     4de:	a841      	add	r0, sp, #260	; 0x104
     4e0:	f00a f84c 	bl	a57c <String::~String()>
      String(bnowo.getAccelerationX()) + String(",") + 
     4e4:	a83e      	add	r0, sp, #248	; 0xf8
     4e6:	f00a f849 	bl	a57c <String::~String()>
     4ea:	a83b      	add	r0, sp, #236	; 0xec
     4ec:	f00a f846 	bl	a57c <String::~String()>
      String(bmeup.getHumidity()) + String(",") + 
     4f0:	a838      	add	r0, sp, #224	; 0xe0
     4f2:	f00a f843 	bl	a57c <String::~String()>
     4f6:	a835      	add	r0, sp, #212	; 0xd4
     4f8:	f00a f840 	bl	a57c <String::~String()>
      String(bmeup.getTemperature()) + String(",") + 
     4fc:	a832      	add	r0, sp, #200	; 0xc8
     4fe:	f00a f83d 	bl	a57c <String::~String()>
     502:	a82f      	add	r0, sp, #188	; 0xbc
     504:	f00a f83a 	bl	a57c <String::~String()>
      String(bmeup.getAltitude()) + String(",") +
     508:	a82c      	add	r0, sp, #176	; 0xb0
     50a:	f00a f837 	bl	a57c <String::~String()>
     50e:	a829      	add	r0, sp, #164	; 0xa4
     510:	f00a f834 	bl	a57c <String::~String()>
      String(bmeup.getPressure()) + String(",") + 
     514:	a826      	add	r0, sp, #152	; 0x98
     516:	f00a f831 	bl	a57c <String::~String()>
     51a:	a823      	add	r0, sp, #140	; 0x8c
     51c:	f00a f82e 	bl	a57c <String::~String()>
      String(state) + String(String(",")) + 
     520:	a820      	add	r0, sp, #128	; 0x80
     522:	f00a f82b 	bl	a57c <String::~String()>
     526:	a81d      	add	r0, sp, #116	; 0x74
     528:	f00a f828 	bl	a57c <String::~String()>
      String(a) + String(String(",")) + 
     52c:	a81a      	add	r0, sp, #104	; 0x68
     52e:	f00a f825 	bl	a57c <String::~String()>
     532:	a817      	add	r0, sp, #92	; 0x5c
     534:	f00a f822 	bl	a57c <String::~String()>
      String(now()) + String(",") + 
     538:	a814      	add	r0, sp, #80	; 0x50
     53a:	f00a f81f 	bl	a57c <String::~String()>
     53e:	a811      	add	r0, sp, #68	; 0x44
     540:	f00a f81c 	bl	a57c <String::~String()>
      String(now() - startup) + String(",") + 
     544:	a80e      	add	r0, sp, #56	; 0x38
     546:	f00a f819 	bl	a57c <String::~String()>
     54a:	a80b      	add	r0, sp, #44	; 0x2c
     54c:	f00a f816 	bl	a57c <String::~String()>
  return String(String("LAKEBURST") + String(",") + 
     550:	a805      	add	r0, sp, #20
     552:	f00a f813 	bl	a57c <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     556:	a808      	add	r0, sp, #32
     558:	f00a f810 	bl	a57c <String::~String()>
     55c:	a802      	add	r0, sp, #8
     55e:	f00a f80d 	bl	a57c <String::~String()>
}
     562:	4638      	mov	r0, r7
     564:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
     568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000056c <phaseControl()>:
void landed() {
    
}

// Returns 1 if the point is above the channel and negative one if it is below. Otherwise it returns zero
int phaseControl(){
     56c:	b508      	push	{r3, lr}
    // define constants
    int a = 100;
    float p = 1.0;
    float d = 15;

    float x = bnowo.getOrientationX();
     56e:	4838      	ldr	r0, [pc, #224]	; (650 <phaseControl()+0xe4>)
int phaseControl(){
     570:	ed2d 8b02 	vpush	{d8}
    float x = bnowo.getOrientationX();
     574:	f000 fad8 	bl	b28 <BNO055::getOrientationX()>
    float y = bnowo.getGyroX();
     578:	4835      	ldr	r0, [pc, #212]	; (650 <phaseControl()+0xe4>)
    float x = bnowo.getOrientationX();
     57a:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
    float y = bnowo.getGyroX();
     57e:	f000 fac7 	bl	b10 <BNO055::getGyroX()>

    float upper_bound = 0;

    // Calculate the angle of the upper bounds
    if(x < a || x > -a) {
     582:	eddf 7a34 	vldr	s15, [pc, #208]	; 654 <phaseControl()+0xe8>
    float y = bnowo.getGyroX();
     586:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    if(x < a || x > -a) {
     58a:	eeb4 8ae7 	vcmpe.f32	s16, s15
     58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     592:	d406      	bmi.n	5a2 <phaseControl()+0x36>
     594:	eddf 7a30 	vldr	s15, [pc, #192]	; 658 <phaseControl()+0xec>
     598:	eeb4 8ae7 	vcmpe.f32	s16, s15
     59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5a0:	dd4e      	ble.n	640 <phaseControl()+0xd4>
        upper_bound = -(p * x) + d;
     5a2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     5a6:	ee77 7ac8 	vsub.f32	s15, s15, s16
    }
    // Calculate the left line of the upper bounds
    if(x <= -a) {
     5aa:	eddf 6a2b 	vldr	s13, [pc, #172]	; 658 <phaseControl()+0xec>
        upper_bound = (p * a) + d;
    }
    // Calculate the right line of the upper bounds
    if(x >= a){
     5ae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 654 <phaseControl()+0xe8>
        upper_bound = (p * a) + d;
     5b2:	eeb4 8a66 	vcmp.f32	s16, s13
     5b6:	eddf 5a29 	vldr	s11, [pc, #164]	; 65c <phaseControl()+0xf0>
        upper_bound = -(p * a) + d;
     5ba:	ed9f 6a29 	vldr	s12, [pc, #164]	; 660 <phaseControl()+0xf4>
        upper_bound = (p * a) + d;
     5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        upper_bound = -(p * a) + d;
     5c2:	eeb4 8a47 	vcmp.f32	s16, s14
        upper_bound = (p * a) + d;
     5c6:	bf98      	it	ls
     5c8:	eef0 7a65 	vmovls.f32	s15, s11
        upper_bound = -(p * a) + d;
     5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5d0:	fe66 7a27 	vselge.f32	s15, s12, s15
    }
    
    // Return 1 if the point is "above bounds"
    if(y <= upper_bound){
     5d4:	eef4 7ac0 	vcmpe.f32	s15, s0
     5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5dc:	da33      	bge.n	646 <phaseControl()+0xda>
    }
    
    float lower_bound = 0;

    // Calculate the angle of the lower bounds
    if(x < a || x > -a){
     5de:	eeb4 8ac7 	vcmpe.f32	s16, s14
     5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5e6:	d523      	bpl.n	630 <phaseControl()+0xc4>
        lower_bound = -(p * x) - d;
     5e8:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     5ec:	ee77 7ac8 	vsub.f32	s15, s15, s16
    }

    // Calculate the left line of the lower bounds
    if(x <= -a){
     5f0:	eddf 5a19 	vldr	s11, [pc, #100]	; 658 <phaseControl()+0xec>
        lower_bound = (p * a) - d;
    }
    // Calculate the right line of the lower bounds
    if(x >= a){
     5f4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 654 <phaseControl()+0xe8>
        lower_bound = (p * a) - d;
     5f8:	eeb4 8a65 	vcmp.f32	s16, s11
     5fc:	eddf 6a19 	vldr	s13, [pc, #100]	; 664 <phaseControl()+0xf8>
        lower_bound = -(p * a) - d;
     600:	ed9f 7a19 	vldr	s14, [pc, #100]	; 668 <phaseControl()+0xfc>
        lower_bound = (p * a) - d;
     604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        lower_bound = -(p * a) - d;
     608:	eeb4 8a46 	vcmp.f32	s16, s12
        lower_bound = (p * a) - d;
     60c:	bf98      	it	ls
     60e:	eef0 7a66 	vmovls.f32	s15, s13
        lower_bound = -(p * a) - d;
     612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return -1;
    }
    
    // If this point is reached then none of the checks passed and the point is inside the bounds
    return 0;
}
     616:	ecbd 8b02 	vpop	{d8}
        lower_bound = -(p * a) - d;
     61a:	fe67 7a27 	vselge.f32	s15, s14, s15
    if (y <= lower_bound){
     61e:	eef4 7ac0 	vcmpe.f32	s15, s0
     622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     626:	bfac      	ite	ge
     628:	f04f 30ff 	movge.w	r0, #4294967295
     62c:	2000      	movlt	r0, #0
}
     62e:	bd08      	pop	{r3, pc}
    if(x < a || x > -a){
     630:	eeb4 8ae6 	vcmpe.f32	s16, s13
     634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     638:	dcd6      	bgt.n	5e8 <phaseControl()+0x7c>
    float lower_bound = 0;
     63a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 66c <phaseControl()+0x100>
     63e:	e7d7      	b.n	5f0 <phaseControl()+0x84>
    float upper_bound = 0;
     640:	eddf 7a0a 	vldr	s15, [pc, #40]	; 66c <phaseControl()+0x100>
     644:	e7b1      	b.n	5aa <phaseControl()+0x3e>
}
     646:	ecbd 8b02 	vpop	{d8}
        return 1;
     64a:	2001      	movs	r0, #1
}
     64c:	bd08      	pop	{r3, pc}
     64e:	bf00      	nop
     650:	20004480 	.word	0x20004480
     654:	42c80000 	.word	0x42c80000
     658:	c2c80000 	.word	0xc2c80000
     65c:	42e60000 	.word	0x42e60000
     660:	c2aa0000 	.word	0xc2aa0000
     664:	42aa0000 	.word	0x42aa0000
     668:	c2e60000 	.word	0xc2e60000
     66c:	00000000 	.word	0x00000000

00000670 <stabilize()>:

// this is where the stabilization code goes
void stabilize() {
     670:	b508      	push	{r3, lr}
  
  // phase control
  if (phaseControl() == 1) {
     672:	f7ff ff7b 	bl	56c <phaseControl()>
     676:	2801      	cmp	r0, #1
     678:	d017      	beq.n	6aa <stabilize()+0x3a>
    // turn on clockwise and off counter clockwise
    digitalWrite(clockwise, HIGH);
    digitalWrite(cclockwise, LOW);
  } else if (phaseControl() == -1) {
     67a:	f7ff ff77 	bl	56c <phaseControl()>
     67e:	3001      	adds	r0, #1
     680:	d009      	beq.n	696 <stabilize()+0x26>
    // turn on counter clockwise and off clockwise
    digitalWrite(cclockwise, HIGH);
    digitalWrite(clockwise, LOW);
  } else {
    // turn off all
    digitalWrite(clockwise, LOW);
     682:	2100      	movs	r1, #0
     684:	2016      	movs	r0, #22
     686:	f00a fa31 	bl	aaec <digitalWrite>
    digitalWrite(cclockwise, LOW);
     68a:	2100      	movs	r1, #0
     68c:	2017      	movs	r0, #23
  }
}
     68e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(cclockwise, LOW);
     692:	f00a ba2b 	b.w	aaec <digitalWrite>
    digitalWrite(cclockwise, HIGH);
     696:	2101      	movs	r1, #1
     698:	2017      	movs	r0, #23
     69a:	f00a fa27 	bl	aaec <digitalWrite>
    digitalWrite(clockwise, LOW);
     69e:	2100      	movs	r1, #0
     6a0:	2016      	movs	r0, #22
}
     6a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(clockwise, LOW);
     6a6:	f00a ba21 	b.w	aaec <digitalWrite>
    digitalWrite(clockwise, HIGH);
     6aa:	4601      	mov	r1, r0
     6ac:	e7ea      	b.n	684 <stabilize()+0x14>
     6ae:	bf00      	nop

000006b0 <velocity()>:

float velocity() {
     6b0:	b570      	push	{r4, r5, r6, lr}
 
  if (velocityTime >= 1000) {
     6b2:	4c20      	ldr	r4, [pc, #128]	; (734 <velocity()+0x84>)
     6b4:	6823      	ldr	r3, [r4, #0]
     6b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
float velocity() {
     6ba:	ed2d 8b02 	vpush	{d8}
  if (velocityTime >= 1000) {
     6be:	da07      	bge.n	6d0 <velocity()+0x20>
    //  Return vertical velocity in m/s
    velocityEND = (float)DAltitude / DTime;

    
  }
  return velocityEND; 
     6c0:	4b1d      	ldr	r3, [pc, #116]	; (738 <velocity()+0x88>)
  
}
     6c2:	ecbd 8b02 	vpop	{d8}
  return velocityEND; 
     6c6:	edd3 7a00 	vldr	s15, [r3]
}
     6ca:	eeb0 0a67 	vmov.f32	s0, s15
     6ce:	bd70      	pop	{r4, r5, r6, pc}
	return systick_millis_count;
     6d0:	4e1a      	ldr	r6, [pc, #104]	; (73c <velocity()+0x8c>)
    float DAltitude = bmeup.getAltitude() - lastAltitude;
     6d2:	481b      	ldr	r0, [pc, #108]	; (740 <velocity()+0x90>)
     6d4:	f001 f89e 	bl	1814 <SHC_BME280::getAltitude()>
     6d8:	6833      	ldr	r3, [r6, #0]
    float DTime = millis() - velocityTime;
     6da:	6822      	ldr	r2, [r4, #0]
    float DAltitude = bmeup.getAltitude() - lastAltitude;
     6dc:	4d19      	ldr	r5, [pc, #100]	; (744 <velocity()+0x94>)
    float DTime = millis() - velocityTime;
     6de:	1a9b      	subs	r3, r3, r2
    DTime /= 1000;
     6e0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 748 <velocity()+0x98>
    float DAltitude = bmeup.getAltitude() - lastAltitude;
     6e4:	edd5 6a00 	vldr	s13, [r5]
    float DTime = millis() - velocityTime;
     6e8:	ee07 3a90 	vmov	s15, r3
    if (bmeup.getAltitude() >= lastAltitude) {
     6ec:	4814      	ldr	r0, [pc, #80]	; (740 <velocity()+0x90>)
    float DAltitude = bmeup.getAltitude() - lastAltitude;
     6ee:	ee30 8a66 	vsub.f32	s16, s0, s13
    float DTime = millis() - velocityTime;
     6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    DTime /= 1000;
     6f6:	eec7 8a87 	vdiv.f32	s17, s15, s14
    if (bmeup.getAltitude() >= lastAltitude) {
     6fa:	f001 f88b 	bl	1814 <SHC_BME280::getAltitude()>
     6fe:	edd5 7a00 	vldr	s15, [r5]
     702:	eeb4 0ae7 	vcmpe.f32	s0, s15
     706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     70a:	db02      	blt.n	712 <velocity()+0x62>
      peakAltitude = lastAltitude;
     70c:	4b0f      	ldr	r3, [pc, #60]	; (74c <velocity()+0x9c>)
     70e:	edc3 7a00 	vstr	s15, [r3]
    lastAltitude = bmeup.getAltitude();
     712:	480b      	ldr	r0, [pc, #44]	; (740 <velocity()+0x90>)
     714:	f001 f87e 	bl	1814 <SHC_BME280::getAltitude()>
    velocityEND = (float)DAltitude / DTime;
     718:	eec8 7a28 	vdiv.f32	s15, s16, s17
     71c:	6832      	ldr	r2, [r6, #0]
     71e:	4b06      	ldr	r3, [pc, #24]	; (738 <velocity()+0x88>)
    lastAltitude = bmeup.getAltitude();
     720:	ed85 0a00 	vstr	s0, [r5]
    velocityTime = millis();
     724:	6022      	str	r2, [r4, #0]
}
     726:	ecbd 8b02 	vpop	{d8}
     72a:	eeb0 0a67 	vmov.f32	s0, s15
    velocityEND = (float)DAltitude / DTime;
     72e:	edc3 7a00 	vstr	s15, [r3]
}
     732:	bd70      	pop	{r4, r5, r6, pc}
     734:	20003d50 	.word	0x20003d50
     738:	20004be0 	.word	0x20004be0
     73c:	20004bc4 	.word	0x20004bc4
     740:	20004a90 	.word	0x20004a90
     744:	20004b10 	.word	0x20004b10
     748:	447a0000 	.word	0x447a0000
     74c:	20004b4c 	.word	0x20004b4c

00000750 <stateSwitcher()>:
void stateSwitcher() {
     750:	b508      	push	{r3, lr}
  int currentVelocity = velocity();
     752:	f7ff ffad 	bl	6b0 <velocity()>
  if(lastAltitude > 20 && state != LIFTOFF){
     756:	4b22      	ldr	r3, [pc, #136]	; (7e0 <stateSwitcher()+0x90>)
     758:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
     75c:	edd3 7a00 	vldr	s15, [r3]
     760:	4b20      	ldr	r3, [pc, #128]	; (7e4 <stateSwitcher()+0x94>)
     762:	eef4 7ac7 	vcmpe.f32	s15, s14
     766:	781a      	ldrb	r2, [r3, #0]
     768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     76c:	dd0d      	ble.n	78a <stateSwitcher()+0x3a>
     76e:	2a01      	cmp	r2, #1
     770:	d001      	beq.n	776 <stateSwitcher()+0x26>
    state = LIFTOFF;
     772:	2201      	movs	r2, #1
     774:	701a      	strb	r2, [r3, #0]
    if (lastAltitude >= (20 * 1000)) {
     776:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 7e8 <stateSwitcher()+0x98>
     77a:	eef4 7ac7 	vcmpe.f32	s15, s14
     77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     782:	db01      	blt.n	788 <stateSwitcher()+0x38>
      state = STABILIZE;
     784:	2202      	movs	r2, #2
     786:	701a      	strb	r2, [r3, #0]
}
     788:	bd08      	pop	{r3, pc}
  if (state == LIFTOFF) {
     78a:	2a01      	cmp	r2, #1
     78c:	d0f3      	beq.n	776 <stateSwitcher()+0x26>
  else if (state == STABILIZE) {
     78e:	2a02      	cmp	r2, #2
     790:	d00c      	beq.n	7ac <stateSwitcher()+0x5c>
  else if(state == BURST) {
     792:	2a03      	cmp	r2, #3
     794:	d015      	beq.n	7c2 <stateSwitcher()+0x72>
  int currentVelocity = velocity();
     796:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if(currentVelocity < 0.01) {
     79a:	ee10 1a10 	vmov	r1, s0
     79e:	2900      	cmp	r1, #0
     7a0:	dcf2      	bgt.n	788 <stateSwitcher()+0x38>
     7a2:	2a04      	cmp	r2, #4
     7a4:	d1f0      	bne.n	788 <stateSwitcher()+0x38>
      state = LANDED;
     7a6:	2205      	movs	r2, #5
     7a8:	701a      	strb	r2, [r3, #0]
}
     7aa:	bd08      	pop	{r3, pc}
    if (peakAltitude > lastAltitude) {
     7ac:	4a0f      	ldr	r2, [pc, #60]	; (7ec <stateSwitcher()+0x9c>)
     7ae:	ed92 7a00 	vldr	s14, [r2]
     7b2:	eef4 7ac7 	vcmpe.f32	s15, s14
     7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7ba:	d5e5      	bpl.n	788 <stateSwitcher()+0x38>
      state = BURST;
     7bc:	2203      	movs	r2, #3
     7be:	701a      	strb	r2, [r3, #0]
}
     7c0:	bd08      	pop	{r3, pc}
    if (lastAltitude < (peakAltitude - 100)) {
     7c2:	4a0a      	ldr	r2, [pc, #40]	; (7ec <stateSwitcher()+0x9c>)
     7c4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 7f0 <stateSwitcher()+0xa0>
     7c8:	ed92 7a00 	vldr	s14, [r2]
     7cc:	ee37 7a66 	vsub.f32	s14, s14, s13
     7d0:	eef4 7ac7 	vcmpe.f32	s15, s14
     7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7d8:	d5d6      	bpl.n	788 <stateSwitcher()+0x38>
      state = DESCENT;
     7da:	2204      	movs	r2, #4
     7dc:	701a      	strb	r2, [r3, #0]
}
     7de:	bd08      	pop	{r3, pc}
     7e0:	20004b10 	.word	0x20004b10
     7e4:	20004bf5 	.word	0x20004bf5
     7e8:	469c4000 	.word	0x469c4000
     7ec:	20004b4c 	.word	0x20004b4c
     7f0:	42c80000 	.word	0x42c80000

000007f4 <loop>:
  ii++;
     7f4:	4b21      	ldr	r3, [pc, #132]	; (87c <loop+0x88>)
     7f6:	6819      	ldr	r1, [r3, #0]
void loop() {
     7f8:	b500      	push	{lr}
     7fa:	b085      	sub	sp, #20
  ii++;
     7fc:	3101      	adds	r1, #1
  Serial1.println(dataString(ii));
     7fe:	a801      	add	r0, sp, #4
  ii++;
     800:	6019      	str	r1, [r3, #0]
  Serial1.println(dataString(ii));
     802:	f7ff fc3d 	bl	80 <dataString(int)>
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
     806:	a901      	add	r1, sp, #4
     808:	481d      	ldr	r0, [pc, #116]	; (880 <loop+0x8c>)
     80a:	f009 fe1b 	bl	a444 <Print::print(String const&)>
     80e:	481c      	ldr	r0, [pc, #112]	; (880 <loop+0x8c>)
     810:	f009 fe4a 	bl	a4a8 <Print::println()>
     814:	a801      	add	r0, sp, #4
     816:	f009 feb1 	bl	a57c <String::~String()>
  switch (state) {
     81a:	4b1a      	ldr	r3, [pc, #104]	; (884 <loop+0x90>)
     81c:	781b      	ldrb	r3, [r3, #0]
     81e:	b1fb      	cbz	r3, 860 <loop+0x6c>
     820:	2b02      	cmp	r3, #2
     822:	d101      	bne.n	828 <loop+0x34>
      stabilize();
     824:	f7ff ff24 	bl	670 <stabilize()>
     828:	4a17      	ldr	r2, [pc, #92]	; (888 <loop+0x94>)
  if(millis() - lasttime <= 50){    // Light will be ON for 50 milisec
     82a:	4818      	ldr	r0, [pc, #96]	; (88c <loop+0x98>)
     82c:	6813      	ldr	r3, [r2, #0]
     82e:	6801      	ldr	r1, [r0, #0]
     830:	1a5b      	subs	r3, r3, r1
     832:	2b32      	cmp	r3, #50	; 0x32
     834:	d919      	bls.n	86a <loop+0x76>
     836:	6813      	ldr	r3, [r2, #0]
  }else if(millis() - lasttime < 1000){   // Light will turn OFF for remainder of 950 milisec
     838:	1a5b      	subs	r3, r3, r1
     83a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     83e:	d306      	bcc.n	84e <loop+0x5a>
     840:	6813      	ldr	r3, [r2, #0]
    lasttime = millis(); // Process with code
     842:	6003      	str	r3, [r0, #0]
}
     844:	b005      	add	sp, #20
     846:	f85d eb04 	ldr.w	lr, [sp], #4
  stateSwitcher();
     84a:	f7ff bf81 	b.w	750 <stateSwitcher()>
    digitalWrite(LED, LOW); 
     84e:	2100      	movs	r1, #0
     850:	2015      	movs	r0, #21
     852:	f00a f94b 	bl	aaec <digitalWrite>
}
     856:	b005      	add	sp, #20
     858:	f85d eb04 	ldr.w	lr, [sp], #4
  stateSwitcher();
     85c:	f7ff bf78 	b.w	750 <stateSwitcher()>
      digitalWrite(status, HIGH);
     860:	2101      	movs	r1, #1
     862:	2015      	movs	r0, #21
     864:	f00a f942 	bl	aaec <digitalWrite>
      break;
     868:	e7de      	b.n	828 <loop+0x34>
    digitalWrite(LED,HIGH); 
     86a:	2101      	movs	r1, #1
     86c:	2015      	movs	r0, #21
     86e:	f00a f93d 	bl	aaec <digitalWrite>
}
     872:	b005      	add	sp, #20
     874:	f85d eb04 	ldr.w	lr, [sp], #4
  stateSwitcher();
     878:	f7ff bf6a 	b.w	750 <stateSwitcher()>
     87c:	20003cf8 	.word	0x20003cf8
     880:	20003328 	.word	0x20003328
     884:	20004bf5 	.word	0x20004bf5
     888:	20004bc4 	.word	0x20004bc4
     88c:	20004b14 	.word	0x20004b14

00000890 <_GLOBAL__sub_I_bnowo>:
}
     890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void reset(unsigned long newDuration);
};


// Sensor superclass, used to make all of your sensors match up in the way you collect data from them
class Sensor {    
     894:	4c30      	ldr	r4, [pc, #192]	; (958 <_GLOBAL__sub_I_bnowo+0xc8>)
     896:	2100      	movs	r1, #0
     898:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 988 <_GLOBAL__sub_I_bnowo+0xf8>

#include "Arduino.h"
#include <Adafruit_BNO055.h>
#include "Utils.h"

class BNO055 : public Sensor {
     89c:	2600      	movs	r6, #0
     89e:	4620      	mov	r0, r4
     8a0:	4d2e      	ldr	r5, [pc, #184]	; (95c <_GLOBAL__sub_I_bnowo+0xcc>)
     8a2:	2700      	movs	r7, #0
     8a4:	f840 8b04 	str.w	r8, [r0], #4
     8a8:	f000 ff1c 	bl	16e4 <Timer::Timer(unsigned long)>
     8ac:	4b2c      	ldr	r3, [pc, #176]	; (960 <_GLOBAL__sub_I_bnowo+0xd0>)
     8ae:	4628      	mov	r0, r5
     8b0:	2100      	movs	r1, #0
     8b2:	6023      	str	r3, [r4, #0]
     8b4:	f840 8b04 	str.w	r8, [r0], #4
     8b8:	e9c4 6704 	strd	r6, r7, [r4, #16]
     8bc:	e9c4 6706 	strd	r6, r7, [r4, #24]
     8c0:	e9c4 6708 	strd	r6, r7, [r4, #32]
     8c4:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
     8c8:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
     8cc:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
     8d0:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
     8d4:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
     8d8:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
     8dc:	f000 ff02 	bl	16e4 <Timer::Timer(unsigned long)>
     8e0:	4b20      	ldr	r3, [pc, #128]	; (964 <_GLOBAL__sub_I_bnowo+0xd4>)
     8e2:	4628      	mov	r0, r5
     8e4:	4c20      	ldr	r4, [pc, #128]	; (968 <_GLOBAL__sub_I_bnowo+0xd8>)
     8e6:	f840 3b0c 	str.w	r3, [r0], #12
     8ea:	f000 ff9b 	bl	1824 <BME280_Class::BME280_Class()>
     8ee:	2300      	movs	r3, #0
SHC_BME280 bmeup; // create bme object pronounced "beamme-up" (ideally suffixed with Scotty)
     8f0:	4a1e      	ldr	r2, [pc, #120]	; (96c <_GLOBAL__sub_I_bnowo+0xdc>)
     8f2:	4628      	mov	r0, r5
     8f4:	491e      	ldr	r1, [pc, #120]	; (970 <_GLOBAL__sub_I_bnowo+0xe0>)
     8f6:	64ab      	str	r3, [r5, #72]	; 0x48
     8f8:	64eb      	str	r3, [r5, #76]	; 0x4c
     8fa:	652b      	str	r3, [r5, #80]	; 0x50
     8fc:	656b      	str	r3, [r5, #84]	; 0x54
     8fe:	f00c fa53 	bl	cda8 <__aeabi_atexit>
     902:	4620      	mov	r0, r4
     904:	2100      	movs	r1, #0
     906:	f840 8b04 	str.w	r8, [r0], #4
     90a:	f000 feeb 	bl	16e4 <Timer::Timer(unsigned long)>
#include "Arduino.h"
#include "Utils.h"
#include <SparkFun_u-blox_GNSS_Arduino_Library.h>


class M9N : public Sensor {
     90e:	4b19      	ldr	r3, [pc, #100]	; (974 <_GLOBAL__sub_I_bnowo+0xe4>)
     910:	4620      	mov	r0, r4
     912:	f840 3b0c 	str.w	r3, [r0], #12
     916:	f002 fac1 	bl	2e9c <SFE_UBLOX_GNSS::SFE_UBLOX_GNSS()>
     91a:	2300      	movs	r3, #0
M9N miners; // create a m9n object pronounced "minors"
     91c:	4a13      	ldr	r2, [pc, #76]	; (96c <_GLOBAL__sub_I_bnowo+0xdc>)
     91e:	4620      	mov	r0, r4
     920:	4915      	ldr	r1, [pc, #84]	; (978 <_GLOBAL__sub_I_bnowo+0xe8>)
     922:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
     926:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
     92a:	e9c4 336e 	strd	r3, r3, [r4, #440]	; 0x1b8
     92e:	e9c4 3370 	strd	r3, r3, [r4, #448]	; 0x1c0
     932:	e9c4 6766 	strd	r6, r7, [r4, #408]	; 0x198
     936:	e9c4 6768 	strd	r6, r7, [r4, #416]	; 0x1a0
     93a:	e9c4 676a 	strd	r6, r7, [r4, #424]	; 0x1a8
     93e:	f00c fa33 	bl	cda8 <__aeabi_atexit>
     942:	4a0e      	ldr	r2, [pc, #56]	; (97c <_GLOBAL__sub_I_bnowo+0xec>)
int lasttime = millis();
     944:	4b0e      	ldr	r3, [pc, #56]	; (980 <_GLOBAL__sub_I_bnowo+0xf0>)
int startup = miners.getSecond();
     946:	4620      	mov	r0, r4
     948:	6812      	ldr	r2, [r2, #0]
int lasttime = millis();
     94a:	601a      	str	r2, [r3, #0]
int startup = miners.getSecond();
     94c:	f002 fa76 	bl	2e3c <M9N::getSecond()>
     950:	4b0c      	ldr	r3, [pc, #48]	; (984 <_GLOBAL__sub_I_bnowo+0xf4>)
     952:	6018      	str	r0, [r3, #0]
}
     954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     958:	20004480 	.word	0x20004480
     95c:	20004a90 	.word	0x20004a90
     960:	20002b44 	.word	0x20002b44
     964:	20002a94 	.word	0x20002a94
     968:	200044e0 	.word	0x200044e0
     96c:	20003754 	.word	0x20003754
     970:	00000069 	.word	0x00000069
     974:	20002b34 	.word	0x20002b34
     978:	00000a4d 	.word	0x00000a4d
     97c:	20004bc4 	.word	0x20004bc4
     980:	20004b14 	.word	0x20004b14
     984:	20004bbc 	.word	0x20004bbc
     988:	20002b54 	.word	0x20002b54

0000098c <setup>:
void setup() {
     98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     990:	4d24      	ldr	r5, [pc, #144]	; (a24 <setup+0x98>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     992:	f240 28ee 	movw	r8, #750	; 0x2ee
     996:	4c24      	ldr	r4, [pc, #144]	; (a28 <setup+0x9c>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     998:	4f24      	ldr	r7, [pc, #144]	; (a2c <setup+0xa0>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     99a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; a48 <setup+0xbc>
		uint32_t millis_begin = systick_millis_count;
     99e:	682e      	ldr	r6, [r5, #0]
		yield();
     9a0:	f00b fe50 	bl	c644 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     9a4:	7823      	ldrb	r3, [r4, #0]
     9a6:	b383      	cbz	r3, a0a <setup+0x7e>
     9a8:	783b      	ldrb	r3, [r7, #0]
     9aa:	07db      	lsls	r3, r3, #31
     9ac:	d52d      	bpl.n	a0a <setup+0x7e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     9ae:	682b      	ldr	r3, [r5, #0]
     9b0:	f8d9 2000 	ldr.w	r2, [r9]
     9b4:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     9b6:	2b0e      	cmp	r3, #14
     9b8:	d927      	bls.n	a0a <setup+0x7e>
  Serial1.begin(9600);
     9ba:	2200      	movs	r2, #0
     9bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
     9c0:	481b      	ldr	r0, [pc, #108]	; (a30 <setup+0xa4>)
     9c2:	f009 fa49 	bl	9e58 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  bnowo.init();
     9c6:	481b      	ldr	r0, [pc, #108]	; (a34 <setup+0xa8>)
     9c8:	f000 f84e 	bl	a68 <BNO055::init()>
  bmeup.init();
     9cc:	481a      	ldr	r0, [pc, #104]	; (a38 <setup+0xac>)
     9ce:	f000 fe91 	bl	16f4 <SHC_BME280::init()>
  miners.init();
     9d2:	481a      	ldr	r0, [pc, #104]	; (a3c <setup+0xb0>)
     9d4:	f002 f9a4 	bl	2d20 <M9N::init()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     9d8:	2114      	movs	r1, #20
     9da:	4819      	ldr	r0, [pc, #100]	; (a40 <setup+0xb4>)
     9dc:	f00b fdb4 	bl	c548 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     9e0:	4818      	ldr	r0, [pc, #96]	; (a44 <setup+0xb8>)
     9e2:	f009 fd61 	bl	a4a8 <Print::println()>
  pinMode(LED,OUTPUT);
     9e6:	2101      	movs	r1, #1
     9e8:	2015      	movs	r0, #21
     9ea:	f00a f8bb 	bl	ab64 <pinMode>
  pinMode(clockwise,OUTPUT);
     9ee:	2101      	movs	r1, #1
     9f0:	2016      	movs	r0, #22
     9f2:	f00a f8b7 	bl	ab64 <pinMode>
  pinMode(cclockwise,OUTPUT);
     9f6:	2101      	movs	r1, #1
     9f8:	2017      	movs	r0, #23
     9fa:	f00a f8b3 	bl	ab64 <pinMode>
  pinMode(status,OUTPUT);
     9fe:	2101      	movs	r1, #1
     a00:	2015      	movs	r0, #21
}
     a02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pinMode(status,OUTPUT);
     a06:	f00a b8ad 	b.w	ab64 <pinMode>
			uint32_t elapsed = systick_millis_count - millis_begin;
     a0a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     a0c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     a0e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     a10:	b12a      	cbz	r2, a1e <setup+0x92>
				if (elapsed > 2000) break;
     a12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     a16:	d8d0      	bhi.n	9ba <setup+0x2e>
			yield();
     a18:	f00b fe14 	bl	c644 <yield>
     a1c:	e7c0      	b.n	9a0 <setup+0x14>
				if (elapsed > 750) break;
     a1e:	4543      	cmp	r3, r8
     a20:	d9fa      	bls.n	a18 <setup+0x8c>
     a22:	e7ca      	b.n	9ba <setup+0x2e>
     a24:	20004bc4 	.word	0x20004bc4
     a28:	20004bfa 	.word	0x20004bfa
     a2c:	20004bf9 	.word	0x20004bf9
     a30:	20003328 	.word	0x20003328
     a34:	20004480 	.word	0x20004480
     a38:	20004a90 	.word	0x20004a90
     a3c:	200044e0 	.word	0x200044e0
     a40:	200030ac 	.word	0x200030ac
     a44:	20003318 	.word	0x20003318
     a48:	20004bd4 	.word	0x20004bd4

00000a4c <M9N::~M9N()>:
     a4c:	4b04      	ldr	r3, [pc, #16]	; (a60 <M9N::~M9N()+0x14>)
     a4e:	b510      	push	{r4, lr}
     a50:	4604      	mov	r4, r0
     a52:	f840 3b0c 	str.w	r3, [r0], #12
     a56:	f002 fea9 	bl	37ac <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()>
     a5a:	4620      	mov	r0, r4
     a5c:	bd10      	pop	{r4, pc}
     a5e:	bf00      	nop
     a60:	20002b34 	.word	0x20002b34

00000a64 <Adafruit_BNO055::~Adafruit_BNO055()>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
     a64:	4770      	bx	lr
     a66:	bf00      	nop

00000a68 <BNO055::init()>:

Adafruit_BNO055 bno = Adafruit_BNO055(55);
sensors_event_t event;

Error BNO055::init() {
    if(!bno.begin()) {
     a68:	210c      	movs	r1, #12
     a6a:	4804      	ldr	r0, [pc, #16]	; (a7c <BNO055::init()+0x14>)
Error BNO055::init() {
     a6c:	b508      	push	{r3, lr}
    if(!bno.begin()) {
     a6e:	f000 f8bf 	bl	bf0 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)>
     a72:	f080 0001 	eor.w	r0, r0, #1
        return BNO_ERROR;  
    }
    return NO_ERROR;
}
     a76:	b2c0      	uxtb	r0, r0
     a78:	bd08      	pop	{r3, pc}
     a7a:	bf00      	nop
     a7c:	20004ae8 	.word	0x20004ae8

00000a80 <BNO055::prefetchData()>:

bool BNO055::prefetchData() {
     a80:	b510      	push	{r4, lr}
     a82:	b092      	sub	sp, #72	; 0x48
     a84:	4604      	mov	r4, r0
    imu::Vector<3> fetchedAcceleration = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
     a86:	491b      	ldr	r1, [pc, #108]	; (af4 <BNO055::prefetchData()+0x74>)
     a88:	2208      	movs	r2, #8
     a8a:	4668      	mov	r0, sp
     a8c:	f000 f968 	bl	d60 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)>
    accelX = fetchedAcceleration.x();
    accelY = fetchedAcceleration.y();
    accelZ = fetchedAcceleration.z();

    imu::Vector<3> fetchedGyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
     a90:	a806      	add	r0, sp, #24
     a92:	2214      	movs	r2, #20
     a94:	4917      	ldr	r1, [pc, #92]	; (af4 <BNO055::prefetchData()+0x74>)
    accelX = fetchedAcceleration.x();
     a96:	ed9d 7b00 	vldr	d7, [sp]
     a9a:	ed84 7b04 	vstr	d7, [r4, #16]
    accelY = fetchedAcceleration.y();
     a9e:	ed9d 7b02 	vldr	d7, [sp, #8]
     aa2:	ed84 7b06 	vstr	d7, [r4, #24]
    accelZ = fetchedAcceleration.z();
     aa6:	ed9d 7b04 	vldr	d7, [sp, #16]
     aaa:	ed84 7b08 	vstr	d7, [r4, #32]
    imu::Vector<3> fetchedGyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
     aae:	f000 f957 	bl	d60 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)>
    gyroX = fetchedGyro.x();
    gyroY = fetchedGyro.y(); 
    gyroZ = fetchedGyro.z();

    imu::Vector<3> fetchedOrientation = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
     ab2:	a80c      	add	r0, sp, #48	; 0x30
     ab4:	221a      	movs	r2, #26
     ab6:	490f      	ldr	r1, [pc, #60]	; (af4 <BNO055::prefetchData()+0x74>)
    gyroX = fetchedGyro.x();
     ab8:	ed9d 7b06 	vldr	d7, [sp, #24]
     abc:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
    gyroY = fetchedGyro.y(); 
     ac0:	ed9d 7b08 	vldr	d7, [sp, #32]
     ac4:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
    gyroZ = fetchedGyro.z();
     ac8:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
     acc:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
    imu::Vector<3> fetchedOrientation = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
     ad0:	f000 f946 	bl	d60 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)>
    orientX = fetchedOrientation.x(); 
     ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    orientY = fetchedOrientation.y();
     ad8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    orientX = fetchedOrientation.x(); 
     adc:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    orientY = fetchedOrientation.y();
     ae0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    orientZ = fetchedOrientation.z();

    return true;
}
     ae4:	2001      	movs	r0, #1
    orientZ = fetchedOrientation.z();
     ae6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     aea:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
     aee:	b012      	add	sp, #72	; 0x48
     af0:	bd10      	pop	{r4, pc}
     af2:	bf00      	nop
     af4:	20004ae8 	.word	0x20004ae8

00000af8 <BNO055::getAccelerationX()>:

double BNO055::getAccelerationX() {
    return accelX;
}
     af8:	ed90 0b04 	vldr	d0, [r0, #16]
     afc:	4770      	bx	lr
     afe:	bf00      	nop

00000b00 <BNO055::getAccelerationY()>:
double BNO055::getAccelerationY() {
    return accelY;
}
     b00:	ed90 0b06 	vldr	d0, [r0, #24]
     b04:	4770      	bx	lr
     b06:	bf00      	nop

00000b08 <BNO055::getAccelerationZ()>:
double BNO055::getAccelerationZ() {
    return accelZ;
}
     b08:	ed90 0b08 	vldr	d0, [r0, #32]
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop

00000b10 <BNO055::getGyroX()>:

double BNO055::getGyroX() {
    return gyroX;
}
     b10:	ed90 0b0a 	vldr	d0, [r0, #40]	; 0x28
     b14:	4770      	bx	lr
     b16:	bf00      	nop

00000b18 <BNO055::getGyroY()>:
double BNO055::getGyroY() {
    return gyroY;
}
     b18:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
     b1c:	4770      	bx	lr
     b1e:	bf00      	nop

00000b20 <BNO055::getGyroZ()>:
double BNO055::getGyroZ() {
    return gyroZ;
}
     b20:	ed90 0b0e 	vldr	d0, [r0, #56]	; 0x38
     b24:	4770      	bx	lr
     b26:	bf00      	nop

00000b28 <BNO055::getOrientationX()>:

double BNO055::getOrientationX() {
    return orientX;
}
     b28:	ed90 0b10 	vldr	d0, [r0, #64]	; 0x40
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop

00000b30 <BNO055::getOrientationY()>:
double BNO055::getOrientationY() {
    return orientY;
}
     b30:	ed90 0b12 	vldr	d0, [r0, #72]	; 0x48
     b34:	4770      	bx	lr
     b36:	bf00      	nop

00000b38 <BNO055::getOrientationZ()>:
double BNO055::getOrientationZ() {
    return orientZ;
     b38:	ed90 0b14 	vldr	d0, [r0, #80]	; 0x50
     b3c:	4770      	bx	lr
     b3e:	bf00      	nop

00000b40 <Adafruit_BNO055::~Adafruit_BNO055()>:
     b40:	b510      	push	{r4, lr}
     b42:	4604      	mov	r4, r0
     b44:	2110      	movs	r1, #16
     b46:	f00a f911 	bl	ad6c <operator delete(void*, unsigned int)>
     b4a:	4620      	mov	r0, r4
     b4c:	bd10      	pop	{r4, pc}
     b4e:	bf00      	nop

00000b50 <_GLOBAL__sub_I_bno>:
     b50:	b510      	push	{r4, lr}
Adafruit_BNO055 bno = Adafruit_BNO055(55);
     b52:	4c08      	ldr	r4, [pc, #32]	; (b74 <_GLOBAL__sub_I_bno+0x24>)
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
     b54:	f00a f83e 	bl	abd4 <eeprom_initialize>
     b58:	2228      	movs	r2, #40	; 0x28
     b5a:	2137      	movs	r1, #55	; 0x37
     b5c:	4620      	mov	r0, r4
     b5e:	4b06      	ldr	r3, [pc, #24]	; (b78 <_GLOBAL__sub_I_bno+0x28>)
     b60:	f000 f82e 	bl	bc0 <Adafruit_BNO055::Adafruit_BNO055(long, unsigned char, TwoWire*)>
     b64:	4620      	mov	r0, r4
     b66:	4a05      	ldr	r2, [pc, #20]	; (b7c <_GLOBAL__sub_I_bno+0x2c>)
     b68:	4905      	ldr	r1, [pc, #20]	; (b80 <_GLOBAL__sub_I_bno+0x30>)
     b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_BNO055 bno = Adafruit_BNO055(55);
     b6e:	f00c b91b 	b.w	cda8 <__aeabi_atexit>
     b72:	bf00      	nop
     b74:	20004ae8 	.word	0x20004ae8
     b78:	20003388 	.word	0x20003388
     b7c:	20003754 	.word	0x20003754
     b80:	00000a65 	.word	0x00000a65

00000b84 <Adafruit_Sensor::enableAutoRange(bool)>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
     b84:	4770      	bx	lr
     b86:	bf00      	nop

00000b88 <Adafruit_BNO055::getSensor(sensor_t*)>:
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
     b88:	b538      	push	{r3, r4, r5, lr}
     b8a:	460c      	mov	r4, r1
  memset(sensor, 0, sizeof(sensor_t));
     b8c:	2220      	movs	r2, #32
     b8e:	2100      	movs	r1, #0
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
     b90:	4605      	mov	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
     b92:	f104 0008 	add.w	r0, r4, #8
     b96:	f00d f9e5 	bl	df64 <memset>
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
     b9a:	220b      	movs	r2, #11
     b9c:	4906      	ldr	r1, [pc, #24]	; (bb8 <Adafruit_BNO055::getSensor(sensor_t*)+0x30>)
     b9e:	4620      	mov	r0, r4
     ba0:	f00d fa32 	bl	e008 <strncpy>
  sensor->version = 1;
     ba4:	2301      	movs	r3, #1
  sensor->type = SENSOR_TYPE_ORIENTATION;
     ba6:	2103      	movs	r1, #3
  sensor->resolution = 0.01F;
     ba8:	4a04      	ldr	r2, [pc, #16]	; (bbc <Adafruit_BNO055::getSensor(sensor_t*)+0x34>)
  sensor->version = 1;
     baa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
     bac:	68ab      	ldr	r3, [r5, #8]
  sensor->type = SENSOR_TYPE_ORIENTATION;
     bae:	6161      	str	r1, [r4, #20]
  sensor->resolution = 0.01F;
     bb0:	6222      	str	r2, [r4, #32]
  sensor->sensor_id = _sensorID;
     bb2:	6123      	str	r3, [r4, #16]
}
     bb4:	bd38      	pop	{r3, r4, r5, pc}
     bb6:	bf00      	nop
     bb8:	20002a34 	.word	0x20002a34
     bbc:	3c23d70a 	.word	0x3c23d70a

00000bc0 <Adafruit_BNO055::Adafruit_BNO055(long, unsigned char, TwoWire*)>:
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
     bc0:	b570      	push	{r4, r5, r6, lr}
     bc2:	4604      	mov	r4, r0
     bc4:	4615      	mov	r5, r2
                                 TwoWire *theWire) {
     bc6:	4e09      	ldr	r6, [pc, #36]	; (bec <Adafruit_BNO055::Adafruit_BNO055(long, unsigned char, TwoWire*)+0x2c>)
     bc8:	2200      	movs	r2, #0
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
     bca:	b082      	sub	sp, #8
  _sensorID = sensorID;
     bcc:	6081      	str	r1, [r0, #8]
                                 TwoWire *theWire) {
     bce:	6006      	str	r6, [r0, #0]
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
     bd0:	2010      	movs	r0, #16
                                 TwoWire *theWire) {
     bd2:	6062      	str	r2, [r4, #4]
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
     bd4:	9301      	str	r3, [sp, #4]
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
     bd6:	f00a f8c3 	bl	ad60 <operator new(unsigned int)>
     bda:	4629      	mov	r1, r5
     bdc:	9a01      	ldr	r2, [sp, #4]
     bde:	4605      	mov	r5, r0
     be0:	f000 f978 	bl	ed4 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
}
     be4:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(address, theWire);
     be6:	6065      	str	r5, [r4, #4]
}
     be8:	b002      	add	sp, #8
     bea:	bd70      	pop	{r4, r5, r6, pc}
     bec:	20002ac0 	.word	0x20002ac0

00000bf0 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)>:
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
     bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bf4:	460f      	mov	r7, r1
     bf6:	4606      	mov	r6, r0
     bf8:	b084      	sub	sp, #16
  i2c_dev->begin(false);
     bfa:	2100      	movs	r1, #0
     bfc:	6840      	ldr	r0, [r0, #4]
     bfe:	2555      	movs	r5, #85	; 0x55
     c00:	f000 f972 	bl	ee8 <Adafruit_I2CDevice::begin(bool)>
  while (timeout > 0) {
     c04:	e004      	b.n	c10 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0x20>
    delay(10);
     c06:	f009 ff1d 	bl	aa44 <delay>
  while (timeout > 0) {
     c0a:	3d01      	subs	r5, #1
     c0c:	f000 80a2 	beq.w	d54 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0x164>
    if (i2c_dev->begin()) {
     c10:	2101      	movs	r1, #1
     c12:	6870      	ldr	r0, [r6, #4]
     c14:	f000 f968 	bl	ee8 <Adafruit_I2CDevice::begin(bool)>
     c18:	4604      	mov	r4, r0
    delay(10);
     c1a:	200a      	movs	r0, #10
    if (i2c_dev->begin()) {
     c1c:	2c00      	cmp	r4, #0
     c1e:	d0f2      	beq.n	c06 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0x16>
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c20:	ab03      	add	r3, sp, #12
  uint8_t buffer[1] = {reg};
     c22:	f04f 0800 	mov.w	r8, #0
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c26:	2501      	movs	r5, #1
     c28:	4619      	mov	r1, r3
     c2a:	f8cd 8004 	str.w	r8, [sp, #4]
     c2e:	9500      	str	r5, [sp, #0]
     c30:	462a      	mov	r2, r5
     c32:	6870      	ldr	r0, [r6, #4]
  uint8_t buffer[1] = {reg};
     c34:	f88d 800c 	strb.w	r8, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c38:	f000 f9de 	bl	ff8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
  return (byte)buffer[0];
     c3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
  if (id != BNO055_ID) {
     c40:	2ba0      	cmp	r3, #160	; 0xa0
     c42:	d012      	beq.n	c6a <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0x7a>
    delay(1000); // hold on for boot
     c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c48:	f009 fefc 	bl	aa44 <delay>
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c4c:	ab03      	add	r3, sp, #12
     c4e:	f8cd 8004 	str.w	r8, [sp, #4]
     c52:	462a      	mov	r2, r5
     c54:	4619      	mov	r1, r3
     c56:	9500      	str	r5, [sp, #0]
     c58:	6870      	ldr	r0, [r6, #4]
  uint8_t buffer[1] = {reg};
     c5a:	f88d 800c 	strb.w	r8, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c5e:	f000 f9cb 	bl	ff8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
  return (byte)buffer[0];
     c62:	f89d 300c 	ldrb.w	r3, [sp, #12]
    if (id != BNO055_ID) {
     c66:	2ba0      	cmp	r3, #160	; 0xa0
     c68:	d174      	bne.n	d54 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0x164>
  _mode = mode;
     c6a:	2500      	movs	r5, #0
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     c6c:	233d      	movs	r3, #61	; 0x3d
  return i2c_dev->write(buffer, 2);
     c6e:	2202      	movs	r2, #2
     c70:	a903      	add	r1, sp, #12
  _mode = mode;
     c72:	7335      	strb	r5, [r6, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c74:	f04f 0801 	mov.w	r8, #1
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     c78:	f8ad 300c 	strh.w	r3, [sp, #12]
  return i2c_dev->write(buffer, 2);
     c7c:	2301      	movs	r3, #1
     c7e:	e9cd 5500 	strd	r5, r5, [sp]
     c82:	6870      	ldr	r0, [r6, #4]
     c84:	f000 f94c 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(30);
     c88:	201e      	movs	r0, #30
     c8a:	f009 fedb 	bl	aa44 <delay>
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     c8e:	f242 033f 	movw	r3, #8255	; 0x203f
  return i2c_dev->write(buffer, 2);
     c92:	2202      	movs	r2, #2
     c94:	a903      	add	r1, sp, #12
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     c96:	f8ad 300c 	strh.w	r3, [sp, #12]
  return i2c_dev->write(buffer, 2);
     c9a:	2301      	movs	r3, #1
     c9c:	e9cd 5500 	strd	r5, r5, [sp]
     ca0:	6870      	ldr	r0, [r6, #4]
     ca2:	f000 f93d 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(30);
     ca6:	201e      	movs	r0, #30
     ca8:	f009 fecc 	bl	aa44 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
     cac:	e001      	b.n	cb2 <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0xc2>
    delay(10);
     cae:	f009 fec9 	bl	aa44 <delay>
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     cb2:	ab03      	add	r3, sp, #12
     cb4:	6870      	ldr	r0, [r6, #4]
     cb6:	2201      	movs	r2, #1
  uint8_t buffer[1] = {reg};
     cb8:	f88d 500c 	strb.w	r5, [sp, #12]
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     cbc:	4619      	mov	r1, r3
     cbe:	e9cd 8500 	strd	r8, r5, [sp]
     cc2:	f000 f999 	bl	ff8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
  return (byte)buffer[0];
     cc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    delay(10);
     cca:	200a      	movs	r0, #10
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
     ccc:	2ba0      	cmp	r3, #160	; 0xa0
     cce:	d1ee      	bne.n	cae <Adafruit_BNO055::begin(adafruit_bno055_opmode_t)+0xbe>
  delay(50);
     cd0:	2032      	movs	r0, #50	; 0x32
     cd2:	f009 feb7 	bl	aa44 <delay>
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     cd6:	233e      	movs	r3, #62	; 0x3e
  return i2c_dev->write(buffer, 2);
     cd8:	a903      	add	r1, sp, #12
     cda:	2202      	movs	r2, #2
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     cdc:	f8ad 300c 	strh.w	r3, [sp, #12]
  return i2c_dev->write(buffer, 2);
     ce0:	2301      	movs	r3, #1
     ce2:	e9cd 5500 	strd	r5, r5, [sp]
     ce6:	6870      	ldr	r0, [r6, #4]
     ce8:	f000 f91a 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(10);
     cec:	200a      	movs	r0, #10
     cee:	f009 fea9 	bl	aa44 <delay>
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     cf2:	2307      	movs	r3, #7
  return i2c_dev->write(buffer, 2);
     cf4:	a903      	add	r1, sp, #12
     cf6:	2202      	movs	r2, #2
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     cf8:	f8ad 300c 	strh.w	r3, [sp, #12]
  return i2c_dev->write(buffer, 2);
     cfc:	2301      	movs	r3, #1
     cfe:	e9cd 5500 	strd	r5, r5, [sp]
     d02:	6870      	ldr	r0, [r6, #4]
     d04:	f000 f90c 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     d08:	233f      	movs	r3, #63	; 0x3f
  return i2c_dev->write(buffer, 2);
     d0a:	a903      	add	r1, sp, #12
     d0c:	2202      	movs	r2, #2
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     d0e:	f8ad 300c 	strh.w	r3, [sp, #12]
  return i2c_dev->write(buffer, 2);
     d12:	2301      	movs	r3, #1
     d14:	e9cd 5500 	strd	r5, r5, [sp]
     d18:	6870      	ldr	r0, [r6, #4]
     d1a:	f000 f901 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(10);
     d1e:	200a      	movs	r0, #10
     d20:	f009 fe90 	bl	aa44 <delay>
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     d24:	223d      	movs	r2, #61	; 0x3d
  return i2c_dev->write(buffer, 2);
     d26:	a903      	add	r1, sp, #12
     d28:	2301      	movs	r3, #1
     d2a:	6870      	ldr	r0, [r6, #4]
  _mode = mode;
     d2c:	7337      	strb	r7, [r6, #12]
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     d2e:	f88d 200c 	strb.w	r2, [sp, #12]
  return i2c_dev->write(buffer, 2);
     d32:	2202      	movs	r2, #2
  uint8_t buffer[2] = {(uint8_t)reg, (uint8_t)value};
     d34:	f88d 700d 	strb.w	r7, [sp, #13]
  return i2c_dev->write(buffer, 2);
     d38:	e9cd 5500 	strd	r5, r5, [sp]
     d3c:	f000 f8f0 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
  delay(30);
     d40:	201e      	movs	r0, #30
     d42:	f009 fe7f 	bl	aa44 <delay>
  delay(20);
     d46:	2014      	movs	r0, #20
     d48:	f009 fe7c 	bl	aa44 <delay>
}
     d4c:	4620      	mov	r0, r4
     d4e:	b004      	add	sp, #16
     d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
     d54:	2400      	movs	r4, #0
}
     d56:	4620      	mov	r0, r4
     d58:	b004      	add	sp, #16
     d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d5e:	bf00      	nop

00000d60 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)>:
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
     d60:	b530      	push	{r4, r5, lr}
     d62:	b087      	sub	sp, #28
     d64:	4615      	mov	r5, r2

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
     d66:	2300      	movs	r3, #0
     d68:	4604      	mov	r4, r0
/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
  uint8_t reg_buf[1] = {(uint8_t)reg};
     d6a:	f88d 200c 	strb.w	r2, [sp, #12]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
     d6e:	2206      	movs	r2, #6
  switch (vector_type) {
     d70:	3d08      	subs	r5, #8
     d72:	6003      	str	r3, [r0, #0]
     d74:	6043      	str	r3, [r0, #4]
     d76:	6083      	str	r3, [r0, #8]
     d78:	60c3      	str	r3, [r0, #12]
     d7a:	6103      	str	r3, [r0, #16]
     d7c:	6143      	str	r3, [r0, #20]
  memset(buffer, 0, 6);
     d7e:	9304      	str	r3, [sp, #16]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
     d80:	6848      	ldr	r0, [r1, #4]
     d82:	a903      	add	r1, sp, #12
     d84:	9301      	str	r3, [sp, #4]
  memset(buffer, 0, 6);
     d86:	f8ad 3014 	strh.w	r3, [sp, #20]
  return i2c_dev->write_then_read(reg_buf, 1, buffer, len);
     d8a:	ab04      	add	r3, sp, #16
     d8c:	9200      	str	r2, [sp, #0]
     d8e:	2201      	movs	r2, #1
     d90:	f000 f932 	bl	ff8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
     d94:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
     d98:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
     d9c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  switch (vector_type) {
     da0:	2d26      	cmp	r5, #38	; 0x26
     da2:	d82f      	bhi.n	e04 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)+0xa4>
     da4:	e8df f005 	tbb	[pc, r5]
     da8:	2e2e2e14 	.word	0x2e2e2e14
     dac:	2e312e2e 	.word	0x2e312e2e
     db0:	2e2e2e2e 	.word	0x2e2e2e2e
     db4:	2e2e2e31 	.word	0x2e2e2e31
     db8:	2e312e2e 	.word	0x2e312e2e
     dbc:	2e2e2e2e 	.word	0x2e2e2e2e
     dc0:	2e2e2e2e 	.word	0x2e2e2e2e
     dc4:	2e2e2e2e 	.word	0x2e2e2e2e
     dc8:	2e2e2e14 	.word	0x2e2e2e14
     dcc:	2e2e      	.short	0x2e2e
     dce:	14          	.byte	0x14
     dcf:	00          	.byte	0x00
    xyz[0] = ((double)x) / 100.0;
     dd0:	ee07 0a90 	vmov	s15, r0
     dd4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    xyz[1] = ((double)y) / 100.0;
     dd8:	ee07 1a90 	vmov	s15, r1
     ddc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    xyz[2] = ((double)z) / 100.0;
     de0:	ee07 2a90 	vmov	s15, r2
    xyz[0] = ((double)x) / 100.0;
     de4:	ed9f 4b18 	vldr	d4, [pc, #96]	; e48 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)+0xe8>
    xyz[2] = ((double)z) / 100.0;
     de8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    xyz[0] = ((double)x) / 100.0;
     dec:	ee85 3b04 	vdiv.f64	d3, d5, d4
    xyz[1] = ((double)y) / 100.0;
     df0:	ee86 5b04 	vdiv.f64	d5, d6, d4
    xyz[2] = ((double)z) / 100.0;
     df4:	ee87 6b04 	vdiv.f64	d6, d7, d4
    xyz[0] = ((double)x) / 100.0;
     df8:	ed84 3b00 	vstr	d3, [r4]
    xyz[1] = ((double)y) / 100.0;
     dfc:	ed84 5b02 	vstr	d5, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
     e00:	ed84 6b04 	vstr	d6, [r4, #16]
}
     e04:	4620      	mov	r0, r4
     e06:	b007      	add	sp, #28
     e08:	bd30      	pop	{r4, r5, pc}
    xyz[0] = ((double)x) / 16.0;
     e0a:	ee07 0a90 	vmov	s15, r0
}
     e0e:	4620      	mov	r0, r4
    xyz[0] = ((double)x) / 16.0;
     e10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    xyz[1] = ((double)y) / 16.0;
     e14:	ee07 1a90 	vmov	s15, r1
     e18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    xyz[2] = ((double)z) / 16.0;
     e1c:	ee07 2a90 	vmov	s15, r2
    xyz[0] = ((double)x) / 16.0;
     e20:	ed9f 4b0b 	vldr	d4, [pc, #44]	; e50 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)+0xf0>
    xyz[2] = ((double)z) / 16.0;
     e24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    xyz[0] = ((double)x) / 16.0;
     e28:	ee25 5b04 	vmul.f64	d5, d5, d4
    xyz[1] = ((double)y) / 16.0;
     e2c:	ee26 6b04 	vmul.f64	d6, d6, d4
    xyz[2] = ((double)z) / 16.0;
     e30:	ee27 7b04 	vmul.f64	d7, d7, d4
    xyz[0] = ((double)x) / 16.0;
     e34:	ed84 5b00 	vstr	d5, [r4]
    xyz[1] = ((double)y) / 16.0;
     e38:	ed84 6b02 	vstr	d6, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
     e3c:	ed84 7b04 	vstr	d7, [r4, #16]
}
     e40:	b007      	add	sp, #28
     e42:	bd30      	pop	{r4, r5, pc}
     e44:	f3af 8000 	nop.w
     e48:	00000000 	.word	0x00000000
     e4c:	40590000 	.word	0x40590000
     e50:	00000000 	.word	0x00000000
     e54:	3fb00000 	.word	0x3fb00000

00000e58 <Adafruit_BNO055::getEvent(sensors_event_t*)>:
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
     e58:	b570      	push	{r4, r5, r6, lr}
     e5a:	460c      	mov	r4, r1
     e5c:	b086      	sub	sp, #24
     e5e:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
     e60:	2220      	movs	r2, #32
     e62:	2100      	movs	r1, #0
     e64:	1d20      	adds	r0, r4, #4
     e66:	f00d f87d 	bl	df64 <memset>
  event->version = sizeof(sensors_event_t);
     e6a:	2224      	movs	r2, #36	; 0x24
     e6c:	4b10      	ldr	r3, [pc, #64]	; (eb0 <Adafruit_BNO055::getEvent(sensors_event_t*)+0x58>)
  event->type = SENSOR_TYPE_ORIENTATION;
     e6e:	2603      	movs	r6, #3
  event->version = sizeof(sensors_event_t);
     e70:	6022      	str	r2, [r4, #0]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     e72:	4668      	mov	r0, sp
  event->sensor_id = _sensorID;
     e74:	68aa      	ldr	r2, [r5, #8]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     e76:	4629      	mov	r1, r5
     e78:	681b      	ldr	r3, [r3, #0]
  event->sensor_id = _sensorID;
     e7a:	6062      	str	r2, [r4, #4]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     e7c:	221a      	movs	r2, #26
  event->type = SENSOR_TYPE_ORIENTATION;
     e7e:	60a6      	str	r6, [r4, #8]
  event->timestamp = millis();
     e80:	6123      	str	r3, [r4, #16]
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
     e82:	f7ff ff6d 	bl	d60 <Adafruit_BNO055::getVector(Adafruit_BNO055::adafruit_vector_type_t)>
}
     e86:	2001      	movs	r0, #1
  event->orientation.x = euler.x();
     e88:	ed9d 5b00 	vldr	d5, [sp]
  event->orientation.y = euler.y();
     e8c:	ed9d 6b02 	vldr	d6, [sp, #8]
  event->orientation.z = euler.z();
     e90:	ed9d 7b04 	vldr	d7, [sp, #16]
  event->orientation.x = euler.x();
     e94:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  event->orientation.y = euler.y();
     e98:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  event->orientation.z = euler.z();
     e9c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  event->orientation.x = euler.x();
     ea0:	ed84 5a05 	vstr	s10, [r4, #20]
  event->orientation.y = euler.y();
     ea4:	ed84 6a06 	vstr	s12, [r4, #24]
  event->orientation.z = euler.z();
     ea8:	ed84 7a07 	vstr	s14, [r4, #28]
}
     eac:	b006      	add	sp, #24
     eae:	bd70      	pop	{r4, r5, r6, pc}
     eb0:	20004bc4 	.word	0x20004bc4

00000eb4 <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     eb4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     eb8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     ebc:	429a      	cmp	r2, r3
     ebe:	d905      	bls.n	ecc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     ec0:	1c5a      	adds	r2, r3, #1
     ec2:	4403      	add	r3, r0
     ec4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     ec8:	7e98      	ldrb	r0, [r3, #26]
     eca:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     ecc:	f04f 30ff 	mov.w	r0, #4294967295
	}
     ed0:	4770      	bx	lr
     ed2:	bf00      	nop

00000ed4 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
     ed4:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
     ed8:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
     eda:	2220      	movs	r2, #32
  _addr = addr;
     edc:	7001      	strb	r1, [r0, #0]
  _begun = false;
     ede:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
     ee2:	60c2      	str	r2, [r0, #12]
}
     ee4:	4770      	bx	lr
     ee6:	bf00      	nop

00000ee8 <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
     ee8:	b538      	push	{r3, r4, r5, lr}
     eea:	4604      	mov	r4, r0
  _wire->begin();
     eec:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
     eee:	460d      	mov	r5, r1
  _wire->begin();
     ef0:	f010 fd5e 	bl	119b0 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
     ef4:	2101      	movs	r1, #1
     ef6:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
     ef8:	b90d      	cbnz	r5, efe <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
     efa:	4608      	mov	r0, r1
}
     efc:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
     efe:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
     f00:	6862      	ldr	r2, [r4, #4]
     f02:	4088      	lsls	r0, r1
		transmitting = 1;
     f04:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
     f08:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
     f0c:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
     f10:	6860      	ldr	r0, [r4, #4]
     f12:	f000 fa13 	bl	133c <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
     f16:	fab0 f080 	clz	r0, r0
     f1a:	0940      	lsrs	r0, r0, #5
}
     f1c:	bd38      	pop	{r3, r4, r5, pc}
     f1e:	bf00      	nop

00000f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
     f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f24:	9f07      	ldr	r7, [sp, #28]
     f26:	4615      	mov	r5, r2
     f28:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
     f2a:	68c3      	ldr	r3, [r0, #12]
     f2c:	443a      	add	r2, r7
     f2e:	429a      	cmp	r2, r3
     f30:	d816      	bhi.n	f60 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
     f32:	7802      	ldrb	r2, [r0, #0]
     f34:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
     f36:	6843      	ldr	r3, [r0, #4]
     f38:	460e      	mov	r6, r1
     f3a:	0052      	lsls	r2, r2, #1
     f3c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
     f40:	2201      	movs	r2, #1
     f42:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
     f46:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
     f4a:	b167      	cbz	r7, f66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
     f4c:	9b06      	ldr	r3, [sp, #24]
     f4e:	b153      	cbz	r3, f66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
     f50:	6840      	ldr	r0, [r0, #4]
     f52:	463a      	mov	r2, r7
     f54:	9906      	ldr	r1, [sp, #24]
     f56:	6803      	ldr	r3, [r0, #0]
     f58:	685b      	ldr	r3, [r3, #4]
     f5a:	4798      	blx	r3
     f5c:	4287      	cmp	r7, r0
     f5e:	d002      	beq.n	f66 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
     f60:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
     f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
     f66:	6860      	ldr	r0, [r4, #4]
     f68:	4631      	mov	r1, r6
     f6a:	462a      	mov	r2, r5
     f6c:	6803      	ldr	r3, [r0, #0]
     f6e:	685b      	ldr	r3, [r3, #4]
     f70:	4798      	blx	r3
     f72:	4285      	cmp	r5, r0
     f74:	d1f4      	bne.n	f60 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
     f76:	4641      	mov	r1, r8
     f78:	6860      	ldr	r0, [r4, #4]
     f7a:	f000 f9df 	bl	133c <TwoWire::endTransmission(unsigned char)>
     f7e:	fab0 f080 	clz	r0, r0
     f82:	0940      	lsrs	r0, r0, #5
}
     f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000f88 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
     f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f8c:	4615      	mov	r5, r2
     f8e:	4606      	mov	r6, r0
     f90:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
     f92:	b2d2      	uxtb	r2, r2
     f94:	7801      	ldrb	r1, [r0, #0]
     f96:	6840      	ldr	r0, [r0, #4]
     f98:	f000 fa50 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
     f9c:	4285      	cmp	r5, r0
     f9e:	d124      	bne.n	fea <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
     fa0:	b305      	cbz	r5, fe4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
     fa2:	2400      	movs	r4, #0
     fa4:	f8df 904c 	ldr.w	r9, [pc, #76]	; ff4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
     fa8:	46a0      	mov	r8, r4
     faa:	e013      	b.n	fd4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
     fac:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
     fb0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     fb4:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
     fb6:	f10c 0201 	add.w	r2, ip, #1
     fba:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
     fbc:	d918      	bls.n	ff0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
     fbe:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     fc2:	f89c 301a 	ldrb.w	r3, [ip, #26]
     fc6:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
     fc8:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
     fcc:	b2a4      	uxth	r4, r4
     fce:	42a5      	cmp	r5, r4
     fd0:	46a0      	mov	r8, r4
     fd2:	d907      	bls.n	fe4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
     fd4:	6870      	ldr	r0, [r6, #4]
     fd6:	6802      	ldr	r2, [r0, #0]
     fd8:	6952      	ldr	r2, [r2, #20]
     fda:	454a      	cmp	r2, r9
     fdc:	d0e6      	beq.n	fac <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
     fde:	4790      	blx	r2
     fe0:	b2c3      	uxtb	r3, r0
     fe2:	e7f0      	b.n	fc6 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
     fe4:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
     fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
     fea:	2000      	movs	r0, #0
}
     fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ff0:	23ff      	movs	r3, #255	; 0xff
     ff2:	e7e8      	b.n	fc6 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
     ff4:	00000eb5 	.word	0x00000eb5

00000ff8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
     ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
     ffc:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
     ffe:	b082      	sub	sp, #8
    1000:	461f      	mov	r7, r3
    1002:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    1004:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    1008:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    100a:	e9cd 4400 	strd	r4, r4, [sp]
    100e:	f7ff ff87 	bl	f20 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    1012:	b928      	cbnz	r0, 1020 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    1014:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    1018:	4640      	mov	r0, r8
    101a:	b002      	add	sp, #8
    101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    1020:	4680      	mov	r8, r0
    1022:	b915      	cbnz	r5, 102a <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    1024:	e7f8      	b.n	1018 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    1026:	42a5      	cmp	r5, r4
    1028:	d9f6      	bls.n	1018 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    102a:	1b2a      	subs	r2, r5, r4
    102c:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    102e:	1939      	adds	r1, r7, r4
    1030:	4630      	mov	r0, r6
    1032:	429a      	cmp	r2, r3
    1034:	bf28      	it	cs
    1036:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1038:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    103a:	42a3      	cmp	r3, r4
    pos += read_len;
    103c:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    103e:	bf8c      	ite	hi
    1040:	2300      	movhi	r3, #0
    1042:	2301      	movls	r3, #1
    1044:	f7ff ffa0 	bl	f88 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    1048:	2800      	cmp	r0, #0
    104a:	d1ec      	bne.n	1026 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    104c:	e7e2      	b.n	1014 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    104e:	bf00      	nop

00001050 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    1050:	b430      	push	{r4, r5}
    1052:	b082      	sub	sp, #8
    1054:	460c      	mov	r4, r1
    1056:	ab02      	add	r3, sp, #8
    1058:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    105c:	7cc3      	ldrb	r3, [r0, #19]
    105e:	2b00      	cmp	r3, #0
    1060:	d030      	beq.n	10c4 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1062:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1064:	7cc3      	ldrb	r3, [r0, #19]
    1066:	07da      	lsls	r2, r3, #31
    1068:	d508      	bpl.n	107c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    106a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    106e:	6945      	ldr	r5, [r0, #20]
    1070:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    1074:	402a      	ands	r2, r5
    1076:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1078:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    107c:	079d      	lsls	r5, r3, #30
    107e:	d508      	bpl.n	1092 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1080:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1084:	6985      	ldr	r5, [r0, #24]
    1086:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    108a:	402a      	ands	r2, r5
    108c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    108e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    1092:	0759      	lsls	r1, r3, #29
    1094:	d508      	bpl.n	10a8 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1096:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    109a:	69c5      	ldr	r5, [r0, #28]
    109c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    10a0:	402a      	ands	r2, r5
    10a2:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    10a4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    10a8:	071a      	lsls	r2, r3, #28
    10aa:	d508      	bpl.n	10be <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    10ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    10b0:	6a05      	ldr	r5, [r0, #32]
    10b2:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    10b6:	402a      	ands	r2, r5
    10b8:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    10ba:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    10be:	06db      	lsls	r3, r3, #27
    10c0:	d42f      	bmi.n	1122 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    10c2:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    10c4:	6883      	ldr	r3, [r0, #8]
    10c6:	429c      	cmp	r4, r3
    10c8:	d035      	beq.n	1136 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    10ca:	4b22      	ldr	r3, [pc, #136]	; (1154 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    10cc:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    10ce:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    10d0:	4a21      	ldr	r2, [pc, #132]	; (1158 <SPIClass::beginTransaction(SPISettings)+0x108>)
    10d2:	f3c3 1101 	ubfx	r1, r3, #4, #2
    10d6:	f3c3 6382 	ubfx	r3, r3, #26, #3
    10da:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    10de:	3301      	adds	r3, #1
    10e0:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    10e4:	b1cc      	cbz	r4, 111a <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    10e6:	4294      	cmp	r4, r2
    10e8:	d827      	bhi.n	113a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    10ea:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    10ee:	fbb2 f2f3 	udiv	r2, r2, r3
    10f2:	4294      	cmp	r4, r2
    10f4:	d32c      	bcc.n	1150 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    10f6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    10fa:	d320      	bcc.n	113e <SPIClass::beginTransaction(SPISettings)+0xee>
    10fc:	4c17      	ldr	r4, [pc, #92]	; (115c <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    10fe:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1100:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1102:	2203      	movs	r2, #3
		port().CR = 0;
    1104:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1106:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1108:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    110a:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    110c:	2201      	movs	r2, #1
		port().CCR = _ccr;
    110e:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1110:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1112:	611a      	str	r2, [r3, #16]
	}
    1114:	b002      	add	sp, #8
    1116:	bc30      	pop	{r4, r5}
    1118:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    111a:	4299      	cmp	r1, r3
    111c:	d3ef      	bcc.n	10fe <SPIClass::beginTransaction(SPISettings)+0xae>
    111e:	1c53      	adds	r3, r2, #1
    1120:	e7e9      	b.n	10f6 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1122:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1126:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1128:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    112c:	400b      	ands	r3, r1
    112e:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1130:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1134:	e7c5      	b.n	10c2 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1136:	68c4      	ldr	r4, [r0, #12]
    1138:	e7e2      	b.n	1100 <SPIClass::beginTransaction(SPISettings)+0xb0>
    113a:	2400      	movs	r4, #0
    113c:	e7df      	b.n	10fe <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    113e:	2b02      	cmp	r3, #2
    1140:	d9fb      	bls.n	113a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1142:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1144:	085a      	lsrs	r2, r3, #1
    1146:	0214      	lsls	r4, r2, #8
    1148:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    114c:	431c      	orrs	r4, r3
    114e:	e7d6      	b.n	10fe <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1150:	461a      	mov	r2, r3
    1152:	e7e4      	b.n	111e <SPIClass::beginTransaction(SPISettings)+0xce>
    1154:	400fc000 	.word	0x400fc000
    1158:	20002b80 	.word	0x20002b80
    115c:	007f7fff 	.word	0x007f7fff

00001160 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    1160:	2000      	movs	r0, #0
    1162:	4770      	bx	lr

00001164 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    1164:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1168:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    116c:	1a10      	subs	r0, r2, r0
    116e:	4770      	bx	lr

00001170 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1170:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1174:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1178:	429a      	cmp	r2, r3
    117a:	d902      	bls.n	1182 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    117c:	4418      	add	r0, r3
    117e:	7e80      	ldrb	r0, [r0, #26]
    1180:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1182:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1186:	4770      	bx	lr

00001188 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    1188:	4770      	bx	lr
    118a:	bf00      	nop

0000118c <TwoWire::write(unsigned char)>:
{
    118c:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    118e:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    1192:	b178      	cbz	r0, 11b4 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    1194:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    1198:	2a88      	cmp	r2, #136	; 0x88
    119a:	d903      	bls.n	11a4 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    119c:	2201      	movs	r2, #1
			return 0;
    119e:	2000      	movs	r0, #0
    11a0:	605a      	str	r2, [r3, #4]
    11a2:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    11a4:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    11a8:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    11aa:	441a      	add	r2, r3
    11ac:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    11b0:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    11b4:	4770      	bx	lr
    11b6:	bf00      	nop

000011b8 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    11b8:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    11ba:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    11be:	b90c      	cbnz	r4, 11c4 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    11c0:	4620      	mov	r0, r4
    11c2:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    11c4:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    11c8:	4605      	mov	r5, r0
    11ca:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    11ce:	42a2      	cmp	r2, r4
    11d0:	d80d      	bhi.n	11ee <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    11d2:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    11d4:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    11d8:	4622      	mov	r2, r4
    11da:	4418      	add	r0, r3
    11dc:	f009 fd26 	bl	ac2c <memcpy>
		txBufferLength += quantity;
    11e0:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    11e4:	4620      	mov	r0, r4
		txBufferLength += quantity;
    11e6:	4423      	add	r3, r4
    11e8:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    11ec:	bd38      	pop	{r3, r4, r5, pc}
    11ee:	2201      	movs	r2, #1
    11f0:	6042      	str	r2, [r0, #4]
    11f2:	e7ef      	b.n	11d4 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000011f4 <TwoWire::force_clock()>:
{
    11f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    11f8:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    11fc:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    11fe:	7e01      	ldrb	r1, [r0, #24]
{
    1200:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    1202:	7e43      	ldrb	r3, [r0, #25]
{
    1204:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    1206:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    120a:	4a38      	ldr	r2, [pc, #224]	; (12ec <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    120c:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1210:	4f37      	ldr	r7, [pc, #220]	; (12f0 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    1212:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    1214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    1218:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    121c:	0109      	lsls	r1, r1, #4
    121e:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    1220:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    1224:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    1228:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    122c:	011b      	lsls	r3, r3, #4
    122e:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    1230:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    1232:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    1236:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    123a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    123e:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    1240:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    1242:	492c      	ldr	r1, [pc, #176]	; (12f4 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    1244:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    1246:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    124a:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    124c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    1250:	686b      	ldr	r3, [r5, #4]
    1252:	4333      	orrs	r3, r6
    1254:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1256:	4b28      	ldr	r3, [pc, #160]	; (12f8 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1258:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    125a:	683a      	ldr	r2, [r7, #0]
    125c:	fba3 3202 	umull	r3, r2, r3, r2
    1260:	0c92      	lsrs	r2, r2, #18
    1262:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1266:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1268:	684b      	ldr	r3, [r1, #4]
    126a:	1b1b      	subs	r3, r3, r4
    126c:	429a      	cmp	r2, r3
    126e:	d8fb      	bhi.n	1268 <TwoWire::force_clock()+0x74>
    1270:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    1274:	4a1f      	ldr	r2, [pc, #124]	; (12f4 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1276:	f8df e080 	ldr.w	lr, [pc, #128]	; 12f8 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    127a:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    127e:	4203      	tst	r3, r0
    1280:	d002      	beq.n	1288 <TwoWire::force_clock()+0x94>
    1282:	68ab      	ldr	r3, [r5, #8]
    1284:	4233      	tst	r3, r6
    1286:	d12f      	bne.n	12e8 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    1288:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    128c:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    128e:	6839      	ldr	r1, [r7, #0]
    1290:	fbae 3101 	umull	r3, r1, lr, r1
    1294:	0c89      	lsrs	r1, r1, #18
    1296:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    129a:	6853      	ldr	r3, [r2, #4]
    129c:	1b1b      	subs	r3, r3, r4
    129e:	4299      	cmp	r1, r3
    12a0:	d8fb      	bhi.n	129a <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    12a2:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    12a6:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    12a8:	6839      	ldr	r1, [r7, #0]
    12aa:	fbae 3101 	umull	r3, r1, lr, r1
    12ae:	0c89      	lsrs	r1, r1, #18
    12b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    12b4:	6853      	ldr	r3, [r2, #4]
    12b6:	1b1b      	subs	r3, r3, r4
    12b8:	4299      	cmp	r1, r3
    12ba:	d8fb      	bhi.n	12b4 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    12bc:	f1bc 0c01 	subs.w	ip, ip, #1
    12c0:	d1db      	bne.n	127a <TwoWire::force_clock()+0x86>
	bool ret = false;
    12c2:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    12c4:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    12c8:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    12ca:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    12ce:	68db      	ldr	r3, [r3, #12]
    12d0:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    12d4:	f899 3019 	ldrb.w	r3, [r9, #25]
    12d8:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    12dc:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    12e0:	6013      	str	r3, [r2, #0]
}
    12e2:	b003      	add	sp, #12
    12e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    12e8:	2001      	movs	r0, #1
    12ea:	e7eb      	b.n	12c4 <TwoWire::force_clock()+0xd0>
    12ec:	20002e18 	.word	0x20002e18
    12f0:	200032c4 	.word	0x200032c4
    12f4:	e0001000 	.word	0xe0001000
    12f8:	431bde83 	.word	0x431bde83

000012fc <TwoWire::wait_idle()>:
	return systick_millis_count;
    12fc:	4a0e      	ldr	r2, [pc, #56]	; (1338 <TwoWire::wait_idle()+0x3c>)
{
    12fe:	b510      	push	{r4, lr}
    1300:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1302:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    1304:	e005      	b.n	1312 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    1306:	01db      	lsls	r3, r3, #7
    1308:	d407      	bmi.n	131a <TwoWire::wait_idle()+0x1e>
    130a:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    130c:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    130e:	2b10      	cmp	r3, #16
    1310:	d808      	bhi.n	1324 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    1312:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    1314:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    1318:	d1f5      	bne.n	1306 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    131a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    131e:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    1320:	6163      	str	r3, [r4, #20]
}
    1322:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    1324:	f7ff ff66 	bl	11f4 <TwoWire::force_clock()>
    1328:	2800      	cmp	r0, #0
    132a:	d0fa      	beq.n	1322 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    132c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    1330:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    1332:	6163      	str	r3, [r4, #20]
	return true;
    1334:	e7f5      	b.n	1322 <TwoWire::wait_idle()+0x26>
    1336:	bf00      	nop
    1338:	20004bc4 	.word	0x20004bc4

0000133c <TwoWire::endTransmission(unsigned char)>:
{
    133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    1340:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1344:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    1346:	f1ba 0f00 	cmp.w	sl, #0
    134a:	d04f      	beq.n	13ec <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    134c:	4681      	mov	r9, r0
    134e:	4688      	mov	r8, r1
    1350:	f7ff ffd4 	bl	12fc <TwoWire::wait_idle()>
    1354:	2800      	cmp	r0, #0
    1356:	d049      	beq.n	13ec <TwoWire::endTransmission(unsigned char)+0xb0>
    1358:	4e37      	ldr	r6, [pc, #220]	; (1438 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    135a:	2400      	movs	r4, #0
    135c:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    135e:	e018      	b.n	1392 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1360:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    1362:	0519      	lsls	r1, r3, #20
    1364:	d451      	bmi.n	140a <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    1366:	04da      	lsls	r2, r3, #19
    1368:	d455      	bmi.n	1416 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    136a:	0558      	lsls	r0, r3, #21
    136c:	d459      	bmi.n	1422 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    136e:	0499      	lsls	r1, r3, #18
    1370:	d441      	bmi.n	13f6 <TwoWire::endTransmission(unsigned char)+0xba>
    1372:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    1374:	1bd2      	subs	r2, r2, r7
    1376:	2a32      	cmp	r2, #50	; 0x32
    1378:	d83d      	bhi.n	13f6 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    137a:	4554      	cmp	r4, sl
    137c:	d907      	bls.n	138e <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    137e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1380:	0752      	lsls	r2, r2, #29
    1382:	d104      	bne.n	138e <TwoWire::endTransmission(unsigned char)+0x52>
    1384:	059b      	lsls	r3, r3, #22
    1386:	d455      	bmi.n	1434 <TwoWire::endTransmission(unsigned char)+0xf8>
    1388:	f1b8 0f00 	cmp.w	r8, #0
    138c:	d052      	beq.n	1434 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    138e:	f00b f959 	bl	c644 <yield>
		if (tx_index <= tx_len) {
    1392:	4554      	cmp	r4, sl
    1394:	d8e4      	bhi.n	1360 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    1396:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    1398:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    139a:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    139e:	d4df      	bmi.n	1360 <TwoWire::endTransmission(unsigned char)+0x24>
    13a0:	e013      	b.n	13ca <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    13a2:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    13a6:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    13a8:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    13aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    13ae:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    13b0:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    13b2:	d01e      	beq.n	13f2 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    13b4:	458a      	cmp	sl, r1
				fifo_used++;
    13b6:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    13ba:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    13be:	d90e      	bls.n	13de <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    13c0:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    13c4:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    13c6:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    13c8:	d0ca      	beq.n	1360 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    13ca:	2101      	movs	r1, #1
				if (tx_index == 0) {
    13cc:	2c00      	cmp	r4, #0
    13ce:	d0e8      	beq.n	13a2 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    13d0:	4621      	mov	r1, r4
				fifo_used++;
    13d2:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    13d4:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    13d6:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    13d8:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    13dc:	d8f0      	bhi.n	13c0 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    13de:	f1b8 0f00 	cmp.w	r8, #0
    13e2:	d0bd      	beq.n	1360 <TwoWire::endTransmission(unsigned char)+0x24>
    13e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    13e8:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    13ea:	e7b9      	b.n	1360 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    13ec:	2004      	movs	r0, #4
}
    13ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    13f2:	2401      	movs	r4, #1
    13f4:	e7b4      	b.n	1360 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13f6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    13f8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    13fc:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1402:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1404:	662a      	str	r2, [r5, #96]	; 0x60
}
    1406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    140a:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    140c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    140e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1412:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    1414:	e7eb      	b.n	13ee <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1416:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    1418:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    141a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    141e:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    1420:	e7e5      	b.n	13ee <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1422:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    1424:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    1428:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    142a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    142e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    1430:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    1432:	e7dc      	b.n	13ee <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    1434:	2000      	movs	r0, #0
    1436:	e7da      	b.n	13ee <TwoWire::endTransmission(unsigned char)+0xb2>
    1438:	20004bc4 	.word	0x20004bc4

0000143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    143c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1440:	4683      	mov	fp, r0
    1442:	460c      	mov	r4, r1
    1444:	4615      	mov	r5, r2
    1446:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1448:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    144c:	f7ff ff56 	bl	12fc <TwoWire::wait_idle()>
    1450:	2800      	cmp	r0, #0
    1452:	f000 809e 	beq.w	1592 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    1456:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    1458:	2d01      	cmp	r5, #1
    145a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1598 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    145e:	f240 4601 	movw	r6, #1025	; 0x401
    1462:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    1464:	f04f 0100 	mov.w	r1, #0
    1468:	bf38      	it	cc
    146a:	2501      	movcc	r5, #1
    146c:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    1470:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1472:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    1474:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    1478:	e020      	b.n	14bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    147a:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    147e:	2b87      	cmp	r3, #135	; 0x87
    1480:	d93f      	bls.n	1502 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1482:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    1486:	0510      	lsls	r0, r2, #20
    1488:	d45a      	bmi.n	1540 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    148a:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    148e:	d170      	bne.n	1572 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    1490:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    1494:	eba3 0309 	sub.w	r3, r3, r9
    1498:	2b32      	cmp	r3, #50	; 0x32
    149a:	d86a      	bhi.n	1572 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    149c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    14a0:	42ab      	cmp	r3, r5
    14a2:	d309      	bcc.n	14b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    14a4:	2c02      	cmp	r4, #2
    14a6:	d907      	bls.n	14b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    14a8:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    14ac:	0759      	lsls	r1, r3, #29
    14ae:	d103      	bne.n	14b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    14b0:	0593      	lsls	r3, r2, #22
    14b2:	d44b      	bmi.n	154c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    14b4:	2f00      	cmp	r7, #0
    14b6:	d049      	beq.n	154c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    14b8:	f00b f8c4 	bl	c644 <yield>
		if (tx_state < 3) {
    14bc:	2c02      	cmp	r4, #2
    14be:	d8dc      	bhi.n	147a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    14c0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    14c4:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    14c8:	075b      	lsls	r3, r3, #29
    14ca:	d4d6      	bmi.n	147a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    14cc:	1e68      	subs	r0, r5, #1
    14ce:	4422      	add	r2, r4
    14d0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    14d4:	b94c      	cbnz	r4, 14ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    14d6:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    14da:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    14dc:	1b13      	subs	r3, r2, r4
    14de:	2b03      	cmp	r3, #3
    14e0:	d8cb      	bhi.n	147a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    14e2:	2c02      	cmp	r4, #2
    14e4:	d8c9      	bhi.n	147a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    14e6:	2c00      	cmp	r4, #0
    14e8:	d0f5      	beq.n	14d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    14ea:	2c01      	cmp	r4, #1
    14ec:	d037      	beq.n	155e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    14ee:	b11f      	cbz	r7, 14f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    14f0:	f44f 7300 	mov.w	r3, #512	; 0x200
    14f4:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    14f8:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    14fc:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    14fe:	2b87      	cmp	r3, #135	; 0x87
    1500:	d8bf      	bhi.n	1482 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    1502:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    1506:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    150a:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    150e:	d0b8      	beq.n	1482 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    1510:	1c59      	adds	r1, r3, #1
    1512:	449c      	add	ip, r3
    1514:	3319      	adds	r3, #25
    1516:	b2c9      	uxtb	r1, r1
    1518:	fa5f fc8c 	uxtb.w	ip, ip
    151c:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    1520:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    1524:	1c4a      	adds	r2, r1, #1
    1526:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    1528:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    152c:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    152e:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    1532:	d0a6      	beq.n	1482 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    1534:	2989      	cmp	r1, #137	; 0x89
    1536:	d1f3      	bne.n	1520 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1538:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    153c:	0510      	lsls	r0, r2, #20
    153e:	d5a4      	bpl.n	148a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1540:	f8da 3010 	ldr.w	r3, [sl, #16]
    1544:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1548:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    154c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1550:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    1554:	d106      	bne.n	1564 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    1556:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    155a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    155e:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    1562:	e7ba      	b.n	14da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1564:	f8da 3010 	ldr.w	r3, [sl, #16]
    1568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    156c:	f8ca 3010 	str.w	r3, [sl, #16]
    1570:	e7f1      	b.n	1556 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1572:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1576:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    157a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    157e:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1582:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    1586:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    158a:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    158e:	d0e2      	beq.n	1556 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    1590:	e7e8      	b.n	1564 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    1592:	2004      	movs	r0, #4
}
    1594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1598:	20004bc4 	.word	0x20004bc4

0000159c <TwoWire::isr()>:
{
    159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    159e:	6906      	ldr	r6, [r0, #16]
{
    15a0:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    15a2:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    15a6:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    15aa:	d001      	beq.n	15b0 <TwoWire::isr()+0x14>
    15ac:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    15b0:	07a8      	lsls	r0, r5, #30
    15b2:	d50b      	bpl.n	15cc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    15b4:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    15b8:	0411      	lsls	r1, r2, #16
    15ba:	d53d      	bpl.n	1638 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    15bc:	2300      	movs	r3, #0
    15be:	2101      	movs	r1, #1
    15c0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    15c4:	4423      	add	r3, r4
    15c6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    15ca:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    15cc:	07ea      	lsls	r2, r5, #31
    15ce:	d510      	bpl.n	15f2 <TwoWire::isr()+0x56>
		if (!transmitting) {
    15d0:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    15d4:	b1f7      	cbz	r7, 1614 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    15d6:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    15da:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    15de:	42bb      	cmp	r3, r7
    15e0:	d926      	bls.n	1630 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    15e2:	1c7b      	adds	r3, r7, #1
    15e4:	4427      	add	r7, r4
    15e6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    15ea:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    15ee:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    15f2:	05ab      	lsls	r3, r5, #22
    15f4:	d50d      	bpl.n	1612 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    15f6:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    15fa:	b118      	cbz	r0, 1604 <TwoWire::isr()+0x68>
    15fc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    1600:	b103      	cbz	r3, 1604 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    1602:	4798      	blx	r3
		rxBufferIndex = 0;
    1604:	2300      	movs	r3, #0
    1606:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    160a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    160e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    1612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    1614:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1618:	b103      	cbz	r3, 161c <TwoWire::isr()+0x80>
				(*user_onRequest)();
    161a:	4798      	blx	r3
			txBufferIndex = 0;
    161c:	2300      	movs	r3, #0
    161e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    1622:	2301      	movs	r3, #1
    1624:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    1628:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    162c:	42bb      	cmp	r3, r7
    162e:	d8d8      	bhi.n	15e2 <TwoWire::isr()+0x46>
			port->STDR = 0;
    1630:	2300      	movs	r3, #0
    1632:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    1636:	e7dc      	b.n	15f2 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    1638:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    163c:	2b87      	cmp	r3, #135	; 0x87
    163e:	d8c5      	bhi.n	15cc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    1640:	1c59      	adds	r1, r3, #1
    1642:	b2c9      	uxtb	r1, r1
    1644:	e7be      	b.n	15c4 <TwoWire::isr()+0x28>
    1646:	bf00      	nop

00001648 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    1648:	4801      	ldr	r0, [pc, #4]	; (1650 <lpi2c1_isr()+0x8>)
    164a:	f7ff bfa7 	b.w	159c <TwoWire::isr()>
    164e:	bf00      	nop
    1650:	20003388 	.word	0x20003388

00001654 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    1654:	4801      	ldr	r0, [pc, #4]	; (165c <lpi2c3_isr()+0x8>)
    1656:	f7ff bfa1 	b.w	159c <TwoWire::isr()>
    165a:	bf00      	nop
    165c:	200034c8 	.word	0x200034c8

00001660 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    1660:	4801      	ldr	r0, [pc, #4]	; (1668 <lpi2c4_isr()+0x8>)
    1662:	f7ff bf9b 	b.w	159c <TwoWire::isr()>
    1666:	bf00      	nop
    1668:	20003608 	.word	0x20003608

0000166c <TwoWire::setClock(unsigned long)>:
{
    166c:	b410      	push	{r4}
	if (frequency < 400000) {
    166e:	4c14      	ldr	r4, [pc, #80]	; (16c0 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    1670:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1672:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    1674:	42a1      	cmp	r1, r4
	port->MCR = 0;
    1676:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    1678:	d814      	bhi.n	16a4 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    167a:	4c12      	ldr	r4, [pc, #72]	; (16c4 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    167c:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    167e:	4912      	ldr	r1, [pc, #72]	; (16c8 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1680:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    1684:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1686:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    1688:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    168a:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    168c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    168e:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    1694:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    1696:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    1698:	6218      	str	r0, [r3, #32]
}
    169a:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    169e:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    16a0:	611a      	str	r2, [r3, #16]
}
    16a2:	4770      	bx	lr
	} else if (frequency < 1000000) {
    16a4:	4809      	ldr	r0, [pc, #36]	; (16cc <TwoWire::setClock(unsigned long)+0x60>)
    16a6:	4281      	cmp	r1, r0
    16a8:	d907      	bls.n	16ba <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    16aa:	4c09      	ldr	r4, [pc, #36]	; (16d0 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    16ac:	4809      	ldr	r0, [pc, #36]	; (16d4 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    16ae:	490a      	ldr	r1, [pc, #40]	; (16d8 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    16b0:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    16b2:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    16b4:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    16b6:	62d9      	str	r1, [r3, #44]	; 0x2c
    16b8:	e7e8      	b.n	168c <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    16ba:	4c08      	ldr	r4, [pc, #32]	; (16dc <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    16bc:	4808      	ldr	r0, [pc, #32]	; (16e0 <TwoWire::setClock(unsigned long)+0x74>)
    16be:	e7f6      	b.n	16ae <TwoWire::setClock(unsigned long)+0x42>
    16c0:	00061a7f 	.word	0x00061a7f
    16c4:	1928373b 	.word	0x1928373b
    16c8:	05050bb8 	.word	0x05050bb8
    16cc:	000f423f 	.word	0x000f423f
    16d0:	0407090a 	.word	0x0407090a
    16d4:	01010960 	.word	0x01010960
    16d8:	00057f00 	.word	0x00057f00
    16dc:	0c121a1c 	.word	0x0c121a1c
    16e0:	02020e10 	.word	0x02020e10

000016e4 <Timer::Timer(unsigned long)>:
    16e4:	4a02      	ldr	r2, [pc, #8]	; (16f0 <Timer::Timer(unsigned long)+0xc>)
    16e6:	6812      	ldr	r2, [r2, #0]
    startTime = millis();
    16e8:	e9c0 2100 	strd	r2, r1, [r0]
}
    16ec:	4770      	bx	lr
    16ee:	bf00      	nop
    16f0:	20004bc4 	.word	0x20004bc4

000016f4 <SHC_BME280::init()>:
#include "Utils.h"
#include "SHC_BME280.h"
#include "Arduino.h"
#include <BME280.h>  

Error SHC_BME280::init() {
    16f4:	b510      	push	{r4, lr}
    // BME280::Settings settings;
    // settings.i2cAddress = 0x77;
    if (!bme.begin()) {
    16f6:	f100 040c 	add.w	r4, r0, #12
    16fa:	4620      	mov	r0, r4
    16fc:	f001 fa3c 	bl	2b78 <BME280_Class::begin()>
    1700:	b1c0      	cbz	r0, 1734 <SHC_BME280::init()+0x40>
        return BME_ERROR;
    }
    bme.mode(ForcedMode); // Force one measurement to begin
    1702:	2101      	movs	r1, #1
    1704:	4620      	mov	r0, r4
    1706:	f000 fba5 	bl	1e54 <BME280_Class::mode(unsigned char)>
    bme.setOversampling(TemperatureSensor,Oversample16);
    170a:	2205      	movs	r2, #5
    170c:	2100      	movs	r1, #0
    170e:	4620      	mov	r0, r4
    1710:	f000 fa5c 	bl	1bcc <BME280_Class::setOversampling(unsigned char, unsigned char)>
    bme.setOversampling(HumiditySensor,   Oversample16);
    1714:	2205      	movs	r2, #5
    1716:	2101      	movs	r1, #1
    1718:	4620      	mov	r0, r4
    171a:	f000 fa57 	bl	1bcc <BME280_Class::setOversampling(unsigned char, unsigned char)>
    bme.setOversampling(PressureSensor,   Oversample16);
    171e:	2205      	movs	r2, #5
    1720:	2102      	movs	r1, #2
    1722:	4620      	mov	r0, r4
    1724:	f000 fa52 	bl	1bcc <BME280_Class::setOversampling(unsigned char, unsigned char)>
    bme.iirFilter(IIR16);
    1728:	2104      	movs	r1, #4
    172a:	4620      	mov	r0, r4
    172c:	f000 fb6c 	bl	1e08 <BME280_Class::iirFilter(unsigned char)>
    return NO_ERROR;
    1730:	2000      	movs	r0, #0
}
    1732:	bd10      	pop	{r4, pc}
        return BME_ERROR;
    1734:	2003      	movs	r0, #3
}
    1736:	bd10      	pop	{r4, pc}

00001738 <SHC_BME280::prefetchData()>:

bool SHC_BME280::prefetchData() {
    1738:	b530      	push	{r4, r5, lr}
    // If the BME is in sleep mode it means a measurement has been completed
    if (bme.mode() == SleepMode) {
    173a:	f100 050c 	add.w	r5, r0, #12
bool SHC_BME280::prefetchData() {
    173e:	b085      	sub	sp, #20
    1740:	4604      	mov	r4, r0
    if (bme.mode() == SleepMode) {
    1742:	21ff      	movs	r1, #255	; 0xff
    1744:	4628      	mov	r0, r5
    1746:	f000 fb85 	bl	1e54 <BME280_Class::mode(unsigned char)>
    174a:	b110      	cbz	r0, 1752 <SHC_BME280::prefetchData()+0x1a>
        altitude = 44330.0*(1.0 - pow(((float) fetchedPressure / 100.0) / 1013.25, 0.1903));
        // ...then the BME to forced mode to take another measurement
        bme.mode(ForcedMode);
        return true;
    }
    return false;
    174c:	2000      	movs	r0, #0
}
    174e:	b005      	add	sp, #20
    1750:	bd30      	pop	{r4, r5, pc}
        bme.mode(SleepMode); // Must set it to sleep mode again to avoid library trying to take another reading
    1752:	4601      	mov	r1, r0
    1754:	4628      	mov	r0, r5
    1756:	f000 fb7d 	bl	1e54 <BME280_Class::mode(unsigned char)>
        bme.getSensorData(fetchedTemperature, fetchedHumidity, fetchedPressure);
    175a:	ab03      	add	r3, sp, #12
    175c:	aa02      	add	r2, sp, #8
    175e:	a901      	add	r1, sp, #4
    1760:	4628      	mov	r0, r5
    1762:	f000 fe1b 	bl	239c <BME280_Class::getSensorData(long&, long&, long&)>
        pressure = (float)fetchedPressure / 100.0;
    1766:	eddd 7a03 	vldr	s15, [sp, #12]
        temperature = (float)fetchedTemperature / 100.0;
    176a:	ed9d 7a01 	vldr	s14, [sp, #4]
        pressure = (float)fetchedPressure / 100.0;
    176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        humidity = (float) fetchedHumidity / 100.0;
    1772:	eddd 6a02 	vldr	s13, [sp, #8]
        temperature = (float)fetchedTemperature / 100.0;
    1776:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        pressure = (float)fetchedPressure / 100.0;
    177a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 1800 <SHC_BME280::prefetchData()+0xc8>
        humidity = (float) fetchedHumidity / 100.0;
    177e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        altitude = 44330.0*(1.0 - pow(((float) fetchedPressure / 100.0) / 1013.25, 0.1903));
    1782:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
        pressure = (float)fetchedPressure / 100.0;
    1786:	ee87 4a87 	vdiv.f32	s8, s15, s14
        temperature = (float)fetchedTemperature / 100.0;
    178a:	eec6 4a07 	vdiv.f32	s9, s12, s14
        humidity = (float) fetchedHumidity / 100.0;
    178e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        altitude = 44330.0*(1.0 - pow(((float) fetchedPressure / 100.0) / 1013.25, 0.1903));
    1792:	ed9f 3b13 	vldr	d3, [pc, #76]	; 17e0 <SHC_BME280::prefetchData()+0xa8>
    1796:	ed9f 5b14 	vldr	d5, [pc, #80]	; 17e8 <SHC_BME280::prefetchData()+0xb0>
    179a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 17f0 <SHC_BME280::prefetchData()+0xb8>
    179e:	ee82 0b03 	vdiv.f64	d0, d2, d3
        pressure = (float)fetchedPressure / 100.0;
    17a2:	ed84 4a12 	vstr	s8, [r4, #72]	; 0x48
        temperature = (float)fetchedTemperature / 100.0;
    17a6:	edc4 4a13 	vstr	s9, [r4, #76]	; 0x4c
        humidity = (float) fetchedHumidity / 100.0;
    17aa:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
        altitude = 44330.0*(1.0 - pow(((float) fetchedPressure / 100.0) / 1013.25, 0.1903));
    17ae:	ee80 0b05 	vdiv.f64	d0, d0, d5
    17b2:	f00a ffc5 	bl	c740 <pow>
        bme.mode(ForcedMode);
    17b6:	2101      	movs	r1, #1
    17b8:	4628      	mov	r0, r5
        altitude = 44330.0*(1.0 - pow(((float) fetchedPressure / 100.0) / 1013.25, 0.1903));
    17ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    17be:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 17f8 <SHC_BME280::prefetchData()+0xc0>
    17c2:	ee37 7b40 	vsub.f64	d7, d7, d0
    17c6:	ee27 7b06 	vmul.f64	d7, d7, d6
    17ca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    17ce:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
        bme.mode(ForcedMode);
    17d2:	f000 fb3f 	bl	1e54 <BME280_Class::mode(unsigned char)>
        return true;
    17d6:	2001      	movs	r0, #1
}
    17d8:	b005      	add	sp, #20
    17da:	bd30      	pop	{r4, r5, pc}
    17dc:	f3af 8000 	nop.w
    17e0:	00000000 	.word	0x00000000
    17e4:	40590000 	.word	0x40590000
    17e8:	00000000 	.word	0x00000000
    17ec:	408faa00 	.word	0x408faa00
    17f0:	1a36e2eb 	.word	0x1a36e2eb
    17f4:	3fc85bc0 	.word	0x3fc85bc0
    17f8:	00000000 	.word	0x00000000
    17fc:	40e5a540 	.word	0x40e5a540
    1800:	42c80000 	.word	0x42c80000

00001804 <SHC_BME280::getPressure()>:

float SHC_BME280::getPressure() {
    return pressure;
}
    1804:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
    1808:	4770      	bx	lr
    180a:	bf00      	nop

0000180c <SHC_BME280::getTemperature()>:

float SHC_BME280::getTemperature() {
    return temperature;
}
    180c:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
    1810:	4770      	bx	lr
    1812:	bf00      	nop

00001814 <SHC_BME280::getAltitude()>:

float SHC_BME280::getAltitude() { 
    return altitude;
}
    1814:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
    1818:	4770      	bx	lr
    181a:	bf00      	nop

0000181c <SHC_BME280::getHumidity()>:

float SHC_BME280::getHumidity(){
    return humidity;
    181c:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
    1820:	4770      	bx	lr
    1822:	bf00      	nop

00001824 <BME280_Class::BME280_Class()>:
BME280_Class::BME280_Class()  {} ///< Empty & unused class constructor
    1824:	2200      	movs	r2, #0
    1826:	21ff      	movs	r1, #255	; 0xff
    1828:	8002      	strh	r2, [r0, #0]
    182a:	7202      	strb	r2, [r0, #8]
    182c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    1830:	4770      	bx	lr
    1832:	bf00      	nop

00001834 <BME280_Class::~BME280_Class()>:
BME280_Class::~BME280_Class() {} ///< Empty & unused class destructor
    1834:	4770      	bx	lr
    1836:	bf00      	nop

00001838 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]>:
      *  @brief    Template for writing to the I2C or SPI bus
      * @details   As a template it can support compile-time data type definitions
      * @param[in] addr Memory address
      * @param[in] value Data Type "T" to read
      * @return    Size of data written
      */      template<typename T>uint8_t &putData(const uint8_t addr,const T &value)
    1838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      {
        const uint8_t* bytePtr    = (const uint8_t*)&value; // Pointer to structure beginning
        static uint8_t  structSize = sizeof(T); // Number of bytes in structure
        if (_I2CAddress) // Use I2C protocol if address is non-zero
    183c:	7843      	ldrb	r3, [r0, #1]
      */      template<typename T>uint8_t &putData(const uint8_t addr,const T &value)
    183e:	b082      	sub	sp, #8
    1840:	4604      	mov	r4, r0
    1842:	4617      	mov	r7, r2
        if (_I2CAddress) // Use I2C protocol if address is non-zero
    1844:	2b00      	cmp	r3, #0
    1846:	f040 809c 	bne.w	1982 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x14a>
          for (uint8_t i=0;i<sizeof(T);i++) Wire.write(*bytePtr++); // loop for each byte to be written
          _TransmissionStatus = Wire.endTransmission();             // Close transmission
        }
        else
        {
          if (_sck==0) // if sck is zero then use hardware SPI
    184a:	78c6      	ldrb	r6, [r0, #3]
    184c:	4688      	mov	r8, r1
    184e:	2e00      	cmp	r6, #0
    1850:	d045      	beq.n	18de <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xa6>
          }
          else // Otherwise use software SPI 
          {
            int8_t i,j;
            uint8_t reply;
            for (i=0;i<structSize;i++) 
    1852:	f8df a168 	ldr.w	sl, [pc, #360]	; 19bc <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x184>
    1856:	f89a 2000 	ldrb.w	r2, [sl]
    185a:	2a00      	cmp	r2, #0
    185c:	d03c      	beq.n	18d8 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xa0>
            {
              reply = 0;                                  // reset our return byte
              digitalWrite(_cs, LOW);                     // Tell BME280 to listen up
              for (j=7; j>=0; j--) {                      // First send the address byte
                digitalWrite(_sck, LOW);                  // set the clock signal
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    185e:	fa4f f881 	sxtb.w	r8, r1
            for (i=0;i<structSize;i++) 
    1862:	4699      	mov	r9, r3
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    1864:	2601      	movs	r6, #1
              digitalWrite(_cs, LOW);                     // Tell BME280 to listen up
    1866:	2100      	movs	r1, #0
    1868:	78a0      	ldrb	r0, [r4, #2]
    186a:	2507      	movs	r5, #7
    186c:	f009 f93e 	bl	aaec <digitalWrite>
                digitalWrite(_sck, LOW);                  // set the clock signal
    1870:	2100      	movs	r1, #0
    1872:	78e0      	ldrb	r0, [r4, #3]
    1874:	f009 f93a 	bl	aaec <digitalWrite>
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    1878:	fa06 f105 	lsl.w	r1, r6, r5
    187c:	7920      	ldrb	r0, [r4, #4]
              for (j=7; j>=0; j--) {                      // First send the address byte
    187e:	3d01      	subs	r5, #1
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    1880:	ea08 0101 	and.w	r1, r8, r1
    1884:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    1888:	f009 f930 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);                 // reset the clock signal
    188c:	2101      	movs	r1, #1
    188e:	78e0      	ldrb	r0, [r4, #3]
    1890:	f009 f92c 	bl	aaec <digitalWrite>
              for (j=7; j>=0; j--) {                      // First send the address byte
    1894:	1c6a      	adds	r2, r5, #1
    1896:	d1eb      	bne.n	1870 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x38>
    1898:	2507      	movs	r5, #7
              } // of for-next each bit
              for (j=7; j>=0; j--) // Now read the data at that byte
              {
                reply <<= 1;                          // shift buffer one bit left
                digitalWrite(_sck, LOW);              // set the clock signal
    189a:	2100      	movs	r1, #0
    189c:	78e0      	ldrb	r0, [r4, #3]
    189e:	f009 f925 	bl	aaec <digitalWrite>
                digitalWrite(_mosi, *bytePtr&(1<<j)); // set the MOSI pin state
    18a2:	fa06 f305 	lsl.w	r3, r6, r5
    18a6:	7839      	ldrb	r1, [r7, #0]
              for (j=7; j>=0; j--) // Now read the data at that byte
    18a8:	3d01      	subs	r5, #1
                digitalWrite(_mosi, *bytePtr&(1<<j)); // set the MOSI pin state
    18aa:	7920      	ldrb	r0, [r4, #4]
    18ac:	4019      	ands	r1, r3
    18ae:	f009 f91d 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);             // reset the clock signal
    18b2:	2101      	movs	r1, #1
    18b4:	78e0      	ldrb	r0, [r4, #3]
    18b6:	f009 f919 	bl	aaec <digitalWrite>
              for (j=7; j>=0; j--) // Now read the data at that byte
    18ba:	1c6b      	adds	r3, r5, #1
    18bc:	d1ed      	bne.n	189a <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x62>
    18be:	f109 0901 	add.w	r9, r9, #1
              #ifdef ESP32
                static uint8_t dummyVar = *bytePtr++; // go to next byte to write (dummyVar only required for ESP32)
              #else
                *bytePtr++; // go to next byte to write
              #endif
              digitalWrite(_cs, HIGH);  // Tell BME280 to stop listening
    18c2:	2101      	movs	r1, #1
    18c4:	78a0      	ldrb	r0, [r4, #2]
                *bytePtr++; // go to next byte to write
    18c6:	3701      	adds	r7, #1
              digitalWrite(_cs, HIGH);  // Tell BME280 to stop listening
    18c8:	f009 f910 	bl	aaec <digitalWrite>
            for (i=0;i<structSize;i++) 
    18cc:	f89a 3000 	ldrb.w	r3, [sl]
    18d0:	fa4f f989 	sxtb.w	r9, r9
    18d4:	4599      	cmp	r9, r3
    18d6:	dbc6      	blt.n	1866 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x2e>
            } // of for-next each byte to be read
          } // of  if-then-else we are using hardware SPI
        } // of if-then-else we are using I2C
        return(structSize); // return number of bytes written
      } // of method putData()
    18d8:	b002      	add	sp, #8
    18da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    18de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 19c4 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x18c>
    18e2:	2307      	movs	r3, #7
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0)); // start the SPI transaction
    18e4:	4d34      	ldr	r5, [pc, #208]	; (19b8 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x180>)
    18e6:	e9cd c300 	strd	ip, r3, [sp]
    18ea:	ab02      	add	r3, sp, #8
    18ec:	4628      	mov	r0, r5
    18ee:	e913 0006 	ldmdb	r3, {r1, r2}
    18f2:	f7ff fbad 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                          // Tell BME280 to listen up
    18f6:	4631      	mov	r1, r6
    18f8:	78a0      	ldrb	r0, [r4, #2]
    18fa:	f009 f8f7 	bl	aaec <digitalWrite>
		port().TDR = data;
    18fe:	f008 017f 	and.w	r1, r8, #127	; 0x7f
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1902:	682a      	ldr	r2, [r5, #0]
		port().TDR = data;
    1904:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1906:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1908:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    190c:	d0fb      	beq.n	1906 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xce>
            for (uint8_t i=0;i<structSize;i++) SPI.transfer(*bytePtr++);     // loop for each byte to be written
    190e:	4b2b      	ldr	r3, [pc, #172]	; (19bc <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x184>)
    1910:	6f51      	ldr	r1, [r2, #116]	; 0x74
    1912:	7819      	ldrb	r1, [r3, #0]
    1914:	b151      	cbz	r1, 192c <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xf4>
    1916:	4439      	add	r1, r7
		port().TDR = data;
    1918:	f817 3b01 	ldrb.w	r3, [r7], #1
    191c:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    191e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1920:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1924:	d0fb      	beq.n	191e <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xe6>
    1926:	428f      	cmp	r7, r1
    1928:	6f53      	ldr	r3, [r2, #116]	; 0x74
    192a:	d1f5      	bne.n	1918 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xe0>
            digitalWrite(_cs, HIGH);                                         // Tell BME280 to stop listening
    192c:	2101      	movs	r1, #1
    192e:	78a0      	ldrb	r0, [r4, #2]
    1930:	f009 f8dc 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    1934:	7ceb      	ldrb	r3, [r5, #19]
    1936:	2b00      	cmp	r3, #0
    1938:	d0ce      	beq.n	18d8 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xa0>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    193a:	07df      	lsls	r7, r3, #31
    193c:	d504      	bpl.n	1948 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x110>
    193e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1940:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1944:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1948:	079e      	lsls	r6, r3, #30
    194a:	d504      	bpl.n	1956 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x11e>
    194c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    194e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1952:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1956:	075c      	lsls	r4, r3, #29
    1958:	d504      	bpl.n	1964 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x12c>
    195a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    195c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1960:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1964:	0718      	lsls	r0, r3, #28
    1966:	d504      	bpl.n	1972 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x13a>
    1968:	6b69      	ldr	r1, [r5, #52]	; 0x34
    196a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    196e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1972:	06d9      	lsls	r1, r3, #27
    1974:	d5b0      	bpl.n	18d8 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xa0>
    1976:	6baa      	ldr	r2, [r5, #56]	; 0x38
    1978:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    197c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1980:	e7aa      	b.n	18d8 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0xa0>
		txBuffer[0] = (address << 1);
    1982:	4d0f      	ldr	r5, [pc, #60]	; (19c0 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]+0x188>)
    1984:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    1986:	2601      	movs	r6, #1
		txBuffer[0] = (address << 1);
    1988:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
          Wire.write(addr);                                         // Send register address to write
    198c:	4628      	mov	r0, r5
		transmitting = 1;
    198e:	f885 6130 	strb.w	r6, [r5, #304]	; 0x130
		txBufferLength = 1;
    1992:	f885 612f 	strb.w	r6, [r5, #303]	; 0x12f
    1996:	f7ff fbf9 	bl	118c <TwoWire::write(unsigned char)>
          for (uint8_t i=0;i<sizeof(T);i++) Wire.write(*bytePtr++); // loop for each byte to be written
    199a:	7839      	ldrb	r1, [r7, #0]
    199c:	4628      	mov	r0, r5
    199e:	f7ff fbf5 	bl	118c <TwoWire::write(unsigned char)>
		return endTransmission(1);
    19a2:	4631      	mov	r1, r6
    19a4:	4628      	mov	r0, r5
    19a6:	f7ff fcc9 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission();             // Close transmission
    19aa:	3800      	subs	r0, #0
    19ac:	bf18      	it	ne
    19ae:	2001      	movne	r0, #1
    19b0:	7020      	strb	r0, [r4, #0]
      } // of method putData()
    19b2:	b002      	add	sp, #8
    19b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19b8:	200032c8 	.word	0x200032c8
    19bc:	20003d59 	.word	0x20003d59
    19c0:	20003388 	.word	0x20003388
    19c4:	0007a120 	.word	0x0007a120

000019c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>:
      template< typename T > uint8_t &getData(const uint8_t addr,T &value)
    19c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    19cc:	7843      	ldrb	r3, [r0, #1]
      template< typename T > uint8_t &getData(const uint8_t addr,T &value)
    19ce:	b083      	sub	sp, #12
    19d0:	4606      	mov	r6, r0
    19d2:	4617      	mov	r7, r2
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    19d4:	2b00      	cmp	r3, #0
    19d6:	f040 80b0 	bne.w	1b3a <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x172>
          if (_sck==0) // if sck is zero then hardware SPI
    19da:	78c4      	ldrb	r4, [r0, #3]
    19dc:	460d      	mov	r5, r1
    19de:	bb94      	cbnz	r4, 1a46 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x7e>
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    19e0:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 1bc0 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1f8>
    19e4:	2307      	movs	r3, #7
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0));  // Start the SPI transaction
    19e6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 1bc4 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1fc>
		port().TDR = data;
    19ea:	f045 0580 	orr.w	r5, r5, #128	; 0x80
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    19ee:	e9cd c300 	strd	ip, r3, [sp]
    19f2:	ab02      	add	r3, sp, #8
    19f4:	4648      	mov	r0, r9
    19f6:	e913 0006 	ldmdb	r3, {r1, r2}
    19fa:	f7ff fb29 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                           // Tell BME280 to listen up
    19fe:	4621      	mov	r1, r4
    1a00:	78b0      	ldrb	r0, [r6, #2]
    1a02:	f009 f873 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1a06:	f8d9 2000 	ldr.w	r2, [r9]
		port().TDR = data;
    1a0a:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1a0c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1a0e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1a12:	d0fb      	beq.n	1a0c <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x44>
            for (uint8_t i=0;i<structSize;i++) *bytePtr++ = SPI.transfer(0);  // loop for each byte to be read
    1a14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 1bc8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x200>
    1a18:	6f53      	ldr	r3, [r2, #116]	; 0x74
    1a1a:	f898 3000 	ldrb.w	r3, [r8]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d059      	beq.n	1ad6 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x10e>
		port().TDR = data;
    1a22:	2100      	movs	r1, #0
    1a24:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1a26:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1a28:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1a2c:	d0fb      	beq.n	1a26 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x5e>
    1a2e:	6f53      	ldr	r3, [r2, #116]	; 0x74
    1a30:	3401      	adds	r4, #1
    1a32:	f807 3b01 	strb.w	r3, [r7], #1
    1a36:	b2e4      	uxtb	r4, r4
    1a38:	f898 3000 	ldrb.w	r3, [r8]
    1a3c:	42a3      	cmp	r3, r4
    1a3e:	d94a      	bls.n	1ad6 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x10e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1a40:	f8d9 2000 	ldr.w	r2, [r9]
    1a44:	e7ee      	b.n	1a24 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x5c>
            SPI.transfer(addr | 0x80);                                        // bit 7 is high, so read a byte
    1a46:	2407      	movs	r4, #7
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    1a48:	f04f 0801 	mov.w	r8, #1
            SPI.transfer(addr | 0x80);                                        // bit 7 is high, so read a byte
    1a4c:	f041 0580 	orr.w	r5, r1, #128	; 0x80
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    1a50:	7880      	ldrb	r0, [r0, #2]
    1a52:	4619      	mov	r1, r3
    1a54:	f009 f84a 	bl	aaec <digitalWrite>
              digitalWrite(_sck, LOW);                   // set the clock signal
    1a58:	2100      	movs	r1, #0
    1a5a:	78f0      	ldrb	r0, [r6, #3]
    1a5c:	f009 f846 	bl	aaec <digitalWrite>
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    1a60:	fa08 f104 	lsl.w	r1, r8, r4
    1a64:	7930      	ldrb	r0, [r6, #4]
            for (j=7; j>=0; j--) {                       // First send the address byte
    1a66:	3c01      	subs	r4, #1
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    1a68:	4029      	ands	r1, r5
    1a6a:	f009 f83f 	bl	aaec <digitalWrite>
              digitalWrite(_sck, HIGH);                  // reset the clock signal
    1a6e:	2101      	movs	r1, #1
    1a70:	78f0      	ldrb	r0, [r6, #3]
    1a72:	f009 f83b 	bl	aaec <digitalWrite>
            for (j=7; j>=0; j--) {                       // First send the address byte
    1a76:	1c63      	adds	r3, r4, #1
    1a78:	d1ee      	bne.n	1a58 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x90>
            for (i=0;i<structSize;i++)
    1a7a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1bc8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x200>
    1a7e:	f898 3000 	ldrb.w	r3, [r8]
    1a82:	b30b      	cbz	r3, 1ac8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x100>
    1a84:	f04f 0900 	mov.w	r9, #0
              reply = 0;           // reset our return byte
    1a88:	2400      	movs	r4, #0
    1a8a:	2508      	movs	r5, #8
                digitalWrite(_sck, LOW);            // set and reset the clock signal
    1a8c:	2100      	movs	r1, #0
    1a8e:	78f0      	ldrb	r0, [r6, #3]
    1a90:	f009 f82c 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    1a94:	2101      	movs	r1, #1
    1a96:	78f0      	ldrb	r0, [r6, #3]
                reply <<= 1;                        // shift buffer one bit left
    1a98:	0064      	lsls	r4, r4, #1
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    1a9a:	f009 f827 	bl	aaec <digitalWrite>
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    1a9e:	7970      	ldrb	r0, [r6, #5]
    1aa0:	f009 f84e 	bl	ab40 <digitalRead>
              for (j=7; j>=0; j--) // Now read the data at that byte
    1aa4:	1e6b      	subs	r3, r5, #1
                reply <<= 1;                        // shift buffer one bit left
    1aa6:	b2e4      	uxtb	r4, r4
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    1aa8:	b108      	cbz	r0, 1aae <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0xe6>
    1aaa:	f044 0401 	orr.w	r4, r4, #1
              for (j=7; j>=0; j--) // Now read the data at that byte
    1aae:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    1ab2:	d1eb      	bne.n	1a8c <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0xc4>
    1ab4:	f109 0901 	add.w	r9, r9, #1
              *bytePtr++ = reply; // Add byte just read to return data
    1ab8:	f807 4b01 	strb.w	r4, [r7], #1
            for (i=0;i<structSize;i++)
    1abc:	f898 3000 	ldrb.w	r3, [r8]
    1ac0:	fa4f f989 	sxtb.w	r9, r9
    1ac4:	4599      	cmp	r9, r3
    1ac6:	dbdf      	blt.n	1a88 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0xc0>
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    1ac8:	2101      	movs	r1, #1
    1aca:	78b0      	ldrb	r0, [r6, #2]
      } // of method getData()
    1acc:	b003      	add	sp, #12
    1ace:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    1ad2:	f009 b80b 	b.w	aaec <digitalWrite>
            digitalWrite(_cs, HIGH);                                          // Tell BME280 to stop listening
    1ad6:	2101      	movs	r1, #1
    1ad8:	78b0      	ldrb	r0, [r6, #2]
    1ada:	f009 f807 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    1ade:	f899 3013 	ldrb.w	r3, [r9, #19]
    1ae2:	b33b      	cbz	r3, 1b34 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x16c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1ae4:	07dd      	lsls	r5, r3, #31
    1ae6:	d505      	bpl.n	1af4 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x12c>
    1ae8:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
    1aec:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1af0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1af4:	079c      	lsls	r4, r3, #30
    1af6:	d505      	bpl.n	1b04 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x13c>
    1af8:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    1afc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1b00:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1b04:	0758      	lsls	r0, r3, #29
    1b06:	d505      	bpl.n	1b14 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x14c>
    1b08:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    1b0c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1b10:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1b14:	0719      	lsls	r1, r3, #28
    1b16:	d505      	bpl.n	1b24 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x15c>
    1b18:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
    1b1c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1b20:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1b24:	06da      	lsls	r2, r3, #27
    1b26:	d505      	bpl.n	1b34 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x16c>
    1b28:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    1b2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1b30:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      } // of method getData()
    1b34:	b003      	add	sp, #12
    1b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		txBuffer[0] = (address << 1);
    1b3a:	4c20      	ldr	r4, [pc, #128]	; (1bbc <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1f4>)
    1b3c:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    1b3e:	2501      	movs	r5, #1
          structSize = Wire.available();                // Use the actual number of bytes
    1b40:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1bc8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x200>
		txBuffer[0] = (address << 1);
    1b44:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
          Wire.write(addr);                             // Send register address to read
    1b48:	4620      	mov	r0, r4
		transmitting = 1;
    1b4a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
    1b4e:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    1b52:	f7ff fb1b 	bl	118c <TwoWire::write(unsigned char)>
		return endTransmission(1);
    1b56:	4629      	mov	r1, r5
    1b58:	4620      	mov	r0, r4
    1b5a:	f7ff fbef 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission(); // Close transmission
    1b5e:	3800      	subs	r0, #0
		return requestFrom(address, quantity, (uint8_t)1);
    1b60:	462b      	mov	r3, r5
    1b62:	462a      	mov	r2, r5
    1b64:	bf18      	it	ne
    1b66:	2001      	movne	r0, #1
    1b68:	7871      	ldrb	r1, [r6, #1]
    1b6a:	7030      	strb	r0, [r6, #0]
    1b6c:	4620      	mov	r0, r4
    1b6e:	f7ff fc65 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    1b72:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    1b76:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
          structSize = Wire.available();                // Use the actual number of bytes
    1b7a:	1aca      	subs	r2, r1, r3
    1b7c:	b2d2      	uxtb	r2, r2
    1b7e:	f888 2000 	strb.w	r2, [r8]
          for (uint8_t i=0;i<structSize;i++) *bytePtr++ = Wire.read(); // loop for each byte to be read
    1b82:	2a00      	cmp	r2, #0
    1b84:	d0d6      	beq.n	1b34 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x16c>
    1b86:	2200      	movs	r2, #0
    1b88:	e003      	b.n	1b92 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1ca>
		if (rxBufferIndex >= rxBufferLength) return -1;
    1b8a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    1b8e:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    1b92:	4299      	cmp	r1, r3
		return rxBuffer[rxBufferIndex++];
    1b94:	f103 0101 	add.w	r1, r3, #1
    1b98:	4423      	add	r3, r4
		if (rxBufferIndex >= rxBufferLength) return -1;
    1b9a:	d90d      	bls.n	1bb8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1f0>
		return rxBuffer[rxBufferIndex++];
    1b9c:	7e9b      	ldrb	r3, [r3, #26]
    1b9e:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    1ba2:	3201      	adds	r2, #1
    1ba4:	f807 3b01 	strb.w	r3, [r7], #1
    1ba8:	f898 3000 	ldrb.w	r3, [r8]
    1bac:	b2d2      	uxtb	r2, r2
    1bae:	4293      	cmp	r3, r2
    1bb0:	d8eb      	bhi.n	1b8a <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1c2>
      } // of method getData()
    1bb2:	b003      	add	sp, #12
    1bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1bb8:	23ff      	movs	r3, #255	; 0xff
    1bba:	e7f2      	b.n	1ba2 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]+0x1da>
    1bbc:	20003388 	.word	0x20003388
    1bc0:	0007a120 	.word	0x0007a120
    1bc4:	200032c8 	.word	0x200032c8
    1bc8:	20003d56 	.word	0x20003d56

00001bcc <BME280_Class::setOversampling(unsigned char, unsigned char)>:
{
    1bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(sensor>=UnknownSensor || sampling>=UnknownOversample) return(false); // return error if out of range
    1bd0:	2902      	cmp	r1, #2
{
    1bd2:	b087      	sub	sp, #28
    1bd4:	f88d 2007 	strb.w	r2, [sp, #7]
  if(sensor>=UnknownSensor || sampling>=UnknownOversample) return(false); // return error if out of range
    1bd8:	d802      	bhi.n	1be0 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x14>
    1bda:	b2d3      	uxtb	r3, r2
    1bdc:	2b05      	cmp	r3, #5
    1bde:	d903      	bls.n	1be8 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1c>
    1be0:	2000      	movs	r0, #0
} // of method setOversampling()
    1be2:	b007      	add	sp, #28
    1be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  getData(addr,returnValue); // Read just one byte
    1be8:	f10d 0a10 	add.w	sl, sp, #16
    1bec:	468b      	mov	fp, r1
    1bee:	21f4      	movs	r1, #244	; 0xf4
    1bf0:	4604      	mov	r4, r0
    1bf2:	4652      	mov	r2, sl
            for (uint8_t i=0;i<structSize;i++) SPI.transfer(*bytePtr++);     // loop for each byte to be written
    1bf4:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1e00 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x234>
    1bf8:	f7ff fee6 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    1bfc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  uint8_t originalControl = readByte(BME280_CONTROL_REG);                 // Read the control register
    1c00:	f88d 300b 	strb.w	r3, [sp, #11]
  getData(addr,returnValue); // Read just one byte
    1c04:	4652      	mov	r2, sl
    1c06:	21f4      	movs	r1, #244	; 0xf4
    1c08:	4620      	mov	r0, r4
    1c0a:	f7ff fedd 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    1c0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  while(readByte(BME280_CONTROL_REG)!=0) putData(BME280_CONTROL_REG,0);   // Put BME280 into sleep mode
    1c12:	2b00      	cmp	r3, #0
    1c14:	f000 80c8 	beq.w	1da8 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1dc>
    1c18:	2500      	movs	r5, #0
        if (_I2CAddress) // Use I2C protocol if address is non-zero
    1c1a:	7863      	ldrb	r3, [r4, #1]
    1c1c:	9503      	str	r5, [sp, #12]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d141      	bne.n	1ca6 <BME280_Class::setOversampling(unsigned char, unsigned char)+0xda>
          if (_sck==0) // if sck is zero then use hardware SPI
    1c22:	78e5      	ldrb	r5, [r4, #3]
    1c24:	2d00      	cmp	r5, #0
    1c26:	d064      	beq.n	1cf2 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x126>
            for (i=0;i<structSize;i++) 
    1c28:	f899 2000 	ldrb.w	r2, [r9]
    1c2c:	2a00      	cmp	r2, #0
    1c2e:	d0e9      	beq.n	1c04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x38>
    1c30:	4698      	mov	r8, r3
        const uint8_t* bytePtr    = (const uint8_t*)&value; // Pointer to structure beginning
    1c32:	af03      	add	r7, sp, #12
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    1c34:	2601      	movs	r6, #1
              digitalWrite(_cs, LOW);                     // Tell BME280 to listen up
    1c36:	2100      	movs	r1, #0
    1c38:	78a0      	ldrb	r0, [r4, #2]
    1c3a:	2507      	movs	r5, #7
    1c3c:	f008 ff56 	bl	aaec <digitalWrite>
                digitalWrite(_sck, LOW);                  // set the clock signal
    1c40:	2100      	movs	r1, #0
    1c42:	78e0      	ldrb	r0, [r4, #3]
    1c44:	f008 ff52 	bl	aaec <digitalWrite>
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    1c48:	fa06 f105 	lsl.w	r1, r6, r5
    1c4c:	7920      	ldrb	r0, [r4, #4]
              for (j=7; j>=0; j--) {                      // First send the address byte
    1c4e:	3d01      	subs	r5, #1
                digitalWrite(_mosi, (addr&~0x80)&(1<<j)); // set the MOSI pin state
    1c50:	f001 0174 	and.w	r1, r1, #116	; 0x74
    1c54:	f008 ff4a 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);                 // reset the clock signal
    1c58:	2101      	movs	r1, #1
    1c5a:	78e0      	ldrb	r0, [r4, #3]
    1c5c:	f008 ff46 	bl	aaec <digitalWrite>
              for (j=7; j>=0; j--) {                      // First send the address byte
    1c60:	1c6a      	adds	r2, r5, #1
    1c62:	d1ed      	bne.n	1c40 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x74>
    1c64:	2507      	movs	r5, #7
                digitalWrite(_sck, LOW);              // set the clock signal
    1c66:	2100      	movs	r1, #0
    1c68:	78e0      	ldrb	r0, [r4, #3]
    1c6a:	f008 ff3f 	bl	aaec <digitalWrite>
                digitalWrite(_mosi, *bytePtr&(1<<j)); // set the MOSI pin state
    1c6e:	fa06 f305 	lsl.w	r3, r6, r5
    1c72:	7839      	ldrb	r1, [r7, #0]
              for (j=7; j>=0; j--) // Now read the data at that byte
    1c74:	3d01      	subs	r5, #1
                digitalWrite(_mosi, *bytePtr&(1<<j)); // set the MOSI pin state
    1c76:	7920      	ldrb	r0, [r4, #4]
    1c78:	4019      	ands	r1, r3
    1c7a:	f008 ff37 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);             // reset the clock signal
    1c7e:	2101      	movs	r1, #1
    1c80:	78e0      	ldrb	r0, [r4, #3]
    1c82:	f008 ff33 	bl	aaec <digitalWrite>
              for (j=7; j>=0; j--) // Now read the data at that byte
    1c86:	1c6b      	adds	r3, r5, #1
    1c88:	d1ed      	bne.n	1c66 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x9a>
    1c8a:	f108 0801 	add.w	r8, r8, #1
              digitalWrite(_cs, HIGH);  // Tell BME280 to stop listening
    1c8e:	2101      	movs	r1, #1
    1c90:	78a0      	ldrb	r0, [r4, #2]
                *bytePtr++; // go to next byte to write
    1c92:	3701      	adds	r7, #1
              digitalWrite(_cs, HIGH);  // Tell BME280 to stop listening
    1c94:	f008 ff2a 	bl	aaec <digitalWrite>
            for (i=0;i<structSize;i++) 
    1c98:	f899 3000 	ldrb.w	r3, [r9]
    1c9c:	fa4f f888 	sxtb.w	r8, r8
    1ca0:	4598      	cmp	r8, r3
    1ca2:	dbc8      	blt.n	1c36 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x6a>
    1ca4:	e7ae      	b.n	1c04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x38>
		txBuffer[0] = (address << 1);
    1ca6:	4e54      	ldr	r6, [pc, #336]	; (1df8 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x22c>)
    1ca8:	005b      	lsls	r3, r3, #1
          Wire.write(addr);                                         // Send register address to write
    1caa:	21f4      	movs	r1, #244	; 0xf4
        const uint8_t* bytePtr    = (const uint8_t*)&value; // Pointer to structure beginning
    1cac:	af03      	add	r7, sp, #12
    1cae:	f886 30a5 	strb.w	r3, [r6, #165]	; 0xa5
		transmitting = 1;
    1cb2:	2301      	movs	r3, #1
          Wire.write(addr);                                         // Send register address to write
    1cb4:	4630      	mov	r0, r6
    1cb6:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
		txBufferLength = 1;
    1cba:	f886 312f 	strb.w	r3, [r6, #303]	; 0x12f
    1cbe:	f7ff fa65 	bl	118c <TwoWire::write(unsigned char)>
    1cc2:	4629      	mov	r1, r5
    1cc4:	f10d 050f 	add.w	r5, sp, #15
          for (uint8_t i=0;i<sizeof(T);i++) Wire.write(*bytePtr++); // loop for each byte to be written
    1cc8:	4630      	mov	r0, r6
    1cca:	f7ff fa5f 	bl	118c <TwoWire::write(unsigned char)>
    1cce:	42af      	cmp	r7, r5
    1cd0:	d006      	beq.n	1ce0 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x114>
    1cd2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    1cd6:	4630      	mov	r0, r6
    1cd8:	f7ff fa58 	bl	118c <TwoWire::write(unsigned char)>
    1cdc:	42af      	cmp	r7, r5
    1cde:	d1f8      	bne.n	1cd2 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x106>
		return endTransmission(1);
    1ce0:	2101      	movs	r1, #1
    1ce2:	4845      	ldr	r0, [pc, #276]	; (1df8 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x22c>)
    1ce4:	f7ff fb2a 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission();             // Close transmission
    1ce8:	3800      	subs	r0, #0
    1cea:	bf18      	it	ne
    1cec:	2001      	movne	r0, #1
    1cee:	7020      	strb	r0, [r4, #0]
    1cf0:	e788      	b.n	1c04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x38>
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1cf2:	2307      	movs	r3, #7
    1cf4:	f8df c10c 	ldr.w	ip, [pc, #268]	; 1e04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x238>
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0)); // start the SPI transaction
    1cf8:	4840      	ldr	r0, [pc, #256]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1cfa:	e9cd c304 	strd	ip, r3, [sp, #16]
    1cfe:	e89a 0006 	ldmia.w	sl, {r1, r2}
    1d02:	f7ff f9a5 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                          // Tell BME280 to listen up
    1d06:	4629      	mov	r1, r5
    1d08:	78a0      	ldrb	r0, [r4, #2]
    1d0a:	f008 feef 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1d0e:	4b3b      	ldr	r3, [pc, #236]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1d10:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    1d12:	2374      	movs	r3, #116	; 0x74
    1d14:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1d16:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1d18:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1d1c:	d0fb      	beq.n	1d16 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x14a>
    1d1e:	6f53      	ldr	r3, [r2, #116]	; 0x74
            for (uint8_t i=0;i<structSize;i++) SPI.transfer(*bytePtr++);     // loop for each byte to be written
    1d20:	f899 3000 	ldrb.w	r3, [r9]
    1d24:	b173      	cbz	r3, 1d44 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x178>
    1d26:	3b01      	subs	r3, #1
    1d28:	a903      	add	r1, sp, #12
    1d2a:	fa51 f083 	uxtab	r0, r1, r3
		port().TDR = data;
    1d2e:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1d30:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1d32:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1d36:	d0fb      	beq.n	1d30 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x164>
    1d38:	4288      	cmp	r0, r1
    1d3a:	6f53      	ldr	r3, [r2, #116]	; 0x74
    1d3c:	d002      	beq.n	1d44 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x178>
    1d3e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    1d42:	e7f4      	b.n	1d2e <BME280_Class::setOversampling(unsigned char, unsigned char)+0x162>
            digitalWrite(_cs, HIGH);                                         // Tell BME280 to stop listening
    1d44:	2101      	movs	r1, #1
    1d46:	78a0      	ldrb	r0, [r4, #2]
    1d48:	f008 fed0 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    1d4c:	4a2b      	ldr	r2, [pc, #172]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1d4e:	7cd3      	ldrb	r3, [r2, #19]
    1d50:	2b00      	cmp	r3, #0
    1d52:	f43f af57 	beq.w	1c04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x38>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1d56:	07df      	lsls	r7, r3, #31
    1d58:	d504      	bpl.n	1d64 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x198>
    1d5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
    1d5c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1d60:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1d64:	079e      	lsls	r6, r3, #30
    1d66:	d505      	bpl.n	1d74 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1a8>
    1d68:	4a24      	ldr	r2, [pc, #144]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1d6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1d6c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1d70:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1d74:	075d      	lsls	r5, r3, #29
    1d76:	d505      	bpl.n	1d84 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1b8>
    1d78:	4a20      	ldr	r2, [pc, #128]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1d7a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1d7c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1d80:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1d84:	0718      	lsls	r0, r3, #28
    1d86:	d505      	bpl.n	1d94 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1c8>
    1d88:	4a1c      	ldr	r2, [pc, #112]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1d8a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    1d8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1d90:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1d94:	06d9      	lsls	r1, r3, #27
    1d96:	f57f af35 	bpl.w	1c04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x38>
    1d9a:	4b18      	ldr	r3, [pc, #96]	; (1dfc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x230>)
    1d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1d9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1da2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1da6:	e72d      	b.n	1c04 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x38>
  if(sensor==HumiditySensor) // If we have a humidity setting
    1da8:	f1bb 0f01 	cmp.w	fp, #1
    1dac:	d01d      	beq.n	1dea <BME280_Class::setOversampling(unsigned char, unsigned char)+0x21e>
      originalControl = (originalControl&B00011111)|(sampling<<5); // Update the register bits
    1dae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1db2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (sensor==TemperatureSensor) // otherwise if we have temperature
    1db6:	f1bb 0f00 	cmp.w	fp, #0
    1dba:	d00f      	beq.n	1ddc <BME280_Class::setOversampling(unsigned char, unsigned char)+0x210>
      originalControl = (originalControl&B11100011) | (sampling << 2); // Update the register bits
    1dbc:	f023 031c 	bic.w	r3, r3, #28
    1dc0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    1dc4:	f88d 300b 	strb.w	r3, [sp, #11]
  putData(BME280_CONTROL_REG,originalControl); // Write value to the register
    1dc8:	4620      	mov	r0, r4
    1dca:	f10d 020b 	add.w	r2, sp, #11
    1dce:	21f4      	movs	r1, #244	; 0xf4
    1dd0:	f7ff fd32 	bl	1838 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]>
  return(true);
    1dd4:	2001      	movs	r0, #1
} // of method setOversampling()
    1dd6:	b007      	add	sp, #28
    1dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      originalControl = (originalControl&B00011111)|(sampling<<5); // Update the register bits
    1ddc:	f003 031f 	and.w	r3, r3, #31
    1de0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    1de4:	f88d 300b 	strb.w	r3, [sp, #11]
    1de8:	e7ee      	b.n	1dc8 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1fc>
    putData(BME280_CONTROLHUMID_REG,sampling); // Update humidity register
    1dea:	f10d 0207 	add.w	r2, sp, #7
    1dee:	21f2      	movs	r1, #242	; 0xf2
    1df0:	4620      	mov	r0, r4
    1df2:	f7ff fd21 	bl	1838 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]>
    1df6:	e7e7      	b.n	1dc8 <BME280_Class::setOversampling(unsigned char, unsigned char)+0x1fc>
    1df8:	20003388 	.word	0x20003388
    1dfc:	200032c8 	.word	0x200032c8
    1e00:	20003d5a 	.word	0x20003d5a
    1e04:	0007a120 	.word	0x0007a120

00001e08 <BME280_Class::iirFilter(unsigned char)>:
{
    1e08:	b530      	push	{r4, r5, lr}
    1e0a:	b083      	sub	sp, #12
    1e0c:	460c      	mov	r4, r1
  getData(addr,returnValue); // Read just one byte
    1e0e:	21f5      	movs	r1, #245	; 0xf5
{
    1e10:	4605      	mov	r5, r0
  getData(addr,returnValue); // Read just one byte
    1e12:	f10d 0207 	add.w	r2, sp, #7
    1e16:	f7ff fdd7 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  if (iirFilterSetting==UINT8_MAX) return((returnValue>>2)&B00000111); // return the current setting
    1e1a:	2cff      	cmp	r4, #255	; 0xff
  return (returnValue);      // Return byte just read
    1e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (iirFilterSetting==UINT8_MAX) return((returnValue>>2)&B00000111); // return the current setting
    1e20:	d013      	beq.n	1e4a <BME280_Class::iirFilter(unsigned char)+0x42>
  returnValue |= (iirFilterSetting&B00000111)<<2;                      // use 3 bits of iirFilterSetting
    1e22:	00a4      	lsls	r4, r4, #2
  returnValue = returnValue&B11110001;                                 // Get control reg, mask IIR bits
    1e24:	f023 030e 	bic.w	r3, r3, #14
  putData(BME280_CONFIG_REG,returnValue);                              // Write new control register value
    1e28:	4628      	mov	r0, r5
    1e2a:	f10d 0207 	add.w	r2, sp, #7
  returnValue |= (iirFilterSetting&B00000111)<<2;                      // use 3 bits of iirFilterSetting
    1e2e:	f004 041c 	and.w	r4, r4, #28
  putData(BME280_CONFIG_REG,returnValue);                              // Write new control register value
    1e32:	21f5      	movs	r1, #245	; 0xf5
  returnValue |= (iirFilterSetting&B00000111)<<2;                      // use 3 bits of iirFilterSetting
    1e34:	431c      	orrs	r4, r3
    1e36:	f88d 4007 	strb.w	r4, [sp, #7]
  putData(BME280_CONFIG_REG,returnValue);                              // Write new control register value
    1e3a:	f7ff fcfd 	bl	1838 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]>
  returnValue = (returnValue>>2)&B00000111;                            // Extract IIR filter setting
    1e3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e42:	f3c0 0082 	ubfx	r0, r0, #2, #3
} // of method iirFilter()
    1e46:	b003      	add	sp, #12
    1e48:	bd30      	pop	{r4, r5, pc}
  if (iirFilterSetting==UINT8_MAX) return((returnValue>>2)&B00000111); // return the current setting
    1e4a:	f3c3 0082 	ubfx	r0, r3, #2, #3
} // of method iirFilter()
    1e4e:	b003      	add	sp, #12
    1e50:	bd30      	pop	{r4, r5, pc}
    1e52:	bf00      	nop

00001e54 <BME280_Class::mode(unsigned char)>:
{
    1e54:	b530      	push	{r4, r5, lr}
    1e56:	b083      	sub	sp, #12
    1e58:	460c      	mov	r4, r1
  getData(addr,returnValue); // Read just one byte
    1e5a:	21f4      	movs	r1, #244	; 0xf4
{
    1e5c:	4605      	mov	r5, r0
  getData(addr,returnValue); // Read just one byte
    1e5e:	f10d 0207 	add.w	r2, sp, #7
    1e62:	f7ff fdb1 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  if (operatingMode==UINT8_MAX) return(controlRegister&B00000011); // Return setting if no parameter
    1e66:	2cff      	cmp	r4, #255	; 0xff
  return (returnValue);      // Return byte just read
    1e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (operatingMode==UINT8_MAX) return(controlRegister&B00000011); // Return setting if no parameter
    1e6c:	d012      	beq.n	1e94 <BME280_Class::mode(unsigned char)+0x40>
  _mode = operatingMode&B00000011;                                 // Mask 2 bits in input parameter
    1e6e:	f004 0403 	and.w	r4, r4, #3
  controlRegister = (controlRegister&B11111100) | _mode;           // set the new value
    1e72:	f023 0303 	bic.w	r3, r3, #3
  putData(BME280_CONTROL_REG,controlRegister);                     // Write value back to register
    1e76:	4628      	mov	r0, r5
    1e78:	f10d 0207 	add.w	r2, sp, #7
  controlRegister = (controlRegister&B11111100) | _mode;           // set the new value
    1e7c:	4323      	orrs	r3, r4
  putData(BME280_CONTROL_REG,controlRegister);                     // Write value back to register
    1e7e:	21f4      	movs	r1, #244	; 0xf4
  _mode = operatingMode&B00000011;                                 // Mask 2 bits in input parameter
    1e80:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
  controlRegister = (controlRegister&B11111100) | _mode;           // set the new value
    1e84:	f88d 3007 	strb.w	r3, [sp, #7]
  putData(BME280_CONTROL_REG,controlRegister);                     // Write value back to register
    1e88:	f7ff fcd6 	bl	1838 <unsigned char& BME280_Class::putData<unsigned char>(unsigned char, unsigned char const&) [clone .isra.0]>
  return(_mode);
    1e8c:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
} // of method mode()
    1e90:	b003      	add	sp, #12
    1e92:	bd30      	pop	{r4, r5, pc}
  if (operatingMode==UINT8_MAX) return(controlRegister&B00000011); // Return setting if no parameter
    1e94:	f003 0003 	and.w	r0, r3, #3
} // of method mode()
    1e98:	b003      	add	sp, #12
    1e9a:	bd30      	pop	{r4, r5, pc}

00001e9c <BME280_Class::readSensors()>:
{
    1e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((_mode==ForcedMode||_mode==ForcedMode2)&&mode()==SleepMode) mode(_mode); // Force a reading if necessary
    1ea0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    1ea4:	b089      	sub	sp, #36	; 0x24
    1ea6:	4604      	mov	r4, r0
  if((_mode==ForcedMode||_mode==ForcedMode2)&&mode()==SleepMode) mode(_mode); // Force a reading if necessary
    1ea8:	3b01      	subs	r3, #1
  getData(addr,returnValue); // Read just one byte
    1eaa:	af06      	add	r7, sp, #24
  if((_mode==ForcedMode||_mode==ForcedMode2)&&mode()==SleepMode) mode(_mode); // Force a reading if necessary
    1eac:	2b01      	cmp	r3, #1
    1eae:	f240 825e 	bls.w	236e <BME280_Class::readSensors()+0x4d2>
  getData(addr,returnValue); // Read just one byte
    1eb2:	463a      	mov	r2, r7
    1eb4:	21f3      	movs	r1, #243	; 0xf3
    1eb6:	4620      	mov	r0, r4
    1eb8:	f7ff fd86 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    1ebc:	f89d 5018 	ldrb.w	r5, [sp, #24]
  while((readByte(BME280_STATUS_REG)&B00001001) != 0 );                       // wait for measurement to complete
    1ec0:	f015 0509 	ands.w	r5, r5, #9
    1ec4:	d1f5      	bne.n	1eb2 <BME280_Class::readSensors()+0x16>
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    1ec6:	7861      	ldrb	r1, [r4, #1]
    1ec8:	2900      	cmp	r1, #0
    1eca:	f040 8212 	bne.w	22f2 <BME280_Class::readSensors()+0x456>
          if (_sck==0) // if sck is zero then hardware SPI
    1ece:	78e6      	ldrb	r6, [r4, #3]
    1ed0:	2e00      	cmp	r6, #0
    1ed2:	d157      	bne.n	1f84 <BME280_Class::readSensors()+0xe8>
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1ed4:	2307      	movs	r3, #7
    1ed6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 1f80 <BME280_Class::readSensors()+0xe4>
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0));  // Start the SPI transaction
    1eda:	4d27      	ldr	r5, [pc, #156]	; (1f78 <BME280_Class::readSensors()+0xdc>)
    1edc:	e9cd c306 	strd	ip, r3, [sp, #24]
    1ee0:	4628      	mov	r0, r5
    1ee2:	e897 0006 	ldmia.w	r7, {r1, r2}
    1ee6:	f7ff f8b3 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                           // Tell BME280 to listen up
    1eea:	4631      	mov	r1, r6
    1eec:	78a0      	ldrb	r0, [r4, #2]
    1eee:	f008 fdfd 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1ef2:	6829      	ldr	r1, [r5, #0]
		port().TDR = data;
    1ef4:	23f7      	movs	r3, #247	; 0xf7
    1ef6:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1ef8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1efa:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1efe:	d0fb      	beq.n	1ef8 <BME280_Class::readSensors()+0x5c>
            for (uint8_t i=0;i<structSize;i++) *bytePtr++ = SPI.transfer(0);  // loop for each byte to be read
    1f00:	4b1e      	ldr	r3, [pc, #120]	; (1f7c <BME280_Class::readSensors()+0xe0>)
    1f02:	6f4a      	ldr	r2, [r1, #116]	; 0x74
    1f04:	781a      	ldrb	r2, [r3, #0]
    1f06:	b15a      	cbz	r2, 1f20 <BME280_Class::readSensors()+0x84>
    1f08:	443a      	add	r2, r7
		port().TDR = data;
    1f0a:	2000      	movs	r0, #0
    1f0c:	6648      	str	r0, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1f0e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1f10:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1f14:	d0fb      	beq.n	1f0e <BME280_Class::readSensors()+0x72>
    1f16:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    1f18:	f807 3b01 	strb.w	r3, [r7], #1
    1f1c:	4297      	cmp	r7, r2
    1f1e:	d1f5      	bne.n	1f0c <BME280_Class::readSensors()+0x70>
            digitalWrite(_cs, HIGH);                                          // Tell BME280 to stop listening
    1f20:	2101      	movs	r1, #1
    1f22:	78a0      	ldrb	r0, [r4, #2]
    1f24:	f008 fde2 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    1f28:	7ceb      	ldrb	r3, [r5, #19]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d06c      	beq.n	2008 <BME280_Class::readSensors()+0x16c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1f2e:	07df      	lsls	r7, r3, #31
    1f30:	d504      	bpl.n	1f3c <BME280_Class::readSensors()+0xa0>
    1f32:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1f34:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1f38:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1f3c:	079e      	lsls	r6, r3, #30
    1f3e:	d504      	bpl.n	1f4a <BME280_Class::readSensors()+0xae>
    1f40:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    1f42:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1f46:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1f4a:	0758      	lsls	r0, r3, #29
    1f4c:	d504      	bpl.n	1f58 <BME280_Class::readSensors()+0xbc>
    1f4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    1f50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1f54:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1f58:	0719      	lsls	r1, r3, #28
    1f5a:	d504      	bpl.n	1f66 <BME280_Class::readSensors()+0xca>
    1f5c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    1f5e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1f62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1f66:	06da      	lsls	r2, r3, #27
    1f68:	d54e      	bpl.n	2008 <BME280_Class::readSensors()+0x16c>
    1f6a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    1f6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1f70:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1f74:	e048      	b.n	2008 <BME280_Class::readSensors()+0x16c>
    1f76:	bf00      	nop
    1f78:	200032c8 	.word	0x200032c8
    1f7c:	20003d54 	.word	0x20003d54
    1f80:	0007a120 	.word	0x0007a120
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    1f84:	78a0      	ldrb	r0, [r4, #2]
    1f86:	2507      	movs	r5, #7
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    1f88:	2601      	movs	r6, #1
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    1f8a:	f008 fdaf 	bl	aaec <digitalWrite>
              digitalWrite(_sck, LOW);                   // set the clock signal
    1f8e:	2100      	movs	r1, #0
    1f90:	78e0      	ldrb	r0, [r4, #3]
    1f92:	f008 fdab 	bl	aaec <digitalWrite>
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    1f96:	fa06 f105 	lsl.w	r1, r6, r5
    1f9a:	7920      	ldrb	r0, [r4, #4]
            for (j=7; j>=0; j--) {                       // First send the address byte
    1f9c:	3d01      	subs	r5, #1
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    1f9e:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fa2:	f008 fda3 	bl	aaec <digitalWrite>
              digitalWrite(_sck, HIGH);                  // reset the clock signal
    1fa6:	2101      	movs	r1, #1
    1fa8:	78e0      	ldrb	r0, [r4, #3]
    1faa:	f008 fd9f 	bl	aaec <digitalWrite>
            for (j=7; j>=0; j--) {                       // First send the address byte
    1fae:	1c6b      	adds	r3, r5, #1
    1fb0:	d1ed      	bne.n	1f8e <BME280_Class::readSensors()+0xf2>
            for (i=0;i<structSize;i++)
    1fb2:	f8df 93e4 	ldr.w	r9, [pc, #996]	; 2398 <BME280_Class::readSensors()+0x4fc>
    1fb6:	f899 3000 	ldrb.w	r3, [r9]
    1fba:	b30b      	cbz	r3, 2000 <BME280_Class::readSensors()+0x164>
    1fbc:	f04f 0800 	mov.w	r8, #0
              reply = 0;           // reset our return byte
    1fc0:	2500      	movs	r5, #0
    1fc2:	2608      	movs	r6, #8
                digitalWrite(_sck, LOW);            // set and reset the clock signal
    1fc4:	2100      	movs	r1, #0
    1fc6:	78e0      	ldrb	r0, [r4, #3]
    1fc8:	f008 fd90 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    1fcc:	2101      	movs	r1, #1
    1fce:	78e0      	ldrb	r0, [r4, #3]
                reply <<= 1;                        // shift buffer one bit left
    1fd0:	006d      	lsls	r5, r5, #1
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    1fd2:	f008 fd8b 	bl	aaec <digitalWrite>
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    1fd6:	7960      	ldrb	r0, [r4, #5]
    1fd8:	f008 fdb2 	bl	ab40 <digitalRead>
              for (j=7; j>=0; j--) // Now read the data at that byte
    1fdc:	1e73      	subs	r3, r6, #1
                reply <<= 1;                        // shift buffer one bit left
    1fde:	b2ed      	uxtb	r5, r5
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    1fe0:	b108      	cbz	r0, 1fe6 <BME280_Class::readSensors()+0x14a>
    1fe2:	f045 0501 	orr.w	r5, r5, #1
              for (j=7; j>=0; j--) // Now read the data at that byte
    1fe6:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
    1fea:	d1eb      	bne.n	1fc4 <BME280_Class::readSensors()+0x128>
    1fec:	f108 0801 	add.w	r8, r8, #1
            for (i=0;i<structSize;i++)
    1ff0:	f899 3000 	ldrb.w	r3, [r9]
              *bytePtr++ = reply; // Add byte just read to return data
    1ff4:	f807 5b01 	strb.w	r5, [r7], #1
            for (i=0;i<structSize;i++)
    1ff8:	fa4f f888 	sxtb.w	r8, r8
    1ffc:	4598      	cmp	r8, r3
    1ffe:	dbdf      	blt.n	1fc0 <BME280_Class::readSensors()+0x124>
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    2000:	2101      	movs	r1, #1
    2002:	78a0      	ldrb	r0, [r4, #2]
    2004:	f008 fd72 	bl	aaec <digitalWrite>
  _Temperature = (int32_t)registerBuffer[3]<<12|(int32_t)registerBuffer[4]<<4|(int32_t)registerBuffer[5]>>4;
    2008:	f89d 101c 	ldrb.w	r1, [sp, #28]
  i = (((((int64_t)1)<<47)+i))*((int64_t)_cal_dig_P1)>>33;
    200c:	f04f 0c00 	mov.w	ip, #0
  _Temperature = (int32_t)registerBuffer[3]<<12|(int32_t)registerBuffer[4]<<4|(int32_t)registerBuffer[5]>>4;
    2010:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2014:	0109      	lsls	r1, r1, #4
  i         = ((((_Temperature>>3)-((int32_t)_cal_dig_T1 <<1)))*((int32_t)_cal_dig_T2))>>11;
    2016:	8962      	ldrh	r2, [r4, #10]
  _Temperature = (int32_t)registerBuffer[3]<<12|(int32_t)registerBuffer[4]<<4|(int32_t)registerBuffer[5]>>4;
    2018:	f89d 001d 	ldrb.w	r0, [sp, #29]
    201c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  i = (((((int64_t)1)<<47)+i))*((int64_t)_cal_dig_P1)>>33;
    2020:	f8b4 800c 	ldrh.w	r8, [r4, #12]
  j = i * i * (int64_t)_cal_dig_P6;
    2024:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
  j         = (((((_Temperature>>4)-((int32_t)_cal_dig_T1))*((_Temperature>>4)-((int32_t)_cal_dig_T1)))>>12)*((int32_t)_cal_dig_T3))>>14;
    2028:	ebc2 1311 	rsb	r3, r2, r1, lsr #4
  _Temperature = (int32_t)registerBuffer[3]<<12|(int32_t)registerBuffer[4]<<4|(int32_t)registerBuffer[5]>>4;
    202c:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    2030:	f89d 001a 	ldrb.w	r0, [sp, #26]
  j         = (((((_Temperature>>4)-((int32_t)_cal_dig_T1))*((_Temperature>>4)-((int32_t)_cal_dig_T1)))>>12)*((int32_t)_cal_dig_T3))>>14;
    2034:	fb03 f503 	mul.w	r5, r3, r3
  i         = ((((_Temperature>>3)-((int32_t)_cal_dig_T1 <<1)))*((int32_t)_cal_dig_T2))>>11;
    2038:	0052      	lsls	r2, r2, #1
    203a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    203e:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
  j         = (((((_Temperature>>4)-((int32_t)_cal_dig_T1))*((_Temperature>>4)-((int32_t)_cal_dig_T1)))>>12)*((int32_t)_cal_dig_T3))>>14;
    2042:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
    2046:	132d      	asrs	r5, r5, #12
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    2048:	9003      	str	r0, [sp, #12]
  i         = ((((_Temperature>>3)-((int32_t)_cal_dig_T1 <<1)))*((int32_t)_cal_dig_T2))>>11;
    204a:	fb02 f303 	mul.w	r3, r2, r3
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    204e:	f89d 2018 	ldrb.w	r2, [sp, #24]
  j         = (((((_Temperature>>4)-((int32_t)_cal_dig_T1))*((_Temperature>>4)-((int32_t)_cal_dig_T1)))>>12)*((int32_t)_cal_dig_T3))>>14;
    2052:	fb01 f505 	mul.w	r5, r1, r5
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    2056:	f89d 1019 	ldrb.w	r1, [sp, #25]
    205a:	9201      	str	r2, [sp, #4]
  j         = (((((_Temperature>>4)-((int32_t)_cal_dig_T1))*((_Temperature>>4)-((int32_t)_cal_dig_T1)))>>12)*((int32_t)_cal_dig_T3))>>14;
    205c:	13ad      	asrs	r5, r5, #14
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    205e:	9102      	str	r1, [sp, #8]
  i = ((i*i*(int64_t)_cal_dig_P3)>>8)+((i*(int64_t)_cal_dig_P2)<<12);
    2060:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  _tfine       = i + j;
    2064:	eb05 25e3 	add.w	r5, r5, r3, asr #11
  j = j + ((i*(int64_t)_cal_dig_P5)<<17);
    2068:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
  _Temperature = (_tfine * 5 + 128) >> 8; // In centi-degrees Celsius
    206c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2070:	f5a5 31fa 	sub.w	r1, r5, #128000	; 0x1f400
  j = j + ((i*(int64_t)_cal_dig_P5)<<17);
    2074:	9004      	str	r0, [sp, #16]
  _Temperature = (_tfine * 5 + 128) >> 8; // In centi-degrees Celsius
    2076:	3380      	adds	r3, #128	; 0x80
  j = i * i * (int64_t)_cal_dig_P6;
    2078:	fb81 ea01 	smull	lr, sl, r1, r1
  i = ((i*i*(int64_t)_cal_dig_P3)>>8)+((i*(int64_t)_cal_dig_P2)<<12);
    207c:	fb82 2601 	smull	r2, r6, r2, r1
  j = j + (((int64_t)_cal_dig_P4)<<35);
    2080:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
  _Temperature = (_tfine * 5 + 128) >> 8; // In centi-degrees Celsius
    2084:	121b      	asrs	r3, r3, #8
  _tfine       = i + j;
    2086:	62e5      	str	r5, [r4, #44]	; 0x2c
  i = ((i*i*(int64_t)_cal_dig_P3)>>8)+((i*(int64_t)_cal_dig_P2)<<12);
    2088:	0336      	lsls	r6, r6, #12
  j = j + (((int64_t)_cal_dig_P4)<<35);
    208a:	9005      	str	r0, [sp, #20]
  _Temperature = (_tfine * 5 + 128) >> 8; // In centi-degrees Celsius
    208c:	6323      	str	r3, [r4, #48]	; 0x30
  i = ((i*i*(int64_t)_cal_dig_P3)>>8)+((i*(int64_t)_cal_dig_P2)<<12);
    208e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
    2092:	ea46 5612 	orr.w	r6, r6, r2, lsr #20
    2096:	0312      	lsls	r2, r2, #12
    2098:	ea4f 7be3 	mov.w	fp, r3, asr #31
    209c:	fb03 f90a 	mul.w	r9, r3, sl
    20a0:	fb0e 990b 	mla	r9, lr, fp, r9
    20a4:	fba3 3b0e 	umull	r3, fp, r3, lr
    20a8:	44cb      	add	fp, r9
    20aa:	0a1b      	lsrs	r3, r3, #8
    20ac:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
    20b0:	189b      	adds	r3, r3, r2
    20b2:	eb46 2b2b 	adc.w	fp, r6, fp, asr #8
  i = (((((int64_t)1)<<47)+i))*((int64_t)_cal_dig_P1)>>33;
    20b6:	fba3 3208 	umull	r3, r2, r3, r8
    20ba:	f50b 4b00 	add.w	fp, fp, #32768	; 0x8000
    20be:	fb08 2b0b 	mla	fp, r8, fp, r2
    20c2:	ea4f 73eb 	mov.w	r3, fp, asr #31
    20c6:	ea4f 026b 	mov.w	r2, fp, asr #1
  if (i == 0)
    20ca:	ea53 0b6b 	orrs.w	fp, r3, fp, asr #1
    20ce:	f000 810e 	beq.w	22ee <BME280_Class::readSensors()+0x452>
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    20d2:	9803      	ldr	r0, [sp, #12]
  j = i * i * (int64_t)_cal_dig_P6;
    20d4:	fb07 fa0a 	mul.w	sl, r7, sl
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    20d8:	9e02      	ldr	r6, [sp, #8]
  j = i * i * (int64_t)_cal_dig_P6;
    20da:	ea4f 78e7 	mov.w	r8, r7, asr #31
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    20de:	0900      	lsrs	r0, r0, #4
  j = i * i * (int64_t)_cal_dig_P6;
    20e0:	fb0e a808 	mla	r8, lr, r8, sl
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    20e4:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    20e8:	9e01      	ldr	r6, [sp, #4]
  j = i * i * (int64_t)_cal_dig_P6;
    20ea:	fba7 7e0e 	umull	r7, lr, r7, lr
  _Pressure    = (int32_t)registerBuffer[0]<<12|(int32_t)registerBuffer[1]<<4|(int32_t)registerBuffer[2]>>4;
    20ee:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  j = j + ((i*(int64_t)_cal_dig_P5)<<17);
    20f2:	9e04      	ldr	r6, [sp, #16]
  j = i * i * (int64_t)_cal_dig_P6;
    20f4:	44f0      	add	r8, lr
  j = j + ((i*(int64_t)_cal_dig_P5)<<17);
    20f6:	fb86 1601 	smull	r1, r6, r6, r1
    p = 1048576 - _Pressure;
    20fa:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  j = j + ((i*(int64_t)_cal_dig_P5)<<17);
    20fe:	0476      	lsls	r6, r6, #17
    2100:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
    2104:	0449      	lsls	r1, r1, #17
    2106:	19c9      	adds	r1, r1, r7
  j = j + (((int64_t)_cal_dig_P4)<<35);
    2108:	9f05      	ldr	r7, [sp, #20]
  j = j + ((i*(int64_t)_cal_dig_P5)<<17);
    210a:	eb48 0606 	adc.w	r6, r8, r6
  j = j + (((int64_t)_cal_dig_P4)<<35);
    210e:	eb1c 0101 	adds.w	r1, ip, r1
    p = (((p<<31) - j)*3125) / i;
    2112:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  j = j + (((int64_t)_cal_dig_P4)<<35);
    2116:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    p = (((p<<31) - j)*3125) / i;
    211a:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
    211e:	07c0      	lsls	r0, r0, #31
    2120:	1a47      	subs	r7, r0, r1
    2122:	eb6c 0c06 	sbc.w	ip, ip, r6
    2126:	19f9      	adds	r1, r7, r7
    2128:	eb4c 000c 	adc.w	r0, ip, ip
    212c:	19c9      	adds	r1, r1, r7
    212e:	eb4c 0000 	adc.w	r0, ip, r0
    2132:	018e      	lsls	r6, r1, #6
    2134:	ea4f 1e80 	mov.w	lr, r0, lsl #6
    2138:	198e      	adds	r6, r1, r6
    213a:	ea4e 6e91 	orr.w	lr, lr, r1, lsr #26
    213e:	eb40 000e 	adc.w	r0, r0, lr
    2142:	0080      	lsls	r0, r0, #2
    2144:	ea40 7096 	orr.w	r0, r0, r6, lsr #30
    2148:	00b6      	lsls	r6, r6, #2
    214a:	19f6      	adds	r6, r6, r7
    214c:	eb4c 0100 	adc.w	r1, ip, r0
    2150:	00b0      	lsls	r0, r6, #2
    2152:	0089      	lsls	r1, r1, #2
    2154:	19c0      	adds	r0, r0, r7
    2156:	ea41 7196 	orr.w	r1, r1, r6, lsr #30
    215a:	eb4c 0101 	adc.w	r1, ip, r1
    215e:	f00a fe29 	bl	cdb4 <__aeabi_ldivmod>
    i = (((int64_t)_cal_dig_P9) * (p>>13) * (p>>13)) >> 25;
    2162:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    2166:	134e      	asrs	r6, r1, #13
    2168:	0b42      	lsrs	r2, r0, #13
    216a:	fb03 f706 	mul.w	r7, r3, r6
    216e:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    2172:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
    2176:	fb02 770c 	mla	r7, r2, ip, r7
    217a:	fba3 3c02 	umull	r3, ip, r3, r2
    217e:	4467      	add	r7, ip
    2180:	fb03 f606 	mul.w	r6, r3, r6
    2184:	fb02 6607 	mla	r6, r2, r7, r6
    2188:	fba3 3202 	umull	r3, r2, r3, r2
    218c:	4432      	add	r2, r6
    218e:	0e5b      	lsrs	r3, r3, #25
    2190:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p = ((p + i + j) >> 8) + (((int64_t)_cal_dig_P7)<<4);
    2194:	181b      	adds	r3, r3, r0
    2196:	eb41 6662 	adc.w	r6, r1, r2, asr #25
    j = (((int64_t)_cal_dig_P8) * p) >> 19;
    219a:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
    219e:	fb02 f101 	mul.w	r1, r2, r1
    21a2:	17d7      	asrs	r7, r2, #31
    21a4:	fb07 1100 	mla	r1, r7, r0, r1
    21a8:	fba2 2000 	umull	r2, r0, r2, r0
    21ac:	4401      	add	r1, r0
    21ae:	0cd2      	lsrs	r2, r2, #19
    21b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
    p = ((p + i + j) >> 8) + (((int64_t)_cal_dig_P7)<<4);
    21b4:	189a      	adds	r2, r3, r2
    21b6:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
    21ba:	eb46 40e1 	adc.w	r0, r6, r1, asr #19
    21be:	17d9      	asrs	r1, r3, #31
    21c0:	0a12      	lsrs	r2, r2, #8
    21c2:	0109      	lsls	r1, r1, #4
    21c4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
    21c8:	ea41 7113 	orr.w	r1, r1, r3, lsr #28
    21cc:	011b      	lsls	r3, r3, #4
    21ce:	eb13 0c02 	adds.w	ip, r3, r2
    21d2:	eb41 2120 	adc.w	r1, r1, r0, asr #8
    _Pressure = p>>8; // in pascals
    21d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    21da:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
  i = (_tfine - ((int32_t)76800));
    21de:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    21e2:	79e3      	ldrb	r3, [r4, #7]
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    21e4:	f994 0008 	ldrsb.w	r0, [r4, #8]
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    21e8:	fb83 3205 	smull	r3, r2, r3, r5
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    21ec:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
    21f0:	6361      	str	r1, [r4, #52]	; 0x34
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    21f2:	0adb      	lsrs	r3, r3, #11
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    21f4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    21f8:	12d7      	asrs	r7, r2, #11
    21fa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    21fe:	fb80 0205 	smull	r0, r2, r0, r5
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    2202:	ba49      	rev16	r1, r1
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    2204:	0a80      	lsrs	r0, r0, #10
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    2206:	f513 4300 	adds.w	r3, r3, #32768	; 0x8000
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    220a:	b289      	uxth	r1, r1
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    220c:	ea40 5082 	orr.w	r0, r0, r2, lsl #22
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    2210:	f147 0700 	adc.w	r7, r7, #0
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    2214:	1292      	asrs	r2, r2, #10
    2216:	fb03 f202 	mul.w	r2, r3, r2
    221a:	fb00 2207 	mla	r2, r0, r7, r2
    221e:	fba3 3000 	umull	r3, r0, r3, r0
    2222:	4402      	add	r2, r0
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    2224:	0a9b      	lsrs	r3, r3, #10
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    2226:	17f0      	asrs	r0, r6, #31
      (((i*((int32_t)_cal_dig_H3))>>11)+((int32_t)32768)))>>10)+
    2228:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
    222c:	1292      	asrs	r2, r2, #10
    222e:	f513 1300 	adds.w	r3, r3, #2097152	; 0x200000
    2232:	f142 0200 	adc.w	r2, r2, #0
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    2236:	fb03 f000 	mul.w	r0, r3, r0
    223a:	fb06 0002 	mla	r0, r6, r2, r0
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    223e:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    2242:	fba3 3606 	umull	r3, r6, r3, r6
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    2246:	0512      	lsls	r2, r2, #20
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    2248:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    224c:	ebc2 3281 	rsb	r2, r2, r1, lsl #14
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    2250:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    2254:	eb40 0006 	adc.w	r0, r0, r6
    2258:	0b9b      	lsrs	r3, r3, #14
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    225a:	fb81 1505 	smull	r1, r5, r1, r5
  i = (i-(((((i>>15)*(i>>15))>>7)*((int32_t)_cal_dig_H1))>>4));
    225e:	79a6      	ldrb	r6, [r4, #6]
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    2260:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    2264:	1a51      	subs	r1, r2, r1
    2266:	ea4f 72e2 	mov.w	r2, r2, asr #31
      ((int32_t)2097152)) * ((int32_t)_cal_dig_H2) + 8192)>>14));
    226a:	ea4f 30a0 	mov.w	r0, r0, asr #14
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    226e:	eb62 0205 	sbc.w	r2, r2, r5
      *i))+((int32_t)16384))>>15)*(((((((i*((int32_t)_cal_dig_H6))>>10)*
    2272:	f511 4180 	adds.w	r1, r1, #16384	; 0x4000
    2276:	f142 0200 	adc.w	r2, r2, #0
    227a:	0bc9      	lsrs	r1, r1, #15
    227c:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
    2280:	13d2      	asrs	r2, r2, #15
  i = (((((_Humidity<<14)-(((int32_t)_cal_dig_H4)<<20)-(((int32_t)_cal_dig_H5)
    2282:	fb03 f202 	mul.w	r2, r3, r2
    2286:	fb01 2200 	mla	r2, r1, r0, r2
    228a:	fba3 1301 	umull	r1, r3, r3, r1
    228e:	441a      	add	r2, r3
  i = (i-(((((i>>15)*(i>>15))>>7)*((int32_t)_cal_dig_H1))>>4));
    2290:	0bcb      	lsrs	r3, r1, #15
    2292:	13d5      	asrs	r5, r2, #15
    2294:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    2298:	fb03 f505 	mul.w	r5, r3, r5
    229c:	fba3 3003 	umull	r3, r0, r3, r3
    22a0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    22a4:	09db      	lsrs	r3, r3, #7
    22a6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
    22aa:	11c0      	asrs	r0, r0, #7
    22ac:	fba3 3506 	umull	r3, r5, r3, r6
    22b0:	fb06 5000 	mla	r0, r6, r0, r5
    22b4:	091b      	lsrs	r3, r3, #4
    22b6:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
    22ba:	1acb      	subs	r3, r1, r3
  i = (i < 0) ? 0 : i;
    22bc:	eb62 1220 	sbc.w	r2, r2, r0, asr #4
    22c0:	2a00      	cmp	r2, #0
    22c2:	da01      	bge.n	22c8 <BME280_Class::readSensors()+0x42c>
    22c4:	2300      	movs	r3, #0
    22c6:	461a      	mov	r2, r3
  i = (i > 419430400) ? 419430400 : i;
    22c8:	4931      	ldr	r1, [pc, #196]	; (2390 <BME280_Class::readSensors()+0x4f4>)
    22ca:	428b      	cmp	r3, r1
    22cc:	f172 0100 	sbcs.w	r1, r2, #0
    22d0:	db02      	blt.n	22d8 <BME280_Class::readSensors()+0x43c>
    22d2:	f04f 53c8 	mov.w	r3, #419430400	; 0x19000000
    22d6:	2200      	movs	r2, #0
  _Humidity = (uint32_t)(i>>12)*100/1024; // in percent * 100
    22d8:	0b1b      	lsrs	r3, r3, #12
    22da:	2164      	movs	r1, #100	; 0x64
    22dc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    22e0:	fb01 f303 	mul.w	r3, r1, r3
    22e4:	0a9b      	lsrs	r3, r3, #10
    22e6:	63a3      	str	r3, [r4, #56]	; 0x38
} // of method readSensors()
    22e8:	b009      	add	sp, #36	; 0x24
    22ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _Pressure = 0; // avoid division by 0 exception
    22ee:	4661      	mov	r1, ip
    22f0:	e775      	b.n	21de <BME280_Class::readSensors()+0x342>
		txBuffer[0] = (address << 1);
    22f2:	4e28      	ldr	r6, [pc, #160]	; (2394 <BME280_Class::readSensors()+0x4f8>)
    22f4:	0049      	lsls	r1, r1, #1
		transmitting = 1;
    22f6:	f04f 0801 	mov.w	r8, #1
		txBuffer[0] = (address << 1);
    22fa:	f886 10a5 	strb.w	r1, [r6, #165]	; 0xa5
          Wire.write(addr);                             // Send register address to read
    22fe:	4630      	mov	r0, r6
    2300:	21f7      	movs	r1, #247	; 0xf7
		transmitting = 1;
    2302:	f886 8130 	strb.w	r8, [r6, #304]	; 0x130
		txBufferLength = 1;
    2306:	f886 812f 	strb.w	r8, [r6, #303]	; 0x12f
    230a:	f7fe ff3f 	bl	118c <TwoWire::write(unsigned char)>
		return endTransmission(1);
    230e:	4641      	mov	r1, r8
    2310:	4630      	mov	r0, r6
    2312:	f7ff f813 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission(); // Close transmission
    2316:	3800      	subs	r0, #0
		return requestFrom(address, quantity, (uint8_t)1);
    2318:	4643      	mov	r3, r8
    231a:	f04f 0208 	mov.w	r2, #8
    231e:	bf18      	it	ne
    2320:	2001      	movne	r0, #1
    2322:	7861      	ldrb	r1, [r4, #1]
    2324:	7020      	strb	r0, [r4, #0]
    2326:	4630      	mov	r0, r6
    2328:	f7ff f888 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    232c:	f896 e0a3 	ldrb.w	lr, [r6, #163]	; 0xa3
    2330:	f896 20a2 	ldrb.w	r2, [r6, #162]	; 0xa2
          structSize = Wire.available();                // Use the actual number of bytes
    2334:	4918      	ldr	r1, [pc, #96]	; (2398 <BME280_Class::readSensors()+0x4fc>)
    2336:	ebae 0302 	sub.w	r3, lr, r2
    233a:	b2db      	uxtb	r3, r3
    233c:	700b      	strb	r3, [r1, #0]
          for (uint8_t i=0;i<structSize;i++) *bytePtr++ = Wire.read(); // loop for each byte to be read
    233e:	2b00      	cmp	r3, #0
    2340:	f43f ae62 	beq.w	2008 <BME280_Class::readSensors()+0x16c>
    2344:	eb07 0c03 	add.w	ip, r7, r3
		if (rxBufferIndex >= rxBufferLength) return -1;
    2348:	4596      	cmp	lr, r2
		return rxBuffer[rxBufferIndex++];
    234a:	eb06 0302 	add.w	r3, r6, r2
    234e:	f102 0101 	add.w	r1, r2, #1
		if (rxBufferIndex >= rxBufferLength) return -1;
    2352:	d91b      	bls.n	238c <BME280_Class::readSensors()+0x4f0>
		return rxBuffer[rxBufferIndex++];
    2354:	7e9b      	ldrb	r3, [r3, #26]
    2356:	b2ca      	uxtb	r2, r1
    2358:	2501      	movs	r5, #1
    235a:	f807 3b01 	strb.w	r3, [r7], #1
    235e:	4567      	cmp	r7, ip
    2360:	d1f2      	bne.n	2348 <BME280_Class::readSensors()+0x4ac>
    2362:	2d00      	cmp	r5, #0
    2364:	f43f ae50 	beq.w	2008 <BME280_Class::readSensors()+0x16c>
    2368:	f886 20a2 	strb.w	r2, [r6, #162]	; 0xa2
    236c:	e64c      	b.n	2008 <BME280_Class::readSensors()+0x16c>
  getData(addr,returnValue); // Read just one byte
    236e:	21f4      	movs	r1, #244	; 0xf4
    2370:	463a      	mov	r2, r7
    2372:	f7ff fb29 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    2376:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if((_mode==ForcedMode||_mode==ForcedMode2)&&mode()==SleepMode) mode(_mode); // Force a reading if necessary
    237a:	079b      	lsls	r3, r3, #30
    237c:	f47f ad99 	bne.w	1eb2 <BME280_Class::readSensors()+0x16>
    2380:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    2384:	4620      	mov	r0, r4
    2386:	f7ff fd65 	bl	1e54 <BME280_Class::mode(unsigned char)>
    238a:	e592      	b.n	1eb2 <BME280_Class::readSensors()+0x16>
    238c:	23ff      	movs	r3, #255	; 0xff
    238e:	e7e4      	b.n	235a <BME280_Class::readSensors()+0x4be>
    2390:	19000001 	.word	0x19000001
    2394:	20003388 	.word	0x20003388
    2398:	20003d54 	.word	0x20003d54

0000239c <BME280_Class::getSensorData(long&, long&, long&)>:
* @param[out] temp  temperature value from device
* @param[out] hum   humidity value from device
* @param[out] press pressure value from device
*/
void BME280_Class::getSensorData(int32_t &temp, int32_t &hum, int32_t &press)
{
    239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    239e:	4604      	mov	r4, r0
    23a0:	461d      	mov	r5, r3
    23a2:	460f      	mov	r7, r1
    23a4:	4616      	mov	r6, r2
  readSensors();        // Get compensated data from BME280
    23a6:	f7ff fd79 	bl	1e9c <BME280_Class::readSensors()>
  temp  = _Temperature; // Copy global variable to parameter
    23aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    23ac:	603b      	str	r3, [r7, #0]
  hum   = _Humidity;
    23ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23b0:	6033      	str	r3, [r6, #0]
  press = _Pressure;
    23b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    23b4:	602b      	str	r3, [r5, #0]
} // of method getSensorData()
    23b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000023b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>:
      template< typename T > uint8_t &getData(const uint8_t addr,T &value)
    23b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    23bc:	7843      	ldrb	r3, [r0, #1]
      template< typename T > uint8_t &getData(const uint8_t addr,T &value)
    23be:	b083      	sub	sp, #12
    23c0:	4606      	mov	r6, r0
    23c2:	4617      	mov	r7, r2
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    23c4:	2b00      	cmp	r3, #0
    23c6:	f040 80b0 	bne.w	252a <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x172>
          if (_sck==0) // if sck is zero then hardware SPI
    23ca:	78c4      	ldrb	r4, [r0, #3]
    23cc:	460d      	mov	r5, r1
    23ce:	bb94      	cbnz	r4, 2436 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x7e>
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    23d0:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 25b4 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x1fc>
    23d4:	2307      	movs	r3, #7
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0));  // Start the SPI transaction
    23d6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 25b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x200>
		port().TDR = data;
    23da:	f045 0580 	orr.w	r5, r5, #128	; 0x80
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    23de:	e9cd c300 	strd	ip, r3, [sp]
    23e2:	ab02      	add	r3, sp, #8
    23e4:	4648      	mov	r0, r9
    23e6:	e913 0006 	ldmdb	r3, {r1, r2}
    23ea:	f7fe fe31 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                           // Tell BME280 to listen up
    23ee:	4621      	mov	r1, r4
    23f0:	78b0      	ldrb	r0, [r6, #2]
    23f2:	f008 fb7b 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    23f6:	f8d9 2000 	ldr.w	r2, [r9]
		port().TDR = data;
    23fa:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    23fc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    23fe:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2402:	d0fb      	beq.n	23fc <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x44>
            for (uint8_t i=0;i<structSize;i++) *bytePtr++ = SPI.transfer(0);  // loop for each byte to be read
    2404:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 25bc <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x204>
    2408:	6f53      	ldr	r3, [r2, #116]	; 0x74
    240a:	f898 3000 	ldrb.w	r3, [r8]
    240e:	2b00      	cmp	r3, #0
    2410:	d059      	beq.n	24c6 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x10e>
		port().TDR = data;
    2412:	2100      	movs	r1, #0
    2414:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2416:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2418:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    241c:	d0fb      	beq.n	2416 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x5e>
    241e:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2420:	3401      	adds	r4, #1
    2422:	f807 3b01 	strb.w	r3, [r7], #1
    2426:	b2e4      	uxtb	r4, r4
    2428:	f898 3000 	ldrb.w	r3, [r8]
    242c:	42a3      	cmp	r3, r4
    242e:	d94a      	bls.n	24c6 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x10e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2430:	f8d9 2000 	ldr.w	r2, [r9]
    2434:	e7ee      	b.n	2414 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x5c>
            SPI.transfer(addr | 0x80);                                        // bit 7 is high, so read a byte
    2436:	2407      	movs	r4, #7
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2438:	f04f 0801 	mov.w	r8, #1
            SPI.transfer(addr | 0x80);                                        // bit 7 is high, so read a byte
    243c:	f041 0580 	orr.w	r5, r1, #128	; 0x80
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    2440:	7880      	ldrb	r0, [r0, #2]
    2442:	4619      	mov	r1, r3
    2444:	f008 fb52 	bl	aaec <digitalWrite>
              digitalWrite(_sck, LOW);                   // set the clock signal
    2448:	2100      	movs	r1, #0
    244a:	78f0      	ldrb	r0, [r6, #3]
    244c:	f008 fb4e 	bl	aaec <digitalWrite>
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2450:	fa08 f104 	lsl.w	r1, r8, r4
    2454:	7930      	ldrb	r0, [r6, #4]
            for (j=7; j>=0; j--) {                       // First send the address byte
    2456:	3c01      	subs	r4, #1
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2458:	4029      	ands	r1, r5
    245a:	f008 fb47 	bl	aaec <digitalWrite>
              digitalWrite(_sck, HIGH);                  // reset the clock signal
    245e:	2101      	movs	r1, #1
    2460:	78f0      	ldrb	r0, [r6, #3]
    2462:	f008 fb43 	bl	aaec <digitalWrite>
            for (j=7; j>=0; j--) {                       // First send the address byte
    2466:	1c63      	adds	r3, r4, #1
    2468:	d1ee      	bne.n	2448 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x90>
            for (i=0;i<structSize;i++)
    246a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 25bc <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x204>
    246e:	f898 3000 	ldrb.w	r3, [r8]
    2472:	b30b      	cbz	r3, 24b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x100>
    2474:	f04f 0900 	mov.w	r9, #0
              reply = 0;           // reset our return byte
    2478:	2400      	movs	r4, #0
    247a:	2508      	movs	r5, #8
                digitalWrite(_sck, LOW);            // set and reset the clock signal
    247c:	2100      	movs	r1, #0
    247e:	78f0      	ldrb	r0, [r6, #3]
    2480:	f008 fb34 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    2484:	2101      	movs	r1, #1
    2486:	78f0      	ldrb	r0, [r6, #3]
                reply <<= 1;                        // shift buffer one bit left
    2488:	0064      	lsls	r4, r4, #1
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    248a:	f008 fb2f 	bl	aaec <digitalWrite>
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    248e:	7970      	ldrb	r0, [r6, #5]
    2490:	f008 fb56 	bl	ab40 <digitalRead>
              for (j=7; j>=0; j--) // Now read the data at that byte
    2494:	1e6b      	subs	r3, r5, #1
                reply <<= 1;                        // shift buffer one bit left
    2496:	b2e4      	uxtb	r4, r4
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    2498:	b108      	cbz	r0, 249e <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0xe6>
    249a:	f044 0401 	orr.w	r4, r4, #1
              for (j=7; j>=0; j--) // Now read the data at that byte
    249e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    24a2:	d1eb      	bne.n	247c <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0xc4>
    24a4:	f109 0901 	add.w	r9, r9, #1
              *bytePtr++ = reply; // Add byte just read to return data
    24a8:	f807 4b01 	strb.w	r4, [r7], #1
            for (i=0;i<structSize;i++)
    24ac:	f898 3000 	ldrb.w	r3, [r8]
    24b0:	fa4f f989 	sxtb.w	r9, r9
    24b4:	4599      	cmp	r9, r3
    24b6:	dbdf      	blt.n	2478 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0xc0>
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    24b8:	2101      	movs	r1, #1
    24ba:	78b0      	ldrb	r0, [r6, #2]
      } // of method getData()
    24bc:	b003      	add	sp, #12
    24be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    24c2:	f008 bb13 	b.w	aaec <digitalWrite>
            digitalWrite(_cs, HIGH);                                          // Tell BME280 to stop listening
    24c6:	2101      	movs	r1, #1
    24c8:	78b0      	ldrb	r0, [r6, #2]
    24ca:	f008 fb0f 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    24ce:	f899 3013 	ldrb.w	r3, [r9, #19]
    24d2:	b33b      	cbz	r3, 2524 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x16c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    24d4:	07dd      	lsls	r5, r3, #31
    24d6:	d505      	bpl.n	24e4 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x12c>
    24d8:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
    24dc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    24e0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    24e4:	079c      	lsls	r4, r3, #30
    24e6:	d505      	bpl.n	24f4 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x13c>
    24e8:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    24ec:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    24f0:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    24f4:	0758      	lsls	r0, r3, #29
    24f6:	d505      	bpl.n	2504 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x14c>
    24f8:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    24fc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2500:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2504:	0719      	lsls	r1, r3, #28
    2506:	d505      	bpl.n	2514 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x15c>
    2508:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
    250c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2510:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2514:	06da      	lsls	r2, r3, #27
    2516:	d505      	bpl.n	2524 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x16c>
    2518:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    251c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2520:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      } // of method getData()
    2524:	b003      	add	sp, #12
    2526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		txBuffer[0] = (address << 1);
    252a:	4c21      	ldr	r4, [pc, #132]	; (25b0 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x1f8>)
    252c:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    252e:	2501      	movs	r5, #1
          structSize = Wire.available();                // Use the actual number of bytes
    2530:	f8df 8088 	ldr.w	r8, [pc, #136]	; 25bc <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x204>
		txBuffer[0] = (address << 1);
    2534:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
          Wire.write(addr);                             // Send register address to read
    2538:	4620      	mov	r0, r4
		transmitting = 1;
    253a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
    253e:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    2542:	f7fe fe23 	bl	118c <TwoWire::write(unsigned char)>
		return endTransmission(1);
    2546:	4629      	mov	r1, r5
    2548:	4620      	mov	r0, r4
    254a:	f7fe fef7 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission(); // Close transmission
    254e:	3800      	subs	r0, #0
		return requestFrom(address, quantity, (uint8_t)1);
    2550:	462b      	mov	r3, r5
    2552:	f04f 0202 	mov.w	r2, #2
    2556:	bf18      	it	ne
    2558:	2001      	movne	r0, #1
    255a:	7871      	ldrb	r1, [r6, #1]
    255c:	7030      	strb	r0, [r6, #0]
    255e:	4620      	mov	r0, r4
    2560:	f7fe ff6c 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    2564:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    2568:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
          structSize = Wire.available();                // Use the actual number of bytes
    256c:	1aca      	subs	r2, r1, r3
    256e:	b2d2      	uxtb	r2, r2
    2570:	f888 2000 	strb.w	r2, [r8]
          for (uint8_t i=0;i<structSize;i++) *bytePtr++ = Wire.read(); // loop for each byte to be read
    2574:	2a00      	cmp	r2, #0
    2576:	d0d5      	beq.n	2524 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x16c>
    2578:	2200      	movs	r2, #0
    257a:	e003      	b.n	2584 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x1cc>
		if (rxBufferIndex >= rxBufferLength) return -1;
    257c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    2580:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    2584:	4299      	cmp	r1, r3
		return rxBuffer[rxBufferIndex++];
    2586:	f103 0101 	add.w	r1, r3, #1
    258a:	4423      	add	r3, r4
		if (rxBufferIndex >= rxBufferLength) return -1;
    258c:	d90d      	bls.n	25aa <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x1f2>
		return rxBuffer[rxBufferIndex++];
    258e:	7e9b      	ldrb	r3, [r3, #26]
    2590:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    2594:	3201      	adds	r2, #1
    2596:	f807 3b01 	strb.w	r3, [r7], #1
    259a:	f898 3000 	ldrb.w	r3, [r8]
    259e:	b2d2      	uxtb	r2, r2
    25a0:	4293      	cmp	r3, r2
    25a2:	d8eb      	bhi.n	257c <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x1c4>
      } // of method getData()
    25a4:	b003      	add	sp, #12
    25a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25aa:	23ff      	movs	r3, #255	; 0xff
    25ac:	e7f2      	b.n	2594 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]+0x1dc>
    25ae:	bf00      	nop
    25b0:	20003388 	.word	0x20003388
    25b4:	0007a120 	.word	0x0007a120
    25b8:	200032c8 	.word	0x200032c8
    25bc:	20003d57 	.word	0x20003d57

000025c0 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]>:
      template< typename T > uint8_t &getData(const uint8_t addr,T &value)
    25c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    25c4:	7843      	ldrb	r3, [r0, #1]
      template< typename T > uint8_t &getData(const uint8_t addr,T &value)
    25c6:	b083      	sub	sp, #12
    25c8:	4606      	mov	r6, r0
    25ca:	4617      	mov	r7, r2
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    25cc:	2b00      	cmp	r3, #0
    25ce:	f040 80b0 	bne.w	2732 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x172>
          if (_sck==0) // if sck is zero then hardware SPI
    25d2:	78c4      	ldrb	r4, [r0, #3]
    25d4:	460d      	mov	r5, r1
    25d6:	bb94      	cbnz	r4, 263e <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x7e>
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    25d8:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 27bc <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x1fc>
    25dc:	2307      	movs	r3, #7
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0));  // Start the SPI transaction
    25de:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 27c0 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x200>
		port().TDR = data;
    25e2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    25e6:	e9cd c300 	strd	ip, r3, [sp]
    25ea:	ab02      	add	r3, sp, #8
    25ec:	4648      	mov	r0, r9
    25ee:	e913 0006 	ldmdb	r3, {r1, r2}
    25f2:	f7fe fd2d 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                           // Tell BME280 to listen up
    25f6:	4621      	mov	r1, r4
    25f8:	78b0      	ldrb	r0, [r6, #2]
    25fa:	f008 fa77 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    25fe:	f8d9 2000 	ldr.w	r2, [r9]
		port().TDR = data;
    2602:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2604:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2606:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    260a:	d0fb      	beq.n	2604 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x44>
            for (uint8_t i=0;i<structSize;i++) *bytePtr++ = SPI.transfer(0);  // loop for each byte to be read
    260c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 27c4 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x204>
    2610:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2612:	f898 3000 	ldrb.w	r3, [r8]
    2616:	2b00      	cmp	r3, #0
    2618:	d059      	beq.n	26ce <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x10e>
		port().TDR = data;
    261a:	2100      	movs	r1, #0
    261c:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    261e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2620:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2624:	d0fb      	beq.n	261e <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x5e>
    2626:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2628:	3401      	adds	r4, #1
    262a:	f807 3b01 	strb.w	r3, [r7], #1
    262e:	b2e4      	uxtb	r4, r4
    2630:	f898 3000 	ldrb.w	r3, [r8]
    2634:	42a3      	cmp	r3, r4
    2636:	d94a      	bls.n	26ce <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x10e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2638:	f8d9 2000 	ldr.w	r2, [r9]
    263c:	e7ee      	b.n	261c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x5c>
            SPI.transfer(addr | 0x80);                                        // bit 7 is high, so read a byte
    263e:	2407      	movs	r4, #7
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2640:	f04f 0801 	mov.w	r8, #1
            SPI.transfer(addr | 0x80);                                        // bit 7 is high, so read a byte
    2644:	f041 0580 	orr.w	r5, r1, #128	; 0x80
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    2648:	7880      	ldrb	r0, [r0, #2]
    264a:	4619      	mov	r1, r3
    264c:	f008 fa4e 	bl	aaec <digitalWrite>
              digitalWrite(_sck, LOW);                   // set the clock signal
    2650:	2100      	movs	r1, #0
    2652:	78f0      	ldrb	r0, [r6, #3]
    2654:	f008 fa4a 	bl	aaec <digitalWrite>
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2658:	fa08 f104 	lsl.w	r1, r8, r4
    265c:	7930      	ldrb	r0, [r6, #4]
            for (j=7; j>=0; j--) {                       // First send the address byte
    265e:	3c01      	subs	r4, #1
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2660:	4029      	ands	r1, r5
    2662:	f008 fa43 	bl	aaec <digitalWrite>
              digitalWrite(_sck, HIGH);                  // reset the clock signal
    2666:	2101      	movs	r1, #1
    2668:	78f0      	ldrb	r0, [r6, #3]
    266a:	f008 fa3f 	bl	aaec <digitalWrite>
            for (j=7; j>=0; j--) {                       // First send the address byte
    266e:	1c63      	adds	r3, r4, #1
    2670:	d1ee      	bne.n	2650 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x90>
            for (i=0;i<structSize;i++)
    2672:	f8df 8150 	ldr.w	r8, [pc, #336]	; 27c4 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x204>
    2676:	f898 3000 	ldrb.w	r3, [r8]
    267a:	b30b      	cbz	r3, 26c0 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x100>
    267c:	f04f 0900 	mov.w	r9, #0
              reply = 0;           // reset our return byte
    2680:	2400      	movs	r4, #0
    2682:	2508      	movs	r5, #8
                digitalWrite(_sck, LOW);            // set and reset the clock signal
    2684:	2100      	movs	r1, #0
    2686:	78f0      	ldrb	r0, [r6, #3]
    2688:	f008 fa30 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    268c:	2101      	movs	r1, #1
    268e:	78f0      	ldrb	r0, [r6, #3]
                reply <<= 1;                        // shift buffer one bit left
    2690:	0064      	lsls	r4, r4, #1
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    2692:	f008 fa2b 	bl	aaec <digitalWrite>
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    2696:	7970      	ldrb	r0, [r6, #5]
    2698:	f008 fa52 	bl	ab40 <digitalRead>
              for (j=7; j>=0; j--) // Now read the data at that byte
    269c:	1e6b      	subs	r3, r5, #1
                reply <<= 1;                        // shift buffer one bit left
    269e:	b2e4      	uxtb	r4, r4
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    26a0:	b108      	cbz	r0, 26a6 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0xe6>
    26a2:	f044 0401 	orr.w	r4, r4, #1
              for (j=7; j>=0; j--) // Now read the data at that byte
    26a6:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    26aa:	d1eb      	bne.n	2684 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0xc4>
    26ac:	f109 0901 	add.w	r9, r9, #1
              *bytePtr++ = reply; // Add byte just read to return data
    26b0:	f807 4b01 	strb.w	r4, [r7], #1
            for (i=0;i<structSize;i++)
    26b4:	f898 3000 	ldrb.w	r3, [r8]
    26b8:	fa4f f989 	sxtb.w	r9, r9
    26bc:	4599      	cmp	r9, r3
    26be:	dbdf      	blt.n	2680 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0xc0>
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    26c0:	2101      	movs	r1, #1
    26c2:	78b0      	ldrb	r0, [r6, #2]
      } // of method getData()
    26c4:	b003      	add	sp, #12
    26c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    26ca:	f008 ba0f 	b.w	aaec <digitalWrite>
            digitalWrite(_cs, HIGH);                                          // Tell BME280 to stop listening
    26ce:	2101      	movs	r1, #1
    26d0:	78b0      	ldrb	r0, [r6, #2]
    26d2:	f008 fa0b 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    26d6:	f899 3013 	ldrb.w	r3, [r9, #19]
    26da:	b33b      	cbz	r3, 272c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x16c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    26dc:	07dd      	lsls	r5, r3, #31
    26de:	d505      	bpl.n	26ec <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x12c>
    26e0:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
    26e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    26e8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    26ec:	079c      	lsls	r4, r3, #30
    26ee:	d505      	bpl.n	26fc <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x13c>
    26f0:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    26f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    26f8:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    26fc:	0758      	lsls	r0, r3, #29
    26fe:	d505      	bpl.n	270c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x14c>
    2700:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    2704:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2708:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    270c:	0719      	lsls	r1, r3, #28
    270e:	d505      	bpl.n	271c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x15c>
    2710:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
    2714:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2718:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    271c:	06da      	lsls	r2, r3, #27
    271e:	d505      	bpl.n	272c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x16c>
    2720:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    2724:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2728:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      } // of method getData()
    272c:	b003      	add	sp, #12
    272e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		txBuffer[0] = (address << 1);
    2732:	4c21      	ldr	r4, [pc, #132]	; (27b8 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x1f8>)
    2734:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    2736:	2501      	movs	r5, #1
          structSize = Wire.available();                // Use the actual number of bytes
    2738:	f8df 8088 	ldr.w	r8, [pc, #136]	; 27c4 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x204>
		txBuffer[0] = (address << 1);
    273c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
          Wire.write(addr);                             // Send register address to read
    2740:	4620      	mov	r0, r4
		transmitting = 1;
    2742:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
		txBufferLength = 1;
    2746:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    274a:	f7fe fd1f 	bl	118c <TwoWire::write(unsigned char)>
		return endTransmission(1);
    274e:	4629      	mov	r1, r5
    2750:	4620      	mov	r0, r4
    2752:	f7fe fdf3 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission(); // Close transmission
    2756:	3800      	subs	r0, #0
		return requestFrom(address, quantity, (uint8_t)1);
    2758:	462b      	mov	r3, r5
    275a:	f04f 0202 	mov.w	r2, #2
    275e:	bf18      	it	ne
    2760:	2001      	movne	r0, #1
    2762:	7871      	ldrb	r1, [r6, #1]
    2764:	7030      	strb	r0, [r6, #0]
    2766:	4620      	mov	r0, r4
    2768:	f7fe fe68 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    276c:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    2770:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
          structSize = Wire.available();                // Use the actual number of bytes
    2774:	1aca      	subs	r2, r1, r3
    2776:	b2d2      	uxtb	r2, r2
    2778:	f888 2000 	strb.w	r2, [r8]
          for (uint8_t i=0;i<structSize;i++) *bytePtr++ = Wire.read(); // loop for each byte to be read
    277c:	2a00      	cmp	r2, #0
    277e:	d0d5      	beq.n	272c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x16c>
    2780:	2200      	movs	r2, #0
    2782:	e003      	b.n	278c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x1cc>
		if (rxBufferIndex >= rxBufferLength) return -1;
    2784:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    2788:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    278c:	4299      	cmp	r1, r3
		return rxBuffer[rxBufferIndex++];
    278e:	f103 0101 	add.w	r1, r3, #1
    2792:	4423      	add	r3, r4
		if (rxBufferIndex >= rxBufferLength) return -1;
    2794:	d90d      	bls.n	27b2 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x1f2>
		return rxBuffer[rxBufferIndex++];
    2796:	7e9b      	ldrb	r3, [r3, #26]
    2798:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    279c:	3201      	adds	r2, #1
    279e:	f807 3b01 	strb.w	r3, [r7], #1
    27a2:	f898 3000 	ldrb.w	r3, [r8]
    27a6:	b2d2      	uxtb	r2, r2
    27a8:	4293      	cmp	r3, r2
    27aa:	d8eb      	bhi.n	2784 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x1c4>
      } // of method getData()
    27ac:	b003      	add	sp, #12
    27ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    27b2:	23ff      	movs	r3, #255	; 0xff
    27b4:	e7f2      	b.n	279c <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]+0x1dc>
    27b6:	bf00      	nop
    27b8:	20003388 	.word	0x20003388
    27bc:	0007a120 	.word	0x0007a120
    27c0:	200032c8 	.word	0x200032c8
    27c4:	20003d58 	.word	0x20003d58

000027c8 <BME280_Class::getCalibration()>:
{
    27c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    27cc:	4604      	mov	r4, r0
    27ce:	b085      	sub	sp, #20
  getData(BME280_T1_REG,_cal_dig_T1);
    27d0:	f100 020a 	add.w	r2, r0, #10
    27d4:	2188      	movs	r1, #136	; 0x88
  getData(BME280_P3_REG,_cal_dig_P3);
    27d6:	f100 0514 	add.w	r5, r0, #20
  getData(BME280_T1_REG,_cal_dig_T1);
    27da:	f7ff fef1 	bl	25c0 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]>
  getData(BME280_T2_REG,_cal_dig_T2);
    27de:	f104 020e 	add.w	r2, r4, #14
    27e2:	218a      	movs	r1, #138	; 0x8a
    27e4:	4620      	mov	r0, r4
  getData(BME280_H6_REG,_cal_dig_H6);
    27e6:	f104 0708 	add.w	r7, r4, #8
  getData(BME280_T2_REG,_cal_dig_T2);
    27ea:	f7ff fde5 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_T3_REG,_cal_dig_T3);
    27ee:	f104 0210 	add.w	r2, r4, #16
    27f2:	218c      	movs	r1, #140	; 0x8c
    27f4:	4620      	mov	r0, r4
    27f6:	f7ff fddf 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P1_REG,_cal_dig_P1);
    27fa:	f104 020c 	add.w	r2, r4, #12
    27fe:	218e      	movs	r1, #142	; 0x8e
    2800:	4620      	mov	r0, r4
    2802:	f7ff fedd 	bl	25c0 <unsigned char& BME280_Class::getData<unsigned short>(unsigned char, unsigned short&) [clone .isra.0]>
  getData(BME280_P2_REG,_cal_dig_P2);
    2806:	f104 0212 	add.w	r2, r4, #18
    280a:	2190      	movs	r1, #144	; 0x90
    280c:	4620      	mov	r0, r4
    280e:	f7ff fdd3 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P3_REG,_cal_dig_P3);
    2812:	462a      	mov	r2, r5
    2814:	2192      	movs	r1, #146	; 0x92
    2816:	4620      	mov	r0, r4
    2818:	f7ff fdce 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P4_REG,_cal_dig_P4);
    281c:	f104 0216 	add.w	r2, r4, #22
    2820:	2194      	movs	r1, #148	; 0x94
    2822:	4620      	mov	r0, r4
    2824:	f7ff fdc8 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P5_REG,_cal_dig_P5);
    2828:	f104 0218 	add.w	r2, r4, #24
    282c:	2196      	movs	r1, #150	; 0x96
    282e:	4620      	mov	r0, r4
    2830:	f7ff fdc2 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P6_REG,_cal_dig_P6);
    2834:	f104 021a 	add.w	r2, r4, #26
    2838:	2198      	movs	r1, #152	; 0x98
    283a:	4620      	mov	r0, r4
    283c:	f7ff fdbc 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P7_REG,_cal_dig_P7);
    2840:	f104 021c 	add.w	r2, r4, #28
    2844:	219a      	movs	r1, #154	; 0x9a
    2846:	4620      	mov	r0, r4
    2848:	f7ff fdb6 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P8_REG,_cal_dig_P8);
    284c:	f104 021e 	add.w	r2, r4, #30
    2850:	219c      	movs	r1, #156	; 0x9c
    2852:	4620      	mov	r0, r4
    2854:	f7ff fdb0 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_P9_REG,_cal_dig_P9);
    2858:	f104 0220 	add.w	r2, r4, #32
    285c:	219e      	movs	r1, #158	; 0x9e
    285e:	4620      	mov	r0, r4
    2860:	f7ff fdaa 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_H1_REG,_cal_dig_H1);
    2864:	1da2      	adds	r2, r4, #6
    2866:	21a1      	movs	r1, #161	; 0xa1
    2868:	4620      	mov	r0, r4
    286a:	f7ff f8ad 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  getData(BME280_H2_REG,_cal_dig_H2);
    286e:	21e1      	movs	r1, #225	; 0xe1
    2870:	4620      	mov	r0, r4
    2872:	f104 0222 	add.w	r2, r4, #34	; 0x22
    2876:	f7ff fd9f 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_H3_REG,_cal_dig_P3);
    287a:	462a      	mov	r2, r5
    287c:	21e3      	movs	r1, #227	; 0xe3
    287e:	4620      	mov	r0, r4
    2880:	f7ff fd9a 	bl	23b8 <unsigned char& BME280_Class::getData<short>(unsigned char, short&) [clone .isra.0]>
  getData(BME280_H4_REG,tempVar);
    2884:	f10d 0207 	add.w	r2, sp, #7
    2888:	21e4      	movs	r1, #228	; 0xe4
    288a:	4620      	mov	r0, r4
    288c:	f7ff f89c 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  _cal_dig_H4 = tempVar<<4;
    2890:	f89d 3007 	ldrb.w	r3, [sp, #7]
  getData(BME280_H4_REG+1,tempVar);
    2894:	f10d 0207 	add.w	r2, sp, #7
    2898:	21e5      	movs	r1, #229	; 0xe5
  _cal_dig_H4 = tempVar<<4;
    289a:	011b      	lsls	r3, r3, #4
  getData(BME280_H4_REG+1,tempVar);
    289c:	4620      	mov	r0, r4
  _cal_dig_H4 = tempVar<<4;
    289e:	84a3      	strh	r3, [r4, #36]	; 0x24
  getData(BME280_H4_REG+1,tempVar);
    28a0:	f7ff f892 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  _cal_dig_H4 |= tempVar&0xF;
    28a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    28a8:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  getData(BME280_H5_REG+2,tempVar);
    28aa:	f10d 0207 	add.w	r2, sp, #7
  _cal_dig_H4 |= tempVar&0xF;
    28ae:	f003 030f 	and.w	r3, r3, #15
  getData(BME280_H5_REG+2,tempVar);
    28b2:	4620      	mov	r0, r4
  _cal_dig_H4 |= tempVar&0xF;
    28b4:	430b      	orrs	r3, r1
  getData(BME280_H5_REG+2,tempVar);
    28b6:	21e7      	movs	r1, #231	; 0xe7
  _cal_dig_H4 |= tempVar&0xF;
    28b8:	84a3      	strh	r3, [r4, #36]	; 0x24
  getData(BME280_H5_REG+2,tempVar);
    28ba:	f7ff f885 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  _cal_dig_H5 = tempVar<<4;
    28be:	f89d 3007 	ldrb.w	r3, [sp, #7]
  getData(BME280_H5_REG,tempVar);
    28c2:	f10d 0207 	add.w	r2, sp, #7
    28c6:	21e5      	movs	r1, #229	; 0xe5
  _cal_dig_H5 = tempVar<<4;
    28c8:	011b      	lsls	r3, r3, #4
  getData(BME280_H5_REG,tempVar);
    28ca:	4620      	mov	r0, r4
  _cal_dig_H5 = tempVar<<4;
    28cc:	84e3      	strh	r3, [r4, #38]	; 0x26
  getData(BME280_H5_REG,tempVar);
    28ce:	f7ff f87b 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  _cal_dig_H5 |= tempVar>>4;
    28d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    28d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
        if (_I2CAddress) // If I2C address is non-zero then assume I2C bus
    28d8:	7861      	ldrb	r1, [r4, #1]
    28da:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
    28de:	84e3      	strh	r3, [r4, #38]	; 0x26
    28e0:	2900      	cmp	r1, #0
    28e2:	f040 80c5 	bne.w	2a70 <BME280_Class::getCalibration()+0x2a8>
          if (_sck==0) // if sck is zero then hardware SPI
    28e6:	78e5      	ldrb	r5, [r4, #3]
    28e8:	bb8d      	cbnz	r5, 294e <BME280_Class::getCalibration()+0x186>
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    28ea:	2307      	movs	r3, #7
    28ec:	f8df c204 	ldr.w	ip, [pc, #516]	; 2af4 <BME280_Class::getCalibration()+0x32c>
            SPI.beginTransaction(SPISettings(SPI_HERTZ,MSBFIRST,SPI_MODE0));  // Start the SPI transaction
    28f0:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2af8 <BME280_Class::getCalibration()+0x330>
    28f4:	ae02      	add	r6, sp, #8
    28f6:	e9cd c302 	strd	ip, r3, [sp, #8]
    28fa:	4648      	mov	r0, r9
    28fc:	e896 0006 	ldmia.w	r6, {r1, r2}
    2900:	f7fe fba6 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
            digitalWrite(_cs, LOW);                                           // Tell BME280 to listen up
    2904:	4629      	mov	r1, r5
    2906:	78a0      	ldrb	r0, [r4, #2]
    2908:	f008 f8f0 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    290c:	f8d9 2000 	ldr.w	r2, [r9]
		port().TDR = data;
    2910:	23e7      	movs	r3, #231	; 0xe7
    2912:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2914:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2916:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    291a:	d0fb      	beq.n	2914 <BME280_Class::getCalibration()+0x14c>
            for (uint8_t i=0;i<structSize;i++) *bytePtr++ = SPI.transfer(0);  // loop for each byte to be read
    291c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2afc <BME280_Class::getCalibration()+0x334>
    2920:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2922:	f898 3000 	ldrb.w	r3, [r8]
    2926:	2b00      	cmp	r3, #0
    2928:	d071      	beq.n	2a0e <BME280_Class::getCalibration()+0x246>
		port().TDR = data;
    292a:	2100      	movs	r1, #0
    292c:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    292e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2930:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2934:	d0fb      	beq.n	292e <BME280_Class::getCalibration()+0x166>
    2936:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2938:	3501      	adds	r5, #1
    293a:	f807 3b01 	strb.w	r3, [r7], #1
    293e:	b2ed      	uxtb	r5, r5
    2940:	f898 3000 	ldrb.w	r3, [r8]
    2944:	42ab      	cmp	r3, r5
    2946:	d962      	bls.n	2a0e <BME280_Class::getCalibration()+0x246>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2948:	f8d9 2000 	ldr.w	r2, [r9]
    294c:	e7ee      	b.n	292c <BME280_Class::getCalibration()+0x164>
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    294e:	78a0      	ldrb	r0, [r4, #2]
    2950:	2507      	movs	r5, #7
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2952:	2601      	movs	r6, #1
            digitalWrite(_cs, LOW);                      // Tell BME280 to listen up
    2954:	f008 f8ca 	bl	aaec <digitalWrite>
              digitalWrite(_sck, LOW);                   // set the clock signal
    2958:	2100      	movs	r1, #0
    295a:	78e0      	ldrb	r0, [r4, #3]
    295c:	f008 f8c6 	bl	aaec <digitalWrite>
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2960:	fa06 f105 	lsl.w	r1, r6, r5
    2964:	7920      	ldrb	r0, [r4, #4]
            for (j=7; j>=0; j--) {                       // First send the address byte
    2966:	3d01      	subs	r5, #1
              digitalWrite(_mosi, ((addr)|0x80)&(1<<j)); // set the MOSI pin state
    2968:	f001 01e7 	and.w	r1, r1, #231	; 0xe7
    296c:	f008 f8be 	bl	aaec <digitalWrite>
              digitalWrite(_sck, HIGH);                  // reset the clock signal
    2970:	2101      	movs	r1, #1
    2972:	78e0      	ldrb	r0, [r4, #3]
    2974:	f008 f8ba 	bl	aaec <digitalWrite>
            for (j=7; j>=0; j--) {                       // First send the address byte
    2978:	1c6b      	adds	r3, r5, #1
    297a:	d1ed      	bne.n	2958 <BME280_Class::getCalibration()+0x190>
            for (i=0;i<structSize;i++)
    297c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 2afc <BME280_Class::getCalibration()+0x334>
    2980:	f898 3000 	ldrb.w	r3, [r8]
    2984:	b30b      	cbz	r3, 29ca <BME280_Class::getCalibration()+0x202>
    2986:	f04f 0900 	mov.w	r9, #0
              reply = 0;           // reset our return byte
    298a:	2500      	movs	r5, #0
    298c:	2608      	movs	r6, #8
                digitalWrite(_sck, LOW);            // set and reset the clock signal
    298e:	2100      	movs	r1, #0
    2990:	78e0      	ldrb	r0, [r4, #3]
    2992:	f008 f8ab 	bl	aaec <digitalWrite>
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    2996:	2101      	movs	r1, #1
    2998:	78e0      	ldrb	r0, [r4, #3]
                reply <<= 1;                        // shift buffer one bit left
    299a:	006d      	lsls	r5, r5, #1
                digitalWrite(_sck, HIGH);           // pin to get the next MISO bit
    299c:	f008 f8a6 	bl	aaec <digitalWrite>
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    29a0:	7960      	ldrb	r0, [r4, #5]
    29a2:	f008 f8cd 	bl	ab40 <digitalRead>
              for (j=7; j>=0; j--) // Now read the data at that byte
    29a6:	1e73      	subs	r3, r6, #1
                reply <<= 1;                        // shift buffer one bit left
    29a8:	b2ed      	uxtb	r5, r5
                if (digitalRead(_miso)) reply |= 1; // read the MISO bit, add to reply
    29aa:	b108      	cbz	r0, 29b0 <BME280_Class::getCalibration()+0x1e8>
    29ac:	f045 0501 	orr.w	r5, r5, #1
              for (j=7; j>=0; j--) // Now read the data at that byte
    29b0:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
    29b4:	d1eb      	bne.n	298e <BME280_Class::getCalibration()+0x1c6>
    29b6:	f109 0901 	add.w	r9, r9, #1
              *bytePtr++ = reply; // Add byte just read to return data
    29ba:	f807 5b01 	strb.w	r5, [r7], #1
            for (i=0;i<structSize;i++)
    29be:	f898 3000 	ldrb.w	r3, [r8]
    29c2:	fa4f f989 	sxtb.w	r9, r9
    29c6:	4599      	cmp	r9, r3
    29c8:	dbdf      	blt.n	298a <BME280_Class::getCalibration()+0x1c2>
            digitalWrite(_cs, HIGH); // Tell BME280 to stop listening
    29ca:	2101      	movs	r1, #1
    29cc:	78a0      	ldrb	r0, [r4, #2]
    29ce:	ae02      	add	r6, sp, #8
    29d0:	f008 f88c 	bl	aaec <digitalWrite>
  getData(addr,returnValue); // Read just one byte
    29d4:	4632      	mov	r2, r6
    29d6:	4620      	mov	r0, r4
    29d8:	21e6      	movs	r1, #230	; 0xe6
    29da:	f7fe fff5 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
    29de:	4632      	mov	r2, r6
    29e0:	4620      	mov	r0, r4
    29e2:	21e5      	movs	r1, #229	; 0xe5
  return (returnValue);      // Return byte just read
    29e4:	f89d 5008 	ldrb.w	r5, [sp, #8]
  getData(addr,returnValue); // Read just one byte
    29e8:	f7fe ffee 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    29ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
  getData(addr,returnValue); // Read just one byte
    29f0:	4632      	mov	r2, r6
    29f2:	21e7      	movs	r1, #231	; 0xe7
    29f4:	4620      	mov	r0, r4
  _cal_dig_H5 = (readByte(BME280_H5_REG+1)<<4)|(readByte(BME280_H5_REG)>>4);
    29f6:	091b      	lsrs	r3, r3, #4
    29f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    29fc:	84e3      	strh	r3, [r4, #38]	; 0x26
  getData(addr,returnValue); // Read just one byte
    29fe:	f7fe ffe3 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    2a02:	f89d 3008 	ldrb.w	r3, [sp, #8]
  _cal_dig_H6 = readByte(BME280_H6_REG);
    2a06:	7223      	strb	r3, [r4, #8]
} // of method getCalibration()
    2a08:	b005      	add	sp, #20
    2a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            digitalWrite(_cs, HIGH);                                          // Tell BME280 to stop listening
    2a0e:	2101      	movs	r1, #1
    2a10:	78a0      	ldrb	r0, [r4, #2]
    2a12:	f008 f86b 	bl	aaec <digitalWrite>
		if (interruptMasksUsed) {
    2a16:	f899 3013 	ldrb.w	r3, [r9, #19]
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d0da      	beq.n	29d4 <BME280_Class::getCalibration()+0x20c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2a1e:	07df      	lsls	r7, r3, #31
    2a20:	d505      	bpl.n	2a2e <BME280_Class::getCalibration()+0x266>
    2a22:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
    2a26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2a2a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2a2e:	079d      	lsls	r5, r3, #30
    2a30:	d505      	bpl.n	2a3e <BME280_Class::getCalibration()+0x276>
    2a32:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    2a36:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2a3a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2a3e:	0758      	lsls	r0, r3, #29
    2a40:	d505      	bpl.n	2a4e <BME280_Class::getCalibration()+0x286>
    2a42:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    2a46:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2a4a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2a4e:	0719      	lsls	r1, r3, #28
    2a50:	d505      	bpl.n	2a5e <BME280_Class::getCalibration()+0x296>
    2a52:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
    2a56:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2a5a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2a5e:	06da      	lsls	r2, r3, #27
    2a60:	d5b8      	bpl.n	29d4 <BME280_Class::getCalibration()+0x20c>
    2a62:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    2a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2a6e:	e7b1      	b.n	29d4 <BME280_Class::getCalibration()+0x20c>
		transmitting = 1;
    2a70:	2601      	movs	r6, #1
		txBuffer[0] = (address << 1);
    2a72:	4d1f      	ldr	r5, [pc, #124]	; (2af0 <BME280_Class::getCalibration()+0x328>)
          structSize = Wire.available();                // Use the actual number of bytes
    2a74:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2afc <BME280_Class::getCalibration()+0x334>
    2a78:	40b1      	lsls	r1, r6
          Wire.write(addr);                             // Send register address to read
    2a7a:	4628      	mov	r0, r5
		transmitting = 1;
    2a7c:	f885 6130 	strb.w	r6, [r5, #304]	; 0x130
		txBuffer[0] = (address << 1);
    2a80:	f885 10a5 	strb.w	r1, [r5, #165]	; 0xa5
    2a84:	21e7      	movs	r1, #231	; 0xe7
		txBufferLength = 1;
    2a86:	f885 612f 	strb.w	r6, [r5, #303]	; 0x12f
    2a8a:	f7fe fb7f 	bl	118c <TwoWire::write(unsigned char)>
		return endTransmission(1);
    2a8e:	4631      	mov	r1, r6
    2a90:	4628      	mov	r0, r5
    2a92:	f7fe fc53 	bl	133c <TwoWire::endTransmission(unsigned char)>
          _TransmissionStatus = Wire.endTransmission(); // Close transmission
    2a96:	3800      	subs	r0, #0
		return requestFrom(address, quantity, (uint8_t)1);
    2a98:	4633      	mov	r3, r6
    2a9a:	4632      	mov	r2, r6
    2a9c:	bf18      	it	ne
    2a9e:	2001      	movne	r0, #1
    2aa0:	7861      	ldrb	r1, [r4, #1]
    2aa2:	7020      	strb	r0, [r4, #0]
    2aa4:	4628      	mov	r0, r5
    2aa6:	f7fe fcc9 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    2aaa:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    2aae:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
          structSize = Wire.available();                // Use the actual number of bytes
    2ab2:	1aca      	subs	r2, r1, r3
    2ab4:	b2d2      	uxtb	r2, r2
    2ab6:	f888 2000 	strb.w	r2, [r8]
          for (uint8_t i=0;i<structSize;i++) *bytePtr++ = Wire.read(); // loop for each byte to be read
    2aba:	b1aa      	cbz	r2, 2ae8 <BME280_Class::getCalibration()+0x320>
    2abc:	2200      	movs	r2, #0
    2abe:	e003      	b.n	2ac8 <BME280_Class::getCalibration()+0x300>
		if (rxBufferIndex >= rxBufferLength) return -1;
    2ac0:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    2ac4:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    2ac8:	428b      	cmp	r3, r1
		return rxBuffer[rxBufferIndex++];
    2aca:	f103 0101 	add.w	r1, r3, #1
    2ace:	442b      	add	r3, r5
		if (rxBufferIndex >= rxBufferLength) return -1;
    2ad0:	d20c      	bcs.n	2aec <BME280_Class::getCalibration()+0x324>
		return rxBuffer[rxBufferIndex++];
    2ad2:	7e9b      	ldrb	r3, [r3, #26]
    2ad4:	f885 10a2 	strb.w	r1, [r5, #162]	; 0xa2
    2ad8:	3201      	adds	r2, #1
    2ada:	f807 3b01 	strb.w	r3, [r7], #1
    2ade:	f898 3000 	ldrb.w	r3, [r8]
    2ae2:	b2d2      	uxtb	r2, r2
    2ae4:	4293      	cmp	r3, r2
    2ae6:	d8eb      	bhi.n	2ac0 <BME280_Class::getCalibration()+0x2f8>
    2ae8:	ae02      	add	r6, sp, #8
    2aea:	e773      	b.n	29d4 <BME280_Class::getCalibration()+0x20c>
    2aec:	23ff      	movs	r3, #255	; 0xff
    2aee:	e7f3      	b.n	2ad8 <BME280_Class::getCalibration()+0x310>
    2af0:	20003388 	.word	0x20003388
    2af4:	0007a120 	.word	0x0007a120
    2af8:	200032c8 	.word	0x200032c8
    2afc:	20003d55 	.word	0x20003d55

00002b00 <BME280_Class::begin(unsigned long)>:
{
    2b00:	b570      	push	{r4, r5, r6, lr}
    2b02:	4605      	mov	r5, r0
  Wire.begin();            // Start I2C as master device
    2b04:	481b      	ldr	r0, [pc, #108]	; (2b74 <BME280_Class::begin(unsigned long)+0x74>)
{
    2b06:	b084      	sub	sp, #16
		transmitting = 1;
    2b08:	2601      	movs	r6, #1
    2b0a:	4604      	mov	r4, r0
    2b0c:	9101      	str	r1, [sp, #4]
  Wire.begin();            // Start I2C as master device
    2b0e:	f00e ff4f 	bl	119b0 <___ZN7TwoWire5beginEv_veneer>
  Wire.setClock(i2cSpeed); // Set I2C bus speed
    2b12:	9901      	ldr	r1, [sp, #4]
    2b14:	4620      	mov	r0, r4
    2b16:	f7fe fda9 	bl	166c <TwoWire::setClock(unsigned long)>
  for(_I2CAddress=0;_I2CAddress<127;_I2CAddress++) // loop all possible addresses
    2b1a:	2200      	movs	r2, #0
    2b1c:	4613      	mov	r3, r2
    2b1e:	706a      	strb	r2, [r5, #1]
    2b20:	e005      	b.n	2b2e <BME280_Class::begin(unsigned long)+0x2e>
    2b22:	786b      	ldrb	r3, [r5, #1]
    2b24:	3301      	adds	r3, #1
    2b26:	b2db      	uxtb	r3, r3
    2b28:	2b7e      	cmp	r3, #126	; 0x7e
    2b2a:	706b      	strb	r3, [r5, #1]
    2b2c:	d81c      	bhi.n	2b68 <BME280_Class::begin(unsigned long)+0x68>
		txBuffer[0] = (address << 1);
    2b2e:	005b      	lsls	r3, r3, #1
		return endTransmission(1);
    2b30:	2101      	movs	r1, #1
    2b32:	4620      	mov	r0, r4
		transmitting = 1;
    2b34:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130
		txBuffer[0] = (address << 1);
    2b38:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		txBufferLength = 1;
    2b3c:	f884 612f 	strb.w	r6, [r4, #303]	; 0x12f
		return endTransmission(1);
    2b40:	f7fe fbfc 	bl	133c <TwoWire::endTransmission(unsigned char)>
    if (Wire.endTransmission()==0)       // If no error we have a device
    2b44:	2800      	cmp	r0, #0
    2b46:	d1ec      	bne.n	2b22 <BME280_Class::begin(unsigned long)+0x22>
  getData(addr,returnValue); // Read just one byte
    2b48:	f10d 020f 	add.w	r2, sp, #15
    2b4c:	21d0      	movs	r1, #208	; 0xd0
    2b4e:	4628      	mov	r0, r5
    2b50:	f7fe ff3a 	bl	19c8 <unsigned char& BME280_Class::getData<unsigned char>(unsigned char, unsigned char&) [clone .isra.0]>
  return (returnValue);      // Return byte just read
    2b54:	f89d 300f 	ldrb.w	r3, [sp, #15]
      if (readByte(BME280_CHIPID_REG)==BME280_CHIPID) // check for correct chip id
    2b58:	2b60      	cmp	r3, #96	; 0x60
    2b5a:	d1e2      	bne.n	2b22 <BME280_Class::begin(unsigned long)+0x22>
        getCalibration(); // get the calibration values
    2b5c:	4628      	mov	r0, r5
    2b5e:	f7ff fe33 	bl	27c8 <BME280_Class::getCalibration()>
        return true;
    2b62:	2001      	movs	r0, #1
} // of method begin()
    2b64:	b004      	add	sp, #16
    2b66:	bd70      	pop	{r4, r5, r6, pc}
  _I2CAddress = 0; // Set to 0 to denote no I2C found
    2b68:	2300      	movs	r3, #0
  return false;
    2b6a:	4618      	mov	r0, r3
  _I2CAddress = 0; // Set to 0 to denote no I2C found
    2b6c:	706b      	strb	r3, [r5, #1]
} // of method begin()
    2b6e:	b004      	add	sp, #16
    2b70:	bd70      	pop	{r4, r5, r6, pc}
    2b72:	bf00      	nop
    2b74:	20003388 	.word	0x20003388

00002b78 <BME280_Class::begin()>:
  return begin(I2C_STANDARD_MODE); // Initialize I2C with slow speed
    2b78:	4901      	ldr	r1, [pc, #4]	; (2b80 <BME280_Class::begin()+0x8>)
    2b7a:	f7ff bfc1 	b.w	2b00 <BME280_Class::begin(unsigned long)>
    2b7e:	bf00      	nop
    2b80:	000186a0 	.word	0x000186a0

00002b84 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2b84:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    2b88:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    2b8a:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    2b8e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2b90:	d101      	bne.n	2b96 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    2b92:	6883      	ldr	r3, [r0, #8]
    2b94:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    2b96:	f006 bff9 	b.w	9b8c <EventResponder::triggerEventNotImmediate()>
    2b9a:	bf00      	nop

00002b9c <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2b9c:	4b32      	ldr	r3, [pc, #200]	; (2c68 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2b9e:	4933      	ldr	r1, [pc, #204]	; (2c6c <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2ba0:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    2ba2:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    2ba6:	7920      	ldrb	r0, [r4, #4]
    2ba8:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2bac:	f895 c004 	ldrb.w	ip, [r5, #4]
    2bb0:	f881 c01c 	strb.w	ip, [r1, #28]
    2bb4:	7708      	strb	r0, [r1, #28]
    2bb6:	b152      	cbz	r2, 2bce <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2bb8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2bbc:	d323      	bcc.n	2c06 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    2bbe:	492c      	ldr	r1, [pc, #176]	; (2c70 <_spi_dma_rxISR0()+0xd4>)
    2bc0:	4411      	add	r1, r2
		DMA_SERQ = channel;
    2bc2:	4a2a      	ldr	r2, [pc, #168]	; (2c6c <_spi_dma_rxISR0()+0xd0>)
    2bc4:	6419      	str	r1, [r3, #64]	; 0x40
    2bc6:	76d0      	strb	r0, [r2, #27]
    2bc8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2bcc:	bd30      	pop	{r4, r5, pc}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2bce:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2bd0:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2bd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2bd4:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2bd6:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    2bda:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2bdc:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2bde:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    2be2:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2be4:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2be6:	6804      	ldr	r4, [r0, #0]
    2be8:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2bea:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    2bee:	4b21      	ldr	r3, [pc, #132]	; (2c74 <_spi_dma_rxISR0()+0xd8>)
    2bf0:	429c      	cmp	r4, r3
    2bf2:	d126      	bne.n	2c42 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    2bf4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    2bf6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2bf8:	2b02      	cmp	r3, #2
		_data = data;
    2bfa:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2bfc:	d126      	bne.n	2c4c <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    2bfe:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2c04:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2c06:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2c08:	8be9      	ldrh	r1, [r5, #30]
    2c0a:	0409      	lsls	r1, r1, #16
    2c0c:	d422      	bmi.n	2c54 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    2c0e:	b292      	uxth	r2, r2
    2c10:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    2c12:	6821      	ldr	r1, [r4, #0]
    2c14:	8bec      	ldrh	r4, [r5, #30]
    2c16:	b2a4      	uxth	r4, r4
    2c18:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2c1a:	8bcc      	ldrh	r4, [r1, #30]
    2c1c:	0424      	lsls	r4, r4, #16
    2c1e:	d505      	bpl.n	2c2c <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2c20:	8bcc      	ldrh	r4, [r1, #30]
    2c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2c26:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2c2a:	4322      	orrs	r2, r4
    2c2c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    2c2e:	8bca      	ldrh	r2, [r1, #30]
    2c30:	b292      	uxth	r2, r2
    2c32:	82ca      	strh	r2, [r1, #22]
    2c34:	2100      	movs	r1, #0
    2c36:	4a0d      	ldr	r2, [pc, #52]	; (2c6c <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2c38:	6419      	str	r1, [r3, #64]	; 0x40
    2c3a:	76d0      	strb	r0, [r2, #27]
    2c3c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2c40:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    2c42:	4623      	mov	r3, r4
    2c44:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2c46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2c4a:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    2c50:	f006 bf9c 	b.w	9b8c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2c54:	8be9      	ldrh	r1, [r5, #30]
    2c56:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    2c5a:	b292      	uxth	r2, r2
    2c5c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    2c60:	ea41 010e 	orr.w	r1, r1, lr
    2c64:	83e9      	strh	r1, [r5, #30]
    2c66:	e7d4      	b.n	2c12 <_spi_dma_rxISR0()+0x76>
    2c68:	200032c8 	.word	0x200032c8
    2c6c:	400e8000 	.word	0x400e8000
    2c70:	ffff8001 	.word	0xffff8001
    2c74:	00002b85 	.word	0x00002b85

00002c78 <pvtCallback(UBX_NAV_PVT_data_t*)>:
//     mostRecentSIV = ubxDataStruct->numSV;
// }
void pvtCallback(UBX_NAV_PVT_data_t *ubxDataStruct) {
    mostRecentLatitude = ((double)ubxDataStruct->lat) * pow(10, -7);
    mostRecentLongitude = ((double)ubxDataStruct->lon) * pow(10, -7);
    mostRecentAltitude = ubxDataStruct->height / 1000.0;
    2c78:	edd0 7a08 	vldr	s15, [r0, #32]
    mostRecentLongitude = ((double)ubxDataStruct->lon) * pow(10, -7);
    2c7c:	4a1e      	ldr	r2, [pc, #120]	; (2cf8 <pvtCallback(UBX_NAV_PVT_data_t*)+0x80>)
    mostRecentAltitude = ubxDataStruct->height / 1000.0;
    2c7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    mostRecentLatitude = ((double)ubxDataStruct->lat) * pow(10, -7);
    2c82:	edd0 6a07 	vldr	s13, [r0, #28]
      
    mostRecentYear = (int)ubxDataStruct->year;
    2c86:	4b1d      	ldr	r3, [pc, #116]	; (2cfc <pvtCallback(UBX_NAV_PVT_data_t*)+0x84>)
    mostRecentLatitude = ((double)ubxDataStruct->lat) * pow(10, -7);
    2c88:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    2c8c:	491c      	ldr	r1, [pc, #112]	; (2d00 <pvtCallback(UBX_NAV_PVT_data_t*)+0x88>)
    mostRecentAltitude = ubxDataStruct->height / 1000.0;
    2c8e:	ed9f 3b16 	vldr	d3, [pc, #88]	; 2ce8 <pvtCallback(UBX_NAV_PVT_data_t*)+0x70>
    mostRecentLatitude = ((double)ubxDataStruct->lat) * pow(10, -7);
    2c92:	ed9f 5b17 	vldr	d5, [pc, #92]	; 2cf0 <pvtCallback(UBX_NAV_PVT_data_t*)+0x78>
void pvtCallback(UBX_NAV_PVT_data_t *ubxDataStruct) {
    2c96:	b410      	push	{r4}
    mostRecentAltitude = ubxDataStruct->height / 1000.0;
    2c98:	ee87 4b03 	vdiv.f64	d4, d7, d3
    mostRecentLongitude = ((double)ubxDataStruct->lon) * pow(10, -7);
    2c9c:	edd0 7a06 	vldr	s15, [r0, #24]
    mostRecentAltitude = ubxDataStruct->height / 1000.0;
    2ca0:	4c18      	ldr	r4, [pc, #96]	; (2d04 <pvtCallback(UBX_NAV_PVT_data_t*)+0x8c>)
    mostRecentLongitude = ((double)ubxDataStruct->lon) * pow(10, -7);
    2ca2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    mostRecentLatitude = ((double)ubxDataStruct->lat) * pow(10, -7);
    2ca6:	ee26 6b05 	vmul.f64	d6, d6, d5
    mostRecentLongitude = ((double)ubxDataStruct->lon) * pow(10, -7);
    2caa:	ee27 7b05 	vmul.f64	d7, d7, d5
    mostRecentLatitude = ((double)ubxDataStruct->lat) * pow(10, -7);
    2cae:	ed81 6b00 	vstr	d6, [r1]
    mostRecentMonth = (int)ubxDataStruct->month;
    2cb2:	4915      	ldr	r1, [pc, #84]	; (2d08 <pvtCallback(UBX_NAV_PVT_data_t*)+0x90>)
    mostRecentLongitude = ((double)ubxDataStruct->lon) * pow(10, -7);
    2cb4:	ed82 7b00 	vstr	d7, [r2]
    mostRecentYear = (int)ubxDataStruct->year;
    2cb8:	8882      	ldrh	r2, [r0, #4]
    2cba:	601a      	str	r2, [r3, #0]
    mostRecentDay = (int)ubxDataStruct->day;
    mostRecentHour = (int)ubxDataStruct->hour;
    2cbc:	4a13      	ldr	r2, [pc, #76]	; (2d0c <pvtCallback(UBX_NAV_PVT_data_t*)+0x94>)
    mostRecentDay = (int)ubxDataStruct->day;
    2cbe:	4b14      	ldr	r3, [pc, #80]	; (2d10 <pvtCallback(UBX_NAV_PVT_data_t*)+0x98>)
    mostRecentAltitude = ubxDataStruct->height / 1000.0;
    2cc0:	ed84 4b00 	vstr	d4, [r4]
    mostRecentHour = (int)ubxDataStruct->hour;
    2cc4:	7a04      	ldrb	r4, [r0, #8]
    2cc6:	6014      	str	r4, [r2, #0]
    mostRecentMinute = (int)ubxDataStruct->min;
    2cc8:	4a12      	ldr	r2, [pc, #72]	; (2d14 <pvtCallback(UBX_NAV_PVT_data_t*)+0x9c>)
    2cca:	7a44      	ldrb	r4, [r0, #9]
    2ccc:	6014      	str	r4, [r2, #0]
    mostRecentSecond = (int)ubxDataStruct->sec;
    2cce:	4a12      	ldr	r2, [pc, #72]	; (2d18 <pvtCallback(UBX_NAV_PVT_data_t*)+0xa0>)
    2cd0:	7a84      	ldrb	r4, [r0, #10]
    2cd2:	6014      	str	r4, [r2, #0]
    mostRecentSIV = ubxDataStruct->numSV;
    2cd4:	4a11      	ldr	r2, [pc, #68]	; (2d1c <pvtCallback(UBX_NAV_PVT_data_t*)+0xa4>)
    2cd6:	7dc4      	ldrb	r4, [r0, #23]
    2cd8:	6014      	str	r4, [r2, #0]
    mostRecentMonth = (int)ubxDataStruct->month;
    2cda:	7984      	ldrb	r4, [r0, #6]
    mostRecentDay = (int)ubxDataStruct->day;
    2cdc:	79c2      	ldrb	r2, [r0, #7]
    mostRecentMonth = (int)ubxDataStruct->month;
    2cde:	600c      	str	r4, [r1, #0]
    mostRecentDay = (int)ubxDataStruct->day;
    2ce0:	601a      	str	r2, [r3, #0]
}
    2ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2ce6:	4770      	bx	lr
    2ce8:	00000000 	.word	0x00000000
    2cec:	408f4000 	.word	0x408f4000
    2cf0:	9abcaf48 	.word	0x9abcaf48
    2cf4:	3e7ad7f2 	.word	0x3e7ad7f2
    2cf8:	200046c0 	.word	0x200046c0
    2cfc:	20004b30 	.word	0x20004b30
    2d00:	200046b8 	.word	0x200046b8
    2d04:	200046b0 	.word	0x200046b0
    2d08:	20004b24 	.word	0x20004b24
    2d0c:	20004b1c 	.word	0x20004b1c
    2d10:	20004b18 	.word	0x20004b18
    2d14:	20004b20 	.word	0x20004b20
    2d18:	20004b2c 	.word	0x20004b2c
    2d1c:	20004b28 	.word	0x20004b28

00002d20 <M9N::init()>:

Error M9N::init() {
    2d20:	b530      	push	{r4, r5, lr}
    if (!m9n.begin()) {
    2d22:	2500      	movs	r5, #0
Error M9N::init() {
    2d24:	b083      	sub	sp, #12
    if (!m9n.begin()) {
    2d26:	f100 040c 	add.w	r4, r0, #12
    2d2a:	f240 434c 	movw	r3, #1100	; 0x44c
    2d2e:	2242      	movs	r2, #66	; 0x42
    2d30:	4914      	ldr	r1, [pc, #80]	; (2d84 <M9N::init()+0x64>)
    2d32:	4620      	mov	r0, r4
    2d34:	9500      	str	r5, [sp, #0]
    2d36:	f006 fd57 	bl	97e8 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)>
    2d3a:	b300      	cbz	r0, 2d7e <M9N::init()+0x5e>
        return M9N_ERROR;
    }
    m9n.setI2COutput(COM_TYPE_UBX);
    2d3c:	f240 424c 	movw	r2, #1100	; 0x44c
    2d40:	2101      	movs	r1, #1
    2d42:	4620      	mov	r0, r4
    2d44:	f006 fe10 	bl	9968 <SFE_UBLOX_GNSS::setI2COutput(unsigned char, unsigned short)>
    m9n.setNavigationFrequency(5);
    2d48:	f240 424c 	movw	r2, #1100	; 0x44c
    2d4c:	2105      	movs	r1, #5
    2d4e:	4620      	mov	r0, r4
    2d50:	f006 fdbe 	bl	98d0 <SFE_UBLOX_GNSS::setNavigationFrequency(unsigned char, unsigned short)>
    if (!m9n.setDynamicModel(DYN_MODEL_AIRBORNE4g)) {
    2d54:	f240 424c 	movw	r2, #1100	; 0x44c
    2d58:	2108      	movs	r1, #8
    2d5a:	4620      	mov	r0, r4
    2d5c:	f006 fcaa 	bl	96b4 <SFE_UBLOX_GNSS::setDynamicModel(dynModel, unsigned short)>
    2d60:	b168      	cbz	r0, 2d7e <M9N::init()+0x5e>
        return M9N_ERROR;
    }
    m9n.saveConfiguration();
    2d62:	f240 414c 	movw	r1, #1100	; 0x44c
    2d66:	4620      	mov	r0, r4
    2d68:	f006 fc84 	bl	9674 <SFE_UBLOX_GNSS::saveConfiguration(unsigned short)>
    m9n.setAutoPVTcallbackPtr(&pvtCallback);
    2d6c:	f240 424c 	movw	r2, #1100	; 0x44c
    2d70:	4905      	ldr	r1, [pc, #20]	; (2d88 <M9N::init()+0x68>)
    2d72:	4620      	mov	r0, r4
    2d74:	f006 fe2a 	bl	99cc <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)>
    //         default:
    //             sivCheck = false;
    //             break;
    //     }
    // }
    return NO_ERROR;
    2d78:	4628      	mov	r0, r5
}
    2d7a:	b003      	add	sp, #12
    2d7c:	bd30      	pop	{r4, r5, pc}
        return M9N_ERROR;
    2d7e:	2002      	movs	r0, #2
}
    2d80:	b003      	add	sp, #12
    2d82:	bd30      	pop	{r4, r5, pc}
    2d84:	20003388 	.word	0x20003388
    2d88:	00002c79 	.word	0x00002c79

00002d8c <M9N::prefetchData()>:

bool M9N::prefetchData() {
    2d8c:	b538      	push	{r3, r4, r5, lr}
    m9n.checkUblox();
    2d8e:	2200      	movs	r2, #0
    2d90:	f100 050c 	add.w	r5, r0, #12
bool M9N::prefetchData() {
    2d94:	4604      	mov	r4, r0
    m9n.checkUblox();
    2d96:	4611      	mov	r1, r2
    2d98:	4628      	mov	r0, r5
    2d9a:	f006 fe7f 	bl	9a9c <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)>
    m9n.checkCallbacks();
    2d9e:	4628      	mov	r0, r5
    2da0:	f002 fc76 	bl	5690 <SFE_UBLOX_GNSS::checkCallbacks()>
    longitude = mostRecentLongitude;
    latitude = mostRecentLatitude;
    2da4:	4a15      	ldr	r2, [pc, #84]	; (2dfc <M9N::prefetchData()+0x70>)
    longitude = mostRecentLongitude;
    2da6:	4916      	ldr	r1, [pc, #88]	; (2e00 <M9N::prefetchData()+0x74>)
    altitude = mostRecentAltitude;
    2da8:	4b16      	ldr	r3, [pc, #88]	; (2e04 <M9N::prefetchData()+0x78>)
    longitude = mostRecentLongitude;
    2daa:	e9d1 0100 	ldrd	r0, r1, [r1]
    latitude = mostRecentLatitude;
    2dae:	ed92 7b00 	vldr	d7, [r2]
    altitude = mostRecentAltitude;
    2db2:	e9d3 2300 	ldrd	r2, r3, [r3]
    longitude = mostRecentLongitude;
    2db6:	e9c4 0166 	strd	r0, r1, [r4, #408]	; 0x198
    altitude = mostRecentAltitude;
    2dba:	e9c4 236a 	strd	r2, r3, [r4, #424]	; 0x1a8
    year = mostRecentYear;
    2dbe:	4812      	ldr	r0, [pc, #72]	; (2e08 <M9N::prefetchData()+0x7c>)
    month = mostRecentMonth;
    2dc0:	4912      	ldr	r1, [pc, #72]	; (2e0c <M9N::prefetchData()+0x80>)
    day = mostRecentDay;
    2dc2:	4b13      	ldr	r3, [pc, #76]	; (2e10 <M9N::prefetchData()+0x84>)
    year = mostRecentYear;
    2dc4:	6800      	ldr	r0, [r0, #0]
    month = mostRecentMonth;
    2dc6:	6809      	ldr	r1, [r1, #0]
    day = mostRecentDay;
    2dc8:	681b      	ldr	r3, [r3, #0]
    hour = mostRecentHour;
    2dca:	4a12      	ldr	r2, [pc, #72]	; (2e14 <M9N::prefetchData()+0x88>)
    year = mostRecentYear;
    2dcc:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
    month = mostRecentMonth;
    2dd0:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
    hour = mostRecentHour;
    2dd4:	6810      	ldr	r0, [r2, #0]
    day = mostRecentDay;
    2dd6:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    minute = mostRecentMinute;
    2dda:	490f      	ldr	r1, [pc, #60]	; (2e18 <M9N::prefetchData()+0x8c>)
    second = mostRecentSecond;
    2ddc:	4a0f      	ldr	r2, [pc, #60]	; (2e1c <M9N::prefetchData()+0x90>)
    SIV = mostRecentSIV;
    2dde:	4b10      	ldr	r3, [pc, #64]	; (2e20 <M9N::prefetchData()+0x94>)
    minute = mostRecentMinute;
    2de0:	6809      	ldr	r1, [r1, #0]
    second = mostRecentSecond;
    2de2:	6812      	ldr	r2, [r2, #0]
    SIV = mostRecentSIV;
    2de4:	681b      	ldr	r3, [r3, #0]
    hour = mostRecentHour;
    2de6:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    return true;
}
    2dea:	2001      	movs	r0, #1
    minute = mostRecentMinute;
    2dec:	f8c4 11c0 	str.w	r1, [r4, #448]	; 0x1c0
    latitude = mostRecentLatitude;
    2df0:	ed84 7b68 	vstr	d7, [r4, #416]	; 0x1a0
    SIV = mostRecentSIV;
    2df4:	e9c4 2371 	strd	r2, r3, [r4, #452]	; 0x1c4
}
    2df8:	bd38      	pop	{r3, r4, r5, pc}
    2dfa:	bf00      	nop
    2dfc:	200046b8 	.word	0x200046b8
    2e00:	200046c0 	.word	0x200046c0
    2e04:	200046b0 	.word	0x200046b0
    2e08:	20004b30 	.word	0x20004b30
    2e0c:	20004b24 	.word	0x20004b24
    2e10:	20004b18 	.word	0x20004b18
    2e14:	20004b1c 	.word	0x20004b1c
    2e18:	20004b20 	.word	0x20004b20
    2e1c:	20004b2c 	.word	0x20004b2c
    2e20:	20004b28 	.word	0x20004b28

00002e24 <M9N::getLatitude()>:

double M9N::getLatitude() {
    return latitude;
}
    2e24:	ed90 0b68 	vldr	d0, [r0, #416]	; 0x1a0
    2e28:	4770      	bx	lr
    2e2a:	bf00      	nop

00002e2c <M9N::getLongitude()>:
double M9N::getLongitude() {
    return longitude;
}
    2e2c:	ed90 0b66 	vldr	d0, [r0, #408]	; 0x198
    2e30:	4770      	bx	lr
    2e32:	bf00      	nop

00002e34 <M9N::getAltitude()>:
double M9N::getAltitude(){
    return altitude;
}
    2e34:	ed90 0b6a 	vldr	d0, [r0, #424]	; 0x1a8
    2e38:	4770      	bx	lr
    2e3a:	bf00      	nop

00002e3c <M9N::getSecond()>:
int M9N::getMinute() {
    return minute;
}
int M9N::getSecond() {
    return second;
}
    2e3c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop

00002e44 <SFE_UBLOX_GNSS::processNMEA_v(char)>:
// User could overwrite this function to pipe characters to nmea.process(c) of tinyGPS or MicroNMEA
// Or user could pipe each character to a buffer, radio, etc.
void SFE_UBLOX_GNSS::processNMEA_v(char incoming)
{
  // If user has assigned an output port then pipe the characters there
  if (_nmeaOutputPort != NULL)
    2e44:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
    2e48:	b110      	cbz	r0, 2e50 <SFE_UBLOX_GNSS::processNMEA_v(char)+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
    2e4a:	6803      	ldr	r3, [r0, #0]
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	4718      	bx	r3
}
    2e50:	4770      	bx	lr
    2e52:	bf00      	nop

00002e54 <SFE_UBLOX_GNSS::processRTCM_v(unsigned char)>:
  //   if(incoming < 0x10) _debugSerial->print(F("0"));
  //   _debugSerial->print(incoming, HEX);
  //   if(rtcmFrameCounter % 16 == 0) _debugSerial->println();

  (void)incoming; // Do something with incoming just to get rid of the pesky compiler warning!
}
    2e54:	4770      	bx	lr
    2e56:	bf00      	nop

00002e58 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2e58:	b169      	cbz	r1, 2e76 <Print::write(char const*) [clone .isra.0]+0x1e>
    2e5a:	b570      	push	{r4, r5, r6, lr}
    2e5c:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    2e5e:	4608      	mov	r0, r1
    2e60:	460c      	mov	r4, r1
    2e62:	f00b fa0d 	bl	e280 <strlen>
    2e66:	682b      	ldr	r3, [r5, #0]
    2e68:	4602      	mov	r2, r0
    2e6a:	4621      	mov	r1, r4
    2e6c:	4628      	mov	r0, r5
    2e6e:	685b      	ldr	r3, [r3, #4]
    2e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e74:	4718      	bx	r3
    2e76:	4770      	bx	lr

00002e78 <Print::println(__FlashStringHelper const*) [clone .isra.0]>:
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2e78:	b538      	push	{r3, r4, r5, lr}
    2e7a:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2e7c:	b149      	cbz	r1, 2e92 <Print::println(__FlashStringHelper const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    2e7e:	4608      	mov	r0, r1
    2e80:	460d      	mov	r5, r1
    2e82:	f00b f9fd 	bl	e280 <strlen>
    2e86:	6823      	ldr	r3, [r4, #0]
    2e88:	4602      	mov	r2, r0
    2e8a:	4629      	mov	r1, r5
    2e8c:	685b      	ldr	r3, [r3, #4]
    2e8e:	4620      	mov	r0, r4
    2e90:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    2e92:	4620      	mov	r0, r4
    2e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2e98:	f007 bb06 	b.w	a4a8 <Print::println()>

00002e9c <SFE_UBLOX_GNSS::SFE_UBLOX_GNSS()>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
    2e9c:	b410      	push	{r4}
    2e9e:	4c3e      	ldr	r4, [pc, #248]	; (2f98 <SFE_UBLOX_GNSS::SFE_UBLOX_GNSS()+0xfc>)
    2ea0:	2200      	movs	r2, #0
    2ea2:	493e      	ldr	r1, [pc, #248]	; (2f9c <SFE_UBLOX_GNSS::SFE_UBLOX_GNSS()+0x100>)
    2ea4:	f640 1c64 	movw	ip, #2404	; 0x964
    2ea8:	6004      	str	r4, [r0, #0]
    2eaa:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    2eae:	8084      	strh	r4, [r0, #4]
    2eb0:	2442      	movs	r4, #66	; 0x42
    2eb2:	e9c0 2202 	strd	r2, r2, [r0, #8]
    2eb6:	e9c0 2204 	strd	r2, r2, [r0, #16]
    2eba:	e9c0 2206 	strd	r2, r2, [r0, #24]
    2ebe:	e9c0 2208 	strd	r2, r2, [r0, #32]
    2ec2:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
    2ec6:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
    2eca:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
    2ece:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
    2ed2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
    2ed6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
    2eda:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
    2ede:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
    2ee2:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
    2ee6:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
    2eea:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
    2eee:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
    2ef2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2ef6:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
    2efa:	f8a0 4110 	strh.w	r4, [r0, #272]	; 0x110
    2efe:	f100 04fc 	add.w	r4, r0, #252	; 0xfc
    2f02:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
    2f06:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    2f0a:	f100 04fe 	add.w	r4, r0, #254	; 0xfe
    2f0e:	e9c0 2220 	strd	r2, r2, [r0, #128]	; 0x80
    2f12:	e9c0 2222 	strd	r2, r2, [r0, #136]	; 0x88
    2f16:	e9c0 2224 	strd	r2, r2, [r0, #144]	; 0x90
    2f1a:	e9c0 2226 	strd	r2, r2, [r0, #152]	; 0x98
    2f1e:	e9c0 2228 	strd	r2, r2, [r0, #160]	; 0xa0
    2f22:	e9c0 222a 	strd	r2, r2, [r0, #168]	; 0xa8
    2f26:	e9c0 222c 	strd	r2, r2, [r0, #176]	; 0xb0
    2f2a:	e9c0 222e 	strd	r2, r2, [r0, #184]	; 0xb8
    2f2e:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
    2f32:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
    2f36:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
    2f3a:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
    2f3e:	e9c0 2245 	strd	r2, r2, [r0, #276]	; 0x114
    2f42:	e9c0 1248 	strd	r1, r2, [r0, #288]	; 0x120
    2f46:	e9c0 244a 	strd	r2, r4, [r0, #296]	; 0x128
    2f4a:	4c15      	ldr	r4, [pc, #84]	; (2fa0 <SFE_UBLOX_GNSS::SFE_UBLOX_GNSS()+0x104>)
    2f4c:	f8c0 215c 	str.w	r2, [r0, #348]	; 0x15c
    2f50:	f8a0 c158 	strh.w	ip, [r0, #344]	; 0x158
    2f54:	f880 216c 	strb.w	r2, [r0, #364]	; 0x16c
    2f58:	f8c0 2170 	str.w	r2, [r0, #368]	; 0x170
    2f5c:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
    2f60:	f880 2180 	strb.w	r2, [r0, #384]	; 0x180
    2f64:	f8c0 2184 	str.w	r2, [r0, #388]	; 0x184
    2f68:	f8a0 217a 	strh.w	r2, [r0, #378]	; 0x17a
  _i2cStopRestart = false; // Use a restart where needed
    2f6c:	f8a0 217c 	strh.w	r2, [r0, #380]	; 0x17c
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
    2f70:	e9c0 1454 	strd	r1, r4, [r0, #336]	; 0x150
    2f74:	e9c0 124c 	strd	r1, r2, [r0, #304]	; 0x130
    2f78:	e9c0 1250 	strd	r1, r2, [r0, #320]	; 0x140
    2f7c:	2158      	movs	r1, #88	; 0x58
}
    2f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
    2f82:	f880 1165 	strb.w	r1, [r0, #357]	; 0x165
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
    2f86:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
    2f88:	e9c0 224e 	strd	r2, r2, [r0, #312]	; 0x138
    2f8c:	e9c0 2252 	strd	r2, r2, [r0, #328]	; 0x148
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
    2f90:	e9c0 213d 	strd	r2, r1, [r0, #244]	; 0xf4
}
    2f94:	4770      	bx	lr
    2f96:	bf00      	nop
    2f98:	20002aa4 	.word	0x20002aa4
    2f9c:	02020000 	.word	0x02020000
    2fa0:	64640200 	.word	0x64640200

00002fa4 <SFE_UBLOX_GNSS::end()>:
{
    2fa4:	b538      	push	{r3, r4, r5, lr}
    2fa6:	4604      	mov	r4, r0
  if (ubxFileBuffer != NULL) // Check if RAM has been allocated for the file buffer
    2fa8:	f8d0 0170 	ldr.w	r0, [r0, #368]	; 0x170
    2fac:	b168      	cbz	r0, 2fca <SFE_UBLOX_GNSS::end()+0x26>
    if (_printDebug == true)
    2fae:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	f040 83d9 	bne.w	376a <SFE_UBLOX_GNSS::end()+0x7c6>
    delete[] ubxFileBuffer; // Created with new[]
    2fb8:	f007 fed6 	bl	ad68 <operator delete[](void*)>
    ubxFileBuffer = NULL;   // Redundant?
    2fbc:	2300      	movs	r3, #0
    2fbe:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
    fileBufferSize = 0;     // Reset file buffer size. User will have to call setFileBufferSize again
    2fc2:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
    fileBufferMaxAvail = 0;
    2fc6:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
  if (moduleSWVersion != NULL)
    2fca:	68a0      	ldr	r0, [r4, #8]
    2fcc:	b120      	cbz	r0, 2fd8 <SFE_UBLOX_GNSS::end()+0x34>
    delete moduleSWVersion; // Created with new moduleSWVersion_t
    2fce:	2103      	movs	r1, #3
    2fd0:	f007 fecc 	bl	ad6c <operator delete(void*, unsigned int)>
    moduleSWVersion = NULL; // Redundant?
    2fd4:	2300      	movs	r3, #0
    2fd6:	60a3      	str	r3, [r4, #8]
  if (currentGeofenceParams != NULL)
    2fd8:	68e0      	ldr	r0, [r4, #12]
    2fda:	b120      	cbz	r0, 2fe6 <SFE_UBLOX_GNSS::end()+0x42>
    delete currentGeofenceParams; // Created with new geofenceParams_t
    2fdc:	2134      	movs	r1, #52	; 0x34
    2fde:	f007 fec5 	bl	ad6c <operator delete(void*, unsigned int)>
    currentGeofenceParams = NULL; // Redundant?
    2fe2:	2300      	movs	r3, #0
    2fe4:	60e3      	str	r3, [r4, #12]
  if (packetUBXNAVTIMELS != NULL)
    2fe6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    2fe8:	b120      	cbz	r0, 2ff4 <SFE_UBLOX_GNSS::end()+0x50>
    delete packetUBXNAVTIMELS; // Created with new UBX_NAV_TIMELS_t
    2fea:	212c      	movs	r1, #44	; 0x2c
    2fec:	f007 febe 	bl	ad6c <operator delete(void*, unsigned int)>
    packetUBXNAVTIMELS = NULL; // Redundant?
    2ff0:	2300      	movs	r3, #0
    2ff2:	64a3      	str	r3, [r4, #72]	; 0x48
  if (packetUBXNAVPOSECEF != NULL)
    2ff4:	6923      	ldr	r3, [r4, #16]
    2ff6:	b163      	cbz	r3, 3012 <SFE_UBLOX_GNSS::end()+0x6e>
    if (packetUBXNAVPOSECEF->callbackData != NULL)
    2ff8:	6a58      	ldr	r0, [r3, #36]	; 0x24
    2ffa:	2800      	cmp	r0, #0
    2ffc:	f000 82e0 	beq.w	35c0 <SFE_UBLOX_GNSS::end()+0x61c>
      delete packetUBXNAVPOSECEF->callbackData; // Created with new UBX_NAV_POSECEF_data_t
    3000:	2114      	movs	r1, #20
    3002:	f007 feb3 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVPOSECEF; // Created with new UBX_NAV_POSECEF_t
    3006:	6923      	ldr	r3, [r4, #16]
    3008:	2b00      	cmp	r3, #0
    300a:	f040 82d9 	bne.w	35c0 <SFE_UBLOX_GNSS::end()+0x61c>
    packetUBXNAVPOSECEF = NULL; // Redundant?
    300e:	2300      	movs	r3, #0
    3010:	6123      	str	r3, [r4, #16]
  if (packetUBXNAVSTATUS != NULL)
    3012:	6963      	ldr	r3, [r4, #20]
    3014:	b163      	cbz	r3, 3030 <SFE_UBLOX_GNSS::end()+0x8c>
    if (packetUBXNAVSTATUS->callbackData != NULL)
    3016:	6a18      	ldr	r0, [r3, #32]
    3018:	2800      	cmp	r0, #0
    301a:	f000 82db 	beq.w	35d4 <SFE_UBLOX_GNSS::end()+0x630>
      delete packetUBXNAVSTATUS->callbackData;
    301e:	2110      	movs	r1, #16
    3020:	f007 fea4 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVSTATUS;
    3024:	6963      	ldr	r3, [r4, #20]
    3026:	2b00      	cmp	r3, #0
    3028:	f040 82d4 	bne.w	35d4 <SFE_UBLOX_GNSS::end()+0x630>
    packetUBXNAVSTATUS = NULL; // Redundant?
    302c:	2300      	movs	r3, #0
    302e:	6163      	str	r3, [r4, #20]
  if (packetUBXNAVDOP != NULL)
    3030:	69a3      	ldr	r3, [r4, #24]
    3032:	b163      	cbz	r3, 304e <SFE_UBLOX_GNSS::end()+0xaa>
    if (packetUBXNAVDOP->callbackData != NULL)
    3034:	6a58      	ldr	r0, [r3, #36]	; 0x24
    3036:	2800      	cmp	r0, #0
    3038:	f000 82c7 	beq.w	35ca <SFE_UBLOX_GNSS::end()+0x626>
      delete packetUBXNAVDOP->callbackData;
    303c:	2114      	movs	r1, #20
    303e:	f007 fe95 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVDOP;
    3042:	69a3      	ldr	r3, [r4, #24]
    3044:	2b00      	cmp	r3, #0
    3046:	f040 82c0 	bne.w	35ca <SFE_UBLOX_GNSS::end()+0x626>
    packetUBXNAVDOP = NULL; // Redundant?
    304a:	2300      	movs	r3, #0
    304c:	61a3      	str	r3, [r4, #24]
  if (packetUBXNAVATT != NULL)
    304e:	6a23      	ldr	r3, [r4, #32]
    3050:	b163      	cbz	r3, 306c <SFE_UBLOX_GNSS::end()+0xc8>
    if (packetUBXNAVATT->callbackData != NULL)
    3052:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3054:	2800      	cmp	r0, #0
    3056:	f000 82e5 	beq.w	3624 <SFE_UBLOX_GNSS::end()+0x680>
      delete packetUBXNAVATT->callbackData;
    305a:	2120      	movs	r1, #32
    305c:	f007 fe86 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVATT;
    3060:	6a23      	ldr	r3, [r4, #32]
    3062:	2b00      	cmp	r3, #0
    3064:	f040 82de 	bne.w	3624 <SFE_UBLOX_GNSS::end()+0x680>
    packetUBXNAVATT = NULL; // Redundant?
    3068:	2300      	movs	r3, #0
    306a:	6223      	str	r3, [r4, #32]
  if (packetUBXNAVPVT != NULL)
    306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    306e:	b1fb      	cbz	r3, 30b0 <SFE_UBLOX_GNSS::end()+0x10c>
    if (packetUBXNAVPVT->callbackData != NULL)
    3070:	6f18      	ldr	r0, [r3, #112]	; 0x70
    3072:	2800      	cmp	r0, #0
    3074:	f000 82d1 	beq.w	361a <SFE_UBLOX_GNSS::end()+0x676>
      delete packetUBXNAVPVT->callbackData;
    3078:	215c      	movs	r1, #92	; 0x5c
    307a:	f007 fe77 	bl	ad6c <operator delete(void*, unsigned int)>
      if (_printDebug == true)
    307e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    3082:	2b00      	cmp	r3, #0
    3084:	f040 8382 	bne.w	378c <SFE_UBLOX_GNSS::end()+0x7e8>
    delete packetUBXNAVPVT;
    3088:	6a63      	ldr	r3, [r4, #36]	; 0x24
    308a:	2b00      	cmp	r3, #0
    308c:	f040 82c5 	bne.w	361a <SFE_UBLOX_GNSS::end()+0x676>
    packetUBXNAVPVT = NULL; // Redundant?
    3090:	2200      	movs	r2, #0
    if (_printDebug == true)
    3092:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    packetUBXNAVPVT = NULL; // Redundant?
    3096:	6262      	str	r2, [r4, #36]	; 0x24
    if (_printDebug == true)
    3098:	b153      	cbz	r3, 30b0 <SFE_UBLOX_GNSS::end()+0x10c>
      _debugSerial->println(F("end: packetUBXNAVPVT has been deleted"));
    309a:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    309e:	2225      	movs	r2, #37	; 0x25
    30a0:	49a0      	ldr	r1, [pc, #640]	; (3324 <SFE_UBLOX_GNSS::end()+0x380>)
    30a2:	682b      	ldr	r3, [r5, #0]
    30a4:	4628      	mov	r0, r5
    30a6:	685b      	ldr	r3, [r3, #4]
    30a8:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    30aa:	4628      	mov	r0, r5
    30ac:	f007 f9fc 	bl	a4a8 <Print::println()>
  if (packetUBXNAVODO != NULL)
    30b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30b2:	b163      	cbz	r3, 30ce <SFE_UBLOX_GNSS::end()+0x12a>
    if (packetUBXNAVODO->callbackData != NULL)
    30b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    30b6:	2800      	cmp	r0, #0
    30b8:	f000 82aa 	beq.w	3610 <SFE_UBLOX_GNSS::end()+0x66c>
      delete packetUBXNAVODO->callbackData;
    30bc:	2114      	movs	r1, #20
    30be:	f007 fe55 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVODO;
    30c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30c4:	2b00      	cmp	r3, #0
    30c6:	f040 82a3 	bne.w	3610 <SFE_UBLOX_GNSS::end()+0x66c>
    packetUBXNAVODO = NULL; // Redundant?
    30ca:	2300      	movs	r3, #0
    30cc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (packetUBXNAVVELECEF != NULL)
    30ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    30d0:	b163      	cbz	r3, 30ec <SFE_UBLOX_GNSS::end()+0x148>
    if (packetUBXNAVVELECEF->callbackData != NULL)
    30d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    30d4:	2800      	cmp	r0, #0
    30d6:	f000 8296 	beq.w	3606 <SFE_UBLOX_GNSS::end()+0x662>
      delete packetUBXNAVVELECEF->callbackData;
    30da:	2114      	movs	r1, #20
    30dc:	f007 fe46 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVVELECEF;
    30e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    30e2:	2b00      	cmp	r3, #0
    30e4:	f040 828f 	bne.w	3606 <SFE_UBLOX_GNSS::end()+0x662>
    packetUBXNAVVELECEF = NULL; // Redundant?
    30e8:	2300      	movs	r3, #0
    30ea:	6323      	str	r3, [r4, #48]	; 0x30
  if (packetUBXNAVVELNED != NULL)
    30ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    30ee:	b163      	cbz	r3, 310a <SFE_UBLOX_GNSS::end()+0x166>
    if (packetUBXNAVVELNED->callbackData != NULL)
    30f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    30f2:	2800      	cmp	r0, #0
    30f4:	f000 8282 	beq.w	35fc <SFE_UBLOX_GNSS::end()+0x658>
      delete packetUBXNAVVELNED->callbackData;
    30f8:	2124      	movs	r1, #36	; 0x24
    30fa:	f007 fe37 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVVELNED;
    30fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3100:	2b00      	cmp	r3, #0
    3102:	f040 827b 	bne.w	35fc <SFE_UBLOX_GNSS::end()+0x658>
    packetUBXNAVVELNED = NULL; // Redundant?
    3106:	2300      	movs	r3, #0
    3108:	6363      	str	r3, [r4, #52]	; 0x34
  if (packetUBXNAVHPPOSECEF != NULL)
    310a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    310c:	b163      	cbz	r3, 3128 <SFE_UBLOX_GNSS::end()+0x184>
    if (packetUBXNAVHPPOSECEF->callbackData != NULL)
    310e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3110:	2800      	cmp	r0, #0
    3112:	f000 826e 	beq.w	35f2 <SFE_UBLOX_GNSS::end()+0x64e>
      delete packetUBXNAVHPPOSECEF->callbackData;
    3116:	211c      	movs	r1, #28
    3118:	f007 fe28 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVHPPOSECEF;
    311c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    311e:	2b00      	cmp	r3, #0
    3120:	f040 8267 	bne.w	35f2 <SFE_UBLOX_GNSS::end()+0x64e>
    packetUBXNAVHPPOSECEF = NULL; // Redundant?
    3124:	2300      	movs	r3, #0
    3126:	63a3      	str	r3, [r4, #56]	; 0x38
  if (packetUBXNAVHPPOSLLH != NULL)
    3128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    312a:	b163      	cbz	r3, 3146 <SFE_UBLOX_GNSS::end()+0x1a2>
    if (packetUBXNAVHPPOSLLH->callbackData != NULL)
    312c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    312e:	2800      	cmp	r0, #0
    3130:	f000 825a 	beq.w	35e8 <SFE_UBLOX_GNSS::end()+0x644>
      delete packetUBXNAVHPPOSLLH->callbackData;
    3134:	2124      	movs	r1, #36	; 0x24
    3136:	f007 fe19 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVHPPOSLLH;
    313a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    313c:	2b00      	cmp	r3, #0
    313e:	f040 8253 	bne.w	35e8 <SFE_UBLOX_GNSS::end()+0x644>
    packetUBXNAVHPPOSLLH = NULL; // Redundant?
    3142:	2300      	movs	r3, #0
    3144:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (packetUBXNAVPVAT != NULL)
    3146:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3148:	b16b      	cbz	r3, 3166 <SFE_UBLOX_GNSS::end()+0x1c2>
    if (packetUBXNAVPVAT->callbackData != NULL)
    314a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    314e:	2800      	cmp	r0, #0
    3150:	f000 8245 	beq.w	35de <SFE_UBLOX_GNSS::end()+0x63a>
      delete packetUBXNAVPVAT->callbackData;
    3154:	2174      	movs	r1, #116	; 0x74
    3156:	f007 fe09 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVPVAT;
    315a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    315c:	2b00      	cmp	r3, #0
    315e:	f040 823e 	bne.w	35de <SFE_UBLOX_GNSS::end()+0x63a>
    packetUBXNAVPVAT = NULL; // Redundant?
    3162:	2300      	movs	r3, #0
    3164:	6423      	str	r3, [r4, #64]	; 0x40
  if (packetUBXNAVTIMEUTC != NULL)
    3166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3168:	b163      	cbz	r3, 3184 <SFE_UBLOX_GNSS::end()+0x1e0>
    if (packetUBXNAVTIMEUTC->callbackData != NULL)
    316a:	6a18      	ldr	r0, [r3, #32]
    316c:	2800      	cmp	r0, #0
    316e:	f000 82ce 	beq.w	370e <SFE_UBLOX_GNSS::end()+0x76a>
      delete packetUBXNAVTIMEUTC->callbackData;
    3172:	2114      	movs	r1, #20
    3174:	f007 fdfa 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVTIMEUTC;
    3178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    317a:	2b00      	cmp	r3, #0
    317c:	f040 82c7 	bne.w	370e <SFE_UBLOX_GNSS::end()+0x76a>
    packetUBXNAVTIMEUTC = NULL; // Redundant?
    3180:	2300      	movs	r3, #0
    3182:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (packetUBXNAVCLOCK != NULL)
    3184:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3186:	b163      	cbz	r3, 31a2 <SFE_UBLOX_GNSS::end()+0x1fe>
    if (packetUBXNAVCLOCK->callbackData != NULL)
    3188:	6a58      	ldr	r0, [r3, #36]	; 0x24
    318a:	2800      	cmp	r0, #0
    318c:	f000 82ba 	beq.w	3704 <SFE_UBLOX_GNSS::end()+0x760>
      delete packetUBXNAVCLOCK->callbackData;
    3190:	2114      	movs	r1, #20
    3192:	f007 fdeb 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVCLOCK;
    3196:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3198:	2b00      	cmp	r3, #0
    319a:	f040 82b3 	bne.w	3704 <SFE_UBLOX_GNSS::end()+0x760>
    packetUBXNAVCLOCK = NULL; // Redundant?
    319e:	2300      	movs	r3, #0
    31a0:	6463      	str	r3, [r4, #68]	; 0x44
  if (packetUBXNAVSVIN != NULL)
    31a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    31a4:	b163      	cbz	r3, 31c0 <SFE_UBLOX_GNSS::end()+0x21c>
    if (packetUBXNAVSVIN->callbackData != NULL)
    31a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
    31a8:	2800      	cmp	r0, #0
    31aa:	f000 82a6 	beq.w	36fa <SFE_UBLOX_GNSS::end()+0x756>
      delete packetUBXNAVSVIN->callbackData;
    31ae:	2128      	movs	r1, #40	; 0x28
    31b0:	f007 fddc 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVSVIN;
    31b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    31b6:	2b00      	cmp	r3, #0
    31b8:	f040 829f 	bne.w	36fa <SFE_UBLOX_GNSS::end()+0x756>
    packetUBXNAVSVIN = NULL; // Redundant?
    31bc:	2300      	movs	r3, #0
    31be:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (packetUBXNAVSAT != NULL)
    31c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    31c2:	b173      	cbz	r3, 31e2 <SFE_UBLOX_GNSS::end()+0x23e>
    if (packetUBXNAVSAT->callbackData != NULL)
    31c4:	f8d3 0c0c 	ldr.w	r0, [r3, #3084]	; 0xc0c
    31c8:	2800      	cmp	r0, #0
    31ca:	f000 8290 	beq.w	36ee <SFE_UBLOX_GNSS::end()+0x74a>
      delete packetUBXNAVSAT->callbackData;
    31ce:	f640 31fc 	movw	r1, #3068	; 0xbfc
    31d2:	f007 fdcb 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVSAT;
    31d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    31d8:	2b00      	cmp	r3, #0
    31da:	f040 8288 	bne.w	36ee <SFE_UBLOX_GNSS::end()+0x74a>
    packetUBXNAVSAT = NULL; // Redundant?
    31de:	2300      	movs	r3, #0
    31e0:	6523      	str	r3, [r4, #80]	; 0x50
  if (packetUBXNAVRELPOSNED != NULL)
    31e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    31e4:	b163      	cbz	r3, 3200 <SFE_UBLOX_GNSS::end()+0x25c>
    if (packetUBXNAVRELPOSNED->callbackData != NULL)
    31e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
    31e8:	2800      	cmp	r0, #0
    31ea:	f000 827b 	beq.w	36e4 <SFE_UBLOX_GNSS::end()+0x740>
      delete packetUBXNAVRELPOSNED->callbackData;
    31ee:	2140      	movs	r1, #64	; 0x40
    31f0:	f007 fdbc 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVRELPOSNED;
    31f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    31f6:	2b00      	cmp	r3, #0
    31f8:	f040 8274 	bne.w	36e4 <SFE_UBLOX_GNSS::end()+0x740>
    packetUBXNAVRELPOSNED = NULL; // Redundant?
    31fc:	2300      	movs	r3, #0
    31fe:	6563      	str	r3, [r4, #84]	; 0x54
  if (packetUBXNAVAOPSTATUS != NULL)
    3200:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3202:	b163      	cbz	r3, 321e <SFE_UBLOX_GNSS::end()+0x27a>
    if (packetUBXNAVAOPSTATUS->callbackData != NULL)
    3204:	6a18      	ldr	r0, [r3, #32]
    3206:	2800      	cmp	r0, #0
    3208:	f000 8267 	beq.w	36da <SFE_UBLOX_GNSS::end()+0x736>
      delete packetUBXNAVAOPSTATUS->callbackData;
    320c:	2110      	movs	r1, #16
    320e:	f007 fdad 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVAOPSTATUS;
    3212:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3214:	2b00      	cmp	r3, #0
    3216:	f040 8260 	bne.w	36da <SFE_UBLOX_GNSS::end()+0x736>
    packetUBXNAVAOPSTATUS = NULL; // Redundant?
    321a:	2300      	movs	r3, #0
    321c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (packetUBXNAVEOE != NULL)
    321e:	69e3      	ldr	r3, [r4, #28]
    3220:	b163      	cbz	r3, 323c <SFE_UBLOX_GNSS::end()+0x298>
    if (packetUBXNAVEOE->callbackData != NULL)
    3222:	6918      	ldr	r0, [r3, #16]
    3224:	2800      	cmp	r0, #0
    3226:	f000 8253 	beq.w	36d0 <SFE_UBLOX_GNSS::end()+0x72c>
      delete packetUBXNAVEOE->callbackData;
    322a:	2104      	movs	r1, #4
    322c:	f007 fd9e 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXNAVEOE;
    3230:	69e3      	ldr	r3, [r4, #28]
    3232:	2b00      	cmp	r3, #0
    3234:	f040 824c 	bne.w	36d0 <SFE_UBLOX_GNSS::end()+0x72c>
    packetUBXNAVEOE = NULL; // Redundant?
    3238:	2300      	movs	r3, #0
    323a:	61e3      	str	r3, [r4, #28]
  if (packetUBXRXMPMP != NULL)
    323c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    323e:	b16b      	cbz	r3, 325c <SFE_UBLOX_GNSS::end()+0x2b8>
    if (packetUBXRXMPMP->callbackData != NULL)
    3240:	6898      	ldr	r0, [r3, #8]
    3242:	2800      	cmp	r0, #0
    3244:	f000 823f 	beq.w	36c6 <SFE_UBLOX_GNSS::end()+0x722>
      delete packetUBXRXMPMP->callbackData;
    3248:	f44f 7104 	mov.w	r1, #528	; 0x210
    324c:	f007 fd8e 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXRXMPMP;
    3250:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    3252:	2b00      	cmp	r3, #0
    3254:	f040 8237 	bne.w	36c6 <SFE_UBLOX_GNSS::end()+0x722>
    packetUBXRXMPMP = NULL; // Redundant?
    3258:	2300      	movs	r3, #0
    325a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (packetUBXRXMPMPmessage != NULL)
    325c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    325e:	b16b      	cbz	r3, 327c <SFE_UBLOX_GNSS::end()+0x2d8>
    if (packetUBXRXMPMPmessage->callbackData != NULL)
    3260:	6898      	ldr	r0, [r3, #8]
    3262:	2800      	cmp	r0, #0
    3264:	f000 827c 	beq.w	3760 <SFE_UBLOX_GNSS::end()+0x7bc>
      delete packetUBXRXMPMPmessage->callbackData;
    3268:	f44f 7106 	mov.w	r1, #536	; 0x218
    326c:	f007 fd7e 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXRXMPMPmessage;
    3270:	6e23      	ldr	r3, [r4, #96]	; 0x60
    3272:	2b00      	cmp	r3, #0
    3274:	f040 8274 	bne.w	3760 <SFE_UBLOX_GNSS::end()+0x7bc>
    packetUBXRXMPMPmessage = NULL; // Redundant?
    3278:	2300      	movs	r3, #0
    327a:	6623      	str	r3, [r4, #96]	; 0x60
  if (packetUBXRXMQZSSL6message != NULL)
    327c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    327e:	b15b      	cbz	r3, 3298 <SFE_UBLOX_GNSS::end()+0x2f4>
    if (packetUBXRXMQZSSL6message->callbackData != NULL)
    3280:	6898      	ldr	r0, [r3, #8]
    3282:	2800      	cmp	r0, #0
    3284:	f000 8267 	beq.w	3756 <SFE_UBLOX_GNSS::end()+0x7b2>
      delete[] packetUBXRXMQZSSL6message->callbackData;
    3288:	f007 fd6e 	bl	ad68 <operator delete[](void*)>
    delete packetUBXRXMQZSSL6message;
    328c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    328e:	2b00      	cmp	r3, #0
    3290:	f040 8261 	bne.w	3756 <SFE_UBLOX_GNSS::end()+0x7b2>
    packetUBXRXMQZSSL6message = NULL; // Redundant?
    3294:	2300      	movs	r3, #0
    3296:	6663      	str	r3, [r4, #100]	; 0x64
  if (packetUBXRXMCOR != NULL)
    3298:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    329a:	b163      	cbz	r3, 32b6 <SFE_UBLOX_GNSS::end()+0x312>
    if (packetUBXRXMCOR->callbackData != NULL)
    329c:	6898      	ldr	r0, [r3, #8]
    329e:	2800      	cmp	r0, #0
    32a0:	f000 8254 	beq.w	374c <SFE_UBLOX_GNSS::end()+0x7a8>
      delete packetUBXRXMCOR->callbackData;
    32a4:	210c      	movs	r1, #12
    32a6:	f007 fd61 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXRXMCOR;
    32aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    32ac:	2b00      	cmp	r3, #0
    32ae:	f040 824d 	bne.w	374c <SFE_UBLOX_GNSS::end()+0x7a8>
    packetUBXRXMCOR = NULL; // Redundant?
    32b2:	2300      	movs	r3, #0
    32b4:	66a3      	str	r3, [r4, #104]	; 0x68
  if (packetUBXRXMSFRBX != NULL)
    32b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    32b8:	b163      	cbz	r3, 32d4 <SFE_UBLOX_GNSS::end()+0x330>
    if (packetUBXRXMSFRBX->callbackData != NULL)
    32ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
    32bc:	2800      	cmp	r0, #0
    32be:	f000 8240 	beq.w	3742 <SFE_UBLOX_GNSS::end()+0x79e>
      delete packetUBXRXMSFRBX->callbackData;
    32c2:	2148      	movs	r1, #72	; 0x48
    32c4:	f007 fd52 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXRXMSFRBX;
    32c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    32ca:	2b00      	cmp	r3, #0
    32cc:	f040 8239 	bne.w	3742 <SFE_UBLOX_GNSS::end()+0x79e>
    packetUBXRXMSFRBX = NULL; // Redundant?
    32d0:	2300      	movs	r3, #0
    32d2:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (packetUBXRXMRAWX != NULL)
    32d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    32d6:	b173      	cbz	r3, 32f6 <SFE_UBLOX_GNSS::end()+0x352>
    if (packetUBXRXMRAWX->callbackData != NULL)
    32d8:	f8d3 0b9c 	ldr.w	r0, [r3, #2972]	; 0xb9c
    32dc:	2800      	cmp	r0, #0
    32de:	f000 822a 	beq.w	3736 <SFE_UBLOX_GNSS::end()+0x792>
      delete packetUBXRXMRAWX->callbackData;
    32e2:	f44f 6139 	mov.w	r1, #2960	; 0xb90
    32e6:	f007 fd41 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXRXMRAWX;
    32ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
    32ec:	2b00      	cmp	r3, #0
    32ee:	f040 8222 	bne.w	3736 <SFE_UBLOX_GNSS::end()+0x792>
    packetUBXRXMRAWX = NULL; // Redundant?
    32f2:	2300      	movs	r3, #0
    32f4:	6723      	str	r3, [r4, #112]	; 0x70
  if (packetUBXCFGRATE != NULL)
    32f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    32f8:	b120      	cbz	r0, 3304 <SFE_UBLOX_GNSS::end()+0x360>
    delete packetUBXCFGRATE;
    32fa:	210c      	movs	r1, #12
    32fc:	f007 fd36 	bl	ad6c <operator delete(void*, unsigned int)>
    packetUBXCFGRATE = NULL; // Redundant?
    3300:	2300      	movs	r3, #0
    3302:	67a3      	str	r3, [r4, #120]	; 0x78
  if (packetUBXTIMTM2 != NULL)
    3304:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3308:	b18b      	cbz	r3, 332e <SFE_UBLOX_GNSS::end()+0x38a>
    if (packetUBXTIMTM2->callbackData != NULL)
    330a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    330c:	2800      	cmp	r0, #0
    330e:	f000 820d 	beq.w	372c <SFE_UBLOX_GNSS::end()+0x788>
      delete packetUBXTIMTM2->callbackData;
    3312:	211c      	movs	r1, #28
    3314:	f007 fd2a 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXTIMTM2;
    3318:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    331c:	2b00      	cmp	r3, #0
    331e:	f040 8205 	bne.w	372c <SFE_UBLOX_GNSS::end()+0x788>
    3322:	e001      	b.n	3328 <SFE_UBLOX_GNSS::end()+0x384>
    3324:	20002800 	.word	0x20002800
    packetUBXTIMTM2 = NULL; // Redundant?
    3328:	2300      	movs	r3, #0
    332a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if (packetUBXTIMSMEAS != NULL)
    332e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    3330:	b16b      	cbz	r3, 334e <SFE_UBLOX_GNSS::end()+0x3aa>
    if (packetUBXTIMSMEAS->callbackData != NULL)
    3332:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    3336:	2800      	cmp	r0, #0
    3338:	f000 81f3 	beq.w	3722 <SFE_UBLOX_GNSS::end()+0x77e>
      delete packetUBXTIMSMEAS->callbackData;
    333c:	219c      	movs	r1, #156	; 0x9c
    333e:	f007 fd15 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXTIMSMEAS;
    3342:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    3344:	2b00      	cmp	r3, #0
    3346:	f040 81ec 	bne.w	3722 <SFE_UBLOX_GNSS::end()+0x77e>
    packetUBXTIMSMEAS = NULL; // Redundant
    334a:	2300      	movs	r3, #0
    334c:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (packetUBXESFALG != NULL)
    334e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    3352:	b173      	cbz	r3, 3372 <SFE_UBLOX_GNSS::end()+0x3ce>
    if (packetUBXESFALG->callbackData != NULL)
    3354:	6a18      	ldr	r0, [r3, #32]
    3356:	2800      	cmp	r0, #0
    3358:	f000 81de 	beq.w	3718 <SFE_UBLOX_GNSS::end()+0x774>
      delete packetUBXESFALG->callbackData;
    335c:	2110      	movs	r1, #16
    335e:	f007 fd05 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXESFALG;
    3362:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    3366:	2b00      	cmp	r3, #0
    3368:	f040 81d6 	bne.w	3718 <SFE_UBLOX_GNSS::end()+0x774>
    packetUBXESFALG = NULL; // Redundant?
    336c:	2300      	movs	r3, #0
    336e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (packetUBXESFSTATUS != NULL)
    3372:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    3376:	b173      	cbz	r3, 3396 <SFE_UBLOX_GNSS::end()+0x3f2>
    if (packetUBXESFSTATUS->callbackData != NULL)
    3378:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    337a:	2800      	cmp	r0, #0
    337c:	f000 817b 	beq.w	3676 <SFE_UBLOX_GNSS::end()+0x6d2>
      delete packetUBXESFSTATUS->callbackData;
    3380:	212c      	movs	r1, #44	; 0x2c
    3382:	f007 fcf3 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXESFSTATUS;
    3386:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    338a:	2b00      	cmp	r3, #0
    338c:	f040 8173 	bne.w	3676 <SFE_UBLOX_GNSS::end()+0x6d2>
    packetUBXESFSTATUS = NULL; // Redundant?
    3390:	2300      	movs	r3, #0
    3392:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if (packetUBXESFINS != NULL)
    3396:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    339a:	b173      	cbz	r3, 33ba <SFE_UBLOX_GNSS::end()+0x416>
    if (packetUBXESFINS->callbackData != NULL)
    339c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    339e:	2800      	cmp	r0, #0
    33a0:	f000 8164 	beq.w	366c <SFE_UBLOX_GNSS::end()+0x6c8>
      delete packetUBXESFINS->callbackData;
    33a4:	2124      	movs	r1, #36	; 0x24
    33a6:	f007 fce1 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXESFINS;
    33aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    33ae:	2b00      	cmp	r3, #0
    33b0:	f040 815c 	bne.w	366c <SFE_UBLOX_GNSS::end()+0x6c8>
    packetUBXESFINS = NULL; // Redundant?
    33b4:	2300      	movs	r3, #0
    33b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  if (packetUBXESFMEAS != NULL)
    33ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    33be:	b17b      	cbz	r3, 33e0 <SFE_UBLOX_GNSS::end()+0x43c>
    if (packetUBXESFMEAS->callbackData != NULL)
    33c0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    33c4:	2800      	cmp	r0, #0
    33c6:	f000 814c 	beq.w	3662 <SFE_UBLOX_GNSS::end()+0x6be>
      delete packetUBXESFMEAS->callbackData;
    33ca:	2188      	movs	r1, #136	; 0x88
    33cc:	f007 fcce 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXESFMEAS;
    33d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    33d4:	2b00      	cmp	r3, #0
    33d6:	f040 8144 	bne.w	3662 <SFE_UBLOX_GNSS::end()+0x6be>
    packetUBXESFMEAS = NULL; // Redundant?
    33da:	2300      	movs	r3, #0
    33dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (packetUBXESFRAW != NULL)
    33e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    33e4:	b183      	cbz	r3, 3408 <SFE_UBLOX_GNSS::end()+0x464>
    if (packetUBXESFRAW->callbackData != NULL)
    33e6:	f8d3 0244 	ldr.w	r0, [r3, #580]	; 0x244
    33ea:	2800      	cmp	r0, #0
    33ec:	f000 8133 	beq.w	3656 <SFE_UBLOX_GNSS::end()+0x6b2>
      delete packetUBXESFRAW->callbackData;
    33f0:	f44f 710e 	mov.w	r1, #568	; 0x238
    33f4:	f007 fcba 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXESFRAW;
    33f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    33fc:	2b00      	cmp	r3, #0
    33fe:	f040 812a 	bne.w	3656 <SFE_UBLOX_GNSS::end()+0x6b2>
    packetUBXESFRAW = NULL; // Redundant?
    3402:	2300      	movs	r3, #0
    3404:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  if (packetUBXMGAACK != NULL)
    3408:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    340c:	b128      	cbz	r0, 341a <SFE_UBLOX_GNSS::end()+0x476>
    delete packetUBXMGAACK;
    340e:	2182      	movs	r1, #130	; 0x82
    3410:	f007 fcac 	bl	ad6c <operator delete(void*, unsigned int)>
    packetUBXMGAACK = NULL; // Redundant?
    3414:	2300      	movs	r3, #0
    3416:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  if (packetUBXMGADBD != NULL)
    341a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    341e:	b130      	cbz	r0, 342e <SFE_UBLOX_GNSS::end()+0x48a>
    delete packetUBXMGADBD;
    3420:	f24a 71fa 	movw	r1, #43002	; 0xa7fa
    3424:	f007 fca2 	bl	ad6c <operator delete(void*, unsigned int)>
    packetUBXMGADBD = NULL; // Redundant?
    3428:	2300      	movs	r3, #0
    342a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  if (packetUBXHNRATT != NULL)
    342e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    3432:	b173      	cbz	r3, 3452 <SFE_UBLOX_GNSS::end()+0x4ae>
    if (packetUBXHNRATT->callbackData != NULL)
    3434:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3436:	2800      	cmp	r0, #0
    3438:	f000 8108 	beq.w	364c <SFE_UBLOX_GNSS::end()+0x6a8>
      delete packetUBXHNRATT->callbackData;
    343c:	2120      	movs	r1, #32
    343e:	f007 fc95 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXHNRATT;
    3442:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    3446:	2b00      	cmp	r3, #0
    3448:	f040 8100 	bne.w	364c <SFE_UBLOX_GNSS::end()+0x6a8>
    packetUBXHNRATT = NULL; // Redundant?
    344c:	2300      	movs	r3, #0
    344e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (packetUBXHNRINS != NULL)
    3452:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    3456:	b173      	cbz	r3, 3476 <SFE_UBLOX_GNSS::end()+0x4d2>
    if (packetUBXHNRINS->callbackData != NULL)
    3458:	6b58      	ldr	r0, [r3, #52]	; 0x34
    345a:	2800      	cmp	r0, #0
    345c:	f000 80f1 	beq.w	3642 <SFE_UBLOX_GNSS::end()+0x69e>
      delete packetUBXHNRINS->callbackData;
    3460:	2124      	movs	r1, #36	; 0x24
    3462:	f007 fc83 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXHNRINS;
    3466:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    346a:	2b00      	cmp	r3, #0
    346c:	f040 80e9 	bne.w	3642 <SFE_UBLOX_GNSS::end()+0x69e>
    packetUBXHNRINS = NULL; // Redundant?
    3470:	2300      	movs	r3, #0
    3472:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  if (packetUBXHNRPVT != NULL)
    3476:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    347a:	b173      	cbz	r3, 349a <SFE_UBLOX_GNSS::end()+0x4f6>
    if (packetUBXHNRPVT->callbackData != NULL)
    347c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    347e:	2800      	cmp	r0, #0
    3480:	f000 80da 	beq.w	3638 <SFE_UBLOX_GNSS::end()+0x694>
      delete packetUBXHNRPVT->callbackData;
    3484:	2148      	movs	r1, #72	; 0x48
    3486:	f007 fc71 	bl	ad6c <operator delete(void*, unsigned int)>
    delete packetUBXHNRPVT;
    348a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    348e:	2b00      	cmp	r3, #0
    3490:	f040 80d2 	bne.w	3638 <SFE_UBLOX_GNSS::end()+0x694>
    packetUBXHNRPVT = NULL; // Redundant?
    3494:	2300      	movs	r3, #0
    3496:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  if (storageNMEAGPGGA != NULL)
    349a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    349e:	b17b      	cbz	r3, 34c0 <SFE_UBLOX_GNSS::end()+0x51c>
    if (storageNMEAGPGGA->callbackCopy != NULL)
    34a0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    34a4:	2800      	cmp	r0, #0
    34a6:	f000 80c2 	beq.w	362e <SFE_UBLOX_GNSS::end()+0x68a>
      delete storageNMEAGPGGA->callbackCopy;
    34aa:	2165      	movs	r1, #101	; 0x65
    34ac:	f007 fc5e 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGPGGA;
    34b0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    34b4:	2b00      	cmp	r3, #0
    34b6:	f040 80ba 	bne.w	362e <SFE_UBLOX_GNSS::end()+0x68a>
    storageNMEAGPGGA = NULL; // Redundant?
    34ba:	2300      	movs	r3, #0
    34bc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  if (storageNMEAGNGGA != NULL)
    34c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    34c4:	b17b      	cbz	r3, 34e6 <SFE_UBLOX_GNSS::end()+0x542>
    if (storageNMEAGNGGA->callbackCopy != NULL)
    34c6:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    34ca:	2800      	cmp	r0, #0
    34cc:	f000 80f6 	beq.w	36bc <SFE_UBLOX_GNSS::end()+0x718>
      delete storageNMEAGNGGA->callbackCopy;
    34d0:	2165      	movs	r1, #101	; 0x65
    34d2:	f007 fc4b 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGNGGA;
    34d6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    34da:	2b00      	cmp	r3, #0
    34dc:	f040 80ee 	bne.w	36bc <SFE_UBLOX_GNSS::end()+0x718>
    storageNMEAGNGGA = NULL; // Redundant?
    34e0:	2300      	movs	r3, #0
    34e2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  if (storageNMEAGPVTG != NULL)
    34e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    34ea:	b17b      	cbz	r3, 350c <SFE_UBLOX_GNSS::end()+0x568>
    if (storageNMEAGPVTG->callbackCopy != NULL)
    34ec:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    34f0:	2800      	cmp	r0, #0
    34f2:	f000 80de 	beq.w	36b2 <SFE_UBLOX_GNSS::end()+0x70e>
      delete storageNMEAGPVTG->callbackCopy;
    34f6:	2165      	movs	r1, #101	; 0x65
    34f8:	f007 fc38 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGPVTG;
    34fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    3500:	2b00      	cmp	r3, #0
    3502:	f040 80d6 	bne.w	36b2 <SFE_UBLOX_GNSS::end()+0x70e>
    storageNMEAGPVTG = NULL; // Redundant?
    3506:	2300      	movs	r3, #0
    3508:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  if (storageNMEAGNVTG != NULL)
    350c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    3510:	b17b      	cbz	r3, 3532 <SFE_UBLOX_GNSS::end()+0x58e>
    if (storageNMEAGNVTG->callbackCopy != NULL)
    3512:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    3516:	2800      	cmp	r0, #0
    3518:	f000 80c6 	beq.w	36a8 <SFE_UBLOX_GNSS::end()+0x704>
      delete storageNMEAGNVTG->callbackCopy;
    351c:	2165      	movs	r1, #101	; 0x65
    351e:	f007 fc25 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGNVTG;
    3522:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    3526:	2b00      	cmp	r3, #0
    3528:	f040 80be 	bne.w	36a8 <SFE_UBLOX_GNSS::end()+0x704>
    storageNMEAGNVTG = NULL; // Redundant?
    352c:	2300      	movs	r3, #0
    352e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  if (storageNMEAGPRMC != NULL)
    3532:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    3536:	b17b      	cbz	r3, 3558 <SFE_UBLOX_GNSS::end()+0x5b4>
    if (storageNMEAGPRMC->callbackCopy != NULL)
    3538:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    353c:	2800      	cmp	r0, #0
    353e:	f000 80ae 	beq.w	369e <SFE_UBLOX_GNSS::end()+0x6fa>
      delete storageNMEAGPRMC->callbackCopy;
    3542:	2165      	movs	r1, #101	; 0x65
    3544:	f007 fc12 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGPRMC;
    3548:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    354c:	2b00      	cmp	r3, #0
    354e:	f040 80a6 	bne.w	369e <SFE_UBLOX_GNSS::end()+0x6fa>
    storageNMEAGPRMC = NULL; // Redundant?
    3552:	2300      	movs	r3, #0
    3554:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  if (storageNMEAGNRMC != NULL)
    3558:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    355c:	b17b      	cbz	r3, 357e <SFE_UBLOX_GNSS::end()+0x5da>
    if (storageNMEAGNRMC->callbackCopy != NULL)
    355e:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    3562:	2800      	cmp	r0, #0
    3564:	f000 8096 	beq.w	3694 <SFE_UBLOX_GNSS::end()+0x6f0>
      delete storageNMEAGNRMC->callbackCopy;
    3568:	2165      	movs	r1, #101	; 0x65
    356a:	f007 fbff 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGNRMC;
    356e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    3572:	2b00      	cmp	r3, #0
    3574:	f040 808e 	bne.w	3694 <SFE_UBLOX_GNSS::end()+0x6f0>
    storageNMEAGNRMC = NULL; // Redundant?
    3578:	2300      	movs	r3, #0
    357a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  if (storageNMEAGPZDA != NULL)
    357e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    3582:	b163      	cbz	r3, 359e <SFE_UBLOX_GNSS::end()+0x5fa>
    if (storageNMEAGPZDA->callbackCopy != NULL)
    3584:	6f18      	ldr	r0, [r3, #112]	; 0x70
    3586:	2800      	cmp	r0, #0
    3588:	d07f      	beq.n	368a <SFE_UBLOX_GNSS::end()+0x6e6>
      delete storageNMEAGPZDA->callbackCopy;
    358a:	2133      	movs	r1, #51	; 0x33
    358c:	f007 fbee 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGPZDA;
    3590:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    3594:	2b00      	cmp	r3, #0
    3596:	d178      	bne.n	368a <SFE_UBLOX_GNSS::end()+0x6e6>
    storageNMEAGPZDA = NULL; // Redundant?
    3598:	2300      	movs	r3, #0
    359a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  if (storageNMEAGNZDA != NULL)
    359e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    35a2:	b163      	cbz	r3, 35be <SFE_UBLOX_GNSS::end()+0x61a>
    if (storageNMEAGNZDA->callbackCopy != NULL)
    35a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
    35a6:	2800      	cmp	r0, #0
    35a8:	d06a      	beq.n	3680 <SFE_UBLOX_GNSS::end()+0x6dc>
      delete storageNMEAGNZDA->callbackCopy;
    35aa:	2133      	movs	r1, #51	; 0x33
    35ac:	f007 fbde 	bl	ad6c <operator delete(void*, unsigned int)>
    delete storageNMEAGNZDA;
    35b0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    35b4:	2b00      	cmp	r3, #0
    35b6:	d163      	bne.n	3680 <SFE_UBLOX_GNSS::end()+0x6dc>
    storageNMEAGNZDA = NULL; // Redundant?
    35b8:	2300      	movs	r3, #0
    35ba:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    35be:	bd38      	pop	{r3, r4, r5, pc}
    delete packetUBXNAVPOSECEF; // Created with new UBX_NAV_POSECEF_t
    35c0:	2128      	movs	r1, #40	; 0x28
    35c2:	4618      	mov	r0, r3
    35c4:	f007 fbd2 	bl	ad6c <operator delete(void*, unsigned int)>
    35c8:	e521      	b.n	300e <SFE_UBLOX_GNSS::end()+0x6a>
    delete packetUBXNAVDOP;
    35ca:	2128      	movs	r1, #40	; 0x28
    35cc:	4618      	mov	r0, r3
    35ce:	f007 fbcd 	bl	ad6c <operator delete(void*, unsigned int)>
    35d2:	e53a      	b.n	304a <SFE_UBLOX_GNSS::end()+0xa6>
    delete packetUBXNAVSTATUS;
    35d4:	2124      	movs	r1, #36	; 0x24
    35d6:	4618      	mov	r0, r3
    35d8:	f007 fbc8 	bl	ad6c <operator delete(void*, unsigned int)>
    35dc:	e526      	b.n	302c <SFE_UBLOX_GNSS::end()+0x88>
    delete packetUBXNAVPVAT;
    35de:	218c      	movs	r1, #140	; 0x8c
    35e0:	4618      	mov	r0, r3
    35e2:	f007 fbc3 	bl	ad6c <operator delete(void*, unsigned int)>
    35e6:	e5bc      	b.n	3162 <SFE_UBLOX_GNSS::end()+0x1be>
    delete packetUBXNAVHPPOSLLH;
    35e8:	2138      	movs	r1, #56	; 0x38
    35ea:	4618      	mov	r0, r3
    35ec:	f007 fbbe 	bl	ad6c <operator delete(void*, unsigned int)>
    35f0:	e5a7      	b.n	3142 <SFE_UBLOX_GNSS::end()+0x19e>
    delete packetUBXNAVHPPOSECEF;
    35f2:	2130      	movs	r1, #48	; 0x30
    35f4:	4618      	mov	r0, r3
    35f6:	f007 fbb9 	bl	ad6c <operator delete(void*, unsigned int)>
    35fa:	e593      	b.n	3124 <SFE_UBLOX_GNSS::end()+0x180>
    delete packetUBXNAVVELNED;
    35fc:	2138      	movs	r1, #56	; 0x38
    35fe:	4618      	mov	r0, r3
    3600:	f007 fbb4 	bl	ad6c <operator delete(void*, unsigned int)>
    3604:	e57f      	b.n	3106 <SFE_UBLOX_GNSS::end()+0x162>
    delete packetUBXNAVVELECEF;
    3606:	2128      	movs	r1, #40	; 0x28
    3608:	4618      	mov	r0, r3
    360a:	f007 fbaf 	bl	ad6c <operator delete(void*, unsigned int)>
    360e:	e56b      	b.n	30e8 <SFE_UBLOX_GNSS::end()+0x144>
    delete packetUBXNAVODO;
    3610:	2128      	movs	r1, #40	; 0x28
    3612:	4618      	mov	r0, r3
    3614:	f007 fbaa 	bl	ad6c <operator delete(void*, unsigned int)>
    3618:	e557      	b.n	30ca <SFE_UBLOX_GNSS::end()+0x126>
    delete packetUBXNAVPVT;
    361a:	2174      	movs	r1, #116	; 0x74
    361c:	4618      	mov	r0, r3
    361e:	f007 fba5 	bl	ad6c <operator delete(void*, unsigned int)>
    3622:	e535      	b.n	3090 <SFE_UBLOX_GNSS::end()+0xec>
    delete packetUBXNAVATT;
    3624:	2134      	movs	r1, #52	; 0x34
    3626:	4618      	mov	r0, r3
    3628:	f007 fba0 	bl	ad6c <operator delete(void*, unsigned int)>
    362c:	e51c      	b.n	3068 <SFE_UBLOX_GNSS::end()+0xc4>
    delete storageNMEAGPGGA;
    362e:	21d8      	movs	r1, #216	; 0xd8
    3630:	4618      	mov	r0, r3
    3632:	f007 fb9b 	bl	ad6c <operator delete(void*, unsigned int)>
    3636:	e740      	b.n	34ba <SFE_UBLOX_GNSS::end()+0x516>
    delete packetUBXHNRPVT;
    3638:	215c      	movs	r1, #92	; 0x5c
    363a:	4618      	mov	r0, r3
    363c:	f007 fb96 	bl	ad6c <operator delete(void*, unsigned int)>
    3640:	e728      	b.n	3494 <SFE_UBLOX_GNSS::end()+0x4f0>
    delete packetUBXHNRINS;
    3642:	2138      	movs	r1, #56	; 0x38
    3644:	4618      	mov	r0, r3
    3646:	f007 fb91 	bl	ad6c <operator delete(void*, unsigned int)>
    364a:	e711      	b.n	3470 <SFE_UBLOX_GNSS::end()+0x4cc>
    delete packetUBXHNRATT;
    364c:	2134      	movs	r1, #52	; 0x34
    364e:	4618      	mov	r0, r3
    3650:	f007 fb8c 	bl	ad6c <operator delete(void*, unsigned int)>
    3654:	e6fa      	b.n	344c <SFE_UBLOX_GNSS::end()+0x4a8>
    delete packetUBXESFRAW;
    3656:	f44f 7112 	mov.w	r1, #584	; 0x248
    365a:	4618      	mov	r0, r3
    365c:	f007 fb86 	bl	ad6c <operator delete(void*, unsigned int)>
    3660:	e6cf      	b.n	3402 <SFE_UBLOX_GNSS::end()+0x45e>
    delete packetUBXESFMEAS;
    3662:	2198      	movs	r1, #152	; 0x98
    3664:	4618      	mov	r0, r3
    3666:	f007 fb81 	bl	ad6c <operator delete(void*, unsigned int)>
    366a:	e6b6      	b.n	33da <SFE_UBLOX_GNSS::end()+0x436>
    delete packetUBXESFINS;
    366c:	2138      	movs	r1, #56	; 0x38
    366e:	4618      	mov	r0, r3
    3670:	f007 fb7c 	bl	ad6c <operator delete(void*, unsigned int)>
    3674:	e69e      	b.n	33b4 <SFE_UBLOX_GNSS::end()+0x410>
    delete packetUBXESFSTATUS;
    3676:	2140      	movs	r1, #64	; 0x40
    3678:	4618      	mov	r0, r3
    367a:	f007 fb77 	bl	ad6c <operator delete(void*, unsigned int)>
    367e:	e687      	b.n	3390 <SFE_UBLOX_GNSS::end()+0x3ec>
    delete storageNMEAGNZDA;
    3680:	2174      	movs	r1, #116	; 0x74
    3682:	4618      	mov	r0, r3
    3684:	f007 fb72 	bl	ad6c <operator delete(void*, unsigned int)>
    3688:	e796      	b.n	35b8 <SFE_UBLOX_GNSS::end()+0x614>
    delete storageNMEAGPZDA;
    368a:	2174      	movs	r1, #116	; 0x74
    368c:	4618      	mov	r0, r3
    368e:	f007 fb6d 	bl	ad6c <operator delete(void*, unsigned int)>
    3692:	e781      	b.n	3598 <SFE_UBLOX_GNSS::end()+0x5f4>
    delete storageNMEAGNRMC;
    3694:	21d8      	movs	r1, #216	; 0xd8
    3696:	4618      	mov	r0, r3
    3698:	f007 fb68 	bl	ad6c <operator delete(void*, unsigned int)>
    369c:	e76c      	b.n	3578 <SFE_UBLOX_GNSS::end()+0x5d4>
    delete storageNMEAGPRMC;
    369e:	21d8      	movs	r1, #216	; 0xd8
    36a0:	4618      	mov	r0, r3
    36a2:	f007 fb63 	bl	ad6c <operator delete(void*, unsigned int)>
    36a6:	e754      	b.n	3552 <SFE_UBLOX_GNSS::end()+0x5ae>
    delete storageNMEAGNVTG;
    36a8:	21d8      	movs	r1, #216	; 0xd8
    36aa:	4618      	mov	r0, r3
    36ac:	f007 fb5e 	bl	ad6c <operator delete(void*, unsigned int)>
    36b0:	e73c      	b.n	352c <SFE_UBLOX_GNSS::end()+0x588>
    delete storageNMEAGPVTG;
    36b2:	21d8      	movs	r1, #216	; 0xd8
    36b4:	4618      	mov	r0, r3
    36b6:	f007 fb59 	bl	ad6c <operator delete(void*, unsigned int)>
    36ba:	e724      	b.n	3506 <SFE_UBLOX_GNSS::end()+0x562>
    delete storageNMEAGNGGA;
    36bc:	21d8      	movs	r1, #216	; 0xd8
    36be:	4618      	mov	r0, r3
    36c0:	f007 fb54 	bl	ad6c <operator delete(void*, unsigned int)>
    36c4:	e70c      	b.n	34e0 <SFE_UBLOX_GNSS::end()+0x53c>
    delete packetUBXRXMPMP;
    36c6:	210c      	movs	r1, #12
    36c8:	4618      	mov	r0, r3
    36ca:	f007 fb4f 	bl	ad6c <operator delete(void*, unsigned int)>
    36ce:	e5c3      	b.n	3258 <SFE_UBLOX_GNSS::end()+0x2b4>
    delete packetUBXNAVEOE;
    36d0:	2114      	movs	r1, #20
    36d2:	4618      	mov	r0, r3
    36d4:	f007 fb4a 	bl	ad6c <operator delete(void*, unsigned int)>
    36d8:	e5ae      	b.n	3238 <SFE_UBLOX_GNSS::end()+0x294>
    delete packetUBXNAVAOPSTATUS;
    36da:	2124      	movs	r1, #36	; 0x24
    36dc:	4618      	mov	r0, r3
    36de:	f007 fb45 	bl	ad6c <operator delete(void*, unsigned int)>
    36e2:	e59a      	b.n	321a <SFE_UBLOX_GNSS::end()+0x276>
    delete packetUBXNAVRELPOSNED;
    36e4:	2154      	movs	r1, #84	; 0x54
    36e6:	4618      	mov	r0, r3
    36e8:	f007 fb40 	bl	ad6c <operator delete(void*, unsigned int)>
    36ec:	e586      	b.n	31fc <SFE_UBLOX_GNSS::end()+0x258>
    delete packetUBXNAVSAT;
    36ee:	f44f 6141 	mov.w	r1, #3088	; 0xc10
    36f2:	4618      	mov	r0, r3
    36f4:	f007 fb3a 	bl	ad6c <operator delete(void*, unsigned int)>
    36f8:	e571      	b.n	31de <SFE_UBLOX_GNSS::end()+0x23a>
    delete packetUBXNAVSVIN;
    36fa:	2138      	movs	r1, #56	; 0x38
    36fc:	4618      	mov	r0, r3
    36fe:	f007 fb35 	bl	ad6c <operator delete(void*, unsigned int)>
    3702:	e55b      	b.n	31bc <SFE_UBLOX_GNSS::end()+0x218>
    delete packetUBXNAVCLOCK;
    3704:	2128      	movs	r1, #40	; 0x28
    3706:	4618      	mov	r0, r3
    3708:	f007 fb30 	bl	ad6c <operator delete(void*, unsigned int)>
    370c:	e547      	b.n	319e <SFE_UBLOX_GNSS::end()+0x1fa>
    delete packetUBXNAVTIMEUTC;
    370e:	2124      	movs	r1, #36	; 0x24
    3710:	4618      	mov	r0, r3
    3712:	f007 fb2b 	bl	ad6c <operator delete(void*, unsigned int)>
    3716:	e533      	b.n	3180 <SFE_UBLOX_GNSS::end()+0x1dc>
    delete packetUBXESFALG;
    3718:	2124      	movs	r1, #36	; 0x24
    371a:	4618      	mov	r0, r3
    371c:	f007 fb26 	bl	ad6c <operator delete(void*, unsigned int)>
    3720:	e624      	b.n	336c <SFE_UBLOX_GNSS::end()+0x3c8>
    delete packetUBXTIMSMEAS;
    3722:	21ac      	movs	r1, #172	; 0xac
    3724:	4618      	mov	r0, r3
    3726:	f007 fb21 	bl	ad6c <operator delete(void*, unsigned int)>
    372a:	e60e      	b.n	334a <SFE_UBLOX_GNSS::end()+0x3a6>
    delete packetUBXTIMTM2;
    372c:	2130      	movs	r1, #48	; 0x30
    372e:	4618      	mov	r0, r3
    3730:	f007 fb1c 	bl	ad6c <operator delete(void*, unsigned int)>
    3734:	e5f8      	b.n	3328 <SFE_UBLOX_GNSS::end()+0x384>
    delete packetUBXRXMRAWX;
    3736:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    373a:	4618      	mov	r0, r3
    373c:	f007 fb16 	bl	ad6c <operator delete(void*, unsigned int)>
    3740:	e5d7      	b.n	32f2 <SFE_UBLOX_GNSS::end()+0x34e>
    delete packetUBXRXMSFRBX;
    3742:	215c      	movs	r1, #92	; 0x5c
    3744:	4618      	mov	r0, r3
    3746:	f007 fb11 	bl	ad6c <operator delete(void*, unsigned int)>
    374a:	e5c1      	b.n	32d0 <SFE_UBLOX_GNSS::end()+0x32c>
    delete packetUBXRXMCOR;
    374c:	210c      	movs	r1, #12
    374e:	4618      	mov	r0, r3
    3750:	f007 fb0c 	bl	ad6c <operator delete(void*, unsigned int)>
    3754:	e5ad      	b.n	32b2 <SFE_UBLOX_GNSS::end()+0x30e>
    delete packetUBXRXMQZSSL6message;
    3756:	210c      	movs	r1, #12
    3758:	4618      	mov	r0, r3
    375a:	f007 fb07 	bl	ad6c <operator delete(void*, unsigned int)>
    375e:	e599      	b.n	3294 <SFE_UBLOX_GNSS::end()+0x2f0>
    delete packetUBXRXMPMPmessage;
    3760:	210c      	movs	r1, #12
    3762:	4618      	mov	r0, r3
    3764:	f007 fb02 	bl	ad6c <operator delete(void*, unsigned int)>
    3768:	e586      	b.n	3278 <SFE_UBLOX_GNSS::end()+0x2d4>
      _debugSerial->println(F("end: the file buffer has been deleted. You will need to call setFileBufferSize before .begin to create a new one."));
    376a:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    376e:	2271      	movs	r2, #113	; 0x71
    3770:	490c      	ldr	r1, [pc, #48]	; (37a4 <SFE_UBLOX_GNSS::end()+0x800>)
    3772:	682b      	ldr	r3, [r5, #0]
    3774:	4628      	mov	r0, r5
    3776:	685b      	ldr	r3, [r3, #4]
    3778:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    377a:	4628      	mov	r0, r5
    377c:	f006 fe94 	bl	a4a8 <Print::println()>
    delete[] ubxFileBuffer; // Created with new[]
    3780:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    3784:	2800      	cmp	r0, #0
    3786:	f43f ac19 	beq.w	2fbc <SFE_UBLOX_GNSS::end()+0x18>
    378a:	e415      	b.n	2fb8 <SFE_UBLOX_GNSS::end()+0x14>
        _debugSerial->println(F("end: packetUBXNAVPVT->callbackData has been deleted"));
    378c:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    3790:	2233      	movs	r2, #51	; 0x33
    3792:	4905      	ldr	r1, [pc, #20]	; (37a8 <SFE_UBLOX_GNSS::end()+0x804>)
    3794:	682b      	ldr	r3, [r5, #0]
    3796:	4628      	mov	r0, r5
    3798:	685b      	ldr	r3, [r3, #4]
    379a:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    379c:	4628      	mov	r0, r5
    379e:	f006 fe83 	bl	a4a8 <Print::println()>
    37a2:	e471      	b.n	3088 <SFE_UBLOX_GNSS::end()+0xe4>
    37a4:	20002758 	.word	0x20002758
    37a8:	200027cc 	.word	0x200027cc

000037ac <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()>:
SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS(void)
    37ac:	4b0e      	ldr	r3, [pc, #56]	; (37e8 <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()+0x3c>)
    37ae:	b510      	push	{r4, lr}
    37b0:	4604      	mov	r4, r0
    37b2:	6003      	str	r3, [r0, #0]
  end(); // Delete all allocated memory - excluding payloadCfg, payloadAuto and spiBuffer
    37b4:	f7ff fbf6 	bl	2fa4 <SFE_UBLOX_GNSS::end()>
  if (payloadCfg != NULL)
    37b8:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    37bc:	b120      	cbz	r0, 37c8 <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()+0x1c>
    delete[] payloadCfg; // Created with new[]
    37be:	f007 fad3 	bl	ad68 <operator delete[](void*)>
    payloadCfg = NULL;   // Redundant?
    37c2:	2300      	movs	r3, #0
    37c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  if (payloadAuto != NULL)
    37c8:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    37cc:	b120      	cbz	r0, 37d8 <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()+0x2c>
    delete[] payloadAuto; // Created with new[]
    37ce:	f007 facb 	bl	ad68 <operator delete[](void*)>
    payloadAuto = NULL;   // Redundant?
    37d2:	2300      	movs	r3, #0
    37d4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  if (spiBuffer != NULL)
    37d8:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    37dc:	b108      	cbz	r0, 37e2 <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()+0x36>
    delete[] spiBuffer; // Created with new[]
    37de:	f007 fac3 	bl	ad68 <operator delete[](void*)>
}
    37e2:	4620      	mov	r0, r4
    37e4:	bd10      	pop	{r4, pc}
    37e6:	bf00      	nop
    37e8:	20002aa4 	.word	0x20002aa4

000037ec <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()>:
SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS(void)
    37ec:	b510      	push	{r4, lr}
    37ee:	4604      	mov	r4, r0
}
    37f0:	f7ff ffdc 	bl	37ac <SFE_UBLOX_GNSS::~SFE_UBLOX_GNSS()>
    37f4:	f44f 71c4 	mov.w	r1, #392	; 0x188
    37f8:	4620      	mov	r0, r4
    37fa:	f007 fab7 	bl	ad6c <operator delete(void*, unsigned int)>
    37fe:	4620      	mov	r0, r4
    3800:	bd10      	pop	{r4, pc}
    3802:	bf00      	nop

00003804 <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)>:
{
    3804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3806:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
    3808:	460d      	mov	r5, r1
    380a:	b9e9      	cbnz	r1, 3848 <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)+0x44>
    380c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    3810:	b3b0      	cbz	r0, 3880 <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)+0x7c>
    delete[] payloadCfg; // Created with new[]
    3812:	f007 faa9 	bl	ad68 <operator delete[](void*)>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    3816:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    payloadCfg = NULL;   // Redundant?
    381a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    packetCfg.payload = payloadCfg;
    381e:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    packetCfgPayloadSize = payloadSize;
    3822:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    3826:	b913      	cbnz	r3, 382e <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)+0x2a>
    3828:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    382c:	b333      	cbz	r3, 387c <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)+0x78>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
    382e:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    3832:	222a      	movs	r2, #42	; 0x2a
    3834:	4917      	ldr	r1, [pc, #92]	; (3894 <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)+0x90>)
    3836:	6823      	ldr	r3, [r4, #0]
    3838:	4620      	mov	r0, r4
    383a:	685b      	ldr	r3, [r3, #4]
    383c:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    383e:	4620      	mov	r0, r4
    3840:	f006 fe32 	bl	a4a8 <Print::println()>
}
    3844:	2001      	movs	r0, #1
    3846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
    3848:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    384c:	b1c3      	cbz	r3, 3880 <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)+0x7c>
    uint8_t *newPayload = new uint8_t[payloadSize];
    384e:	4608      	mov	r0, r1
    3850:	f007 fa88 	bl	ad64 <operator new[](unsigned int)>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
    3854:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    3858:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
    uint8_t *newPayload = new uint8_t[payloadSize];
    385c:	4606      	mov	r6, r0
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
    385e:	42aa      	cmp	r2, r5
    3860:	4639      	mov	r1, r7
    3862:	bf28      	it	cs
    3864:	462a      	movcs	r2, r5
    3866:	f007 f9e1 	bl	ac2c <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
    386a:	4638      	mov	r0, r7
    386c:	f007 fa7c 	bl	ad68 <operator delete[](void*)>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
    3870:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
    3874:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
    3878:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    387c:	2001      	movs	r0, #1
    387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    payloadCfg = new uint8_t[payloadSize];
    3880:	4628      	mov	r0, r5
    3882:	f007 fa6f 	bl	ad64 <operator new[](unsigned int)>
    packetCfg.payload = payloadCfg;
    3886:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    payloadCfg = new uint8_t[payloadSize];
    388a:	e9c4 5040 	strd	r5, r0, [r4, #256]	; 0x100
}
    388e:	2001      	movs	r0, #1
    3890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3892:	bf00      	nop
    3894:	2000272c 	.word	0x2000272c

00003898 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)>:
  switch (Class)
    3898:	3901      	subs	r1, #1
    389a:	2927      	cmp	r1, #39	; 0x27
    389c:	d832      	bhi.n	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
    389e:	e8df f011 	tbh	[pc, r1, lsl #1]
    38a2:	0033      	.short	0x0033
    38a4:	003100fb 	.word	0x003100fb
    38a8:	00310031 	.word	0x00310031
    38ac:	0031010a 	.word	0x0031010a
    38b0:	00310031 	.word	0x00310031
    38b4:	00310031 	.word	0x00310031
    38b8:	01150031 	.word	0x01150031
    38bc:	00310031 	.word	0x00310031
    38c0:	00310120 	.word	0x00310120
    38c4:	014f0031 	.word	0x014f0031
    38c8:	00310031 	.word	0x00310031
    38cc:	00310031 	.word	0x00310031
    38d0:	00310031 	.word	0x00310031
    38d4:	00310031 	.word	0x00310031
    38d8:	00310031 	.word	0x00310031
    38dc:	00310031 	.word	0x00310031
    38e0:	00310031 	.word	0x00310031
    38e4:	00310031 	.word	0x00310031
    38e8:	00310031 	.word	0x00310031
    38ec:	00310031 	.word	0x00310031
    38f0:	0028      	.short	0x0028
    switch (ID)
    38f2:	2a01      	cmp	r2, #1
    38f4:	f000 81d5 	beq.w	3ca2 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x40a>
    38f8:	2a02      	cmp	r2, #2
    38fa:	f000 81cc 	beq.w	3c96 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x3fe>
    38fe:	2a00      	cmp	r2, #0
    3900:	f000 8135 	beq.w	3b6e <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x2d6>
    3904:	2000      	movs	r0, #0
}
    3906:	4770      	bx	lr
    switch (ID)
    3908:	3a01      	subs	r2, #1
    390a:	2a60      	cmp	r2, #96	; 0x60
    390c:	d8fa      	bhi.n	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
    390e:	a301      	add	r3, pc, #4	; (adr r3, 3914 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x7c>)
    3910:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3914:	00003c6b 	.word	0x00003c6b
    3918:	00003905 	.word	0x00003905
    391c:	00003c61 	.word	0x00003c61
    3920:	00003c57 	.word	0x00003c57
    3924:	00003c4d 	.word	0x00003c4d
    3928:	00003905 	.word	0x00003905
    392c:	00003c43 	.word	0x00003c43
    3930:	00003905 	.word	0x00003905
    3934:	00003c39 	.word	0x00003c39
    3938:	00003905 	.word	0x00003905
    393c:	00003905 	.word	0x00003905
    3940:	00003905 	.word	0x00003905
    3944:	00003905 	.word	0x00003905
    3948:	00003905 	.word	0x00003905
    394c:	00003905 	.word	0x00003905
    3950:	00003905 	.word	0x00003905
    3954:	00003c2f 	.word	0x00003c2f
    3958:	00003c25 	.word	0x00003c25
    395c:	00003c1b 	.word	0x00003c1b
    3960:	00003c11 	.word	0x00003c11
    3964:	00003905 	.word	0x00003905
    3968:	00003905 	.word	0x00003905
    396c:	00003c07 	.word	0x00003c07
    3970:	00003905 	.word	0x00003905
    3974:	00003905 	.word	0x00003905
    3978:	00003905 	.word	0x00003905
    397c:	00003905 	.word	0x00003905
    3980:	00003905 	.word	0x00003905
    3984:	00003905 	.word	0x00003905
    3988:	00003905 	.word	0x00003905
    398c:	00003905 	.word	0x00003905
    3990:	00003905 	.word	0x00003905
    3994:	00003bfd 	.word	0x00003bfd
    3998:	00003bf3 	.word	0x00003bf3
    399c:	00003905 	.word	0x00003905
    39a0:	00003905 	.word	0x00003905
    39a4:	00003905 	.word	0x00003905
    39a8:	00003be9 	.word	0x00003be9
    39ac:	00003905 	.word	0x00003905
    39b0:	00003905 	.word	0x00003905
    39b4:	00003905 	.word	0x00003905
    39b8:	00003905 	.word	0x00003905
    39bc:	00003905 	.word	0x00003905
    39c0:	00003905 	.word	0x00003905
    39c4:	00003905 	.word	0x00003905
    39c8:	00003905 	.word	0x00003905
    39cc:	00003905 	.word	0x00003905
    39d0:	00003905 	.word	0x00003905
    39d4:	00003905 	.word	0x00003905
    39d8:	00003905 	.word	0x00003905
    39dc:	00003905 	.word	0x00003905
    39e0:	00003905 	.word	0x00003905
    39e4:	00003bdf 	.word	0x00003bdf
    39e8:	00003905 	.word	0x00003905
    39ec:	00003905 	.word	0x00003905
    39f0:	00003905 	.word	0x00003905
    39f4:	00003905 	.word	0x00003905
    39f8:	00003905 	.word	0x00003905
    39fc:	00003bd5 	.word	0x00003bd5
    3a00:	00003bcb 	.word	0x00003bcb
    3a04:	00003905 	.word	0x00003905
    3a08:	00003905 	.word	0x00003905
    3a0c:	00003905 	.word	0x00003905
    3a10:	00003905 	.word	0x00003905
    3a14:	00003905 	.word	0x00003905
    3a18:	00003905 	.word	0x00003905
    3a1c:	00003905 	.word	0x00003905
    3a20:	00003905 	.word	0x00003905
    3a24:	00003905 	.word	0x00003905
    3a28:	00003905 	.word	0x00003905
    3a2c:	00003905 	.word	0x00003905
    3a30:	00003905 	.word	0x00003905
    3a34:	00003905 	.word	0x00003905
    3a38:	00003905 	.word	0x00003905
    3a3c:	00003905 	.word	0x00003905
    3a40:	00003905 	.word	0x00003905
    3a44:	00003905 	.word	0x00003905
    3a48:	00003905 	.word	0x00003905
    3a4c:	00003905 	.word	0x00003905
    3a50:	00003905 	.word	0x00003905
    3a54:	00003905 	.word	0x00003905
    3a58:	00003905 	.word	0x00003905
    3a5c:	00003905 	.word	0x00003905
    3a60:	00003905 	.word	0x00003905
    3a64:	00003905 	.word	0x00003905
    3a68:	00003905 	.word	0x00003905
    3a6c:	00003905 	.word	0x00003905
    3a70:	00003905 	.word	0x00003905
    3a74:	00003905 	.word	0x00003905
    3a78:	00003905 	.word	0x00003905
    3a7c:	00003905 	.word	0x00003905
    3a80:	00003905 	.word	0x00003905
    3a84:	00003905 	.word	0x00003905
    3a88:	00003905 	.word	0x00003905
    3a8c:	00003905 	.word	0x00003905
    3a90:	00003bc1 	.word	0x00003bc1
    3a94:	00003bb7 	.word	0x00003bb7
    switch (ID)
    3a98:	2a34      	cmp	r2, #52	; 0x34
    3a9a:	f000 8108 	beq.w	3cae <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x416>
    3a9e:	d85b      	bhi.n	3b58 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x2c0>
    3aa0:	2a13      	cmp	r2, #19
    3aa2:	f000 810d 	beq.w	3cc0 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x428>
    3aa6:	2a15      	cmp	r2, #21
    3aa8:	f47f af2c 	bne.w	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
      if (packetUBXRXMRAWX != NULL)
    3aac:	6f00      	ldr	r0, [r0, #112]	; 0x70
    3aae:	3800      	subs	r0, #0
    3ab0:	bf18      	it	ne
    3ab2:	2001      	movne	r0, #1
    3ab4:	4770      	bx	lr
    switch (ID)
    3ab6:	2a00      	cmp	r2, #0
    3ab8:	f000 80e2 	beq.w	3c80 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x3e8>
    3abc:	2a08      	cmp	r2, #8
    3abe:	f47f af21 	bne.w	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
      if (packetUBXCFGRATE != NULL)
    3ac2:	6f80      	ldr	r0, [r0, #120]	; 0x78
    3ac4:	3800      	subs	r0, #0
    3ac6:	bf18      	it	ne
    3ac8:	2001      	movne	r0, #1
    3aca:	4770      	bx	lr
    switch (ID)
    3acc:	2a03      	cmp	r2, #3
    3ace:	f000 80d1 	beq.w	3c74 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x3dc>
    3ad2:	2a13      	cmp	r2, #19
    3ad4:	f47f af16 	bne.w	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
      if (packetUBXTIMSMEAS != NULL)
    3ad8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    3ada:	3800      	subs	r0, #0
    3adc:	bf18      	it	ne
    3ade:	2001      	movne	r0, #1
    3ae0:	4770      	bx	lr
    switch (ID)
    3ae2:	3a02      	subs	r2, #2
    3ae4:	2a13      	cmp	r2, #19
    3ae6:	f63f af0d 	bhi.w	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
    3aea:	a301      	add	r3, pc, #4	; (adr r3, 3af0 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x258>)
    3aec:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3af0:	00003bab 	.word	0x00003bab
    3af4:	00003b9f 	.word	0x00003b9f
    3af8:	00003905 	.word	0x00003905
    3afc:	00003905 	.word	0x00003905
    3b00:	00003905 	.word	0x00003905
    3b04:	00003905 	.word	0x00003905
    3b08:	00003905 	.word	0x00003905
    3b0c:	00003905 	.word	0x00003905
    3b10:	00003905 	.word	0x00003905
    3b14:	00003905 	.word	0x00003905
    3b18:	00003905 	.word	0x00003905
    3b1c:	00003905 	.word	0x00003905
    3b20:	00003905 	.word	0x00003905
    3b24:	00003905 	.word	0x00003905
    3b28:	00003b93 	.word	0x00003b93
    3b2c:	00003905 	.word	0x00003905
    3b30:	00003905 	.word	0x00003905
    3b34:	00003905 	.word	0x00003905
    3b38:	00003b87 	.word	0x00003b87
    3b3c:	00003b7b 	.word	0x00003b7b
    switch (ID)
    3b40:	2a60      	cmp	r2, #96	; 0x60
    3b42:	f000 80a2 	beq.w	3c8a <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x3f2>
    3b46:	2a80      	cmp	r2, #128	; 0x80
    3b48:	f47f aedc 	bne.w	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
      if (packetUBXMGADBD != NULL)
    3b4c:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    3b50:	3800      	subs	r0, #0
    3b52:	bf18      	it	ne
    3b54:	2001      	movne	r0, #1
    3b56:	4770      	bx	lr
    3b58:	2a72      	cmp	r2, #114	; 0x72
    3b5a:	f000 80ad 	beq.w	3cb8 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x420>
    3b5e:	2a73      	cmp	r2, #115	; 0x73
    3b60:	f47f aed0 	bne.w	3904 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x6c>
      if (packetUBXRXMQZSSL6message != NULL)
    3b64:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3b66:	3800      	subs	r0, #0
    3b68:	bf18      	it	ne
    3b6a:	2001      	movne	r0, #1
    3b6c:	4770      	bx	lr
      if (packetUBXHNRPVT != NULL)
    3b6e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    3b72:	3800      	subs	r0, #0
    3b74:	bf18      	it	ne
    3b76:	2001      	movne	r0, #1
    3b78:	4770      	bx	lr
      if (packetUBXESFINS != NULL)
    3b7a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3b7e:	3800      	subs	r0, #0
    3b80:	bf18      	it	ne
    3b82:	2001      	movne	r0, #1
    3b84:	4770      	bx	lr
      if (packetUBXESFALG != NULL)
    3b86:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    3b8a:	3800      	subs	r0, #0
    3b8c:	bf18      	it	ne
    3b8e:	2001      	movne	r0, #1
    3b90:	4770      	bx	lr
      if (packetUBXESFSTATUS != NULL)
    3b92:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    3b96:	3800      	subs	r0, #0
    3b98:	bf18      	it	ne
    3b9a:	2001      	movne	r0, #1
    3b9c:	4770      	bx	lr
      if (packetUBXESFRAW != NULL)
    3b9e:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    3ba2:	3800      	subs	r0, #0
    3ba4:	bf18      	it	ne
    3ba6:	2001      	movne	r0, #1
    3ba8:	4770      	bx	lr
      if (packetUBXESFMEAS != NULL)
    3baa:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
    3bae:	3800      	subs	r0, #0
    3bb0:	bf18      	it	ne
    3bb2:	2001      	movne	r0, #1
    3bb4:	4770      	bx	lr
      if (packetUBXNAVEOE != NULL)
    3bb6:	69c0      	ldr	r0, [r0, #28]
    3bb8:	3800      	subs	r0, #0
    3bba:	bf18      	it	ne
    3bbc:	2001      	movne	r0, #1
    3bbe:	4770      	bx	lr
      if (packetUBXNAVAOPSTATUS != NULL)
    3bc0:	6d80      	ldr	r0, [r0, #88]	; 0x58
    3bc2:	3800      	subs	r0, #0
    3bc4:	bf18      	it	ne
    3bc6:	2001      	movne	r0, #1
    3bc8:	4770      	bx	lr
      if (packetUBXNAVRELPOSNED != NULL)
    3bca:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3bcc:	3800      	subs	r0, #0
    3bce:	bf18      	it	ne
    3bd0:	2001      	movne	r0, #1
    3bd2:	4770      	bx	lr
      if (packetUBXNAVSVIN != NULL)
    3bd4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    3bd6:	3800      	subs	r0, #0
    3bd8:	bf18      	it	ne
    3bda:	2001      	movne	r0, #1
    3bdc:	4770      	bx	lr
      if (packetUBXNAVSAT != NULL)
    3bde:	6d00      	ldr	r0, [r0, #80]	; 0x50
    3be0:	3800      	subs	r0, #0
    3be2:	bf18      	it	ne
    3be4:	2001      	movne	r0, #1
    3be6:	4770      	bx	lr
      if (packetUBXNAVTIMELS != NULL)
    3be8:	6c80      	ldr	r0, [r0, #72]	; 0x48
    3bea:	3800      	subs	r0, #0
    3bec:	bf18      	it	ne
    3bee:	2001      	movne	r0, #1
    3bf0:	4770      	bx	lr
      if (packetUBXNAVCLOCK != NULL)
    3bf2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3bf4:	3800      	subs	r0, #0
    3bf6:	bf18      	it	ne
    3bf8:	2001      	movne	r0, #1
    3bfa:	4770      	bx	lr
      if (packetUBXNAVTIMEUTC != NULL)
    3bfc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3bfe:	3800      	subs	r0, #0
    3c00:	bf18      	it	ne
    3c02:	2001      	movne	r0, #1
    3c04:	4770      	bx	lr
      if (packetUBXNAVPVAT != NULL)
    3c06:	6c00      	ldr	r0, [r0, #64]	; 0x40
    3c08:	3800      	subs	r0, #0
    3c0a:	bf18      	it	ne
    3c0c:	2001      	movne	r0, #1
    3c0e:	4770      	bx	lr
      if (packetUBXNAVHPPOSLLH != NULL)
    3c10:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    3c12:	3800      	subs	r0, #0
    3c14:	bf18      	it	ne
    3c16:	2001      	movne	r0, #1
    3c18:	4770      	bx	lr
      if (packetUBXNAVHPPOSECEF != NULL)
    3c1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3c1c:	3800      	subs	r0, #0
    3c1e:	bf18      	it	ne
    3c20:	2001      	movne	r0, #1
    3c22:	4770      	bx	lr
      if (packetUBXNAVVELNED != NULL)
    3c24:	6b40      	ldr	r0, [r0, #52]	; 0x34
    3c26:	3800      	subs	r0, #0
    3c28:	bf18      	it	ne
    3c2a:	2001      	movne	r0, #1
    3c2c:	4770      	bx	lr
      if (packetUBXNAVVELECEF != NULL)
    3c2e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    3c30:	3800      	subs	r0, #0
    3c32:	bf18      	it	ne
    3c34:	2001      	movne	r0, #1
    3c36:	4770      	bx	lr
      if (packetUBXNAVODO != NULL)
    3c38:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3c3a:	3800      	subs	r0, #0
    3c3c:	bf18      	it	ne
    3c3e:	2001      	movne	r0, #1
    3c40:	4770      	bx	lr
      if (packetUBXNAVPVT != NULL)
    3c42:	6a40      	ldr	r0, [r0, #36]	; 0x24
    3c44:	3800      	subs	r0, #0
    3c46:	bf18      	it	ne
    3c48:	2001      	movne	r0, #1
    3c4a:	4770      	bx	lr
      if (packetUBXNAVATT != NULL)
    3c4c:	6a00      	ldr	r0, [r0, #32]
    3c4e:	3800      	subs	r0, #0
    3c50:	bf18      	it	ne
    3c52:	2001      	movne	r0, #1
    3c54:	4770      	bx	lr
      if (packetUBXNAVDOP != NULL)
    3c56:	6980      	ldr	r0, [r0, #24]
    3c58:	3800      	subs	r0, #0
    3c5a:	bf18      	it	ne
    3c5c:	2001      	movne	r0, #1
    3c5e:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
    3c60:	6940      	ldr	r0, [r0, #20]
    3c62:	3800      	subs	r0, #0
    3c64:	bf18      	it	ne
    3c66:	2001      	movne	r0, #1
    3c68:	4770      	bx	lr
      if (packetUBXNAVPOSECEF != NULL)
    3c6a:	6900      	ldr	r0, [r0, #16]
    3c6c:	3800      	subs	r0, #0
    3c6e:	bf18      	it	ne
    3c70:	2001      	movne	r0, #1
    3c72:	4770      	bx	lr
      if (packetUBXTIMTM2 != NULL)
    3c74:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
    3c78:	3800      	subs	r0, #0
    3c7a:	bf18      	it	ne
    3c7c:	2001      	movne	r0, #1
    3c7e:	4770      	bx	lr
      if (packetUBXCFGPRT != NULL)
    3c80:	6f40      	ldr	r0, [r0, #116]	; 0x74
    3c82:	3800      	subs	r0, #0
    3c84:	bf18      	it	ne
    3c86:	2001      	movne	r0, #1
    3c88:	4770      	bx	lr
      if (packetUBXMGAACK != NULL)
    3c8a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    3c8e:	3800      	subs	r0, #0
    3c90:	bf18      	it	ne
    3c92:	2001      	movne	r0, #1
    3c94:	4770      	bx	lr
      if (packetUBXHNRINS != NULL)
    3c96:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    3c9a:	3800      	subs	r0, #0
    3c9c:	bf18      	it	ne
    3c9e:	2001      	movne	r0, #1
    3ca0:	4770      	bx	lr
      if (packetUBXHNRATT != NULL)
    3ca2:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    3ca6:	3800      	subs	r0, #0
    3ca8:	bf18      	it	ne
    3caa:	2001      	movne	r0, #1
    3cac:	4770      	bx	lr
      if (packetUBXRXMCOR != NULL)
    3cae:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3cb0:	3800      	subs	r0, #0
    3cb2:	bf18      	it	ne
    3cb4:	2001      	movne	r0, #1
    3cb6:	4770      	bx	lr
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
    3cb8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    3cba:	b133      	cbz	r3, 3cca <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)+0x432>
        result = true;
    3cbc:	2001      	movs	r0, #1
    3cbe:	4770      	bx	lr
      if (packetUBXRXMSFRBX != NULL)
    3cc0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    3cc2:	3800      	subs	r0, #0
    3cc4:	bf18      	it	ne
    3cc6:	2001      	movne	r0, #1
    3cc8:	4770      	bx	lr
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
    3cca:	6e00      	ldr	r0, [r0, #96]	; 0x60
    3ccc:	3800      	subs	r0, #0
    3cce:	bf18      	it	ne
    3cd0:	2001      	movne	r0, #1
    3cd2:	4770      	bx	lr

00003cd4 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)>:
  switch (Class)
    3cd4:	3901      	subs	r1, #1
    3cd6:	2927      	cmp	r1, #39	; 0x27
    3cd8:	d815      	bhi.n	3d06 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0x32>
    3cda:	e8df f001 	tbb	[pc, r1]
    3cde:	241c      	.short	0x241c
    3ce0:	2f141414 	.word	0x2f141414
    3ce4:	14141414 	.word	0x14141414
    3ce8:	14351414 	.word	0x14351414
    3cec:	14143c14 	.word	0x14143c14
    3cf0:	14141444 	.word	0x14141444
    3cf4:	14141414 	.word	0x14141414
    3cf8:	14141414 	.word	0x14141414
    3cfc:	14141414 	.word	0x14141414
    3d00:	14141414 	.word	0x14141414
    3d04:	1614      	.short	0x1614
  case UBX_CLASS_HNR:
    3d06:	2000      	movs	r0, #0
}
    3d08:	4770      	bx	lr
    switch (ID)
    3d0a:	2a02      	cmp	r2, #2
    3d0c:	d8fb      	bhi.n	3d06 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0x32>
    3d0e:	4b24      	ldr	r3, [pc, #144]	; (3da0 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xcc>)
    3d10:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    3d14:	4770      	bx	lr
    switch (ID)
    3d16:	3a01      	subs	r2, #1
    3d18:	b2d2      	uxtb	r2, r2
    3d1a:	2a60      	cmp	r2, #96	; 0x60
    3d1c:	d8f3      	bhi.n	3d06 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0x32>
    3d1e:	4b21      	ldr	r3, [pc, #132]	; (3da4 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xd0>)
    3d20:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    3d24:	4770      	bx	lr
    switch (ID)
    3d26:	2a34      	cmp	r2, #52	; 0x34
    3d28:	d037      	beq.n	3d9a <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xc6>
    3d2a:	d823      	bhi.n	3d74 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xa0>
    3d2c:	2a13      	cmp	r2, #19
    3d2e:	d029      	beq.n	3d84 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xb0>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
    3d30:	2a15      	cmp	r2, #21
    3d32:	bf14      	ite	ne
    3d34:	2000      	movne	r0, #0
    3d36:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
    3d3a:	4770      	bx	lr
    switch (ID)
    3d3c:	b33a      	cbz	r2, 3d8e <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xba>
      maxSize = UBX_CFG_RATE_LEN;
    3d3e:	2a08      	cmp	r2, #8
    3d40:	bf14      	ite	ne
    3d42:	2000      	movne	r0, #0
    3d44:	2006      	moveq	r0, #6
    3d46:	4770      	bx	lr
    switch (ID)
    3d48:	2a03      	cmp	r2, #3
    3d4a:	d024      	beq.n	3d96 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xc2>
      maxSize = UBX_TIM_SMEAS_MAX_LEN;
    3d4c:	2a13      	cmp	r2, #19
    3d4e:	bf14      	ite	ne
    3d50:	2000      	movne	r0, #0
    3d52:	209c      	moveq	r0, #156	; 0x9c
    3d54:	4770      	bx	lr
    switch (ID)
    3d56:	3a02      	subs	r2, #2
    3d58:	b2d2      	uxtb	r2, r2
    3d5a:	2a13      	cmp	r2, #19
    3d5c:	d8d3      	bhi.n	3d06 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0x32>
    3d5e:	4b12      	ldr	r3, [pc, #72]	; (3da8 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xd4>)
    3d60:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    3d64:	4770      	bx	lr
    switch (ID)
    3d66:	2a60      	cmp	r2, #96	; 0x60
    3d68:	d013      	beq.n	3d92 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xbe>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
    3d6a:	2a80      	cmp	r2, #128	; 0x80
    3d6c:	bf14      	ite	ne
    3d6e:	2000      	movne	r0, #0
    3d70:	20a4      	moveq	r0, #164	; 0xa4
    3d72:	4770      	bx	lr
    3d74:	2a72      	cmp	r2, #114	; 0x72
    3d76:	d007      	beq.n	3d88 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)+0xb4>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
    3d78:	2a73      	cmp	r2, #115	; 0x73
    3d7a:	bf14      	ite	ne
    3d7c:	2000      	movne	r0, #0
    3d7e:	f44f 7084 	moveq.w	r0, #264	; 0x108
    3d82:	4770      	bx	lr
    3d84:	2048      	movs	r0, #72	; 0x48
    3d86:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
    3d88:	f44f 7004 	mov.w	r0, #528	; 0x210
    3d8c:	4770      	bx	lr
    3d8e:	2014      	movs	r0, #20
    3d90:	4770      	bx	lr
    3d92:	2008      	movs	r0, #8
    3d94:	4770      	bx	lr
    3d96:	201c      	movs	r0, #28
    3d98:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
    3d9a:	200c      	movs	r0, #12
    3d9c:	4770      	bx	lr
    3d9e:	bf00      	nop
    3da0:	20001d14 	.word	0x20001d14
    3da4:	20001c28 	.word	0x20001c28
    3da8:	20001cec 	.word	0x20001cec

00003dac <SFE_UBLOX_GNSS::logThisNMEA()>:
  if (_logNMEA.bits.all == 1)
    3dac:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    3db0:	07cb      	lsls	r3, r1, #31
    3db2:	d421      	bmi.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
    3db4:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
    3db8:	4a62      	ldr	r2, [pc, #392]	; (3f44 <SFE_UBLOX_GNSS::logThisNMEA()+0x198>)
    3dba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3dbe:	4293      	cmp	r3, r2
    3dc0:	d017      	beq.n	3df2 <SFE_UBLOX_GNSS::logThisNMEA()+0x46>
  if (nmeaAddressField[3] == 'G')
    3dc2:	f890 2169 	ldrb.w	r2, [r0, #361]	; 0x169
    3dc6:	2a47      	cmp	r2, #71	; 0x47
    3dc8:	d01e      	beq.n	3e08 <SFE_UBLOX_GNSS::logThisNMEA()+0x5c>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
    3dca:	4a5f      	ldr	r2, [pc, #380]	; (3f48 <SFE_UBLOX_GNSS::logThisNMEA()+0x19c>)
    3dcc:	4293      	cmp	r3, r2
    3dce:	d065      	beq.n	3e9c <SFE_UBLOX_GNSS::logThisNMEA()+0xf0>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
    3dd0:	4a5e      	ldr	r2, [pc, #376]	; (3f4c <SFE_UBLOX_GNSS::logThisNMEA()+0x1a0>)
    3dd2:	4293      	cmp	r3, r2
    3dd4:	d053      	beq.n	3e7e <SFE_UBLOX_GNSS::logThisNMEA()+0xd2>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
    3dd6:	4a5e      	ldr	r2, [pc, #376]	; (3f50 <SFE_UBLOX_GNSS::logThisNMEA()+0x1a4>)
    3dd8:	4293      	cmp	r3, r2
    3dda:	d055      	beq.n	3e88 <SFE_UBLOX_GNSS::logThisNMEA()+0xdc>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
    3ddc:	4a5d      	ldr	r2, [pc, #372]	; (3f54 <SFE_UBLOX_GNSS::logThisNMEA()+0x1a8>)
    3dde:	4293      	cmp	r3, r2
    3de0:	d057      	beq.n	3e92 <SFE_UBLOX_GNSS::logThisNMEA()+0xe6>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
    3de2:	4a5d      	ldr	r2, [pc, #372]	; (3f58 <SFE_UBLOX_GNSS::logThisNMEA()+0x1ac>)
    3de4:	4293      	cmp	r3, r2
    3de6:	d15e      	bne.n	3ea6 <SFE_UBLOX_GNSS::logThisNMEA()+0xfa>
    3de8:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
    3dec:	f3c0 1000 	ubfx	r0, r0, #4, #1
    3df0:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
    3df2:	f011 0202 	ands.w	r2, r1, #2
    3df6:	d001      	beq.n	3dfc <SFE_UBLOX_GNSS::logThisNMEA()+0x50>
    return (true);
    3df8:	2001      	movs	r0, #1
    3dfa:	4770      	bx	lr
  if (nmeaAddressField[3] == 'G')
    3dfc:	f890 c169 	ldrb.w	ip, [r0, #361]	; 0x169
    3e00:	f1bc 0f47 	cmp.w	ip, #71	; 0x47
    3e04:	f040 809b 	bne.w	3f3e <SFE_UBLOX_GNSS::logThisNMEA()+0x192>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
    3e08:	f8b0 216a 	ldrh.w	r2, [r0, #362]	; 0x16a
    3e0c:	f245 1c41 	movw	ip, #20801	; 0x5141
    3e10:	4562      	cmp	r2, ip
    3e12:	d050      	beq.n	3eb6 <SFE_UBLOX_GNSS::logThisNMEA()+0x10a>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
    3e14:	f245 1c42 	movw	ip, #20802	; 0x5142
    3e18:	4562      	cmp	r2, ip
    3e1a:	d04f      	beq.n	3ebc <SFE_UBLOX_GNSS::logThisNMEA()+0x110>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
    3e1c:	f245 3c42 	movw	ip, #21314	; 0x5342
    3e20:	4562      	cmp	r2, ip
    3e22:	d04e      	beq.n	3ec2 <SFE_UBLOX_GNSS::logThisNMEA()+0x116>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
    3e24:	f244 1c47 	movw	ip, #16711	; 0x4147
    3e28:	4562      	cmp	r2, ip
    3e2a:	d06d      	beq.n	3f08 <SFE_UBLOX_GNSS::logThisNMEA()+0x15c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
    3e2c:	f644 4c4c 	movw	ip, #19532	; 0x4c4c
    3e30:	4562      	cmp	r2, ip
    3e32:	d049      	beq.n	3ec8 <SFE_UBLOX_GNSS::logThisNMEA()+0x11c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
    3e34:	f245 1c4c 	movw	ip, #20812	; 0x514c
    3e38:	4562      	cmp	r2, ip
    3e3a:	d049      	beq.n	3ed0 <SFE_UBLOX_GNSS::logThisNMEA()+0x124>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
    3e3c:	f245 114e 	movw	r1, #20814	; 0x514e
    3e40:	428a      	cmp	r2, r1
    3e42:	d049      	beq.n	3ed8 <SFE_UBLOX_GNSS::logThisNMEA()+0x12c>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
    3e44:	f245 314e 	movw	r1, #21326	; 0x534e
    3e48:	428a      	cmp	r2, r1
    3e4a:	d04b      	beq.n	3ee4 <SFE_UBLOX_GNSS::logThisNMEA()+0x138>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
    3e4c:	f245 1150 	movw	r1, #20816	; 0x5150
    3e50:	428a      	cmp	r2, r1
    3e52:	d04d      	beq.n	3ef0 <SFE_UBLOX_GNSS::logThisNMEA()+0x144>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
    3e54:	f245 1151 	movw	r1, #20817	; 0x5151
    3e58:	428a      	cmp	r2, r1
    3e5a:	d04f      	beq.n	3efc <SFE_UBLOX_GNSS::logThisNMEA()+0x150>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
    3e5c:	f245 3152 	movw	r1, #21330	; 0x5352
    3e60:	428a      	cmp	r2, r1
    3e62:	d055      	beq.n	3f10 <SFE_UBLOX_GNSS::logThisNMEA()+0x164>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
    3e64:	f244 1153 	movw	r1, #16723	; 0x4153
    3e68:	428a      	cmp	r2, r1
    3e6a:	d057      	beq.n	3f1c <SFE_UBLOX_GNSS::logThisNMEA()+0x170>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
    3e6c:	f245 4153 	movw	r1, #21587	; 0x5453
    3e70:	428a      	cmp	r2, r1
    3e72:	d159      	bne.n	3f28 <SFE_UBLOX_GNSS::logThisNMEA()+0x17c>
    3e74:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3e78:	0652      	lsls	r2, r2, #25
    3e7a:	d5a6      	bpl.n	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3e7c:	e7bc      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
    3e7e:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
    3e82:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3e86:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
    3e88:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
    3e8c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3e90:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
    3e92:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
    3e96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3e9a:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
    3e9c:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
    3ea0:	f000 0001 	and.w	r0, r0, #1
    3ea4:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
    3ea6:	4a2d      	ldr	r2, [pc, #180]	; (3f5c <SFE_UBLOX_GNSS::logThisNMEA()+0x1b0>)
    3ea8:	4293      	cmp	r3, r2
    3eaa:	d148      	bne.n	3f3e <SFE_UBLOX_GNSS::logThisNMEA()+0x192>
    3eac:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
    3eb0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3eb4:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
    3eb6:	074a      	lsls	r2, r1, #29
    3eb8:	d587      	bpl.n	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3eba:	e79d      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
    3ebc:	0709      	lsls	r1, r1, #28
    3ebe:	d584      	bpl.n	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3ec0:	e79a      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
    3ec2:	06ca      	lsls	r2, r1, #27
    3ec4:	d581      	bpl.n	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3ec6:	e797      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
    3ec8:	064a      	lsls	r2, r1, #25
    3eca:	f57f af7e 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3ece:	e793      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
    3ed0:	0609      	lsls	r1, r1, #24
    3ed2:	f57f af7a 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3ed6:	e78f      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
    3ed8:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3edc:	07d2      	lsls	r2, r2, #31
    3ede:	f57f af74 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3ee2:	e789      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
    3ee4:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3ee8:	0791      	lsls	r1, r2, #30
    3eea:	f57f af6e 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3eee:	e783      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
    3ef0:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3ef4:	0752      	lsls	r2, r2, #29
    3ef6:	f57f af68 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3efa:	e77d      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
    3efc:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3f00:	0711      	lsls	r1, r2, #28
    3f02:	f57f af62 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3f06:	e777      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
    3f08:	0689      	lsls	r1, r1, #26
    3f0a:	f57f af5e 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3f0e:	e773      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
    3f10:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3f14:	06d2      	lsls	r2, r2, #27
    3f16:	f57f af58 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3f1a:	e76d      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
    3f1c:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
    3f20:	0691      	lsls	r1, r2, #26
    3f22:	f57f af52 	bpl.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3f26:	e767      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
    3f28:	f245 6153 	movw	r1, #22099	; 0x5653
    3f2c:	428a      	cmp	r2, r1
    3f2e:	f47f af4c 	bne.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3f32:	f990 20f5 	ldrsb.w	r2, [r0, #245]	; 0xf5
    3f36:	2a00      	cmp	r2, #0
    3f38:	f6bf af47 	bge.w	3dca <SFE_UBLOX_GNSS::logThisNMEA()+0x1e>
    3f3c:	e75c      	b.n	3df8 <SFE_UBLOX_GNSS::logThisNMEA()+0x4c>
  return (false);
    3f3e:	2000      	movs	r0, #0
    3f40:	4770      	bx	lr
    3f42:	bf00      	nop
    3f44:	4d544400 	.word	0x4d544400
    3f48:	4d4c5200 	.word	0x4d4c5200
    3f4c:	434d5200 	.word	0x434d5200
    3f50:	54585400 	.word	0x54585400
    3f54:	574c5600 	.word	0x574c5600
    3f58:	47545600 	.word	0x47545600
    3f5c:	41445a00 	.word	0x41445a00

00003f60 <SFE_UBLOX_GNSS::isNMEAHeaderValid()>:
  if (nmeaAddressField[0] != '*')
    3f60:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
    3f64:	2b2a      	cmp	r3, #42	; 0x2a
    3f66:	d103      	bne.n	3f70 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x10>
  if (nmeaAddressField[1] != 'G')
    3f68:	f890 3167 	ldrb.w	r3, [r0, #359]	; 0x167
    3f6c:	2b47      	cmp	r3, #71	; 0x47
    3f6e:	d001      	beq.n	3f74 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x14>
    return (false);
    3f70:	2000      	movs	r0, #0
    3f72:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
    3f74:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
    3f78:	4a34      	ldr	r2, [pc, #208]	; (404c <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xec>)
    3f7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3f7e:	4293      	cmp	r3, r2
    3f80:	d03a      	beq.n	3ff8 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x98>
  if (nmeaAddressField[3] == 'G')
    3f82:	f890 2169 	ldrb.w	r2, [r0, #361]	; 0x169
    3f86:	2a47      	cmp	r2, #71	; 0x47
    3f88:	d022      	beq.n	3fd0 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x70>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
    3f8a:	4831      	ldr	r0, [pc, #196]	; (4050 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xf0>)
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
    3f8c:	4931      	ldr	r1, [pc, #196]	; (4054 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xf4>)
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
    3f8e:	4a32      	ldr	r2, [pc, #200]	; (4058 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xf8>)
    3f90:	428b      	cmp	r3, r1
    3f92:	bf18      	it	ne
    3f94:	4283      	cmpne	r3, r0
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
    3f96:	f101 2104 	add.w	r1, r1, #67109888	; 0x4000400
    3f9a:	bf0c      	ite	eq
    3f9c:	2001      	moveq	r0, #1
    3f9e:	2000      	movne	r0, #0
    3fa0:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
    3fa4:	4293      	cmp	r3, r2
    3fa6:	bf08      	it	eq
    3fa8:	f040 0001 	orreq.w	r0, r0, #1
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
    3fac:	4a2b      	ldr	r2, [pc, #172]	; (405c <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xfc>)
{
    3fae:	b410      	push	{r4}
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
    3fb0:	4c2b      	ldr	r4, [pc, #172]	; (4060 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x100>)
    3fb2:	42a3      	cmp	r3, r4
    3fb4:	bf08      	it	eq
    3fb6:	f040 0001 	orreq.w	r0, r0, #1
}
    3fba:	f85d 4b04 	ldr.w	r4, [sp], #4
    3fbe:	428b      	cmp	r3, r1
    3fc0:	bf08      	it	eq
    3fc2:	f040 0001 	orreq.w	r0, r0, #1
    3fc6:	4293      	cmp	r3, r2
    3fc8:	bf08      	it	eq
    3fca:	f040 0001 	orreq.w	r0, r0, #1
    3fce:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
    3fd0:	f8b0 216a 	ldrh.w	r2, [r0, #362]	; 0x16a
    3fd4:	f245 1141 	movw	r1, #20801	; 0x5141
    3fd8:	428a      	cmp	r2, r1
    3fda:	d00d      	beq.n	3ff8 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x98>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q'))
    3fdc:	f245 1051 	movw	r0, #20817	; 0x5151
    3fe0:	4282      	cmp	r2, r0
    3fe2:	d80b      	bhi.n	3ffc <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x9c>
    3fe4:	428a      	cmp	r2, r1
    3fe6:	d821      	bhi.n	402c <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xcc>
    3fe8:	f244 1153 	movw	r1, #16723	; 0x4153
    3fec:	428a      	cmp	r2, r1
    3fee:	d003      	beq.n	3ff8 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x98>
    3ff0:	f644 414c 	movw	r1, #19532	; 0x4c4c
    3ff4:	428a      	cmp	r2, r1
    3ff6:	d123      	bne.n	4040 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xe0>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
    3ff8:	2001      	movs	r0, #1
}
    3ffa:	4770      	bx	lr
    3ffc:	f245 3152 	movw	r1, #21330	; 0x5352
    4000:	428a      	cmp	r2, r1
    4002:	d80c      	bhi.n	401e <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0xbe>
    4004:	f245 3141 	movw	r1, #21313	; 0x5341
    4008:	428a      	cmp	r2, r1
    400a:	d9be      	bls.n	3f8a <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x2a>
    400c:	4915      	ldr	r1, [pc, #84]	; (4064 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x104>)
    400e:	4816      	ldr	r0, [pc, #88]	; (4068 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x108>)
    4010:	4411      	add	r1, r2
    4012:	b289      	uxth	r1, r1
    4014:	40c8      	lsrs	r0, r1
    4016:	f010 0001 	ands.w	r0, r0, #1
    401a:	d0b6      	beq.n	3f8a <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x2a>
    401c:	4770      	bx	lr
    401e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    4022:	f245 4153 	movw	r1, #21587	; 0x5453
    4026:	428a      	cmp	r2, r1
    4028:	d1af      	bne.n	3f8a <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x2a>
    402a:	e7e5      	b.n	3ff8 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x98>
    402c:	490f      	ldr	r1, [pc, #60]	; (406c <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x10c>)
    402e:	f24d 4001 	movw	r0, #54273	; 0xd401
    4032:	4411      	add	r1, r2
    4034:	b289      	uxth	r1, r1
    4036:	40c8      	lsrs	r0, r1
    4038:	f010 0001 	ands.w	r0, r0, #1
    403c:	d0a5      	beq.n	3f8a <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x2a>
    403e:	4770      	bx	lr
    4040:	f244 1147 	movw	r1, #16711	; 0x4147
    4044:	428a      	cmp	r2, r1
    4046:	d0d7      	beq.n	3ff8 <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x98>
    4048:	e79f      	b.n	3f8a <SFE_UBLOX_GNSS::isNMEAHeaderValid()+0x2a>
    404a:	bf00      	nop
    404c:	4d544400 	.word	0x4d544400
    4050:	4d4c5200 	.word	0x4d4c5200
    4054:	434d5200 	.word	0x434d5200
    4058:	54585400 	.word	0x54585400
    405c:	41445a00 	.word	0x41445a00
    4060:	574c5600 	.word	0x574c5600
    4064:	ffffacbe 	.word	0xffffacbe
    4068:	00011001 	.word	0x00011001
    406c:	ffffaebe 	.word	0xffffaebe

00004070 <SFE_UBLOX_GNSS::processThisNMEA()>:
  if (_processNMEA.bits.all == 1)
    4070:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
    4074:	07cb      	lsls	r3, r1, #31
    4076:	d421      	bmi.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
    4078:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
    407c:	4a62      	ldr	r2, [pc, #392]	; (4208 <SFE_UBLOX_GNSS::processThisNMEA()+0x198>)
    407e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4082:	4293      	cmp	r3, r2
    4084:	d017      	beq.n	40b6 <SFE_UBLOX_GNSS::processThisNMEA()+0x46>
  if (nmeaAddressField[3] == 'G')
    4086:	f890 2169 	ldrb.w	r2, [r0, #361]	; 0x169
    408a:	2a47      	cmp	r2, #71	; 0x47
    408c:	d01e      	beq.n	40cc <SFE_UBLOX_GNSS::processThisNMEA()+0x5c>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
    408e:	4a5f      	ldr	r2, [pc, #380]	; (420c <SFE_UBLOX_GNSS::processThisNMEA()+0x19c>)
    4090:	4293      	cmp	r3, r2
    4092:	d065      	beq.n	4160 <SFE_UBLOX_GNSS::processThisNMEA()+0xf0>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
    4094:	4a5e      	ldr	r2, [pc, #376]	; (4210 <SFE_UBLOX_GNSS::processThisNMEA()+0x1a0>)
    4096:	4293      	cmp	r3, r2
    4098:	d053      	beq.n	4142 <SFE_UBLOX_GNSS::processThisNMEA()+0xd2>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
    409a:	4a5e      	ldr	r2, [pc, #376]	; (4214 <SFE_UBLOX_GNSS::processThisNMEA()+0x1a4>)
    409c:	4293      	cmp	r3, r2
    409e:	d055      	beq.n	414c <SFE_UBLOX_GNSS::processThisNMEA()+0xdc>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
    40a0:	4a5d      	ldr	r2, [pc, #372]	; (4218 <SFE_UBLOX_GNSS::processThisNMEA()+0x1a8>)
    40a2:	4293      	cmp	r3, r2
    40a4:	d057      	beq.n	4156 <SFE_UBLOX_GNSS::processThisNMEA()+0xe6>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
    40a6:	4a5d      	ldr	r2, [pc, #372]	; (421c <SFE_UBLOX_GNSS::processThisNMEA()+0x1ac>)
    40a8:	4293      	cmp	r3, r2
    40aa:	d15e      	bne.n	416a <SFE_UBLOX_GNSS::processThisNMEA()+0xfa>
    40ac:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
    40b0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    40b4:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
    40b6:	f011 0202 	ands.w	r2, r1, #2
    40ba:	d001      	beq.n	40c0 <SFE_UBLOX_GNSS::processThisNMEA()+0x50>
    return (true);
    40bc:	2001      	movs	r0, #1
    40be:	4770      	bx	lr
  if (nmeaAddressField[3] == 'G')
    40c0:	f890 c169 	ldrb.w	ip, [r0, #361]	; 0x169
    40c4:	f1bc 0f47 	cmp.w	ip, #71	; 0x47
    40c8:	f040 809b 	bne.w	4202 <SFE_UBLOX_GNSS::processThisNMEA()+0x192>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
    40cc:	f8b0 216a 	ldrh.w	r2, [r0, #362]	; 0x16a
    40d0:	f245 1c41 	movw	ip, #20801	; 0x5141
    40d4:	4562      	cmp	r2, ip
    40d6:	d050      	beq.n	417a <SFE_UBLOX_GNSS::processThisNMEA()+0x10a>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
    40d8:	f245 1c42 	movw	ip, #20802	; 0x5142
    40dc:	4562      	cmp	r2, ip
    40de:	d04f      	beq.n	4180 <SFE_UBLOX_GNSS::processThisNMEA()+0x110>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
    40e0:	f245 3c42 	movw	ip, #21314	; 0x5342
    40e4:	4562      	cmp	r2, ip
    40e6:	d04e      	beq.n	4186 <SFE_UBLOX_GNSS::processThisNMEA()+0x116>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
    40e8:	f244 1c47 	movw	ip, #16711	; 0x4147
    40ec:	4562      	cmp	r2, ip
    40ee:	d06d      	beq.n	41cc <SFE_UBLOX_GNSS::processThisNMEA()+0x15c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
    40f0:	f644 4c4c 	movw	ip, #19532	; 0x4c4c
    40f4:	4562      	cmp	r2, ip
    40f6:	d049      	beq.n	418c <SFE_UBLOX_GNSS::processThisNMEA()+0x11c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
    40f8:	f245 1c4c 	movw	ip, #20812	; 0x514c
    40fc:	4562      	cmp	r2, ip
    40fe:	d049      	beq.n	4194 <SFE_UBLOX_GNSS::processThisNMEA()+0x124>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
    4100:	f245 114e 	movw	r1, #20814	; 0x514e
    4104:	428a      	cmp	r2, r1
    4106:	d049      	beq.n	419c <SFE_UBLOX_GNSS::processThisNMEA()+0x12c>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
    4108:	f245 314e 	movw	r1, #21326	; 0x534e
    410c:	428a      	cmp	r2, r1
    410e:	d04b      	beq.n	41a8 <SFE_UBLOX_GNSS::processThisNMEA()+0x138>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
    4110:	f245 1150 	movw	r1, #20816	; 0x5150
    4114:	428a      	cmp	r2, r1
    4116:	d04d      	beq.n	41b4 <SFE_UBLOX_GNSS::processThisNMEA()+0x144>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
    4118:	f245 1151 	movw	r1, #20817	; 0x5151
    411c:	428a      	cmp	r2, r1
    411e:	d04f      	beq.n	41c0 <SFE_UBLOX_GNSS::processThisNMEA()+0x150>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
    4120:	f245 3152 	movw	r1, #21330	; 0x5352
    4124:	428a      	cmp	r2, r1
    4126:	d055      	beq.n	41d4 <SFE_UBLOX_GNSS::processThisNMEA()+0x164>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
    4128:	f244 1153 	movw	r1, #16723	; 0x4153
    412c:	428a      	cmp	r2, r1
    412e:	d057      	beq.n	41e0 <SFE_UBLOX_GNSS::processThisNMEA()+0x170>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
    4130:	f245 4153 	movw	r1, #21587	; 0x5453
    4134:	428a      	cmp	r2, r1
    4136:	d159      	bne.n	41ec <SFE_UBLOX_GNSS::processThisNMEA()+0x17c>
    4138:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    413c:	0652      	lsls	r2, r2, #25
    413e:	d5a6      	bpl.n	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    4140:	e7bc      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
    4142:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
    4146:	f3c0 0040 	ubfx	r0, r0, #1, #1
    414a:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
    414c:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
    4150:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4154:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
    4156:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
    415a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    415e:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
    4160:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
    4164:	f000 0001 	and.w	r0, r0, #1
    4168:	4770      	bx	lr
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
    416a:	4a2d      	ldr	r2, [pc, #180]	; (4220 <SFE_UBLOX_GNSS::processThisNMEA()+0x1b0>)
    416c:	4293      	cmp	r3, r2
    416e:	d148      	bne.n	4202 <SFE_UBLOX_GNSS::processThisNMEA()+0x192>
    4170:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
    4174:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4178:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
    417a:	074a      	lsls	r2, r1, #29
    417c:	d587      	bpl.n	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    417e:	e79d      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
    4180:	0709      	lsls	r1, r1, #28
    4182:	d584      	bpl.n	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    4184:	e79a      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
    4186:	06ca      	lsls	r2, r1, #27
    4188:	d581      	bpl.n	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    418a:	e797      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
    418c:	064a      	lsls	r2, r1, #25
    418e:	f57f af7e 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    4192:	e793      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
    4194:	0609      	lsls	r1, r1, #24
    4196:	f57f af7a 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    419a:	e78f      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
    419c:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    41a0:	07d2      	lsls	r2, r2, #31
    41a2:	f57f af74 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41a6:	e789      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
    41a8:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    41ac:	0791      	lsls	r1, r2, #30
    41ae:	f57f af6e 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41b2:	e783      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
    41b4:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    41b8:	0752      	lsls	r2, r2, #29
    41ba:	f57f af68 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41be:	e77d      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
    41c0:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    41c4:	0711      	lsls	r1, r2, #28
    41c6:	f57f af62 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41ca:	e777      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
    41cc:	0689      	lsls	r1, r1, #26
    41ce:	f57f af5e 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41d2:	e773      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
    41d4:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    41d8:	06d2      	lsls	r2, r2, #27
    41da:	f57f af58 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41de:	e76d      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
    41e0:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    41e4:	0691      	lsls	r1, r2, #26
    41e6:	f57f af52 	bpl.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41ea:	e767      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
    41ec:	f245 6153 	movw	r1, #22099	; 0x5653
    41f0:	428a      	cmp	r2, r1
    41f2:	f47f af4c 	bne.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    41f6:	f990 20f9 	ldrsb.w	r2, [r0, #249]	; 0xf9
    41fa:	2a00      	cmp	r2, #0
    41fc:	f6bf af47 	bge.w	408e <SFE_UBLOX_GNSS::processThisNMEA()+0x1e>
    4200:	e75c      	b.n	40bc <SFE_UBLOX_GNSS::processThisNMEA()+0x4c>
  return (false);
    4202:	2000      	movs	r0, #0
    4204:	4770      	bx	lr
    4206:	bf00      	nop
    4208:	4d544400 	.word	0x4d544400
    420c:	4d4c5200 	.word	0x4d4c5200
    4210:	434d5200 	.word	0x434d5200
    4214:	54585400 	.word	0x54585400
    4218:	574c5600 	.word	0x574c5600
    421c:	47545600 	.word	0x47545600
    4220:	41445a00 	.word	0x41445a00

00004224 <SFE_UBLOX_GNSS::processNMEA(char)>:
  processNMEA_v(incoming);
    4224:	6802      	ldr	r2, [r0, #0]
{
    4226:	b410      	push	{r4}
  processNMEA_v(incoming);
    4228:	6892      	ldr	r2, [r2, #8]
    422a:	4c08      	ldr	r4, [pc, #32]	; (424c <SFE_UBLOX_GNSS::processNMEA(char)+0x28>)
    422c:	42a2      	cmp	r2, r4
    422e:	d10a      	bne.n	4246 <SFE_UBLOX_GNSS::processNMEA(char)+0x22>
  if (_nmeaOutputPort != NULL)
    4230:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
    4234:	b120      	cbz	r0, 4240 <SFE_UBLOX_GNSS::processNMEA(char)+0x1c>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
    4236:	6803      	ldr	r3, [r0, #0]
}
    4238:	f85d 4b04 	ldr.w	r4, [sp], #4
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	4718      	bx	r3
}
    4240:	f85d 4b04 	ldr.w	r4, [sp], #4
    4244:	4770      	bx	lr
    4246:	f85d 4b04 	ldr.w	r4, [sp], #4
  processNMEA_v(incoming);
    424a:	4710      	bx	r2
    424c:	00002e45 	.word	0x00002e45

00004250 <SFE_UBLOX_GNSS::isThisNMEAauto()>:
{
    4250:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    4252:	4b45      	ldr	r3, [pc, #276]	; (4368 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x118>)
{
    4254:	4604      	mov	r4, r0
    4256:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4258:	2205      	movs	r2, #5
    425a:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    425e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4262:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4264:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4266:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    426a:	4629      	mov	r1, r5
    426c:	f009 fdce 	bl	de0c <memcmp>
    4270:	b928      	cbnz	r0, 427e <SFE_UBLOX_GNSS::isThisNMEAauto()+0x2e>
    if (storageNMEAGPGGA != NULL)
    4272:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    4276:	b113      	cbz	r3, 427e <SFE_UBLOX_GNSS::isThisNMEAauto()+0x2e>
      return true;
    4278:	2001      	movs	r0, #1
}
    427a:	b003      	add	sp, #12
    427c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
    427e:	4b3b      	ldr	r3, [pc, #236]	; (436c <SFE_UBLOX_GNSS::isThisNMEAauto()+0x11c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4280:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4282:	e893 0003 	ldmia.w	r3, {r0, r1}
    4286:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4288:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    428a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    428e:	4629      	mov	r1, r5
    4290:	f009 fdbc 	bl	de0c <memcmp>
    4294:	b918      	cbnz	r0, 429e <SFE_UBLOX_GNSS::isThisNMEAauto()+0x4e>
    if (storageNMEAGNGGA != NULL)
    4296:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    429a:	2b00      	cmp	r3, #0
    429c:	d1ec      	bne.n	4278 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x28>
  strcpy(thisNMEA, "GPVTG");
    429e:	4b34      	ldr	r3, [pc, #208]	; (4370 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x120>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42a0:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    42a2:	e893 0003 	ldmia.w	r3, {r0, r1}
    42a6:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42a8:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    42aa:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42ae:	4629      	mov	r1, r5
    42b0:	f009 fdac 	bl	de0c <memcmp>
    42b4:	b918      	cbnz	r0, 42be <SFE_UBLOX_GNSS::isThisNMEAauto()+0x6e>
    if (storageNMEAGPVTG != NULL)
    42b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    42ba:	2b00      	cmp	r3, #0
    42bc:	d1dc      	bne.n	4278 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x28>
  strcpy(thisNMEA, "GNVTG");
    42be:	4b2d      	ldr	r3, [pc, #180]	; (4374 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x124>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42c0:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    42c2:	e893 0003 	ldmia.w	r3, {r0, r1}
    42c6:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42c8:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    42ca:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42ce:	4629      	mov	r1, r5
    42d0:	f009 fd9c 	bl	de0c <memcmp>
    42d4:	b918      	cbnz	r0, 42de <SFE_UBLOX_GNSS::isThisNMEAauto()+0x8e>
    if (storageNMEAGNVTG != NULL)
    42d6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    42da:	2b00      	cmp	r3, #0
    42dc:	d1cc      	bne.n	4278 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x28>
  strcpy(thisNMEA, "GPRMC");
    42de:	4b26      	ldr	r3, [pc, #152]	; (4378 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x128>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42e0:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    42e2:	e893 0003 	ldmia.w	r3, {r0, r1}
    42e6:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42e8:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    42ea:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    42ee:	4629      	mov	r1, r5
    42f0:	f009 fd8c 	bl	de0c <memcmp>
    42f4:	b918      	cbnz	r0, 42fe <SFE_UBLOX_GNSS::isThisNMEAauto()+0xae>
    if (storageNMEAGPRMC != NULL)
    42f6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    42fa:	2b00      	cmp	r3, #0
    42fc:	d1bc      	bne.n	4278 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x28>
  strcpy(thisNMEA, "GNRMC");
    42fe:	4b1f      	ldr	r3, [pc, #124]	; (437c <SFE_UBLOX_GNSS::isThisNMEAauto()+0x12c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4300:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4302:	e893 0003 	ldmia.w	r3, {r0, r1}
    4306:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4308:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    430a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    430e:	4629      	mov	r1, r5
    4310:	f009 fd7c 	bl	de0c <memcmp>
    4314:	b308      	cbz	r0, 435a <SFE_UBLOX_GNSS::isThisNMEAauto()+0x10a>
  strcpy(thisNMEA, "GPZDA");
    4316:	4b1a      	ldr	r3, [pc, #104]	; (4380 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x130>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4318:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    431a:	e893 0003 	ldmia.w	r3, {r0, r1}
    431e:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4320:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4322:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4326:	4629      	mov	r1, r5
    4328:	f009 fd70 	bl	de0c <memcmp>
    432c:	b918      	cbnz	r0, 4336 <SFE_UBLOX_GNSS::isThisNMEAauto()+0xe6>
    if (storageNMEAGPZDA != NULL)
    432e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    4332:	2b00      	cmp	r3, #0
    4334:	d1a0      	bne.n	4278 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x28>
  strcpy(thisNMEA, "GNZDA");
    4336:	4b13      	ldr	r3, [pc, #76]	; (4384 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x134>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4338:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    433a:	e893 0003 	ldmia.w	r3, {r0, r1}
    433e:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4340:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4342:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4346:	4629      	mov	r1, r5
    4348:	f009 fd60 	bl	de0c <memcmp>
    434c:	b950      	cbnz	r0, 4364 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x114>
    if (storageNMEAGNZDA != NULL)
    434e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    4352:	3800      	subs	r0, #0
    4354:	bf18      	it	ne
    4356:	2001      	movne	r0, #1
    4358:	e78f      	b.n	427a <SFE_UBLOX_GNSS::isThisNMEAauto()+0x2a>
    if (storageNMEAGNRMC != NULL)
    435a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    435e:	2b00      	cmp	r3, #0
    4360:	d18a      	bne.n	4278 <SFE_UBLOX_GNSS::isThisNMEAauto()+0x28>
    4362:	e7d8      	b.n	4316 <SFE_UBLOX_GNSS::isThisNMEAauto()+0xc6>
  return false;
    4364:	2000      	movs	r0, #0
    4366:	e788      	b.n	427a <SFE_UBLOX_GNSS::isThisNMEAauto()+0x2a>
    4368:	200021d0 	.word	0x200021d0
    436c:	200021d8 	.word	0x200021d8
    4370:	200021e0 	.word	0x200021e0
    4374:	200021e8 	.word	0x200021e8
    4378:	200021f0 	.word	0x200021f0
    437c:	200021f8 	.word	0x200021f8
    4380:	20002200 	.word	0x20002200
    4384:	20002208 	.word	0x20002208

00004388 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()>:
{
    4388:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    438a:	4b71      	ldr	r3, [pc, #452]	; (4550 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1c8>)
{
    438c:	4604      	mov	r4, r0
    438e:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4390:	2205      	movs	r2, #5
    4392:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    4396:	e893 0003 	ldmia.w	r3, {r0, r1}
    439a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    439c:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    439e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    43a2:	4629      	mov	r1, r5
    43a4:	f009 fd32 	bl	de0c <memcmp>
    43a8:	b978      	cbnz	r0, 43ca <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x42>
    if (storageNMEAGPGGA != NULL)
    43aa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    43ae:	b163      	cbz	r3, 43ca <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x42>
      if (storageNMEAGPGGA->callbackCopy != NULL)
    43b0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    43b4:	b14a      	cbz	r2, 43ca <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x42>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
    43b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    43ba:	b112      	cbz	r2, 43c2 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x3a>
          return true;
    43bc:	2001      	movs	r0, #1
}
    43be:	b003      	add	sp, #12
    43c0:	bd30      	pop	{r4, r5, pc}
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
    43c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    43c6:	2b00      	cmp	r3, #0
    43c8:	d1f8      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
  strcpy(thisNMEA, "GNGGA");
    43ca:	4b62      	ldr	r3, [pc, #392]	; (4554 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1cc>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    43cc:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    43ce:	e893 0003 	ldmia.w	r3, {r0, r1}
    43d2:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    43d4:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    43d6:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    43da:	4629      	mov	r1, r5
    43dc:	f009 fd16 	bl	de0c <memcmp>
    43e0:	b968      	cbnz	r0, 43fe <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x76>
    if (storageNMEAGNGGA != NULL)
    43e2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    43e6:	b153      	cbz	r3, 43fe <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x76>
      if (storageNMEAGNGGA->callbackCopy != NULL)
    43e8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    43ec:	b13a      	cbz	r2, 43fe <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x76>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
    43ee:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    43f2:	2a00      	cmp	r2, #0
    43f4:	d1e2      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    43f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    43fa:	2b00      	cmp	r3, #0
    43fc:	d1de      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
  strcpy(thisNMEA, "GPVTG");
    43fe:	4b56      	ldr	r3, [pc, #344]	; (4558 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1d0>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4400:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4402:	e893 0003 	ldmia.w	r3, {r0, r1}
    4406:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4408:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    440a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    440e:	4629      	mov	r1, r5
    4410:	f009 fcfc 	bl	de0c <memcmp>
    4414:	b968      	cbnz	r0, 4432 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xaa>
    if (storageNMEAGPVTG != NULL)
    4416:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    441a:	b153      	cbz	r3, 4432 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xaa>
      if (storageNMEAGPVTG->callbackCopy != NULL)
    441c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    4420:	b13a      	cbz	r2, 4432 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xaa>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
    4422:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    4426:	2a00      	cmp	r2, #0
    4428:	d1c8      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    442a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    442e:	2b00      	cmp	r3, #0
    4430:	d1c4      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
  strcpy(thisNMEA, "GNVTG");
    4432:	4b4a      	ldr	r3, [pc, #296]	; (455c <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1d4>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4434:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    4436:	e893 0003 	ldmia.w	r3, {r0, r1}
    443a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    443c:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    443e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4442:	4629      	mov	r1, r5
    4444:	f009 fce2 	bl	de0c <memcmp>
    4448:	2800      	cmp	r0, #0
    444a:	d068      	beq.n	451e <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x196>
  strcpy(thisNMEA, "GPRMC");
    444c:	4b44      	ldr	r3, [pc, #272]	; (4560 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1d8>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    444e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4450:	e893 0003 	ldmia.w	r3, {r0, r1}
    4454:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4456:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    4458:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    445c:	4629      	mov	r1, r5
    445e:	f009 fcd5 	bl	de0c <memcmp>
    4462:	b968      	cbnz	r0, 4480 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xf8>
    if (storageNMEAGPRMC != NULL)
    4464:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    4468:	b153      	cbz	r3, 4480 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xf8>
      if (storageNMEAGPRMC->callbackCopy != NULL)
    446a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    446e:	b13a      	cbz	r2, 4480 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xf8>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
    4470:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    4474:	2a00      	cmp	r2, #0
    4476:	d1a1      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    4478:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    447c:	2b00      	cmp	r3, #0
    447e:	d19d      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
  strcpy(thisNMEA, "GNRMC");
    4480:	4b38      	ldr	r3, [pc, #224]	; (4564 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1dc>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4482:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4484:	e893 0003 	ldmia.w	r3, {r0, r1}
    4488:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    448a:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    448c:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4490:	4629      	mov	r1, r5
    4492:	f009 fcbb 	bl	de0c <memcmp>
    4496:	b968      	cbnz	r0, 44b4 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x12c>
    if (storageNMEAGNRMC != NULL)
    4498:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    449c:	b153      	cbz	r3, 44b4 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x12c>
      if (storageNMEAGNRMC->callbackCopy != NULL)
    449e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    44a2:	b13a      	cbz	r2, 44b4 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x12c>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
    44a4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    44a8:	2a00      	cmp	r2, #0
    44aa:	d187      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    44ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    44b0:	2b00      	cmp	r3, #0
    44b2:	d183      	bne.n	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
  strcpy(thisNMEA, "GPZDA");
    44b4:	4b2c      	ldr	r3, [pc, #176]	; (4568 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1e0>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    44b6:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    44b8:	e893 0003 	ldmia.w	r3, {r0, r1}
    44bc:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    44be:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    44c0:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    44c4:	4629      	mov	r1, r5
    44c6:	f009 fca1 	bl	de0c <memcmp>
    44ca:	b960      	cbnz	r0, 44e6 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x15e>
    if (storageNMEAGPZDA != NULL)
    44cc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    44d0:	b14b      	cbz	r3, 44e6 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x15e>
      if (storageNMEAGPZDA->callbackCopy != NULL)
    44d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    44d4:	b13a      	cbz	r2, 44e6 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x15e>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
    44d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    44d8:	2a00      	cmp	r2, #0
    44da:	f47f af6f 	bne.w	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    44de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    44e0:	2b00      	cmp	r3, #0
    44e2:	f47f af6b 	bne.w	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
  strcpy(thisNMEA, "GNZDA");
    44e6:	4b21      	ldr	r3, [pc, #132]	; (456c <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1e4>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    44e8:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    44ea:	e893 0003 	ldmia.w	r3, {r0, r1}
    44ee:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    44f0:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    44f2:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    44f6:	4629      	mov	r1, r5
    44f8:	f009 fc88 	bl	de0c <memcmp>
    44fc:	bb10      	cbnz	r0, 4544 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1bc>
    if (storageNMEAGNZDA != NULL)
    44fe:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    4502:	2800      	cmp	r0, #0
    4504:	f43f af5b 	beq.w	43be <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x36>
      if (storageNMEAGNZDA->callbackCopy != NULL)
    4508:	6f03      	ldr	r3, [r0, #112]	; 0x70
    450a:	b1f3      	cbz	r3, 454a <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x1c2>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
    450c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    450e:	2b00      	cmp	r3, #0
    4510:	f47f af54 	bne.w	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    4514:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    4516:	2800      	cmp	r0, #0
    4518:	f47f af50 	bne.w	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    451c:	e74f      	b.n	43be <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x36>
    if (storageNMEAGNVTG != NULL)
    451e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    4522:	2b00      	cmp	r3, #0
    4524:	d092      	beq.n	444c <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xc4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
    4526:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    452a:	2a00      	cmp	r2, #0
    452c:	d08e      	beq.n	444c <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xc4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
    452e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    4532:	2a00      	cmp	r2, #0
    4534:	f47f af42 	bne.w	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    4538:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    453c:	2b00      	cmp	r3, #0
    453e:	f47f af3d 	bne.w	43bc <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x34>
    4542:	e783      	b.n	444c <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0xc4>
  return false;
    4544:	2000      	movs	r0, #0
}
    4546:	b003      	add	sp, #12
    4548:	bd30      	pop	{r4, r5, pc}
  return false;
    454a:	4618      	mov	r0, r3
    454c:	e737      	b.n	43be <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()+0x36>
    454e:	bf00      	nop
    4550:	200021d0 	.word	0x200021d0
    4554:	200021d8 	.word	0x200021d8
    4558:	200021e0 	.word	0x200021e0
    455c:	200021e8 	.word	0x200021e8
    4560:	200021f0 	.word	0x200021f0
    4564:	200021f8 	.word	0x200021f8
    4568:	20002200 	.word	0x20002200
    456c:	20002208 	.word	0x20002208

00004570 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()>:
{
    4570:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    4572:	4b47      	ldr	r3, [pc, #284]	; (4690 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x120>)
{
    4574:	4604      	mov	r4, r0
    4576:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4578:	2205      	movs	r2, #5
    457a:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    457e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4582:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4584:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4586:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    458a:	4629      	mov	r1, r5
    458c:	f009 fc3e 	bl	de0c <memcmp>
    4590:	2800      	cmp	r0, #0
    4592:	d060      	beq.n	4656 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe6>
  strcpy(thisNMEA, "GNGGA");
    4594:	4b3f      	ldr	r3, [pc, #252]	; (4694 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x124>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4596:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4598:	e893 0003 	ldmia.w	r3, {r0, r1}
    459c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    459e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    45a0:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45a4:	4629      	mov	r1, r5
    45a6:	f009 fc31 	bl	de0c <memcmp>
    45aa:	2800      	cmp	r0, #0
    45ac:	d04e      	beq.n	464c <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xdc>
  strcpy(thisNMEA, "GPVTG");
    45ae:	4b3a      	ldr	r3, [pc, #232]	; (4698 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x128>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45b0:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    45b2:	e893 0003 	ldmia.w	r3, {r0, r1}
    45b6:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45b8:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    45ba:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45be:	4629      	mov	r1, r5
    45c0:	f009 fc24 	bl	de0c <memcmp>
    45c4:	2800      	cmp	r0, #0
    45c6:	d04f      	beq.n	4668 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xf8>
  strcpy(thisNMEA, "GNVTG");
    45c8:	4b34      	ldr	r3, [pc, #208]	; (469c <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x12c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45ca:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    45cc:	e893 0003 	ldmia.w	r3, {r0, r1}
    45d0:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45d2:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    45d4:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45d8:	4629      	mov	r1, r5
    45da:	f009 fc17 	bl	de0c <memcmp>
    45de:	2800      	cmp	r0, #0
    45e0:	d03e      	beq.n	4660 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xf0>
  strcpy(thisNMEA, "GPRMC");
    45e2:	4b2f      	ldr	r3, [pc, #188]	; (46a0 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x130>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45e4:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    45e6:	e893 0003 	ldmia.w	r3, {r0, r1}
    45ea:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45ec:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    45ee:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45f2:	4629      	mov	r1, r5
    45f4:	f009 fc0a 	bl	de0c <memcmp>
    45f8:	2800      	cmp	r0, #0
    45fa:	d03a      	beq.n	4672 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x102>
  strcpy(thisNMEA, "GNRMC");
    45fc:	4b29      	ldr	r3, [pc, #164]	; (46a4 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x134>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    45fe:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4600:	e893 0003 	ldmia.w	r3, {r0, r1}
    4604:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4606:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4608:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    460c:	4629      	mov	r1, r5
    460e:	f009 fbfd 	bl	de0c <memcmp>
    4612:	b3a0      	cbz	r0, 467e <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x10e>
  strcpy(thisNMEA, "GPZDA");
    4614:	4b24      	ldr	r3, [pc, #144]	; (46a8 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x138>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4616:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4618:	e893 0003 	ldmia.w	r3, {r0, r1}
    461c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    461e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4620:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4624:	4629      	mov	r1, r5
    4626:	f009 fbf1 	bl	de0c <memcmp>
    462a:	b360      	cbz	r0, 4686 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x116>
  strcpy(thisNMEA, "GNZDA");
    462c:	4b1f      	ldr	r3, [pc, #124]	; (46ac <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x13c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    462e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    4630:	e893 0003 	ldmia.w	r3, {r0, r1}
    4634:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4636:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4638:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    463c:	4629      	mov	r1, r5
    463e:	f009 fbe5 	bl	de0c <memcmp>
    4642:	b9d0      	cbnz	r0, 467a <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0x10a>
    return &storageNMEAGNZDA->workingCopy.length;
    4644:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    4648:	3001      	adds	r0, #1
    464a:	e002      	b.n	4652 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe2>
    return &storageNMEAGNGGA->workingCopy.length;
    464c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    4650:	3001      	adds	r0, #1
}
    4652:	b003      	add	sp, #12
    4654:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->workingCopy.length;
    4656:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    465a:	3001      	adds	r0, #1
}
    465c:	b003      	add	sp, #12
    465e:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->workingCopy.length;
    4660:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    4664:	3001      	adds	r0, #1
    4666:	e7f4      	b.n	4652 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe2>
    return &storageNMEAGPVTG->workingCopy.length;
    4668:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    466c:	3001      	adds	r0, #1
}
    466e:	b003      	add	sp, #12
    4670:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->workingCopy.length;
    4672:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4676:	3001      	adds	r0, #1
    4678:	e7eb      	b.n	4652 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe2>
  return NULL;
    467a:	2000      	movs	r0, #0
    467c:	e7e9      	b.n	4652 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe2>
    return &storageNMEAGNRMC->workingCopy.length;
    467e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4682:	3001      	adds	r0, #1
    4684:	e7e5      	b.n	4652 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe2>
    return &storageNMEAGPZDA->workingCopy.length;
    4686:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    468a:	3001      	adds	r0, #1
    468c:	e7e1      	b.n	4652 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()+0xe2>
    468e:	bf00      	nop
    4690:	200021d0 	.word	0x200021d0
    4694:	200021d8 	.word	0x200021d8
    4698:	200021e0 	.word	0x200021e0
    469c:	200021e8 	.word	0x200021e8
    46a0:	200021f0 	.word	0x200021f0
    46a4:	200021f8 	.word	0x200021f8
    46a8:	20002200 	.word	0x20002200
    46ac:	20002208 	.word	0x20002208

000046b0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()>:
{
    46b0:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    46b2:	4b47      	ldr	r3, [pc, #284]	; (47d0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x120>)
{
    46b4:	4604      	mov	r4, r0
    46b6:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46b8:	2205      	movs	r2, #5
    46ba:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    46be:	e893 0003 	ldmia.w	r3, {r0, r1}
    46c2:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46c4:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    46c6:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46ca:	4629      	mov	r1, r5
    46cc:	f009 fb9e 	bl	de0c <memcmp>
    46d0:	2800      	cmp	r0, #0
    46d2:	d060      	beq.n	4796 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe6>
  strcpy(thisNMEA, "GNGGA");
    46d4:	4b3f      	ldr	r3, [pc, #252]	; (47d4 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x124>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46d6:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    46d8:	e893 0003 	ldmia.w	r3, {r0, r1}
    46dc:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46de:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    46e0:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46e4:	4629      	mov	r1, r5
    46e6:	f009 fb91 	bl	de0c <memcmp>
    46ea:	2800      	cmp	r0, #0
    46ec:	d04e      	beq.n	478c <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xdc>
  strcpy(thisNMEA, "GPVTG");
    46ee:	4b3a      	ldr	r3, [pc, #232]	; (47d8 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x128>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46f0:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    46f2:	e893 0003 	ldmia.w	r3, {r0, r1}
    46f6:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46f8:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    46fa:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    46fe:	4629      	mov	r1, r5
    4700:	f009 fb84 	bl	de0c <memcmp>
    4704:	2800      	cmp	r0, #0
    4706:	d04f      	beq.n	47a8 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xf8>
  strcpy(thisNMEA, "GNVTG");
    4708:	4b34      	ldr	r3, [pc, #208]	; (47dc <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x12c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    470a:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    470c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4710:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4712:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4714:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4718:	4629      	mov	r1, r5
    471a:	f009 fb77 	bl	de0c <memcmp>
    471e:	2800      	cmp	r0, #0
    4720:	d03e      	beq.n	47a0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xf0>
  strcpy(thisNMEA, "GPRMC");
    4722:	4b2f      	ldr	r3, [pc, #188]	; (47e0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x130>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4724:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4726:	e893 0003 	ldmia.w	r3, {r0, r1}
    472a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    472c:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    472e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4732:	4629      	mov	r1, r5
    4734:	f009 fb6a 	bl	de0c <memcmp>
    4738:	2800      	cmp	r0, #0
    473a:	d03a      	beq.n	47b2 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x102>
  strcpy(thisNMEA, "GNRMC");
    473c:	4b29      	ldr	r3, [pc, #164]	; (47e4 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x134>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    473e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4740:	e893 0003 	ldmia.w	r3, {r0, r1}
    4744:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4746:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4748:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    474c:	4629      	mov	r1, r5
    474e:	f009 fb5d 	bl	de0c <memcmp>
    4752:	b3a0      	cbz	r0, 47be <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x10e>
  strcpy(thisNMEA, "GPZDA");
    4754:	4b24      	ldr	r3, [pc, #144]	; (47e8 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x138>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4756:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4758:	e893 0003 	ldmia.w	r3, {r0, r1}
    475c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    475e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4760:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4764:	4629      	mov	r1, r5
    4766:	f009 fb51 	bl	de0c <memcmp>
    476a:	b360      	cbz	r0, 47c6 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x116>
  strcpy(thisNMEA, "GNZDA");
    476c:	4b1f      	ldr	r3, [pc, #124]	; (47ec <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x13c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    476e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    4770:	e893 0003 	ldmia.w	r3, {r0, r1}
    4774:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4776:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4778:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    477c:	4629      	mov	r1, r5
    477e:	f009 fb45 	bl	de0c <memcmp>
    4782:	b9d0      	cbnz	r0, 47ba <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0x10a>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
    4784:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    4788:	3002      	adds	r0, #2
    478a:	e002      	b.n	4792 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe2>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
    478c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    4790:	3002      	adds	r0, #2
}
    4792:	b003      	add	sp, #12
    4794:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->workingCopy.nmea[0];
    4796:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    479a:	3002      	adds	r0, #2
}
    479c:	b003      	add	sp, #12
    479e:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->workingCopy.nmea[0];
    47a0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    47a4:	3002      	adds	r0, #2
    47a6:	e7f4      	b.n	4792 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe2>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
    47a8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    47ac:	3002      	adds	r0, #2
}
    47ae:	b003      	add	sp, #12
    47b0:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->workingCopy.nmea[0];
    47b2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    47b6:	3002      	adds	r0, #2
    47b8:	e7eb      	b.n	4792 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe2>
  return NULL;
    47ba:	2000      	movs	r0, #0
    47bc:	e7e9      	b.n	4792 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe2>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
    47be:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    47c2:	3002      	adds	r0, #2
    47c4:	e7e5      	b.n	4792 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe2>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
    47c6:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    47ca:	3002      	adds	r0, #2
    47cc:	e7e1      	b.n	4792 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()+0xe2>
    47ce:	bf00      	nop
    47d0:	200021d0 	.word	0x200021d0
    47d4:	200021d8 	.word	0x200021d8
    47d8:	200021e0 	.word	0x200021e0
    47dc:	200021e8 	.word	0x200021e8
    47e0:	200021f0 	.word	0x200021f0
    47e4:	200021f8 	.word	0x200021f8
    47e8:	20002200 	.word	0x20002200
    47ec:	20002208 	.word	0x20002208

000047f0 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()>:
{
    47f0:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    47f2:	4b47      	ldr	r3, [pc, #284]	; (4910 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x120>)
{
    47f4:	4604      	mov	r4, r0
    47f6:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    47f8:	2205      	movs	r2, #5
    47fa:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    47fe:	e893 0003 	ldmia.w	r3, {r0, r1}
    4802:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4804:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4806:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    480a:	4629      	mov	r1, r5
    480c:	f009 fafe 	bl	de0c <memcmp>
    4810:	2800      	cmp	r0, #0
    4812:	d060      	beq.n	48d6 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe6>
  strcpy(thisNMEA, "GNGGA");
    4814:	4b3f      	ldr	r3, [pc, #252]	; (4914 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x124>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4816:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4818:	e893 0003 	ldmia.w	r3, {r0, r1}
    481c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    481e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    4820:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4824:	4629      	mov	r1, r5
    4826:	f009 faf1 	bl	de0c <memcmp>
    482a:	2800      	cmp	r0, #0
    482c:	d04e      	beq.n	48cc <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xdc>
  strcpy(thisNMEA, "GPVTG");
    482e:	4b3a      	ldr	r3, [pc, #232]	; (4918 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x128>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4830:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4832:	e893 0003 	ldmia.w	r3, {r0, r1}
    4836:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4838:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    483a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    483e:	4629      	mov	r1, r5
    4840:	f009 fae4 	bl	de0c <memcmp>
    4844:	2800      	cmp	r0, #0
    4846:	d04f      	beq.n	48e8 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xf8>
  strcpy(thisNMEA, "GNVTG");
    4848:	4b34      	ldr	r3, [pc, #208]	; (491c <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x12c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    484a:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    484c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4850:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4852:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4854:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4858:	4629      	mov	r1, r5
    485a:	f009 fad7 	bl	de0c <memcmp>
    485e:	2800      	cmp	r0, #0
    4860:	d03e      	beq.n	48e0 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xf0>
  strcpy(thisNMEA, "GPRMC");
    4862:	4b2f      	ldr	r3, [pc, #188]	; (4920 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x130>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4864:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4866:	e893 0003 	ldmia.w	r3, {r0, r1}
    486a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    486c:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    486e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4872:	4629      	mov	r1, r5
    4874:	f009 faca 	bl	de0c <memcmp>
    4878:	2800      	cmp	r0, #0
    487a:	d03a      	beq.n	48f2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x102>
  strcpy(thisNMEA, "GNRMC");
    487c:	4b29      	ldr	r3, [pc, #164]	; (4924 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x134>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    487e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4880:	e893 0003 	ldmia.w	r3, {r0, r1}
    4884:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4886:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4888:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    488c:	4629      	mov	r1, r5
    488e:	f009 fabd 	bl	de0c <memcmp>
    4892:	b3a0      	cbz	r0, 48fe <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x10e>
  strcpy(thisNMEA, "GPZDA");
    4894:	4b24      	ldr	r3, [pc, #144]	; (4928 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x138>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4896:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4898:	e893 0003 	ldmia.w	r3, {r0, r1}
    489c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    489e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    48a0:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    48a4:	4629      	mov	r1, r5
    48a6:	f009 fab1 	bl	de0c <memcmp>
    48aa:	b360      	cbz	r0, 4906 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x116>
  strcpy(thisNMEA, "GNZDA");
    48ac:	4b1f      	ldr	r3, [pc, #124]	; (492c <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x13c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    48ae:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    48b0:	e893 0003 	ldmia.w	r3, {r0, r1}
    48b4:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    48b6:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    48b8:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    48bc:	4629      	mov	r1, r5
    48be:	f009 faa5 	bl	de0c <memcmp>
    48c2:	b9d0      	cbnz	r0, 48fa <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0x10a>
    return &storageNMEAGNZDA->completeCopy.length;
    48c4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    48c8:	3034      	adds	r0, #52	; 0x34
    48ca:	e002      	b.n	48d2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe2>
    return &storageNMEAGNGGA->completeCopy.length;
    48cc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    48d0:	3066      	adds	r0, #102	; 0x66
}
    48d2:	b003      	add	sp, #12
    48d4:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->completeCopy.length;
    48d6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    48da:	3066      	adds	r0, #102	; 0x66
}
    48dc:	b003      	add	sp, #12
    48de:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->completeCopy.length;
    48e0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    48e4:	3066      	adds	r0, #102	; 0x66
    48e6:	e7f4      	b.n	48d2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe2>
    return &storageNMEAGPVTG->completeCopy.length;
    48e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    48ec:	3066      	adds	r0, #102	; 0x66
}
    48ee:	b003      	add	sp, #12
    48f0:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->completeCopy.length;
    48f2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    48f6:	3066      	adds	r0, #102	; 0x66
    48f8:	e7eb      	b.n	48d2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe2>
  return NULL;
    48fa:	2000      	movs	r0, #0
    48fc:	e7e9      	b.n	48d2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe2>
    return &storageNMEAGNRMC->completeCopy.length;
    48fe:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4902:	3066      	adds	r0, #102	; 0x66
    4904:	e7e5      	b.n	48d2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe2>
    return &storageNMEAGPZDA->completeCopy.length;
    4906:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    490a:	3034      	adds	r0, #52	; 0x34
    490c:	e7e1      	b.n	48d2 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()+0xe2>
    490e:	bf00      	nop
    4910:	200021d0 	.word	0x200021d0
    4914:	200021d8 	.word	0x200021d8
    4918:	200021e0 	.word	0x200021e0
    491c:	200021e8 	.word	0x200021e8
    4920:	200021f0 	.word	0x200021f0
    4924:	200021f8 	.word	0x200021f8
    4928:	20002200 	.word	0x20002200
    492c:	20002208 	.word	0x20002208

00004930 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()>:
{
    4930:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    4932:	4b47      	ldr	r3, [pc, #284]	; (4a50 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x120>)
{
    4934:	4604      	mov	r4, r0
    4936:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4938:	2205      	movs	r2, #5
    493a:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    493e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4942:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4944:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4946:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    494a:	4629      	mov	r1, r5
    494c:	f009 fa5e 	bl	de0c <memcmp>
    4950:	2800      	cmp	r0, #0
    4952:	d060      	beq.n	4a16 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe6>
  strcpy(thisNMEA, "GNGGA");
    4954:	4b3f      	ldr	r3, [pc, #252]	; (4a54 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x124>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4956:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4958:	e893 0003 	ldmia.w	r3, {r0, r1}
    495c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    495e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    4960:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4964:	4629      	mov	r1, r5
    4966:	f009 fa51 	bl	de0c <memcmp>
    496a:	2800      	cmp	r0, #0
    496c:	d04e      	beq.n	4a0c <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xdc>
  strcpy(thisNMEA, "GPVTG");
    496e:	4b3a      	ldr	r3, [pc, #232]	; (4a58 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x128>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4970:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4972:	e893 0003 	ldmia.w	r3, {r0, r1}
    4976:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4978:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    497a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    497e:	4629      	mov	r1, r5
    4980:	f009 fa44 	bl	de0c <memcmp>
    4984:	2800      	cmp	r0, #0
    4986:	d04f      	beq.n	4a28 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xf8>
  strcpy(thisNMEA, "GNVTG");
    4988:	4b34      	ldr	r3, [pc, #208]	; (4a5c <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x12c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    498a:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    498c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4990:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4992:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4994:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4998:	4629      	mov	r1, r5
    499a:	f009 fa37 	bl	de0c <memcmp>
    499e:	2800      	cmp	r0, #0
    49a0:	d03e      	beq.n	4a20 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xf0>
  strcpy(thisNMEA, "GPRMC");
    49a2:	4b2f      	ldr	r3, [pc, #188]	; (4a60 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x130>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49a4:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    49a6:	e893 0003 	ldmia.w	r3, {r0, r1}
    49aa:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49ac:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    49ae:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49b2:	4629      	mov	r1, r5
    49b4:	f009 fa2a 	bl	de0c <memcmp>
    49b8:	2800      	cmp	r0, #0
    49ba:	d03a      	beq.n	4a32 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x102>
  strcpy(thisNMEA, "GNRMC");
    49bc:	4b29      	ldr	r3, [pc, #164]	; (4a64 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x134>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49be:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    49c0:	e893 0003 	ldmia.w	r3, {r0, r1}
    49c4:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49c6:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    49c8:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49cc:	4629      	mov	r1, r5
    49ce:	f009 fa1d 	bl	de0c <memcmp>
    49d2:	b3a0      	cbz	r0, 4a3e <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x10e>
  strcpy(thisNMEA, "GPZDA");
    49d4:	4b24      	ldr	r3, [pc, #144]	; (4a68 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x138>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49d6:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    49d8:	e893 0003 	ldmia.w	r3, {r0, r1}
    49dc:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49de:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    49e0:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49e4:	4629      	mov	r1, r5
    49e6:	f009 fa11 	bl	de0c <memcmp>
    49ea:	b360      	cbz	r0, 4a46 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x116>
  strcpy(thisNMEA, "GNZDA");
    49ec:	4b1f      	ldr	r3, [pc, #124]	; (4a6c <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x13c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49ee:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    49f0:	e893 0003 	ldmia.w	r3, {r0, r1}
    49f4:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49f6:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    49f8:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    49fc:	4629      	mov	r1, r5
    49fe:	f009 fa05 	bl	de0c <memcmp>
    4a02:	b9d0      	cbnz	r0, 4a3a <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0x10a>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
    4a04:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    4a08:	3035      	adds	r0, #53	; 0x35
    4a0a:	e002      	b.n	4a12 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe2>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
    4a0c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    4a10:	3067      	adds	r0, #103	; 0x67
}
    4a12:	b003      	add	sp, #12
    4a14:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->completeCopy.nmea[0];
    4a16:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    4a1a:	3067      	adds	r0, #103	; 0x67
}
    4a1c:	b003      	add	sp, #12
    4a1e:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->completeCopy.nmea[0];
    4a20:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    4a24:	3067      	adds	r0, #103	; 0x67
    4a26:	e7f4      	b.n	4a12 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe2>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
    4a28:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    4a2c:	3067      	adds	r0, #103	; 0x67
}
    4a2e:	b003      	add	sp, #12
    4a30:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->completeCopy.nmea[0];
    4a32:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4a36:	3067      	adds	r0, #103	; 0x67
    4a38:	e7eb      	b.n	4a12 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe2>
  return NULL;
    4a3a:	2000      	movs	r0, #0
    4a3c:	e7e9      	b.n	4a12 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe2>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
    4a3e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4a42:	3067      	adds	r0, #103	; 0x67
    4a44:	e7e5      	b.n	4a12 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe2>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
    4a46:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    4a4a:	3035      	adds	r0, #53	; 0x35
    4a4c:	e7e1      	b.n	4a12 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()+0xe2>
    4a4e:	bf00      	nop
    4a50:	200021d0 	.word	0x200021d0
    4a54:	200021d8 	.word	0x200021d8
    4a58:	200021e0 	.word	0x200021e0
    4a5c:	200021e8 	.word	0x200021e8
    4a60:	200021f0 	.word	0x200021f0
    4a64:	200021f8 	.word	0x200021f8
    4a68:	20002200 	.word	0x20002200
    4a6c:	20002208 	.word	0x20002208

00004a70 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()>:
{
    4a70:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    4a72:	4b4a      	ldr	r3, [pc, #296]	; (4b9c <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x12c>)
{
    4a74:	4604      	mov	r4, r0
    4a76:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4a78:	2205      	movs	r2, #5
    4a7a:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    4a7e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4a82:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4a84:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4a86:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4a8a:	4629      	mov	r1, r5
    4a8c:	f009 f9be 	bl	de0c <memcmp>
    4a90:	2800      	cmp	r0, #0
    4a92:	d062      	beq.n	4b5a <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xea>
  strcpy(thisNMEA, "GNGGA");
    4a94:	4b42      	ldr	r3, [pc, #264]	; (4ba0 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x130>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4a96:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4a98:	e893 0003 	ldmia.w	r3, {r0, r1}
    4a9c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4a9e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    4aa0:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4aa4:	4629      	mov	r1, r5
    4aa6:	f009 f9b1 	bl	de0c <memcmp>
    4aaa:	2800      	cmp	r0, #0
    4aac:	d04f      	beq.n	4b4e <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xde>
  strcpy(thisNMEA, "GPVTG");
    4aae:	4b3d      	ldr	r3, [pc, #244]	; (4ba4 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x134>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ab0:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4ab2:	e893 0003 	ldmia.w	r3, {r0, r1}
    4ab6:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ab8:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    4aba:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4abe:	4629      	mov	r1, r5
    4ac0:	f009 f9a4 	bl	de0c <memcmp>
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d053      	beq.n	4b70 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x100>
  strcpy(thisNMEA, "GNVTG");
    4ac8:	4b37      	ldr	r3, [pc, #220]	; (4ba8 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x138>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4aca:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    4acc:	e893 0003 	ldmia.w	r3, {r0, r1}
    4ad0:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ad2:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4ad4:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ad8:	4629      	mov	r1, r5
    4ada:	f009 f997 	bl	de0c <memcmp>
    4ade:	2800      	cmp	r0, #0
    4ae0:	d041      	beq.n	4b66 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xf6>
  strcpy(thisNMEA, "GPRMC");
    4ae2:	4b32      	ldr	r3, [pc, #200]	; (4bac <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x13c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ae4:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4ae6:	e893 0003 	ldmia.w	r3, {r0, r1}
    4aea:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4aec:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    4aee:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4af2:	4629      	mov	r1, r5
    4af4:	f009 f98a 	bl	de0c <memcmp>
    4af8:	2800      	cmp	r0, #0
    4afa:	d03f      	beq.n	4b7c <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x10c>
  strcpy(thisNMEA, "GNRMC");
    4afc:	4b2c      	ldr	r3, [pc, #176]	; (4bb0 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x140>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4afe:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4b00:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b04:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b06:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4b08:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b0c:	4629      	mov	r1, r5
    4b0e:	f009 f97d 	bl	de0c <memcmp>
    4b12:	2800      	cmp	r0, #0
    4b14:	d039      	beq.n	4b8a <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x11a>
  strcpy(thisNMEA, "GPZDA");
    4b16:	4b27      	ldr	r3, [pc, #156]	; (4bb4 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x144>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b18:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b1e:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b20:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4b22:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b26:	4629      	mov	r1, r5
    4b28:	f009 f970 	bl	de0c <memcmp>
    4b2c:	b390      	cbz	r0, 4b94 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x124>
  strcpy(thisNMEA, "GNZDA");
    4b2e:	4b22      	ldr	r3, [pc, #136]	; (4bb8 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x148>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b30:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    4b32:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b36:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b38:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4b3a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4b3e:	4629      	mov	r1, r5
    4b40:	f009 f964 	bl	de0c <memcmp>
    4b44:	b9f8      	cbnz	r0, 4b86 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0x116>
    return &storageNMEAGNZDA->callbackCopy->length;
    4b46:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    4b4a:	6f18      	ldr	r0, [r3, #112]	; 0x70
    4b4c:	e003      	b.n	4b56 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xe6>
    return &storageNMEAGNGGA->callbackCopy->length;
    4b4e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    4b52:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
    4b56:	b003      	add	sp, #12
    4b58:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->callbackCopy->length;
    4b5a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    4b5e:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
    4b62:	b003      	add	sp, #12
    4b64:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->callbackCopy->length;
    4b66:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    4b6a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4b6e:	e7f2      	b.n	4b56 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xe6>
    return &storageNMEAGPVTG->callbackCopy->length;
    4b70:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    4b74:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
    4b78:	b003      	add	sp, #12
    4b7a:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->callbackCopy->length;
    4b7c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    4b80:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4b84:	e7e7      	b.n	4b56 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xe6>
  return NULL;
    4b86:	2000      	movs	r0, #0
    4b88:	e7e5      	b.n	4b56 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xe6>
    return &storageNMEAGNRMC->callbackCopy->length;
    4b8a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    4b8e:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4b92:	e7e0      	b.n	4b56 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xe6>
    return &storageNMEAGPZDA->callbackCopy->length;
    4b94:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    4b98:	6f18      	ldr	r0, [r3, #112]	; 0x70
    4b9a:	e7dc      	b.n	4b56 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()+0xe6>
    4b9c:	200021d0 	.word	0x200021d0
    4ba0:	200021d8 	.word	0x200021d8
    4ba4:	200021e0 	.word	0x200021e0
    4ba8:	200021e8 	.word	0x200021e8
    4bac:	200021f0 	.word	0x200021f0
    4bb0:	200021f8 	.word	0x200021f8
    4bb4:	20002200 	.word	0x20002200
    4bb8:	20002208 	.word	0x20002208

00004bbc <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()>:
{
    4bbc:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    4bbe:	4b4e      	ldr	r3, [pc, #312]	; (4cf8 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x13c>)
{
    4bc0:	4604      	mov	r4, r0
    4bc2:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4bc4:	2205      	movs	r2, #5
    4bc6:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    4bca:	e893 0003 	ldmia.w	r3, {r0, r1}
    4bce:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4bd0:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4bd2:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4bd6:	4629      	mov	r1, r5
    4bd8:	f009 f918 	bl	de0c <memcmp>
    4bdc:	2800      	cmp	r0, #0
    4bde:	d064      	beq.n	4caa <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xee>
  strcpy(thisNMEA, "GNGGA");
    4be0:	4b46      	ldr	r3, [pc, #280]	; (4cfc <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x140>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4be2:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4be4:	e893 0003 	ldmia.w	r3, {r0, r1}
    4be8:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4bea:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    4bec:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4bf0:	4629      	mov	r1, r5
    4bf2:	f009 f90b 	bl	de0c <memcmp>
    4bf6:	2800      	cmp	r0, #0
    4bf8:	d050      	beq.n	4c9c <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xe0>
  strcpy(thisNMEA, "GPVTG");
    4bfa:	4b41      	ldr	r3, [pc, #260]	; (4d00 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x144>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4bfc:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4bfe:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c02:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c04:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    4c06:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c0a:	4629      	mov	r1, r5
    4c0c:	f009 f8fe 	bl	de0c <memcmp>
    4c10:	2800      	cmp	r0, #0
    4c12:	d057      	beq.n	4cc4 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x108>
  strcpy(thisNMEA, "GNVTG");
    4c14:	4b3b      	ldr	r3, [pc, #236]	; (4d04 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x148>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c16:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    4c18:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c1c:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c1e:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4c20:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c24:	4629      	mov	r1, r5
    4c26:	f009 f8f1 	bl	de0c <memcmp>
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d044      	beq.n	4cb8 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xfc>
  strcpy(thisNMEA, "GPRMC");
    4c2e:	4b36      	ldr	r3, [pc, #216]	; (4d08 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x14c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c30:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4c32:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c36:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c38:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    4c3a:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c3e:	4629      	mov	r1, r5
    4c40:	f009 f8e4 	bl	de0c <memcmp>
    4c44:	2800      	cmp	r0, #0
    4c46:	d044      	beq.n	4cd2 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x116>
  strcpy(thisNMEA, "GNRMC");
    4c48:	4b30      	ldr	r3, [pc, #192]	; (4d0c <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x150>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c4a:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4c4c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c50:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c52:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4c54:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c58:	4629      	mov	r1, r5
    4c5a:	f009 f8d7 	bl	de0c <memcmp>
    4c5e:	2800      	cmp	r0, #0
    4c60:	d03f      	beq.n	4ce2 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x126>
  strcpy(thisNMEA, "GPZDA");
    4c62:	4b2b      	ldr	r3, [pc, #172]	; (4d10 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x154>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c64:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4c66:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c6a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c6c:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4c6e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c72:	4629      	mov	r1, r5
    4c74:	f009 f8ca 	bl	de0c <memcmp>
    4c78:	b3c8      	cbz	r0, 4cee <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x132>
  strcpy(thisNMEA, "GNZDA");
    4c7a:	4b26      	ldr	r3, [pc, #152]	; (4d14 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x158>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c7c:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    4c7e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c82:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c84:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4c86:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4c8a:	4629      	mov	r1, r5
    4c8c:	f009 f8be 	bl	de0c <memcmp>
    4c90:	bb28      	cbnz	r0, 4cde <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0x122>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
    4c92:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    4c96:	6f18      	ldr	r0, [r3, #112]	; 0x70
    4c98:	3001      	adds	r0, #1
    4c9a:	e004      	b.n	4ca6 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xea>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
    4c9c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    4ca0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4ca4:	3001      	adds	r0, #1
}
    4ca6:	b003      	add	sp, #12
    4ca8:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
    4caa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    4cae:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4cb2:	3001      	adds	r0, #1
}
    4cb4:	b003      	add	sp, #12
    4cb6:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
    4cb8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    4cbc:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4cc0:	3001      	adds	r0, #1
    4cc2:	e7f0      	b.n	4ca6 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xea>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
    4cc4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    4cc8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4ccc:	3001      	adds	r0, #1
}
    4cce:	b003      	add	sp, #12
    4cd0:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
    4cd2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    4cd6:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4cda:	3001      	adds	r0, #1
    4cdc:	e7e3      	b.n	4ca6 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xea>
  return NULL;
    4cde:	2000      	movs	r0, #0
    4ce0:	e7e1      	b.n	4ca6 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xea>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
    4ce2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    4ce6:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    4cea:	3001      	adds	r0, #1
    4cec:	e7db      	b.n	4ca6 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xea>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
    4cee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    4cf2:	6f18      	ldr	r0, [r3, #112]	; 0x70
    4cf4:	3001      	adds	r0, #1
    4cf6:	e7d6      	b.n	4ca6 <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()+0xea>
    4cf8:	200021d0 	.word	0x200021d0
    4cfc:	200021d8 	.word	0x200021d8
    4d00:	200021e0 	.word	0x200021e0
    4d04:	200021e8 	.word	0x200021e8
    4d08:	200021f0 	.word	0x200021f0
    4d0c:	200021f8 	.word	0x200021f8
    4d10:	20002200 	.word	0x20002200
    4d14:	20002208 	.word	0x20002208

00004d18 <SFE_UBLOX_GNSS::getNMEAMaxLength()>:
{
    4d18:	b510      	push	{r4, lr}
  char thisNMEA[] = "GPGGA";
    4d1a:	4b37      	ldr	r3, [pc, #220]	; (4df8 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xe0>)
{
    4d1c:	4604      	mov	r4, r0
    4d1e:	b082      	sub	sp, #8
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d20:	2205      	movs	r2, #5
    4d22:	f204 1467 	addw	r4, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    4d26:	e893 0003 	ldmia.w	r3, {r0, r1}
    4d2a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d2c:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4d2e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d32:	4621      	mov	r1, r4
    4d34:	f009 f86a 	bl	de0c <memcmp>
    4d38:	2800      	cmp	r0, #0
    4d3a:	d058      	beq.n	4dee <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd6>
  strcpy(thisNMEA, "GNGGA");
    4d3c:	4b2f      	ldr	r3, [pc, #188]	; (4dfc <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xe4>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d3e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4d40:	e893 0003 	ldmia.w	r3, {r0, r1}
    4d44:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d46:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    4d48:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d4c:	4621      	mov	r1, r4
    4d4e:	f009 f85d 	bl	de0c <memcmp>
    4d52:	2800      	cmp	r0, #0
    4d54:	d04b      	beq.n	4dee <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd6>
  strcpy(thisNMEA, "GPVTG");
    4d56:	4b2a      	ldr	r3, [pc, #168]	; (4e00 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xe8>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d58:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
    4d5e:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d60:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    4d62:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d66:	4621      	mov	r1, r4
    4d68:	f009 f850 	bl	de0c <memcmp>
    4d6c:	2800      	cmp	r0, #0
    4d6e:	d03e      	beq.n	4dee <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd6>
  strcpy(thisNMEA, "GNVTG");
    4d70:	4b24      	ldr	r3, [pc, #144]	; (4e04 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xec>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d72:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    4d74:	e893 0003 	ldmia.w	r3, {r0, r1}
    4d78:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d7a:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4d7c:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d80:	4621      	mov	r1, r4
    4d82:	f009 f843 	bl	de0c <memcmp>
    4d86:	b390      	cbz	r0, 4dee <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd6>
  strcpy(thisNMEA, "GPRMC");
    4d88:	4b1f      	ldr	r3, [pc, #124]	; (4e08 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xf0>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d8a:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4d90:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d92:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    4d94:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4d98:	4621      	mov	r1, r4
    4d9a:	f009 f837 	bl	de0c <memcmp>
    4d9e:	b330      	cbz	r0, 4dee <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd6>
  strcpy(thisNMEA, "GNRMC");
    4da0:	4b1a      	ldr	r3, [pc, #104]	; (4e0c <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xf4>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4da2:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4da4:	e893 0003 	ldmia.w	r3, {r0, r1}
    4da8:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4daa:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4dac:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4db0:	4621      	mov	r1, r4
    4db2:	f009 f82b 	bl	de0c <memcmp>
    4db6:	b1d0      	cbz	r0, 4dee <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd6>
  strcpy(thisNMEA, "GPZDA");
    4db8:	4b15      	ldr	r3, [pc, #84]	; (4e10 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xf8>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4dba:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4dbc:	e893 0003 	ldmia.w	r3, {r0, r1}
    4dc0:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4dc2:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4dc4:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4dc8:	4621      	mov	r1, r4
    4dca:	f009 f81f 	bl	de0c <memcmp>
    4dce:	b188      	cbz	r0, 4df4 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xdc>
  strcpy(thisNMEA, "GNZDA");
    4dd0:	4b10      	ldr	r3, [pc, #64]	; (4e14 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xfc>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4dd2:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    4dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
    4dd8:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4dda:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4ddc:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4de0:	4621      	mov	r1, r4
    4de2:	f009 f813 	bl	de0c <memcmp>
    4de6:	b128      	cbz	r0, 4df4 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xdc>
  return 0;
    4de8:	2000      	movs	r0, #0
}
    4dea:	b002      	add	sp, #8
    4dec:	bd10      	pop	{r4, pc}
    return NMEA_GGA_MAX_LENGTH;
    4dee:	2064      	movs	r0, #100	; 0x64
}
    4df0:	b002      	add	sp, #8
    4df2:	bd10      	pop	{r4, pc}
    return NMEA_ZDA_MAX_LENGTH;
    4df4:	2032      	movs	r0, #50	; 0x32
    4df6:	e7fb      	b.n	4df0 <SFE_UBLOX_GNSS::getNMEAMaxLength()+0xd8>
    4df8:	200021d0 	.word	0x200021d0
    4dfc:	200021d8 	.word	0x200021d8
    4e00:	200021e0 	.word	0x200021e0
    4e04:	200021e8 	.word	0x200021e8
    4e08:	200021f0 	.word	0x200021f0
    4e0c:	200021f8 	.word	0x200021f8
    4e10:	20002200 	.word	0x20002200
    4e14:	20002208 	.word	0x20002208

00004e18 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()>:
{
    4e18:	b530      	push	{r4, r5, lr}
  char thisNMEA[] = "GPGGA";
    4e1a:	4b42      	ldr	r3, [pc, #264]	; (4f24 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x10c>)
{
    4e1c:	4604      	mov	r4, r0
    4e1e:	b083      	sub	sp, #12
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e20:	2205      	movs	r2, #5
    4e22:	f204 1567 	addw	r5, r4, #359	; 0x167
  char thisNMEA[] = "GPGGA";
    4e26:	e893 0003 	ldmia.w	r3, {r0, r1}
    4e2a:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e2c:	4668      	mov	r0, sp
  char thisNMEA[] = "GPGGA";
    4e2e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e32:	4629      	mov	r1, r5
    4e34:	f008 ffea 	bl	de0c <memcmp>
    4e38:	2800      	cmp	r0, #0
    4e3a:	d05d      	beq.n	4ef8 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xe0>
  strcpy(thisNMEA, "GNGGA");
    4e3c:	4b3a      	ldr	r3, [pc, #232]	; (4f28 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x110>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e3e:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNGGA");
    4e40:	e893 0003 	ldmia.w	r3, {r0, r1}
    4e44:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e46:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNGGA");
    4e48:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e4c:	4629      	mov	r1, r5
    4e4e:	f008 ffdd 	bl	de0c <memcmp>
    4e52:	2800      	cmp	r0, #0
    4e54:	d04c      	beq.n	4ef0 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xd8>
  strcpy(thisNMEA, "GPVTG");
    4e56:	4b35      	ldr	r3, [pc, #212]	; (4f2c <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x114>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e58:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPVTG");
    4e5a:	e893 0003 	ldmia.w	r3, {r0, r1}
    4e5e:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e60:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPVTG");
    4e62:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e66:	4629      	mov	r1, r5
    4e68:	f008 ffd0 	bl	de0c <memcmp>
    4e6c:	2800      	cmp	r0, #0
    4e6e:	d04a      	beq.n	4f06 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xee>
  strcpy(thisNMEA, "GNVTG");
    4e70:	4b2f      	ldr	r3, [pc, #188]	; (4f30 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x118>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e72:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNVTG");
    4e74:	e893 0003 	ldmia.w	r3, {r0, r1}
    4e78:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e7a:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNVTG");
    4e7c:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e80:	4629      	mov	r1, r5
    4e82:	f008 ffc3 	bl	de0c <memcmp>
    4e86:	2800      	cmp	r0, #0
    4e88:	d03a      	beq.n	4f00 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xe8>
  strcpy(thisNMEA, "GPRMC");
    4e8a:	4b2a      	ldr	r3, [pc, #168]	; (4f34 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x11c>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e8c:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPRMC");
    4e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4e92:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e94:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPRMC");
    4e96:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4e9a:	4629      	mov	r1, r5
    4e9c:	f008 ffb6 	bl	de0c <memcmp>
    4ea0:	b3a8      	cbz	r0, 4f0e <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xf6>
  strcpy(thisNMEA, "GNRMC");
    4ea2:	4b25      	ldr	r3, [pc, #148]	; (4f38 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x120>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ea4:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNRMC");
    4ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
    4eaa:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4eac:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNRMC");
    4eae:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4eb2:	4629      	mov	r1, r5
    4eb4:	f008 ffaa 	bl	de0c <memcmp>
    4eb8:	b370      	cbz	r0, 4f18 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x100>
  strcpy(thisNMEA, "GPZDA");
    4eba:	4b20      	ldr	r3, [pc, #128]	; (4f3c <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x124>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ebc:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GPZDA");
    4ebe:	e893 0003 	ldmia.w	r3, {r0, r1}
    4ec2:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ec4:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GPZDA");
    4ec6:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4eca:	4629      	mov	r1, r5
    4ecc:	f008 ff9e 	bl	de0c <memcmp>
    4ed0:	b328      	cbz	r0, 4f1e <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x106>
  strcpy(thisNMEA, "GNZDA");
    4ed2:	4b1b      	ldr	r3, [pc, #108]	; (4f40 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0x128>)
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ed4:	2205      	movs	r2, #5
  strcpy(thisNMEA, "GNZDA");
    4ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
    4eda:	9000      	str	r0, [sp, #0]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4edc:	4668      	mov	r0, sp
  strcpy(thisNMEA, "GNZDA");
    4ede:	f8ad 1004 	strh.w	r1, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
    4ee2:	4629      	mov	r1, r5
    4ee4:	f008 ff92 	bl	de0c <memcmp>
    4ee8:	b9a0      	cbnz	r0, 4f14 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xfc>
    return &storageNMEAGNZDA->automaticFlags;
    4eea:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    4eee:	e001      	b.n	4ef4 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xdc>
    return &storageNMEAGNGGA->automaticFlags;
    4ef0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
}
    4ef4:	b003      	add	sp, #12
    4ef6:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPGGA->automaticFlags;
    4ef8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
}
    4efc:	b003      	add	sp, #12
    4efe:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGNVTG->automaticFlags;
    4f00:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    4f04:	e7f6      	b.n	4ef4 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xdc>
    return &storageNMEAGPVTG->automaticFlags;
    4f06:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
}
    4f0a:	b003      	add	sp, #12
    4f0c:	bd30      	pop	{r4, r5, pc}
    return &storageNMEAGPRMC->automaticFlags;
    4f0e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4f12:	e7ef      	b.n	4ef4 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xdc>
  return NULL;
    4f14:	2000      	movs	r0, #0
    4f16:	e7ed      	b.n	4ef4 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xdc>
    return &storageNMEAGNRMC->automaticFlags;
    4f18:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4f1c:	e7ea      	b.n	4ef4 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xdc>
    return &storageNMEAGPZDA->automaticFlags;
    4f1e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    4f22:	e7e7      	b.n	4ef4 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()+0xdc>
    4f24:	200021d0 	.word	0x200021d0
    4f28:	200021d8 	.word	0x200021d8
    4f2c:	200021e0 	.word	0x200021e0
    4f30:	200021e8 	.word	0x200021e8
    4f34:	200021f0 	.word	0x200021f0
    4f38:	200021f8 	.word	0x200021f8
    4f3c:	20002200 	.word	0x20002200
    4f40:	20002208 	.word	0x20002208

00004f44 <SFE_UBLOX_GNSS::processRTCM(unsigned char)>:

void SFE_UBLOX_GNSS::processRTCM(uint8_t incoming)
{
  processRTCM_v(incoming);
    4f44:	6803      	ldr	r3, [r0, #0]
    4f46:	4a03      	ldr	r2, [pc, #12]	; (4f54 <SFE_UBLOX_GNSS::processRTCM(unsigned char)+0x10>)
    4f48:	691b      	ldr	r3, [r3, #16]
    4f4a:	4293      	cmp	r3, r2
    4f4c:	d100      	bne.n	4f50 <SFE_UBLOX_GNSS::processRTCM(unsigned char)+0xc>
}
    4f4e:	4770      	bx	lr
  processRTCM_v(incoming);
    4f50:	4718      	bx	r3
    4f52:	bf00      	nop
    4f54:	00002e55 	.word	0x00002e55

00004f58 <SFE_UBLOX_GNSS::processRTCMframe_v(unsigned char, unsigned short*)>:
{
    4f58:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
    4f5a:	8813      	ldrh	r3, [r2, #0]
{
    4f5c:	4614      	mov	r4, r2
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
    4f5e:	4d0d      	ldr	r5, [pc, #52]	; (4f94 <SFE_UBLOX_GNSS::processRTCMframe_v(unsigned char, unsigned short*)+0x3c>)
  if (*rtcmFrameCounter == 1)
    4f60:	2b01      	cmp	r3, #1
    4f62:	d011      	beq.n	4f88 <SFE_UBLOX_GNSS::processRTCMframe_v(unsigned char, unsigned short*)+0x30>
  else if (*rtcmFrameCounter == 2)
    4f64:	2b02      	cmp	r3, #2
    4f66:	d00a      	beq.n	4f7e <SFE_UBLOX_GNSS::processRTCMframe_v(unsigned char, unsigned short*)+0x26>
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
    4f68:	3301      	adds	r3, #1
    4f6a:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
    4f6c:	f7ff ffea 	bl	4f44 <SFE_UBLOX_GNSS::processRTCM(unsigned char)>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
    4f70:	8820      	ldrh	r0, [r4, #0]
    4f72:	882b      	ldrh	r3, [r5, #0]
}
    4f74:	4298      	cmp	r0, r3
    4f76:	bf14      	ite	ne
    4f78:	2003      	movne	r0, #3
    4f7a:	2000      	moveq	r0, #0
    4f7c:	bd38      	pop	{r3, r4, r5, pc}
    rtcmLen |= incoming; // Bits 0-7 of packet length
    4f7e:	882a      	ldrh	r2, [r5, #0]
    4f80:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
    4f82:	3206      	adds	r2, #6
    4f84:	802a      	strh	r2, [r5, #0]
    4f86:	e7ef      	b.n	4f68 <SFE_UBLOX_GNSS::processRTCMframe_v(unsigned char, unsigned short*)+0x10>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
    4f88:	020a      	lsls	r2, r1, #8
    4f8a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    4f8e:	802a      	strh	r2, [r5, #0]
    4f90:	e7ea      	b.n	4f68 <SFE_UBLOX_GNSS::processRTCMframe_v(unsigned char, unsigned short*)+0x10>
    4f92:	bf00      	nop
    4f94:	20004be4 	.word	0x20004be4

00004f98 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)>:
  return processRTCMframe_v(incoming, rtcmFrameCounter);
    4f98:	6803      	ldr	r3, [r0, #0]
{
    4f9a:	b570      	push	{r4, r5, r6, lr}
  return processRTCMframe_v(incoming, rtcmFrameCounter);
    4f9c:	68db      	ldr	r3, [r3, #12]
    4f9e:	4d13      	ldr	r5, [pc, #76]	; (4fec <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x54>)
    4fa0:	42ab      	cmp	r3, r5
    4fa2:	d11a      	bne.n	4fda <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x42>
  if (*rtcmFrameCounter == 1)
    4fa4:	8813      	ldrh	r3, [r2, #0]
    4fa6:	4686      	mov	lr, r0
    4fa8:	468c      	mov	ip, r1
    4faa:	4614      	mov	r4, r2
    4fac:	2b01      	cmp	r3, #1
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
    4fae:	4d10      	ldr	r5, [pc, #64]	; (4ff0 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x58>)
  if (*rtcmFrameCounter == 1)
    4fb0:	d00e      	beq.n	4fd0 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x38>
  else if (*rtcmFrameCounter == 2)
    4fb2:	2b02      	cmp	r3, #2
    4fb4:	d014      	beq.n	4fe0 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x48>
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
    4fb6:	3301      	adds	r3, #1
  processRTCM(incoming); // Here is where we expose this byte to the user
    4fb8:	4670      	mov	r0, lr
    4fba:	4661      	mov	r1, ip
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
    4fbc:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
    4fbe:	f7ff ffc1 	bl	4f44 <SFE_UBLOX_GNSS::processRTCM(unsigned char)>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
    4fc2:	8820      	ldrh	r0, [r4, #0]
    4fc4:	882b      	ldrh	r3, [r5, #0]
    4fc6:	4298      	cmp	r0, r3
    4fc8:	bf14      	ite	ne
    4fca:	2003      	movne	r0, #3
    4fcc:	2000      	moveq	r0, #0
}
    4fce:	bd70      	pop	{r4, r5, r6, pc}
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
    4fd0:	020a      	lsls	r2, r1, #8
    4fd2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    4fd6:	802a      	strh	r2, [r5, #0]
    4fd8:	e7ed      	b.n	4fb6 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x1e>
}
    4fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return processRTCMframe_v(incoming, rtcmFrameCounter);
    4fde:	4718      	bx	r3
    rtcmLen |= incoming; // Bits 0-7 of packet length
    4fe0:	882a      	ldrh	r2, [r5, #0]
    4fe2:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
    4fe4:	3206      	adds	r2, #6
    4fe6:	802a      	strh	r2, [r5, #0]
    4fe8:	e7e5      	b.n	4fb6 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)+0x1e>
    4fea:	bf00      	nop
    4fec:	00004f59 	.word	0x00004f59
    4ff0:	20004be4 	.word	0x20004be4

00004ff4 <SFE_UBLOX_GNSS::calcChecksum(ubxPacket*)>:
void SFE_UBLOX_GNSS::calcChecksum(ubxPacket *msg)
{
  msg->checksumA = 0;
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
    4ff4:	780a      	ldrb	r2, [r1, #0]
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
    4ff6:	7848      	ldrb	r0, [r1, #1]
    4ff8:	4410      	add	r0, r2
{
    4ffa:	b510      	push	{r4, lr}
  msg->checksumA += msg->id;
    4ffc:	b2c0      	uxtb	r0, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
    4ffe:	884c      	ldrh	r4, [r1, #2]
    5000:	1903      	adds	r3, r0, r4
  msg->checksumB += msg->checksumA;
    5002:	4402      	add	r2, r0
  msg->checksumA += (msg->len & 0xFF);
    5004:	b2db      	uxtb	r3, r3
  msg->checksumB += msg->checksumA;
    5006:	441a      	add	r2, r3

  msg->checksumA += (msg->len >> 8);
    5008:	eb03 2314 	add.w	r3, r3, r4, lsr #8
    500c:	b2db      	uxtb	r3, r3
  msg->checksumB += msg->checksumA;
    500e:	441a      	add	r2, r3
  msg->checksumA += (msg->len >> 8);
    5010:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
    5012:	b2d2      	uxtb	r2, r2
    5014:	734a      	strb	r2, [r1, #13]

  for (uint16_t i = 0; i < msg->len; i++)
    5016:	b17c      	cbz	r4, 5038 <SFE_UBLOX_GNSS::calcChecksum(ubxPacket*)+0x44>
  {
    msg->checksumA += msg->payload[i];
    5018:	6888      	ldr	r0, [r1, #8]
    501a:	f104 3eff 	add.w	lr, r4, #4294967295
    501e:	fa10 fe8e 	uxtah	lr, r0, lr
    5022:	3801      	subs	r0, #1
    5024:	f810 cf01 	ldrb.w	ip, [r0, #1]!
    5028:	4463      	add	r3, ip
  for (uint16_t i = 0; i < msg->len; i++)
    502a:	4586      	cmp	lr, r0
    msg->checksumA += msg->payload[i];
    502c:	b2db      	uxtb	r3, r3
    msg->checksumB += msg->checksumA;
    502e:	441a      	add	r2, r3
    msg->checksumA += msg->payload[i];
    5030:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
    5032:	b2d2      	uxtb	r2, r2
    5034:	734a      	strb	r2, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
    5036:	d1f5      	bne.n	5024 <SFE_UBLOX_GNSS::calcChecksum(ubxPacket*)+0x30>
  }
}
    5038:	bd10      	pop	{r4, pc}
    503a:	bf00      	nop

0000503c <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)>:
  return retVal;
}

// Returns false if sensor fails to respond to I2C traffic
sfe_ublox_status_e SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket *outgoingUBX, uint16_t maxWait)
{
    503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // checksumA
  // checksumB

  // i2cTransactionSize will be at least 8. We don't need to check for smaller values than that.

  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
    5040:	f8b1 9002 	ldrh.w	r9, [r1, #2]
{
    5044:	b083      	sub	sp, #12
    5046:	4682      	mov	sl, r0
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
    5048:	f109 0908 	add.w	r9, r9, #8
    504c:	fa1f f389 	uxth.w	r3, r9
    5050:	9301      	str	r3, [sp, #4]
  uint16_t bytesSent = 0;                      // How many bytes have been sent
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
  uint16_t startSpot = 0;                      // Payload pointer

  while (bytesLeftToSend > 0)
    5052:	2b00      	cmp	r3, #0
    5054:	d044      	beq.n	50e0 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0xa4>
  uint16_t startSpot = 0;                      // Payload pointer
    5056:	f04f 0800 	mov.w	r8, #0
    505a:	460d      	mov	r5, r1
  while (bytesLeftToSend > 0)
    505c:	9f01      	ldr	r7, [sp, #4]
  uint16_t bytesSent = 0;                      // How many bytes have been sent
    505e:	4644      	mov	r4, r8
  {
    uint16_t len = bytesLeftToSend; // How many bytes should we actually write?
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
    5060:	f89a 6005 	ldrb.w	r6, [sl, #5]
    5064:	42be      	cmp	r6, r7
    5066:	bf28      	it	cs
    5068:	463e      	movcs	r6, r7
      len = i2cTransactionSize;

    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
    506a:	1bbf      	subs	r7, r7, r6
    506c:	b2bf      	uxth	r7, r7

    // If bytesLeftToSend is zero, that's OK.
    // If bytesLeftToSend is >= 2, that's OK.
    // But if bytesLeftToSend is 1, we need to adjust len to make sure we write at least 2 bytes in the final write
    if (bytesLeftToSend == 1)
    506e:	2f01      	cmp	r7, #1
    5070:	d102      	bne.n	5078 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x3c>
    {
      len -= 1;             // Decrement len by 1
    5072:	3e01      	subs	r6, #1
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
    5074:	2702      	movs	r7, #2
      len -= 1;             // Decrement len by 1
    5076:	b2b6      	uxth	r6, r6
		txBuffer[0] = (address << 1);
    5078:	f89a 20f0 	ldrb.w	r2, [sl, #240]	; 0xf0
		transmitting = 1;
    507c:	2101      	movs	r1, #1
    }

    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
    507e:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
		txBuffer[0] = (address << 1);
    5082:	408a      	lsls	r2, r1
		transmitting = 1;
    5084:	f883 1130 	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    5088:	f883 112f 	strb.w	r1, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    508c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
    5090:	2c00      	cmp	r4, #0
    5092:	d03a      	beq.n	510a <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0xce>
    {
      uint16_t x = 0;
      // Write a portion of the payload to the bus.
      // Keep going until we've sent as many bytes as we can in this transmission (x == len)
      // or until we reach the end of the payload ((startSpot + x) == (outgoingUBX->len))
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
    5094:	b1fe      	cbz	r6, 50d6 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x9a>
    5096:	46c1      	mov	r9, r8
      uint16_t x = 0;
    5098:	f04f 0b00 	mov.w	fp, #0
    509c:	e011      	b.n	50c2 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x86>
      {
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    509e:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
    50a2:	f10b 0b01 	add.w	fp, fp, #1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    50a6:	68a9      	ldr	r1, [r5, #8]
        bytesSent++;
    50a8:	3401      	adds	r4, #1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    50aa:	6802      	ldr	r2, [r0, #0]
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
    50ac:	fa1f fb8b 	uxth.w	fp, fp
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    50b0:	f811 1009 	ldrb.w	r1, [r1, r9]
        bytesSent++;
    50b4:	b2a4      	uxth	r4, r4
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    50b6:	6812      	ldr	r2, [r2, #0]
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
    50b8:	f109 0901 	add.w	r9, r9, #1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    50bc:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
    50be:	455e      	cmp	r6, fp
    50c0:	d002      	beq.n	50c8 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x8c>
    50c2:	886a      	ldrh	r2, [r5, #2]
    50c4:	454a      	cmp	r2, r9
    50c6:	dcea      	bgt.n	509e <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x62>
      startSpot += x;

      // Can we write both checksum bytes?
      // We can send both bytes if we have exactly 2 bytes left to be sent (bytesSent == (bytesToSend - 2))
      // and if there is room for 2 bytes in this transmission
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
    50c8:	9b01      	ldr	r3, [sp, #4]
      startSpot += x;
    50ca:	44d8      	add	r8, fp
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
    50cc:	3b02      	subs	r3, #2
      startSpot += x;
    50ce:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
    50d2:	429c      	cmp	r4, r3
    50d4:	d070      	beq.n	51b8 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x17c>
        _i2cPort->write(outgoingUBX->checksumB);
        bytesSent += 2;
      }
    }

    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
    50d6:	9b01      	ldr	r3, [sp, #4]
    50d8:	429c      	cmp	r4, r3
    50da:	d30a      	bcc.n	50f2 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0xb6>
  while (bytesLeftToSend > 0)
    50dc:	2f00      	cmp	r7, #0
    50de:	d1bf      	bne.n	5060 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x24>
		return endTransmission(1);
    50e0:	2101      	movs	r1, #1
    50e2:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    50e6:	f7fc f929 	bl	133c <TwoWire::endTransmission(unsigned char)>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
    }
  }

  // All done transmitting bytes. Release bus.
  if (_i2cPort->endTransmission() != 0)
    50ea:	b950      	cbnz	r0, 5102 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0xc6>
    return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE); // Sensor did not ACK

  (void)maxWait; // Do something with maxWait just to avoid the pesky compiler warnings!

  return (SFE_UBLOX_STATUS_SUCCESS);
}
    50ec:	b003      	add	sp, #12
    50ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
    50f2:	f89a 117c 	ldrb.w	r1, [sl, #380]	; 0x17c
    50f6:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    50fa:	f7fc f91f 	bl	133c <TwoWire::endTransmission(unsigned char)>
    50fe:	2800      	cmp	r0, #0
    5100:	d0ec      	beq.n	50dc <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0xa0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
    5102:	200c      	movs	r0, #12
}
    5104:	b003      	add	sp, #12
    5106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
    510a:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    510e:	21b5      	movs	r1, #181	; 0xb5
    5110:	6803      	ldr	r3, [r0, #0]
    5112:	681b      	ldr	r3, [r3, #0]
    5114:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
    5116:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    511a:	2162      	movs	r1, #98	; 0x62
    511c:	6803      	ldr	r3, [r0, #0]
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
    5122:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    5126:	7829      	ldrb	r1, [r5, #0]
    5128:	6803      	ldr	r3, [r0, #0]
    512a:	681b      	ldr	r3, [r3, #0]
    512c:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
    512e:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    5132:	7869      	ldrb	r1, [r5, #1]
    5134:	6803      	ldr	r3, [r0, #0]
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
    513a:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    513e:	78a9      	ldrb	r1, [r5, #2]
    5140:	6803      	ldr	r3, [r0, #0]
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
    5146:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    514a:	8869      	ldrh	r1, [r5, #2]
    514c:	6803      	ldr	r3, [r0, #0]
    514e:	0a09      	lsrs	r1, r1, #8
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	4798      	blx	r3
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    5154:	886b      	ldrh	r3, [r5, #2]
    5156:	2b00      	cmp	r3, #0
    5158:	d040      	beq.n	51dc <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x1a0>
    515a:	2e06      	cmp	r6, #6
    515c:	d93e      	bls.n	51dc <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x1a0>
    515e:	46c3      	mov	fp, r8
      bytesSent += 6;
    5160:	2406      	movs	r4, #6
    5162:	e001      	b.n	5168 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x12c>
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    5164:	42a6      	cmp	r6, r4
    5166:	d911      	bls.n	518c <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x150>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    5168:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    516c:	68aa      	ldr	r2, [r5, #8]
    516e:	6803      	ldr	r3, [r0, #0]
    5170:	f812 100b 	ldrb.w	r1, [r2, fp]
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    5174:	f10b 0b01 	add.w	fp, fp, #1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	4798      	blx	r3
        bytesSent++;
    517c:	4623      	mov	r3, r4
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    517e:	886a      	ldrh	r2, [r5, #2]
        bytesSent++;
    5180:	3401      	adds	r4, #1
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    5182:	3b05      	subs	r3, #5
        bytesSent++;
    5184:	b2a4      	uxth	r4, r4
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    5186:	b29b      	uxth	r3, r3
    5188:	429a      	cmp	r2, r3
    518a:	d8eb      	bhi.n	5164 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x128>
      startSpot += x;
    518c:	4443      	add	r3, r8
      if (bytesSent == (len - 2))
    518e:	4622      	mov	r2, r4
      startSpot += x;
    5190:	fa1f f883 	uxth.w	r8, r3
      if (bytesSent == (len - 2))
    5194:	3e02      	subs	r6, #2
    5196:	4296      	cmp	r6, r2
    5198:	d19d      	bne.n	50d6 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x9a>
        _i2cPort->write(outgoingUBX->checksumA);
    519a:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
        bytesSent += 2;
    519e:	3402      	adds	r4, #2
        _i2cPort->write(outgoingUBX->checksumA);
    51a0:	7b29      	ldrb	r1, [r5, #12]
    51a2:	6803      	ldr	r3, [r0, #0]
        bytesSent += 2;
    51a4:	b2a4      	uxth	r4, r4
        _i2cPort->write(outgoingUBX->checksumA);
    51a6:	681b      	ldr	r3, [r3, #0]
    51a8:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
    51aa:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    51ae:	7b69      	ldrb	r1, [r5, #13]
    51b0:	6803      	ldr	r3, [r0, #0]
    51b2:	681b      	ldr	r3, [r3, #0]
    51b4:	4798      	blx	r3
        bytesSent += 2;
    51b6:	e78e      	b.n	50d6 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x9a>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
    51b8:	3e02      	subs	r6, #2
    51ba:	45b3      	cmp	fp, r6
    51bc:	d18b      	bne.n	50d6 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x9a>
        _i2cPort->write(outgoingUBX->checksumA);
    51be:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    51c2:	7b29      	ldrb	r1, [r5, #12]
    51c4:	6803      	ldr	r3, [r0, #0]
        bytesSent += 2;
    51c6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
        _i2cPort->write(outgoingUBX->checksumA);
    51ca:	681b      	ldr	r3, [r3, #0]
    51cc:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
    51ce:	f8da 00d0 	ldr.w	r0, [sl, #208]	; 0xd0
    51d2:	7b69      	ldrb	r1, [r5, #13]
    51d4:	6803      	ldr	r3, [r0, #0]
    51d6:	681b      	ldr	r3, [r3, #0]
    51d8:	4798      	blx	r3
        bytesSent += 2;
    51da:	e77c      	b.n	50d6 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x9a>
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
    51dc:	2206      	movs	r2, #6
      bytesSent += 6;
    51de:	4614      	mov	r4, r2
    51e0:	e7d8      	b.n	5194 <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)+0x158>
    51e2:	bf00      	nop

000051e4 <SFE_UBLOX_GNSS::sendSerialCommand(ubxPacket*)>:

// Given a packet and payload, send everything including CRC bytesA via Serial port
void SFE_UBLOX_GNSS::sendSerialCommand(ubxPacket *outgoingUBX)
{
    51e4:	b570      	push	{r4, r5, r6, lr}
    51e6:	4606      	mov	r6, r0
  // Write header bytes
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
    51e8:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
{
    51ec:	460d      	mov	r5, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
    51ee:	21b5      	movs	r1, #181	; 0xb5
    51f0:	6803      	ldr	r3, [r0, #0]
    51f2:	681b      	ldr	r3, [r3, #0]
    51f4:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
    51f6:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    51fa:	2162      	movs	r1, #98	; 0x62
    51fc:	6803      	ldr	r3, [r0, #0]
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
    5202:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    5206:	7829      	ldrb	r1, [r5, #0]
    5208:	6803      	ldr	r3, [r0, #0]
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
    520e:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    5212:	7869      	ldrb	r1, [r5, #1]
    5214:	6803      	ldr	r3, [r0, #0]
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
    521a:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    521e:	78a9      	ldrb	r1, [r5, #2]
    5220:	6803      	ldr	r3, [r0, #0]
    5222:	681b      	ldr	r3, [r3, #0]
    5224:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
    5226:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    522a:	8869      	ldrh	r1, [r5, #2]
    522c:	6803      	ldr	r3, [r0, #0]
    522e:	0a09      	lsrs	r1, r1, #8
    5230:	681b      	ldr	r3, [r3, #0]
    5232:	4798      	blx	r3

  // Write payload.
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
    5234:	886b      	ldrh	r3, [r5, #2]
    5236:	b16b      	cbz	r3, 5254 <SFE_UBLOX_GNSS::sendSerialCommand(ubxPacket*)+0x70>
    5238:	2400      	movs	r4, #0
  {
    _serialPort->write(outgoingUBX->payload[i]);
    523a:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    523e:	b2a2      	uxth	r2, r4
    5240:	68a9      	ldr	r1, [r5, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
    5242:	3401      	adds	r4, #1
    _serialPort->write(outgoingUBX->payload[i]);
    5244:	6803      	ldr	r3, [r0, #0]
    5246:	5c89      	ldrb	r1, [r1, r2]
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
    524c:	886a      	ldrh	r2, [r5, #2]
    524e:	b2a3      	uxth	r3, r4
    5250:	429a      	cmp	r2, r3
    5252:	d8f2      	bhi.n	523a <SFE_UBLOX_GNSS::sendSerialCommand(ubxPacket*)+0x56>
  }

  // Write checksum
  _serialPort->write(outgoingUBX->checksumA);
    5254:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    5258:	7b29      	ldrb	r1, [r5, #12]
    525a:	6803      	ldr	r3, [r0, #0]
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
    5260:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    5264:	7b69      	ldrb	r1, [r5, #13]
    5266:	6803      	ldr	r3, [r0, #0]
}
    5268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	4718      	bx	r3

00005270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>:
    5270:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
    5274:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    5276:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    5278:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    527a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    527e:	d0fb      	beq.n	5278 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)+0x8>
// Transfer a byte to SPI. Also capture any bytes received from the UBLOX device during sending and capture them in a small buffer so that
// they can be processed later with process
void SFE_UBLOX_GNSS::spiTransfer(uint8_t byteToTransfer)
{
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
    5280:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    5284:	f890 c111 	ldrb.w	ip, [r0, #273]	; 0x111
    5288:	6f53      	ldr	r3, [r2, #116]	; 0x74
    528a:	458c      	cmp	ip, r1
    528c:	d90a      	bls.n	52a4 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)+0x34>
    528e:	b2db      	uxtb	r3, r3
    5290:	2bff      	cmp	r3, #255	; 0xff
    5292:	d008      	beq.n	52a6 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)+0x36>
  {
    spiBuffer[spiBufferIndex] = returnedByte;
    5294:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    5298:	5453      	strb	r3, [r2, r1]
    spiBufferIndex++;
    529a:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    529e:	3301      	adds	r3, #1
    52a0:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
  }
}
    52a4:	4770      	bx	lr
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
    52a6:	7902      	ldrb	r2, [r0, #4]
    52a8:	2a00      	cmp	r2, #0
    52aa:	d0fb      	beq.n	52a4 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)+0x34>
    52ac:	e7f2      	b.n	5294 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)+0x24>
    52ae:	bf00      	nop

000052b0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]>:

// Send a command via SPI
void SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket *outgoingUBX)
    52b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    52b4:	2307      	movs	r3, #7
    52b6:	b082      	sub	sp, #8
#endif
    return;
  }

  // Start at the beginning of the SPI buffer
  spiBufferIndex = 0;
    52b8:	2500      	movs	r5, #0
void SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket *outgoingUBX)
    52ba:	4604      	mov	r4, r0
    52bc:	9301      	str	r3, [sp, #4]
    52be:	460e      	mov	r6, r1

  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
    52c0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
  spiBufferIndex = 0;
    52c4:	f880 5110 	strb.w	r5, [r0, #272]	; 0x110
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    52c8:	9300      	str	r3, [sp, #0]
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
    52ca:	ab02      	add	r3, sp, #8
    52cc:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
    52d0:	e913 0006 	ldmdb	r3, {r1, r2}
    52d4:	f7fb febc 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
  digitalWrite(_csPin, LOW);
    52d8:	4629      	mov	r1, r5
    52da:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    52de:	f005 fc05 	bl	aaec <digitalWrite>
  // Write header bytes
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
    52e2:	4620      	mov	r0, r4
    52e4:	21b5      	movs	r1, #181	; 0xb5
    52e6:	f7ff ffc3 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
  spiTransfer(UBX_SYNCH_2); // b
    52ea:	2162      	movs	r1, #98	; 0x62
    52ec:	f7ff ffc0 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>

  spiTransfer(outgoingUBX->cls);
    52f0:	7831      	ldrb	r1, [r6, #0]
    52f2:	f7ff ffbd 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
  spiTransfer(outgoingUBX->id);
    52f6:	7871      	ldrb	r1, [r6, #1]
    52f8:	f7ff ffba 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
    52fc:	78b1      	ldrb	r1, [r6, #2]
    52fe:	f7ff ffb7 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
  spiTransfer(outgoingUBX->len >> 8);
    5302:	8871      	ldrh	r1, [r6, #2]
    5304:	0a09      	lsrs	r1, r1, #8
    5306:	f7ff ffb3 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>

#ifndef SFE_UBLOX_REDUCED_PROG_MEM
  if (_printDebug)
    530a:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    530e:	2b00      	cmp	r3, #0
    5310:	f040 8088 	bne.w	5424 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x174>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
  }
#endif

  // Write payload.
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
    5314:	8873      	ldrh	r3, [r6, #2]
    5316:	b32b      	cbz	r3, 5364 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0xb4>
    5318:	2500      	movs	r5, #0
							  return write((const uint8_t *)str, strlen(str)); }
    531a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>
    531e:	e003      	b.n	5328 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x78>
    5320:	8872      	ldrh	r2, [r6, #2]
    5322:	b2ab      	uxth	r3, r5
    5324:	429a      	cmp	r2, r3
    5326:	d91d      	bls.n	5364 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0xb4>
  {
    spiTransfer(outgoingUBX->payload[i]);
    5328:	68b3      	ldr	r3, [r6, #8]
    532a:	b2af      	uxth	r7, r5
    532c:	4620      	mov	r0, r4
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
    532e:	3501      	adds	r5, #1
    spiTransfer(outgoingUBX->payload[i]);
    5330:	5dd9      	ldrb	r1, [r3, r7]
    5332:	f7ff ff9d 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
#ifndef SFE_UBLOX_REDUCED_PROG_MEM
    if (_printDebug)
    5336:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    533a:	2b00      	cmp	r3, #0
    533c:	d0f0      	beq.n	5320 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x70>
    {
      _debugSerial->print(F(" "));
    533e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    5342:	2201      	movs	r2, #1
    5344:	4641      	mov	r1, r8
    5346:	6803      	ldr	r3, [r0, #0]
    5348:	685b      	ldr	r3, [r3, #4]
    534a:	4798      	blx	r3
      _debugSerial->print(outgoingUBX->payload[i], HEX);
    534c:	68b1      	ldr	r1, [r6, #8]
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    534e:	2300      	movs	r3, #0
    5350:	2210      	movs	r2, #16
    5352:	5dc9      	ldrb	r1, [r1, r7]
    5354:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    5358:	f005 f8c2 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
    535c:	8872      	ldrh	r2, [r6, #2]
    535e:	b2ab      	uxth	r3, r5
    5360:	429a      	cmp	r2, r3
    5362:	d8e1      	bhi.n	5328 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x78>
    }
#endif
  }

  // Write checksum
  spiTransfer(outgoingUBX->checksumA);
    5364:	4620      	mov	r0, r4
    5366:	7b31      	ldrb	r1, [r6, #12]
    5368:	f7ff ff82 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
  spiTransfer(outgoingUBX->checksumB);
    536c:	7b71      	ldrb	r1, [r6, #13]
    536e:	f7ff ff7f 	bl	5270 <SFE_UBLOX_GNSS::spiTransfer(unsigned char)>
  digitalWrite(_csPin, HIGH);
    5372:	2101      	movs	r1, #1
    5374:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    5378:	f005 fbb8 	bl	aaec <digitalWrite>
  _spiPort->endTransaction();
    537c:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
		if (interruptMasksUsed) {
    5380:	7cd3      	ldrb	r3, [r2, #19]
    5382:	b1eb      	cbz	r3, 53c0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x110>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    5384:	07df      	lsls	r7, r3, #31
    5386:	d504      	bpl.n	5392 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0xe2>
    5388:	6a90      	ldr	r0, [r2, #40]	; 0x28
    538a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    538e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    5392:	079d      	lsls	r5, r3, #30
    5394:	d504      	bpl.n	53a0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0xf0>
    5396:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    5398:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    539c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    53a0:	0758      	lsls	r0, r3, #29
    53a2:	d504      	bpl.n	53ae <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0xfe>
    53a4:	6b10      	ldr	r0, [r2, #48]	; 0x30
    53a6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    53aa:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    53ae:	0719      	lsls	r1, r3, #28
    53b0:	d504      	bpl.n	53bc <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x10c>
    53b2:	6b50      	ldr	r0, [r2, #52]	; 0x34
    53b4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    53b8:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    53bc:	06db      	lsls	r3, r3, #27
    53be:	d405      	bmi.n	53cc <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x11c>

#ifndef SFE_UBLOX_REDUCED_PROG_MEM
  if (_printDebug)
    53c0:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    53c4:	b95b      	cbnz	r3, 53de <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x12e>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
    _debugSerial->print(F(" "));
    _debugSerial->println(outgoingUBX->checksumB, HEX);
  }
#endif
}
    53c6:	b002      	add	sp, #8
    53c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    53d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
    53d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  if (_printDebug)
    53d6:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    53da:	2b00      	cmp	r3, #0
    53dc:	d0f3      	beq.n	53c6 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x116>
    _debugSerial->print(F(" "));
    53de:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    53e2:	2201      	movs	r2, #1
    53e4:	493a      	ldr	r1, [pc, #232]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    53e6:	6803      	ldr	r3, [r0, #0]
    53e8:	685b      	ldr	r3, [r3, #4]
    53ea:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    53ec:	7b31      	ldrb	r1, [r6, #12]
    53ee:	2300      	movs	r3, #0
    53f0:	2210      	movs	r2, #16
    53f2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    53f6:	f005 f873 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" "));
    53fa:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    53fe:	2201      	movs	r2, #1
    5400:	4933      	ldr	r1, [pc, #204]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    5402:	6803      	ldr	r3, [r0, #0]
    5404:	685b      	ldr	r3, [r3, #4]
    5406:	4798      	blx	r3
    _debugSerial->println(outgoingUBX->checksumB, HEX);
    5408:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    540c:	2300      	movs	r3, #0
    540e:	2210      	movs	r2, #16
    5410:	7b71      	ldrb	r1, [r6, #13]
    5412:	4620      	mov	r0, r4
    5414:	f005 f864 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    5418:	4620      	mov	r0, r4
}
    541a:	b002      	add	sp, #8
    541c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5420:	f005 b842 	b.w	a4a8 <Print::println()>
    _debugSerial->print(F("sendSpiCommand: "));
    5424:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    5428:	2210      	movs	r2, #16
    542a:	492a      	ldr	r1, [pc, #168]	; (54d4 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x224>)
    542c:	6803      	ldr	r3, [r0, #0]
    542e:	685b      	ldr	r3, [r3, #4]
    5430:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    5432:	462b      	mov	r3, r5
    5434:	2210      	movs	r2, #16
    5436:	21b5      	movs	r1, #181	; 0xb5
    5438:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    543c:	f005 f850 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" "));
    5440:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    5444:	2201      	movs	r2, #1
    5446:	4922      	ldr	r1, [pc, #136]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    5448:	6803      	ldr	r3, [r0, #0]
    544a:	685b      	ldr	r3, [r3, #4]
    544c:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    544e:	462b      	mov	r3, r5
    5450:	2210      	movs	r2, #16
    5452:	2162      	movs	r1, #98	; 0x62
    5454:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    5458:	f005 f842 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" "));
    545c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    5460:	2201      	movs	r2, #1
    5462:	491b      	ldr	r1, [pc, #108]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    5464:	6803      	ldr	r3, [r0, #0]
    5466:	685b      	ldr	r3, [r3, #4]
    5468:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    546a:	462b      	mov	r3, r5
    546c:	7831      	ldrb	r1, [r6, #0]
    546e:	2210      	movs	r2, #16
    5470:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    5474:	f005 f834 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" "));
    5478:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    547c:	2201      	movs	r2, #1
    547e:	4914      	ldr	r1, [pc, #80]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    5480:	6803      	ldr	r3, [r0, #0]
    5482:	685b      	ldr	r3, [r3, #4]
    5484:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    5486:	462b      	mov	r3, r5
    5488:	7871      	ldrb	r1, [r6, #1]
    548a:	2210      	movs	r2, #16
    548c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    5490:	f005 f826 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" "));
    5494:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    5498:	2201      	movs	r2, #1
    549a:	490d      	ldr	r1, [pc, #52]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    549c:	6803      	ldr	r3, [r0, #0]
    549e:	685b      	ldr	r3, [r3, #4]
    54a0:	4798      	blx	r3
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    54a2:	462b      	mov	r3, r5
    54a4:	78b1      	ldrb	r1, [r6, #2]
    54a6:	2210      	movs	r2, #16
    54a8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    54ac:	f005 f818 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" "));
    54b0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    54b4:	2201      	movs	r2, #1
    54b6:	4906      	ldr	r1, [pc, #24]	; (54d0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x220>)
    54b8:	6803      	ldr	r3, [r0, #0]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	4798      	blx	r3
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
    54be:	8871      	ldrh	r1, [r6, #2]
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    54c0:	462b      	mov	r3, r5
    54c2:	2210      	movs	r2, #16
    54c4:	0a09      	lsrs	r1, r1, #8
    54c6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    54ca:	f005 f809 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    54ce:	e721      	b.n	5314 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]+0x64>
    54d0:	20001f90 	.word	0x20001f90
    54d4:	20002210 	.word	0x20002210

000054d8 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)>:

// Pretty prints the current ubxPacket
void SFE_UBLOX_GNSS::printPacket(ubxPacket *packet, bool alwaysPrintPayload)
{
    54d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // (These two lines get rid of a pesky compiler warning)
  bool printPayload = (ignoreThisPayload == false);
  printPayload |= (alwaysPrintPayload == true);

#ifndef SFE_UBLOX_REDUCED_PROG_MEM
  if (_printDebug == true)
    54da:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    54de:	b903      	cbnz	r3, 54e2 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0xa>
  {
    _debugSerial->print(F("Len: 0x"));
    _debugSerial->print(packet->len, HEX);
  }
#endif
}
    54e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54e2:	4604      	mov	r4, r0
    _debugSerial->print(F("CLS:"));
    54e4:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
    54e8:	460d      	mov	r5, r1
    54ea:	4616      	mov	r6, r2
							  return write((const uint8_t *)str, strlen(str)); }
    54ec:	6803      	ldr	r3, [r0, #0]
    54ee:	2204      	movs	r2, #4
    54f0:	4959      	ldr	r1, [pc, #356]	; (5658 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x180>)
    54f2:	685b      	ldr	r3, [r3, #4]
  bool printPayload = (ignoreThisPayload == false);
    54f4:	f894 7154 	ldrb.w	r7, [r4, #340]	; 0x154
    54f8:	4798      	blx	r3
    if (packet->cls == UBX_CLASS_NAV) // 1
    54fa:	782b      	ldrb	r3, [r5, #0]
      _debugSerial->print(F("NAV"));
    54fc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    if (packet->cls == UBX_CLASS_NAV) // 1
    5500:	2b01      	cmp	r3, #1
    5502:	f000 8088 	beq.w	5616 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x13e>
    else if (packet->cls == UBX_CLASS_ACK) // 5
    5506:	2b05      	cmp	r3, #5
    5508:	f000 8091 	beq.w	562e <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x156>
    else if (packet->cls == UBX_CLASS_CFG) // 6
    550c:	2b06      	cmp	r3, #6
    550e:	f000 809c 	beq.w	564a <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x172>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
    5512:	2b0a      	cmp	r3, #10
    5514:	f000 8085 	beq.w	5622 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x14a>
    5518:	6803      	ldr	r3, [r0, #0]
    551a:	2202      	movs	r2, #2
    551c:	494f      	ldr	r1, [pc, #316]	; (565c <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x184>)
    551e:	685b      	ldr	r3, [r3, #4]
    5520:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    5522:	2300      	movs	r3, #0
    5524:	2210      	movs	r2, #16
    5526:	7829      	ldrb	r1, [r5, #0]
    5528:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    552c:	f004 ffd8 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" ID:"));
    5530:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    5534:	2204      	movs	r2, #4
    5536:	494a      	ldr	r1, [pc, #296]	; (5660 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x188>)
    5538:	6803      	ldr	r3, [r0, #0]
    553a:	685b      	ldr	r3, [r3, #4]
    553c:	4798      	blx	r3
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
    553e:	882b      	ldrh	r3, [r5, #0]
    5540:	f240 7201 	movw	r2, #1793	; 0x701
    5544:	4293      	cmp	r3, r2
    5546:	d05e      	beq.n	5606 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x12e>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
    5548:	f640 0206 	movw	r2, #2054	; 0x806
    554c:	4293      	cmp	r3, r2
    554e:	d074      	beq.n	563a <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x162>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
    5550:	f640 1206 	movw	r2, #2310	; 0x906
      _debugSerial->print(F("SAVE"));
    5554:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
    5558:	4293      	cmp	r3, r2
    555a:	d04e      	beq.n	55fa <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x122>
    555c:	6803      	ldr	r3, [r0, #0]
    555e:	2202      	movs	r2, #2
    5560:	493e      	ldr	r1, [pc, #248]	; (565c <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x184>)
    5562:	685b      	ldr	r3, [r3, #4]
    5564:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    5566:	2300      	movs	r3, #0
    5568:	2210      	movs	r2, #16
    556a:	7869      	ldrb	r1, [r5, #1]
    556c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    5570:	f004 ffb6 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->print(F(" Len: 0x"));
    5574:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    5578:	2208      	movs	r2, #8
    557a:	493a      	ldr	r1, [pc, #232]	; (5664 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x18c>)
    557c:	6803      	ldr	r3, [r0, #0]
    557e:	685b      	ldr	r3, [r3, #4]
    5580:	4798      	blx	r3
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    5582:	2300      	movs	r3, #0
    5584:	2210      	movs	r2, #16
    5586:	8869      	ldrh	r1, [r5, #2]
    5588:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    558c:	f004 ffa8 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    if (printPayload)
    5590:	2f01      	cmp	r7, #1
      _debugSerial->print(F(" Payload: IGNORED"));
    5592:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    if (printPayload)
    5596:	d10b      	bne.n	55b0 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0xd8>
    5598:	b956      	cbnz	r6, 55b0 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0xd8>
							  return write((const uint8_t *)str, strlen(str)); }
    559a:	6803      	ldr	r3, [r0, #0]
    559c:	2211      	movs	r2, #17
    559e:	4932      	ldr	r1, [pc, #200]	; (5668 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x190>)
    55a0:	685b      	ldr	r3, [r3, #4]
    55a2:	4798      	blx	r3
    _debugSerial->println();
    55a4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
}
    55a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
    55ac:	f004 bf7c 	b.w	a4a8 <Print::println()>
    55b0:	6803      	ldr	r3, [r0, #0]
    55b2:	2209      	movs	r2, #9
    55b4:	492d      	ldr	r1, [pc, #180]	; (566c <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x194>)
    55b6:	685b      	ldr	r3, [r3, #4]
    55b8:	4798      	blx	r3
      for (uint16_t x = 0; x < packet->len; x++)
    55ba:	886b      	ldrh	r3, [r5, #2]
    55bc:	2b00      	cmp	r3, #0
    55be:	d0f1      	beq.n	55a4 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0xcc>
    55c0:	2600      	movs	r6, #0
    55c2:	4f2b      	ldr	r7, [pc, #172]	; (5670 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x198>)
        _debugSerial->print(F(" "));
    55c4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    55c8:	2201      	movs	r2, #1
    55ca:	4639      	mov	r1, r7
    55cc:	6803      	ldr	r3, [r0, #0]
    55ce:	685b      	ldr	r3, [r3, #4]
    55d0:	4798      	blx	r3
        _debugSerial->print(packet->payload[x], HEX);
    55d2:	68a8      	ldr	r0, [r5, #8]
    55d4:	b2b1      	uxth	r1, r6
      for (uint16_t x = 0; x < packet->len; x++)
    55d6:	3601      	adds	r6, #1
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    55d8:	2300      	movs	r3, #0
    55da:	2210      	movs	r2, #16
    55dc:	5c41      	ldrb	r1, [r0, r1]
    55de:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    55e2:	f004 ff7d 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    55e6:	886a      	ldrh	r2, [r5, #2]
    55e8:	b2b3      	uxth	r3, r6
    55ea:	429a      	cmp	r2, r3
    55ec:	d8ea      	bhi.n	55c4 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0xec>
    _debugSerial->println();
    55ee:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
}
    55f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
    55f6:	f004 bf57 	b.w	a4a8 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    55fa:	6803      	ldr	r3, [r0, #0]
    55fc:	2204      	movs	r2, #4
    55fe:	491d      	ldr	r1, [pc, #116]	; (5674 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x19c>)
    5600:	685b      	ldr	r3, [r3, #4]
    5602:	4798      	blx	r3
    5604:	e7b6      	b.n	5574 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x9c>
      _debugSerial->print(F("PVT"));
    5606:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    560a:	2203      	movs	r2, #3
    560c:	491a      	ldr	r1, [pc, #104]	; (5678 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x1a0>)
    560e:	6803      	ldr	r3, [r0, #0]
    5610:	685b      	ldr	r3, [r3, #4]
    5612:	4798      	blx	r3
    5614:	e7ae      	b.n	5574 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x9c>
    5616:	6803      	ldr	r3, [r0, #0]
    5618:	2203      	movs	r2, #3
    561a:	4918      	ldr	r1, [pc, #96]	; (567c <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x1a4>)
    561c:	685b      	ldr	r3, [r3, #4]
    561e:	4798      	blx	r3
    5620:	e786      	b.n	5530 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x58>
    5622:	6803      	ldr	r3, [r0, #0]
    5624:	2203      	movs	r2, #3
    5626:	4916      	ldr	r1, [pc, #88]	; (5680 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x1a8>)
    5628:	685b      	ldr	r3, [r3, #4]
    562a:	4798      	blx	r3
    562c:	e780      	b.n	5530 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x58>
    562e:	6803      	ldr	r3, [r0, #0]
    5630:	2203      	movs	r2, #3
    5632:	4914      	ldr	r1, [pc, #80]	; (5684 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x1ac>)
    5634:	685b      	ldr	r3, [r3, #4]
    5636:	4798      	blx	r3
    5638:	e77a      	b.n	5530 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x58>
      _debugSerial->print(F("RATE"));
    563a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    563e:	2204      	movs	r2, #4
    5640:	4911      	ldr	r1, [pc, #68]	; (5688 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x1b0>)
    5642:	6803      	ldr	r3, [r0, #0]
    5644:	685b      	ldr	r3, [r3, #4]
    5646:	4798      	blx	r3
    5648:	e794      	b.n	5574 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x9c>
    564a:	6803      	ldr	r3, [r0, #0]
    564c:	2203      	movs	r2, #3
    564e:	490f      	ldr	r1, [pc, #60]	; (568c <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x1b4>)
    5650:	685b      	ldr	r3, [r3, #4]
    5652:	4798      	blx	r3
    5654:	e76c      	b.n	5530 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)+0x58>
    5656:	bf00      	nop
    5658:	20001fac 	.word	0x20001fac
    565c:	20001df8 	.word	0x20001df8
    5660:	20001fc4 	.word	0x20001fc4
    5664:	20001fe0 	.word	0x20001fe0
    5668:	20001ff8 	.word	0x20001ff8
    566c:	20001fec 	.word	0x20001fec
    5670:	20001f90 	.word	0x20001f90
    5674:	20001fd8 	.word	0x20001fd8
    5678:	20001fcc 	.word	0x20001fcc
    567c:	20001fb4 	.word	0x20001fb4
    5680:	20001fc0 	.word	0x20001fc0
    5684:	20001fb8 	.word	0x20001fb8
    5688:	20001fd0 	.word	0x20001fd0
    568c:	20001fbc 	.word	0x20001fbc

00005690 <SFE_UBLOX_GNSS::checkCallbacks()>:
}

// Check if any callbacks are waiting to be processed
void SFE_UBLOX_GNSS::checkCallbacks(void)
{
  if (checkCallbacksReentrant == true) // Check for reentry (i.e. checkCallbacks has been called from inside a callback)
    5690:	f890 316c 	ldrb.w	r3, [r0, #364]	; 0x16c
    5694:	2b00      	cmp	r3, #0
    5696:	f040 8554 	bne.w	6142 <SFE_UBLOX_GNSS::checkCallbacks()+0xab2>
    return;

  checkCallbacksReentrant = true;
    569a:	2201      	movs	r2, #1

  if ((packetUBXNAVPOSECEF != NULL)                                                  // If RAM has been allocated for message storage
    569c:	6903      	ldr	r3, [r0, #16]
{
    569e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a2:	4604      	mov	r4, r0
    56a4:	f6ad 3dfc 	subw	sp, sp, #3068	; 0xbfc
  checkCallbacksReentrant = true;
    56a8:	f880 216c 	strb.w	r2, [r0, #364]	; 0x16c
  if ((packetUBXNAVPOSECEF != NULL)                                                  // If RAM has been allocated for message storage
    56ac:	b1a3      	cbz	r3, 56d8 <SFE_UBLOX_GNSS::checkCallbacks()+0x48>
      && (packetUBXNAVPOSECEF->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    56ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    56b0:	b192      	cbz	r2, 56d8 <SFE_UBLOX_GNSS::checkCallbacks()+0x48>
      && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    56b2:	7819      	ldrb	r1, [r3, #0]
    56b4:	070d      	lsls	r5, r1, #28
    56b6:	d50f      	bpl.n	56d8 <SFE_UBLOX_GNSS::checkCallbacks()+0x48>
  {
    if (packetUBXNAVPOSECEF->callbackPointer != NULL) // If the pointer to the callback has been defined
    56b8:	69dd      	ldr	r5, [r3, #28]
    56ba:	b125      	cbz	r5, 56c6 <SFE_UBLOX_GNSS::checkCallbacks()+0x36>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV POSECEF"));
      packetUBXNAVPOSECEF->callbackPointer(*packetUBXNAVPOSECEF->callbackData); // Call the callback
    56bc:	6913      	ldr	r3, [r2, #16]
    56be:	9300      	str	r3, [sp, #0]
    56c0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    56c2:	47a8      	blx	r5
    }
    if (packetUBXNAVPOSECEF->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    56c4:	6923      	ldr	r3, [r4, #16]
    56c6:	6a1a      	ldr	r2, [r3, #32]
    56c8:	b112      	cbz	r2, 56d0 <SFE_UBLOX_GNSS::checkCallbacks()+0x40>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV POSECEF"));
      packetUBXNAVPOSECEF->callbackPointerPtr(packetUBXNAVPOSECEF->callbackData); // Call the callback
    56ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
    56cc:	4790      	blx	r2
    }
    packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    56ce:	6923      	ldr	r3, [r4, #16]
    56d0:	781a      	ldrb	r2, [r3, #0]
    56d2:	f36f 02c3 	bfc	r2, #3, #1
    56d6:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVSTATUS != NULL)                                                  // If RAM has been allocated for message storage
    56d8:	6963      	ldr	r3, [r4, #20]
    56da:	b193      	cbz	r3, 5702 <SFE_UBLOX_GNSS::checkCallbacks()+0x72>
      && (packetUBXNAVSTATUS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    56dc:	6a1a      	ldr	r2, [r3, #32]
    56de:	b182      	cbz	r2, 5702 <SFE_UBLOX_GNSS::checkCallbacks()+0x72>
      && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    56e0:	7819      	ldrb	r1, [r3, #0]
    56e2:	0708      	lsls	r0, r1, #28
    56e4:	d50d      	bpl.n	5702 <SFE_UBLOX_GNSS::checkCallbacks()+0x72>
  {
    if (packetUBXNAVSTATUS->callbackPointer != NULL) // If the pointer to the callback has been defined
    56e6:	699d      	ldr	r5, [r3, #24]
    56e8:	b115      	cbz	r5, 56f0 <SFE_UBLOX_GNSS::checkCallbacks()+0x60>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV STATUS"));
      packetUBXNAVSTATUS->callbackPointer(*packetUBXNAVSTATUS->callbackData); // Call the callback
    56ea:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    56ec:	47a8      	blx	r5
    }
    if (packetUBXNAVSTATUS->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    56ee:	6963      	ldr	r3, [r4, #20]
    56f0:	69da      	ldr	r2, [r3, #28]
    56f2:	b112      	cbz	r2, 56fa <SFE_UBLOX_GNSS::checkCallbacks()+0x6a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV STATUS"));
      packetUBXNAVSTATUS->callbackPointerPtr(packetUBXNAVSTATUS->callbackData); // Call the callback
    56f4:	6a18      	ldr	r0, [r3, #32]
    56f6:	4790      	blx	r2
    }
    packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    56f8:	6963      	ldr	r3, [r4, #20]
    56fa:	781a      	ldrb	r2, [r3, #0]
    56fc:	f36f 02c3 	bfc	r2, #3, #1
    5700:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVDOP != NULL)                                                  // If RAM has been allocated for message storage
    5702:	69a3      	ldr	r3, [r4, #24]
    5704:	b1a3      	cbz	r3, 5730 <SFE_UBLOX_GNSS::checkCallbacks()+0xa0>
      && (packetUBXNAVDOP->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5708:	b192      	cbz	r2, 5730 <SFE_UBLOX_GNSS::checkCallbacks()+0xa0>
      && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    570a:	7819      	ldrb	r1, [r3, #0]
    570c:	0709      	lsls	r1, r1, #28
    570e:	d50f      	bpl.n	5730 <SFE_UBLOX_GNSS::checkCallbacks()+0xa0>
  {
    if (packetUBXNAVDOP->callbackPointer != NULL) // If the pointer to the callback has been defined
    5710:	69dd      	ldr	r5, [r3, #28]
    5712:	b125      	cbz	r5, 571e <SFE_UBLOX_GNSS::checkCallbacks()+0x8e>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV DOP"));
      packetUBXNAVDOP->callbackPointer(*packetUBXNAVDOP->callbackData); // Call the callback
    5714:	6913      	ldr	r3, [r2, #16]
    5716:	9300      	str	r3, [sp, #0]
    5718:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    571a:	47a8      	blx	r5
    }
    if (packetUBXNAVDOP->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    571c:	69a3      	ldr	r3, [r4, #24]
    571e:	6a1a      	ldr	r2, [r3, #32]
    5720:	b112      	cbz	r2, 5728 <SFE_UBLOX_GNSS::checkCallbacks()+0x98>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV DOP"));
      packetUBXNAVDOP->callbackPointerPtr(packetUBXNAVDOP->callbackData); // Call the callback
    5722:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5724:	4790      	blx	r2
    }
    packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5726:	69a3      	ldr	r3, [r4, #24]
    5728:	781a      	ldrb	r2, [r3, #0]
    572a:	f36f 02c3 	bfc	r2, #3, #1
    572e:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVATT != NULL)                                                  // If RAM has been allocated for message storage
    5730:	6a23      	ldr	r3, [r4, #32]
    5732:	b1c3      	cbz	r3, 5766 <SFE_UBLOX_GNSS::checkCallbacks()+0xd6>
      && (packetUBXNAVATT->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5734:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    5736:	b1b5      	cbz	r5, 5766 <SFE_UBLOX_GNSS::checkCallbacks()+0xd6>
      && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5738:	781a      	ldrb	r2, [r3, #0]
    573a:	0717      	lsls	r7, r2, #28
    573c:	d513      	bpl.n	5766 <SFE_UBLOX_GNSS::checkCallbacks()+0xd6>
  {
    if (packetUBXNAVATT->callbackPointer != NULL) // If the pointer to the callback has been defined
    573e:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    5740:	b146      	cbz	r6, 5754 <SFE_UBLOX_GNSS::checkCallbacks()+0xc4>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV ATT"));
      packetUBXNAVATT->callbackPointer(*packetUBXNAVATT->callbackData); // Call the callback
    5742:	f105 0310 	add.w	r3, r5, #16
    5746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5748:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    574c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5750:	47b0      	blx	r6
    }
    if (packetUBXNAVATT->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5752:	6a23      	ldr	r3, [r4, #32]
    5754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5756:	b112      	cbz	r2, 575e <SFE_UBLOX_GNSS::checkCallbacks()+0xce>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV ATT"));
      packetUBXNAVATT->callbackPointerPtr(packetUBXNAVATT->callbackData); // Call the callback
    5758:	6b18      	ldr	r0, [r3, #48]	; 0x30
    575a:	4790      	blx	r2
    }
    packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    575c:	6a23      	ldr	r3, [r4, #32]
    575e:	781a      	ldrb	r2, [r3, #0]
    5760:	f36f 02c3 	bfc	r2, #3, #1
    5764:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVPVT != NULL)                                                  // If RAM has been allocated for message storage
    5766:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5768:	b1cb      	cbz	r3, 579e <SFE_UBLOX_GNSS::checkCallbacks()+0x10e>
      && (packetUBXNAVPVT->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    576a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
    576c:	b1bd      	cbz	r5, 579e <SFE_UBLOX_GNSS::checkCallbacks()+0x10e>
      && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    576e:	781a      	ldrb	r2, [r3, #0]
    5770:	0716      	lsls	r6, r2, #28
    5772:	d514      	bpl.n	579e <SFE_UBLOX_GNSS::checkCallbacks()+0x10e>
  {
    if (packetUBXNAVPVT->callbackPointer != NULL) // If the pointer to the callback has been defined
    5774:	6e9e      	ldr	r6, [r3, #104]	; 0x68
    5776:	b14e      	cbz	r6, 578c <SFE_UBLOX_GNSS::checkCallbacks()+0xfc>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV PVT"));
      packetUBXNAVPVT->callbackPointer(*packetUBXNAVPVT->callbackData); // Call the callback
    5778:	224c      	movs	r2, #76	; 0x4c
    577a:	f105 0110 	add.w	r1, r5, #16
    577e:	4668      	mov	r0, sp
    5780:	f005 fa54 	bl	ac2c <memcpy>
    5784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5788:	47b0      	blx	r6
    }
    if (packetUBXNAVPVT->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    578a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    578c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    578e:	b112      	cbz	r2, 5796 <SFE_UBLOX_GNSS::checkCallbacks()+0x106>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV PVT"));
      packetUBXNAVPVT->callbackPointerPtr(packetUBXNAVPVT->callbackData); // Call the callback
    5790:	6f18      	ldr	r0, [r3, #112]	; 0x70
    5792:	4790      	blx	r2
    }
    packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5794:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5796:	781a      	ldrb	r2, [r3, #0]
    5798:	f36f 02c3 	bfc	r2, #3, #1
    579c:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVODO != NULL)                                                  // If RAM has been allocated for message storage
    579e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57a0:	b1a3      	cbz	r3, 57cc <SFE_UBLOX_GNSS::checkCallbacks()+0x13c>
      && (packetUBXNAVODO->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    57a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    57a4:	b192      	cbz	r2, 57cc <SFE_UBLOX_GNSS::checkCallbacks()+0x13c>
      && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    57a6:	7819      	ldrb	r1, [r3, #0]
    57a8:	070d      	lsls	r5, r1, #28
    57aa:	d50f      	bpl.n	57cc <SFE_UBLOX_GNSS::checkCallbacks()+0x13c>
  {
    if (packetUBXNAVODO->callbackPointer != NULL) // If the pointer to the callback has been defined
    57ac:	69dd      	ldr	r5, [r3, #28]
    57ae:	b125      	cbz	r5, 57ba <SFE_UBLOX_GNSS::checkCallbacks()+0x12a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV ODO"));
      packetUBXNAVODO->callbackPointer(*packetUBXNAVODO->callbackData); // Call the callback
    57b0:	6913      	ldr	r3, [r2, #16]
    57b2:	9300      	str	r3, [sp, #0]
    57b4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    57b6:	47a8      	blx	r5
    }
    if (packetUBXNAVODO->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    57b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57ba:	6a1a      	ldr	r2, [r3, #32]
    57bc:	b112      	cbz	r2, 57c4 <SFE_UBLOX_GNSS::checkCallbacks()+0x134>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV ODO"));
      packetUBXNAVODO->callbackPointerPtr(packetUBXNAVODO->callbackData); // Call the callback
    57be:	6a58      	ldr	r0, [r3, #36]	; 0x24
    57c0:	4790      	blx	r2
    }
    packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    57c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    57c4:	781a      	ldrb	r2, [r3, #0]
    57c6:	f36f 02c3 	bfc	r2, #3, #1
    57ca:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVVELECEF != NULL)                                                  // If RAM has been allocated for message storage
    57cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    57ce:	b1a3      	cbz	r3, 57fa <SFE_UBLOX_GNSS::checkCallbacks()+0x16a>
      && (packetUBXNAVVELECEF->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    57d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    57d2:	b192      	cbz	r2, 57fa <SFE_UBLOX_GNSS::checkCallbacks()+0x16a>
      && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    57d4:	7819      	ldrb	r1, [r3, #0]
    57d6:	0708      	lsls	r0, r1, #28
    57d8:	d50f      	bpl.n	57fa <SFE_UBLOX_GNSS::checkCallbacks()+0x16a>
  {
    if (packetUBXNAVVELECEF->callbackPointer != NULL) // If the pointer to the callback has been defined
    57da:	69dd      	ldr	r5, [r3, #28]
    57dc:	b125      	cbz	r5, 57e8 <SFE_UBLOX_GNSS::checkCallbacks()+0x158>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV VELECEF"));
      packetUBXNAVVELECEF->callbackPointer(*packetUBXNAVVELECEF->callbackData); // Call the callback
    57de:	6913      	ldr	r3, [r2, #16]
    57e0:	9300      	str	r3, [sp, #0]
    57e2:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    57e4:	47a8      	blx	r5
    }
    if (packetUBXNAVVELECEF->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    57e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    57e8:	6a1a      	ldr	r2, [r3, #32]
    57ea:	b112      	cbz	r2, 57f2 <SFE_UBLOX_GNSS::checkCallbacks()+0x162>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV VELECEF"));
      packetUBXNAVVELECEF->callbackPointerPtr(packetUBXNAVVELECEF->callbackData); // Call the callback
    57ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
    57ee:	4790      	blx	r2
    }
    packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    57f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    57f2:	781a      	ldrb	r2, [r3, #0]
    57f4:	f36f 02c3 	bfc	r2, #3, #1
    57f8:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVVELNED != NULL)                                                  // If RAM has been allocated for message storage
    57fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    57fc:	b1eb      	cbz	r3, 583a <SFE_UBLOX_GNSS::checkCallbacks()+0x1aa>
      && (packetUBXNAVVELNED->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    57fe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    5800:	b1dd      	cbz	r5, 583a <SFE_UBLOX_GNSS::checkCallbacks()+0x1aa>
      && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5802:	781a      	ldrb	r2, [r3, #0]
    5804:	0711      	lsls	r1, r2, #28
    5806:	d518      	bpl.n	583a <SFE_UBLOX_GNSS::checkCallbacks()+0x1aa>
  {
    if (packetUBXNAVVELNED->callbackPointer != NULL) // If the pointer to the callback has been defined
    5808:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
    580c:	f1b8 0f00 	cmp.w	r8, #0
    5810:	d00a      	beq.n	5828 <SFE_UBLOX_GNSS::checkCallbacks()+0x198>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV VELNED"));
      packetUBXNAVVELNED->callbackPointer(*packetUBXNAVVELNED->callbackData); // Call the callback
    5812:	f105 0710 	add.w	r7, r5, #16
    5816:	466e      	mov	r6, sp
    5818:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    581a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    581c:	683b      	ldr	r3, [r7, #0]
    581e:	6033      	str	r3, [r6, #0]
    5820:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5824:	47c0      	blx	r8
    }
    if (packetUBXNAVVELNED->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5826:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    582a:	b112      	cbz	r2, 5832 <SFE_UBLOX_GNSS::checkCallbacks()+0x1a2>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV VELNED"));
      packetUBXNAVVELNED->callbackPointerPtr(packetUBXNAVVELNED->callbackData); // Call the callback
    582c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    582e:	4790      	blx	r2
    }
    packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5830:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5832:	781a      	ldrb	r2, [r3, #0]
    5834:	f36f 02c3 	bfc	r2, #3, #1
    5838:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVHPPOSECEF != NULL)                                                  // If RAM has been allocated for message storage
    583a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    583c:	b1cb      	cbz	r3, 5872 <SFE_UBLOX_GNSS::checkCallbacks()+0x1e2>
      && (packetUBXNAVHPPOSECEF->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    583e:	6add      	ldr	r5, [r3, #44]	; 0x2c
    5840:	b1bd      	cbz	r5, 5872 <SFE_UBLOX_GNSS::checkCallbacks()+0x1e2>
      && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5842:	781a      	ldrb	r2, [r3, #0]
    5844:	0712      	lsls	r2, r2, #28
    5846:	d514      	bpl.n	5872 <SFE_UBLOX_GNSS::checkCallbacks()+0x1e2>
  {
    if (packetUBXNAVHPPOSECEF->callbackPointer != NULL) // If the pointer to the callback has been defined
    5848:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    584a:	b14e      	cbz	r6, 5860 <SFE_UBLOX_GNSS::checkCallbacks()+0x1d0>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV HPPOSECEF"));
      packetUBXNAVHPPOSECEF->callbackPointer(*packetUBXNAVHPPOSECEF->callbackData); // Call the callback
    584c:	f105 0310 	add.w	r3, r5, #16
    5850:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5854:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    5858:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    585c:	47b0      	blx	r6
    }
    if (packetUBXNAVHPPOSECEF->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    585e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5862:	b112      	cbz	r2, 586a <SFE_UBLOX_GNSS::checkCallbacks()+0x1da>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV HPPOSECEF"));
      packetUBXNAVHPPOSECEF->callbackPointerPtr(packetUBXNAVHPPOSECEF->callbackData); // Call the callback
    5864:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    5866:	4790      	blx	r2
    }
    packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    586a:	781a      	ldrb	r2, [r3, #0]
    586c:	f36f 02c3 	bfc	r2, #3, #1
    5870:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVHPPOSLLH != NULL)                                                  // If RAM has been allocated for message storage
    5872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5874:	b1eb      	cbz	r3, 58b2 <SFE_UBLOX_GNSS::checkCallbacks()+0x222>
      && (packetUBXNAVHPPOSLLH->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5876:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    5878:	b1dd      	cbz	r5, 58b2 <SFE_UBLOX_GNSS::checkCallbacks()+0x222>
      && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    587a:	781a      	ldrb	r2, [r3, #0]
    587c:	0717      	lsls	r7, r2, #28
    587e:	d518      	bpl.n	58b2 <SFE_UBLOX_GNSS::checkCallbacks()+0x222>
  {
    if (packetUBXNAVHPPOSLLH->callbackPointer != NULL) // If the pointer to the callback has been defined
    5880:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
    5884:	f1b8 0f00 	cmp.w	r8, #0
    5888:	d00a      	beq.n	58a0 <SFE_UBLOX_GNSS::checkCallbacks()+0x210>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV HPPOSLLH"));
      packetUBXNAVHPPOSLLH->callbackPointer(*packetUBXNAVHPPOSLLH->callbackData); // Call the callback
    588a:	f105 0710 	add.w	r7, r5, #16
    588e:	466e      	mov	r6, sp
    5890:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5892:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5894:	683b      	ldr	r3, [r7, #0]
    5896:	6033      	str	r3, [r6, #0]
    5898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    589c:	47c0      	blx	r8
    }
    if (packetUBXNAVHPPOSLLH->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    589e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    58a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    58a2:	b112      	cbz	r2, 58aa <SFE_UBLOX_GNSS::checkCallbacks()+0x21a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV HPPOSLLH"));
      packetUBXNAVHPPOSLLH->callbackPointerPtr(packetUBXNAVHPPOSLLH->callbackData); // Call the callback
    58a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    58a6:	4790      	blx	r2
    }
    packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    58a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    58aa:	781a      	ldrb	r2, [r3, #0]
    58ac:	f36f 02c3 	bfc	r2, #3, #1
    58b0:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVPVAT != NULL)                                                  // If RAM has been allocated for message storage
    58b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    58b4:	b1eb      	cbz	r3, 58f2 <SFE_UBLOX_GNSS::checkCallbacks()+0x262>
      && (packetUBXNAVPVAT->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    58b6:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
    58ba:	b1d5      	cbz	r5, 58f2 <SFE_UBLOX_GNSS::checkCallbacks()+0x262>
      && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    58bc:	781a      	ldrb	r2, [r3, #0]
    58be:	0716      	lsls	r6, r2, #28
    58c0:	d517      	bpl.n	58f2 <SFE_UBLOX_GNSS::checkCallbacks()+0x262>
  {
    if (packetUBXNAVPVAT->callbackPointer != NULL) // If the pointer to the callback has been defined
    58c2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    58c6:	b14e      	cbz	r6, 58dc <SFE_UBLOX_GNSS::checkCallbacks()+0x24c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV PVAT"));
      packetUBXNAVPVAT->callbackPointer(*packetUBXNAVPVAT->callbackData); // Call the callback
    58c8:	2264      	movs	r2, #100	; 0x64
    58ca:	f105 0110 	add.w	r1, r5, #16
    58ce:	4668      	mov	r0, sp
    58d0:	f005 f9ac 	bl	ac2c <memcpy>
    58d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    58d8:	47b0      	blx	r6
    }
    if (packetUBXNAVPVAT->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    58da:	6c23      	ldr	r3, [r4, #64]	; 0x40
    58dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    58e0:	b11a      	cbz	r2, 58ea <SFE_UBLOX_GNSS::checkCallbacks()+0x25a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV PVAT"));
      packetUBXNAVPVAT->callbackPointerPtr(packetUBXNAVPVAT->callbackData); // Call the callback
    58e2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    58e6:	4790      	blx	r2
    }
    packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    58e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    58ea:	781a      	ldrb	r2, [r3, #0]
    58ec:	f36f 02c3 	bfc	r2, #3, #1
    58f0:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVTIMEUTC != NULL)                                                  // If RAM has been allocated for message storage
    58f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58f4:	b163      	cbz	r3, 5910 <SFE_UBLOX_GNSS::checkCallbacks()+0x280>
      && (packetUBXNAVTIMEUTC->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    58f6:	6a18      	ldr	r0, [r3, #32]
    58f8:	b150      	cbz	r0, 5910 <SFE_UBLOX_GNSS::checkCallbacks()+0x280>
      && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    58fa:	781a      	ldrb	r2, [r3, #0]
    58fc:	0715      	lsls	r5, r2, #28
    58fe:	d507      	bpl.n	5910 <SFE_UBLOX_GNSS::checkCallbacks()+0x280>
  {
    if (packetUBXNAVTIMEUTC->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5900:	69da      	ldr	r2, [r3, #28]
    5902:	b10a      	cbz	r2, 5908 <SFE_UBLOX_GNSS::checkCallbacks()+0x278>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV TIMEUTC"));
      packetUBXNAVTIMEUTC->callbackPointerPtr(packetUBXNAVTIMEUTC->callbackData); // Call the callback
    5904:	4790      	blx	r2
    }
    packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5906:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5908:	781a      	ldrb	r2, [r3, #0]
    590a:	f36f 02c3 	bfc	r2, #3, #1
    590e:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVCLOCK != NULL)                                                  // If RAM has been allocated for message storage
    5910:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5912:	b1a3      	cbz	r3, 593e <SFE_UBLOX_GNSS::checkCallbacks()+0x2ae>
      && (packetUBXNAVCLOCK->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5916:	b192      	cbz	r2, 593e <SFE_UBLOX_GNSS::checkCallbacks()+0x2ae>
      && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5918:	7819      	ldrb	r1, [r3, #0]
    591a:	0709      	lsls	r1, r1, #28
    591c:	d50f      	bpl.n	593e <SFE_UBLOX_GNSS::checkCallbacks()+0x2ae>
  {
    if (packetUBXNAVCLOCK->callbackPointer != NULL) // If the pointer to the callback has been defined
    591e:	69dd      	ldr	r5, [r3, #28]
    5920:	b125      	cbz	r5, 592c <SFE_UBLOX_GNSS::checkCallbacks()+0x29c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV CLOCK"));
      packetUBXNAVCLOCK->callbackPointer(*packetUBXNAVCLOCK->callbackData); // Call the callback
    5922:	6913      	ldr	r3, [r2, #16]
    5924:	9300      	str	r3, [sp, #0]
    5926:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    5928:	47a8      	blx	r5
    }
    if (packetUBXNAVCLOCK->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    592a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    592c:	6a1a      	ldr	r2, [r3, #32]
    592e:	b112      	cbz	r2, 5936 <SFE_UBLOX_GNSS::checkCallbacks()+0x2a6>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV CLOCK"));
      packetUBXNAVCLOCK->callbackPointerPtr(packetUBXNAVCLOCK->callbackData); // Call the callback
    5930:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5932:	4790      	blx	r2
    }
    packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5934:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5936:	781a      	ldrb	r2, [r3, #0]
    5938:	f36f 02c3 	bfc	r2, #3, #1
    593c:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVSVIN != NULL)                                                  // If RAM has been allocated for message storage
    593e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5940:	b163      	cbz	r3, 595c <SFE_UBLOX_GNSS::checkCallbacks()+0x2cc>
      && (packetUBXNAVSVIN->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5942:	6b58      	ldr	r0, [r3, #52]	; 0x34
    5944:	b150      	cbz	r0, 595c <SFE_UBLOX_GNSS::checkCallbacks()+0x2cc>
      && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5946:	781a      	ldrb	r2, [r3, #0]
    5948:	0717      	lsls	r7, r2, #28
    594a:	d507      	bpl.n	595c <SFE_UBLOX_GNSS::checkCallbacks()+0x2cc>
  {
    if (packetUBXNAVSVIN->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    594c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    594e:	b10a      	cbz	r2, 5954 <SFE_UBLOX_GNSS::checkCallbacks()+0x2c4>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV SVIN"));
      packetUBXNAVSVIN->callbackPointerPtr(packetUBXNAVSVIN->callbackData); // Call the callback
    5950:	4790      	blx	r2
    }
    packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5952:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5954:	781a      	ldrb	r2, [r3, #0]
    5956:	f36f 02c3 	bfc	r2, #3, #1
    595a:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVSAT != NULL)                                                  // If RAM has been allocated for message storage
    595c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    595e:	b1f3      	cbz	r3, 599e <SFE_UBLOX_GNSS::checkCallbacks()+0x30e>
      && (packetUBXNAVSAT->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5960:	f8d3 5c0c 	ldr.w	r5, [r3, #3084]	; 0xc0c
    5964:	b1dd      	cbz	r5, 599e <SFE_UBLOX_GNSS::checkCallbacks()+0x30e>
      && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5966:	781a      	ldrb	r2, [r3, #0]
    5968:	0716      	lsls	r6, r2, #28
    596a:	d518      	bpl.n	599e <SFE_UBLOX_GNSS::checkCallbacks()+0x30e>
  {
    if (packetUBXNAVSAT->callbackPointer != NULL) // If the pointer to the callback has been defined
    596c:	f8d3 6c04 	ldr.w	r6, [r3, #3076]	; 0xc04
    5970:	b156      	cbz	r6, 5988 <SFE_UBLOX_GNSS::checkCallbacks()+0x2f8>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV SAT"));
      packetUBXNAVSAT->callbackPointer(*packetUBXNAVSAT->callbackData); // Call the callback
    5972:	f640 32ec 	movw	r2, #3052	; 0xbec
    5976:	f105 0110 	add.w	r1, r5, #16
    597a:	4668      	mov	r0, sp
    597c:	f005 f956 	bl	ac2c <memcpy>
    5980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5984:	47b0      	blx	r6
    }
    if (packetUBXNAVSAT->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5986:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5988:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    598c:	b11a      	cbz	r2, 5996 <SFE_UBLOX_GNSS::checkCallbacks()+0x306>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV SAT"));
      packetUBXNAVSAT->callbackPointerPtr(packetUBXNAVSAT->callbackData); // Call the callback
    598e:	f8d3 0c0c 	ldr.w	r0, [r3, #3084]	; 0xc0c
    5992:	4790      	blx	r2
    }
    packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5994:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5996:	781a      	ldrb	r2, [r3, #0]
    5998:	f36f 02c3 	bfc	r2, #3, #1
    599c:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVRELPOSNED != NULL)                                                  // If RAM has been allocated for message storage
    599e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    59a0:	b303      	cbz	r3, 59e4 <SFE_UBLOX_GNSS::checkCallbacks()+0x354>
      && (packetUBXNAVRELPOSNED->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    59a2:	6d1e      	ldr	r6, [r3, #80]	; 0x50
    59a4:	b1f6      	cbz	r6, 59e4 <SFE_UBLOX_GNSS::checkCallbacks()+0x354>
      && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    59a6:	781a      	ldrb	r2, [r3, #0]
    59a8:	0710      	lsls	r0, r2, #28
    59aa:	d51b      	bpl.n	59e4 <SFE_UBLOX_GNSS::checkCallbacks()+0x354>
  {
    if (packetUBXNAVRELPOSNED->callbackPointer != NULL) // If the pointer to the callback has been defined
    59ac:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    59ae:	b187      	cbz	r7, 59d2 <SFE_UBLOX_GNSS::checkCallbacks()+0x342>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV RELPOSNED"));
      packetUBXNAVRELPOSNED->callbackPointer(*packetUBXNAVRELPOSNED->callbackData); // Call the callback
    59b0:	f106 0c10 	add.w	ip, r6, #16
    59b4:	466d      	mov	r5, sp
    59b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    59ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    59bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    59c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    59c2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    59c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    59ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    59ce:	47b8      	blx	r7
    }
    if (packetUBXNAVRELPOSNED->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    59d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    59d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    59d4:	b112      	cbz	r2, 59dc <SFE_UBLOX_GNSS::checkCallbacks()+0x34c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV RELPOSNED"));
      packetUBXNAVRELPOSNED->callbackPointerPtr(packetUBXNAVRELPOSNED->callbackData); // Call the callback
    59d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
    59d8:	4790      	blx	r2
    }
    packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    59da:	6d63      	ldr	r3, [r4, #84]	; 0x54
    59dc:	781a      	ldrb	r2, [r3, #0]
    59de:	f36f 02c3 	bfc	r2, #3, #1
    59e2:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVAOPSTATUS != NULL)                                                  // If RAM has been allocated for message storage
    59e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    59e6:	b193      	cbz	r3, 5a0e <SFE_UBLOX_GNSS::checkCallbacks()+0x37e>
      && (packetUBXNAVAOPSTATUS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    59e8:	6a1a      	ldr	r2, [r3, #32]
    59ea:	b182      	cbz	r2, 5a0e <SFE_UBLOX_GNSS::checkCallbacks()+0x37e>
      && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    59ec:	7819      	ldrb	r1, [r3, #0]
    59ee:	0709      	lsls	r1, r1, #28
    59f0:	d50d      	bpl.n	5a0e <SFE_UBLOX_GNSS::checkCallbacks()+0x37e>
  {
    if (packetUBXNAVAOPSTATUS->callbackPointer != NULL) // If the pointer to the callback has been defined
    59f2:	699d      	ldr	r5, [r3, #24]
    59f4:	b115      	cbz	r5, 59fc <SFE_UBLOX_GNSS::checkCallbacks()+0x36c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for NAV AOPSTATUS"));
      packetUBXNAVAOPSTATUS->callbackPointer(*packetUBXNAVAOPSTATUS->callbackData); // Call the callback
    59f6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    59f8:	47a8      	blx	r5
    }
    if (packetUBXNAVAOPSTATUS->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    59fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
    59fc:	69da      	ldr	r2, [r3, #28]
    59fe:	b112      	cbz	r2, 5a06 <SFE_UBLOX_GNSS::checkCallbacks()+0x376>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV AOPSTATUS"));
      packetUBXNAVAOPSTATUS->callbackPointerPtr(packetUBXNAVAOPSTATUS->callbackData); // Call the callback
    5a00:	6a18      	ldr	r0, [r3, #32]
    5a02:	4790      	blx	r2
    }
    packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
    5a06:	781a      	ldrb	r2, [r3, #0]
    5a08:	f36f 02c3 	bfc	r2, #3, #1
    5a0c:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXNAVEOE != NULL)                                                  // If RAM has been allocated for message storage
    5a0e:	69e3      	ldr	r3, [r4, #28]
    5a10:	b163      	cbz	r3, 5a2c <SFE_UBLOX_GNSS::checkCallbacks()+0x39c>
      && (packetUBXNAVEOE->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5a12:	6918      	ldr	r0, [r3, #16]
    5a14:	b150      	cbz	r0, 5a2c <SFE_UBLOX_GNSS::checkCallbacks()+0x39c>
      && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5a16:	781a      	ldrb	r2, [r3, #0]
    5a18:	0712      	lsls	r2, r2, #28
    5a1a:	d507      	bpl.n	5a2c <SFE_UBLOX_GNSS::checkCallbacks()+0x39c>
  {
    if (packetUBXNAVEOE->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5a1c:	68da      	ldr	r2, [r3, #12]
    5a1e:	b10a      	cbz	r2, 5a24 <SFE_UBLOX_GNSS::checkCallbacks()+0x394>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for NAV EOE"));
      packetUBXNAVEOE->callbackPointerPtr(packetUBXNAVEOE->callbackData); // Call the callback
    5a20:	4790      	blx	r2
    }
    packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5a22:	69e3      	ldr	r3, [r4, #28]
    5a24:	781a      	ldrb	r2, [r3, #0]
    5a26:	f36f 02c3 	bfc	r2, #3, #1
    5a2a:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXRXMPMP != NULL)                                                  // If RAM has been allocated for message storage
    5a2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5a2e:	b163      	cbz	r3, 5a4a <SFE_UBLOX_GNSS::checkCallbacks()+0x3ba>
      && (packetUBXRXMPMP->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5a30:	6898      	ldr	r0, [r3, #8]
    5a32:	b150      	cbz	r0, 5a4a <SFE_UBLOX_GNSS::checkCallbacks()+0x3ba>
      && (packetUBXRXMPMP->callbackPointerPtr != NULL)                           // If the pointer to the callback has been defined
    5a34:	685a      	ldr	r2, [r3, #4]
    5a36:	b142      	cbz	r2, 5a4a <SFE_UBLOX_GNSS::checkCallbacks()+0x3ba>
      && (packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5a38:	781b      	ldrb	r3, [r3, #0]
    5a3a:	071f      	lsls	r7, r3, #28
    5a3c:	d505      	bpl.n	5a4a <SFE_UBLOX_GNSS::checkCallbacks()+0x3ba>
  {
    // if (_printDebug == true)
    //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for RXM PMP"));
    packetUBXRXMPMP->callbackPointerPtr(packetUBXRXMPMP->callbackData);   // Call the callback
    5a3e:	4790      	blx	r2
    packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5a40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5a42:	781a      	ldrb	r2, [r3, #0]
    5a44:	f36f 02c3 	bfc	r2, #3, #1
    5a48:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXRXMPMPmessage != NULL)                                                  // If RAM has been allocated for message storage
    5a4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    5a4c:	b163      	cbz	r3, 5a68 <SFE_UBLOX_GNSS::checkCallbacks()+0x3d8>
      && (packetUBXRXMPMPmessage->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5a4e:	6898      	ldr	r0, [r3, #8]
    5a50:	b150      	cbz	r0, 5a68 <SFE_UBLOX_GNSS::checkCallbacks()+0x3d8>
      && (packetUBXRXMPMPmessage->callbackPointerPtr != NULL)                           // If the pointer to the callback has been defined
    5a52:	685a      	ldr	r2, [r3, #4]
    5a54:	b142      	cbz	r2, 5a68 <SFE_UBLOX_GNSS::checkCallbacks()+0x3d8>
      && (packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5a56:	781b      	ldrb	r3, [r3, #0]
    5a58:	071e      	lsls	r6, r3, #28
    5a5a:	d505      	bpl.n	5a68 <SFE_UBLOX_GNSS::checkCallbacks()+0x3d8>
  {
    // if (_printDebug == true)
    //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for RXM PMP message"));
    packetUBXRXMPMPmessage->callbackPointerPtr(packetUBXRXMPMPmessage->callbackData); // Call the callback
    5a5c:	4790      	blx	r2
    packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = false;      // Mark the data as stale
    5a5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    5a60:	781a      	ldrb	r2, [r3, #0]
    5a62:	f36f 02c3 	bfc	r2, #3, #1
    5a66:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXRXMQZSSL6message != NULL) &&                   // If RAM has been allocated for message storage
    5a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5a6a:	b313      	cbz	r3, 5ab2 <SFE_UBLOX_GNSS::checkCallbacks()+0x422>
      (packetUBXRXMQZSSL6message->callbackData != NULL) &&     // If RAM has been allocated for the copy of the data
    5a6c:	6898      	ldr	r0, [r3, #8]
  if ((packetUBXRXMQZSSL6message != NULL) &&                   // If RAM has been allocated for message storage
    5a6e:	b300      	cbz	r0, 5ab2 <SFE_UBLOX_GNSS::checkCallbacks()+0x422>
      (packetUBXRXMQZSSL6message->callbackPointerPtr != NULL)) // If the pointer to the callback has been defined
    5a70:	6859      	ldr	r1, [r3, #4]
      (packetUBXRXMQZSSL6message->callbackData != NULL) &&     // If RAM has been allocated for the copy of the data
    5a72:	b1f1      	cbz	r1, 5ab2 <SFE_UBLOX_GNSS::checkCallbacks()+0x422>
  {
    for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
    {
      if (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)) // If the copy of the data is valid
    5a74:	781d      	ldrb	r5, [r3, #0]
    5a76:	f3c5 02c1 	ubfx	r2, r5, #3, #2
    5a7a:	072d      	lsls	r5, r5, #28
    5a7c:	d509      	bpl.n	5a92 <SFE_UBLOX_GNSS::checkCallbacks()+0x402>
      {
        packetUBXRXMQZSSL6message->callbackPointerPtr(&packetUBXRXMQZSSL6message->callbackData[ch]); // Call the callback
    5a7e:	4788      	blx	r1
        packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid &= ~(1 << ch);        // clear it
    5a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5a82:	7819      	ldrb	r1, [r3, #0]
    5a84:	f3c1 02c1 	ubfx	r2, r1, #3, #2
    5a88:	f002 0202 	and.w	r2, r2, #2
    5a8c:	f362 01c4 	bfi	r1, r2, #3, #2
    5a90:	7019      	strb	r1, [r3, #0]
      if (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)) // If the copy of the data is valid
    5a92:	0852      	lsrs	r2, r2, #1
    5a94:	d00d      	beq.n	5ab2 <SFE_UBLOX_GNSS::checkCallbacks()+0x422>
        packetUBXRXMQZSSL6message->callbackPointerPtr(&packetUBXRXMQZSSL6message->callbackData[ch]); // Call the callback
    5a96:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
    5a9a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    5a9e:	4798      	blx	r3
        packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid &= ~(1 << ch);        // clear it
    5aa0:	6e61      	ldr	r1, [r4, #100]	; 0x64
    5aa2:	780b      	ldrb	r3, [r1, #0]
    5aa4:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    5aa8:	f022 0202 	bic.w	r2, r2, #2
    5aac:	f362 03c4 	bfi	r3, r2, #3, #2
    5ab0:	700b      	strb	r3, [r1, #0]
      }
    }
  }

  if ((packetUBXRXMCOR != NULL)                                                  // If RAM has been allocated for message storage
    5ab2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    5ab4:	b163      	cbz	r3, 5ad0 <SFE_UBLOX_GNSS::checkCallbacks()+0x440>
      && (packetUBXRXMCOR->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5ab6:	6898      	ldr	r0, [r3, #8]
    5ab8:	b150      	cbz	r0, 5ad0 <SFE_UBLOX_GNSS::checkCallbacks()+0x440>
      && (packetUBXRXMCOR->callbackPointerPtr != NULL)                           // If the pointer to the callback has been defined
    5aba:	685a      	ldr	r2, [r3, #4]
    5abc:	b142      	cbz	r2, 5ad0 <SFE_UBLOX_GNSS::checkCallbacks()+0x440>
      && (packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5abe:	781b      	ldrb	r3, [r3, #0]
    5ac0:	0719      	lsls	r1, r3, #28
    5ac2:	d505      	bpl.n	5ad0 <SFE_UBLOX_GNSS::checkCallbacks()+0x440>
  {
    // if (_printDebug == true)
    //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for RXM COR"));
    packetUBXRXMCOR->callbackPointerPtr(packetUBXRXMCOR->callbackData);   // Call the callback
    5ac4:	4790      	blx	r2
    packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5ac6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    5ac8:	781a      	ldrb	r2, [r3, #0]
    5aca:	f36f 02c3 	bfc	r2, #3, #1
    5ace:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXRXMSFRBX != NULL)                                                  // If RAM has been allocated for message storage
    5ad0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5ad2:	b333      	cbz	r3, 5b22 <SFE_UBLOX_GNSS::checkCallbacks()+0x492>
      && (packetUBXRXMSFRBX->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5ad4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
    5ad6:	b325      	cbz	r5, 5b22 <SFE_UBLOX_GNSS::checkCallbacks()+0x492>
      && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5ad8:	781a      	ldrb	r2, [r3, #0]
    5ada:	0712      	lsls	r2, r2, #28
    5adc:	d521      	bpl.n	5b22 <SFE_UBLOX_GNSS::checkCallbacks()+0x492>
  {
    if (packetUBXRXMSFRBX->callbackPointer != NULL) // If the pointer to the callback has been defined
    5ade:	6d1e      	ldr	r6, [r3, #80]	; 0x50
    5ae0:	b1b6      	cbz	r6, 5b10 <SFE_UBLOX_GNSS::checkCallbacks()+0x480>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for RXM SFRBX"));
      packetUBXRXMSFRBX->callbackPointer(*packetUBXRXMSFRBX->callbackData); // Call the callback
    5ae2:	f105 0e10 	add.w	lr, r5, #16
    5ae6:	46ec      	mov	ip, sp
    5ae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5aec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5af0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5af4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5af8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5afc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5b00:	e89e 0003 	ldmia.w	lr, {r0, r1}
    5b04:	e88c 0003 	stmia.w	ip, {r0, r1}
    5b08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5b0c:	47b0      	blx	r6
    }
    if (packetUBXRXMSFRBX->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5b0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5b12:	b112      	cbz	r2, 5b1a <SFE_UBLOX_GNSS::checkCallbacks()+0x48a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for RXM SFRBX"));
      packetUBXRXMSFRBX->callbackPointerPtr(packetUBXRXMSFRBX->callbackData); // Call the callback
    5b14:	6d98      	ldr	r0, [r3, #88]	; 0x58
    5b16:	4790      	blx	r2
    }
    packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5b18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5b1a:	781a      	ldrb	r2, [r3, #0]
    5b1c:	f36f 02c3 	bfc	r2, #3, #1
    5b20:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXRXMRAWX != NULL)                                                  // If RAM has been allocated for message storage
    5b22:	6f23      	ldr	r3, [r4, #112]	; 0x70
    5b24:	b343      	cbz	r3, 5b78 <SFE_UBLOX_GNSS::checkCallbacks()+0x4e8>
      && (packetUBXRXMRAWX->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5b26:	f8d3 1b9c 	ldr.w	r1, [r3, #2972]	; 0xb9c
    5b2a:	b329      	cbz	r1, 5b78 <SFE_UBLOX_GNSS::checkCallbacks()+0x4e8>
      && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5b2c:	781a      	ldrb	r2, [r3, #0]
    5b2e:	0717      	lsls	r7, r2, #28
    5b30:	d522      	bpl.n	5b78 <SFE_UBLOX_GNSS::checkCallbacks()+0x4e8>
  {
    if (packetUBXRXMRAWX->callbackPointer != NULL) // If the pointer to the callback has been defined
    5b32:	f8d3 5b94 	ldr.w	r5, [r3, #2964]	; 0xb94
    5b36:	b1a5      	cbz	r5, 5b62 <SFE_UBLOX_GNSS::checkCallbacks()+0x4d2>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for RXM RAWX"));
      packetUBXRXMRAWX->callbackPointer(*packetUBXRXMRAWX->callbackData); // Call the callback
    5b38:	68cb      	ldr	r3, [r1, #12]
    5b3a:	f44f 6238 	mov.w	r2, #2944	; 0xb80
    5b3e:	f8d1 8000 	ldr.w	r8, [r1]
    5b42:	4668      	mov	r0, sp
    5b44:	688e      	ldr	r6, [r1, #8]
    5b46:	3110      	adds	r1, #16
    5b48:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5b4c:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    5b50:	f005 f86c 	bl	ac2c <memcpy>
    5b54:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    5b58:	4640      	mov	r0, r8
    5b5a:	4639      	mov	r1, r7
    5b5c:	4632      	mov	r2, r6
    5b5e:	47a8      	blx	r5
    }
    if (packetUBXRXMRAWX->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5b60:	6f23      	ldr	r3, [r4, #112]	; 0x70
    5b62:	f8d3 2b98 	ldr.w	r2, [r3, #2968]	; 0xb98
    5b66:	b11a      	cbz	r2, 5b70 <SFE_UBLOX_GNSS::checkCallbacks()+0x4e0>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for RXM RAWX"));
      packetUBXRXMRAWX->callbackPointerPtr(packetUBXRXMRAWX->callbackData); // Call the callback
    5b68:	f8d3 0b9c 	ldr.w	r0, [r3, #2972]	; 0xb9c
    5b6c:	4790      	blx	r2
    }
    packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5b6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    5b70:	781a      	ldrb	r2, [r3, #0]
    5b72:	f36f 02c3 	bfc	r2, #3, #1
    5b76:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXTIMTM2 != NULL)                                                  // If RAM has been allocated for message storage
    5b78:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    5b7c:	b1db      	cbz	r3, 5bb6 <SFE_UBLOX_GNSS::checkCallbacks()+0x526>
      && (packetUBXTIMTM2->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5b7e:	6add      	ldr	r5, [r3, #44]	; 0x2c
    5b80:	b1cd      	cbz	r5, 5bb6 <SFE_UBLOX_GNSS::checkCallbacks()+0x526>
      && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5b82:	781a      	ldrb	r2, [r3, #0]
    5b84:	0716      	lsls	r6, r2, #28
    5b86:	d516      	bpl.n	5bb6 <SFE_UBLOX_GNSS::checkCallbacks()+0x526>
  {
    if (packetUBXTIMTM2->callbackPointer != NULL) // If the pointer to the callback has been defined
    5b88:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    5b8a:	b156      	cbz	r6, 5ba2 <SFE_UBLOX_GNSS::checkCallbacks()+0x512>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for TIM TM2"));
      packetUBXTIMTM2->callbackPointer(*packetUBXTIMTM2->callbackData); // Call the callback
    5b8c:	f105 0310 	add.w	r3, r5, #16
    5b90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5b94:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    5b98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5b9c:	47b0      	blx	r6
    }
    if (packetUBXTIMTM2->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5b9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    5ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5ba4:	b11a      	cbz	r2, 5bae <SFE_UBLOX_GNSS::checkCallbacks()+0x51e>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for TIM TM2"));
      packetUBXTIMTM2->callbackPointerPtr(packetUBXTIMTM2->callbackData); // Call the callback
    5ba6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    5ba8:	4790      	blx	r2
    }
    packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5baa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    5bae:	781a      	ldrb	r2, [r3, #0]
    5bb0:	f36f 02c3 	bfc	r2, #3, #1
    5bb4:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXTIMSMEAS != NULL)                                                  // If RAM has been allocated for message storage
    5bb6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    5bb8:	b1b3      	cbz	r3, 5be8 <SFE_UBLOX_GNSS::checkCallbacks()+0x558>
      && (packetUBXTIMSMEAS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5bba:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
    5bbe:	b19d      	cbz	r5, 5be8 <SFE_UBLOX_GNSS::checkCallbacks()+0x558>
      && (packetUBXTIMSMEAS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5bc0:	781a      	ldrb	r2, [r3, #0]
    5bc2:	0710      	lsls	r0, r2, #28
    5bc4:	d510      	bpl.n	5be8 <SFE_UBLOX_GNSS::checkCallbacks()+0x558>
  {
    if (packetUBXTIMSMEAS->callbackPointer != NULL) // If the pointer to the callback has been defined
    5bc6:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
    5bca:	b14e      	cbz	r6, 5be0 <SFE_UBLOX_GNSS::checkCallbacks()+0x550>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for TIM SMEA"));
      packetUBXTIMSMEAS->callbackPointer(*packetUBXTIMSMEAS->callbackData); // Call the callback
    5bcc:	228c      	movs	r2, #140	; 0x8c
    5bce:	f105 0110 	add.w	r1, r5, #16
    5bd2:	4668      	mov	r0, sp
    5bd4:	f005 f82a 	bl	ac2c <memcpy>
    5bd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5bdc:	47b0      	blx	r6
    }
    packetUBXTIMSMEAS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5bde:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    5be0:	781a      	ldrb	r2, [r3, #0]
    5be2:	f36f 02c3 	bfc	r2, #3, #1
    5be6:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXESFALG != NULL)                                                  // If RAM has been allocated for message storage
    5be8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    5bec:	b1a3      	cbz	r3, 5c18 <SFE_UBLOX_GNSS::checkCallbacks()+0x588>
      && (packetUBXESFALG->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5bee:	6a1a      	ldr	r2, [r3, #32]
    5bf0:	b192      	cbz	r2, 5c18 <SFE_UBLOX_GNSS::checkCallbacks()+0x588>
      && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5bf2:	7819      	ldrb	r1, [r3, #0]
    5bf4:	0709      	lsls	r1, r1, #28
    5bf6:	d50f      	bpl.n	5c18 <SFE_UBLOX_GNSS::checkCallbacks()+0x588>
  {
    if (packetUBXESFALG->callbackPointer != NULL) // If the pointer to the callback has been defined
    5bf8:	699d      	ldr	r5, [r3, #24]
    5bfa:	b11d      	cbz	r5, 5c04 <SFE_UBLOX_GNSS::checkCallbacks()+0x574>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for ESF ALG"));
      packetUBXESFALG->callbackPointer(*packetUBXESFALG->callbackData); // Call the callback
    5bfc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    5bfe:	47a8      	blx	r5
    }
    if (packetUBXESFALG->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5c00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    5c04:	69da      	ldr	r2, [r3, #28]
    5c06:	b11a      	cbz	r2, 5c10 <SFE_UBLOX_GNSS::checkCallbacks()+0x580>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for ESF ALG"));
      packetUBXESFALG->callbackPointerPtr(packetUBXESFALG->callbackData); // Call the callback
    5c08:	6a18      	ldr	r0, [r3, #32]
    5c0a:	4790      	blx	r2
    }
    packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5c0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    5c10:	781a      	ldrb	r2, [r3, #0]
    5c12:	f36f 02c3 	bfc	r2, #3, #1
    5c16:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXESFINS != NULL)                                                  // If RAM has been allocated for message storage
    5c18:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    5c1c:	b1fb      	cbz	r3, 5c5e <SFE_UBLOX_GNSS::checkCallbacks()+0x5ce>
      && (packetUBXESFINS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5c1e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    5c20:	b1ed      	cbz	r5, 5c5e <SFE_UBLOX_GNSS::checkCallbacks()+0x5ce>
      && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5c22:	781a      	ldrb	r2, [r3, #0]
    5c24:	0717      	lsls	r7, r2, #28
    5c26:	d51a      	bpl.n	5c5e <SFE_UBLOX_GNSS::checkCallbacks()+0x5ce>
  {
    if (packetUBXESFINS->callbackPointer != NULL) // If the pointer to the callback has been defined
    5c28:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
    5c2c:	f1b8 0f00 	cmp.w	r8, #0
    5c30:	d00b      	beq.n	5c4a <SFE_UBLOX_GNSS::checkCallbacks()+0x5ba>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for ESF INS"));
      packetUBXESFINS->callbackPointer(*packetUBXESFINS->callbackData); // Call the callback
    5c32:	f105 0710 	add.w	r7, r5, #16
    5c36:	466e      	mov	r6, sp
    5c38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5c3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5c3c:	683b      	ldr	r3, [r7, #0]
    5c3e:	6033      	str	r3, [r6, #0]
    5c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5c44:	47c0      	blx	r8
    }
    if (packetUBXESFINS->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5c46:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    5c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5c4c:	b11a      	cbz	r2, 5c56 <SFE_UBLOX_GNSS::checkCallbacks()+0x5c6>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for ESF INS"));
      packetUBXESFINS->callbackPointerPtr(packetUBXESFINS->callbackData); // Call the callback
    5c4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    5c50:	4790      	blx	r2
    }
    packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5c52:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    5c56:	781a      	ldrb	r2, [r3, #0]
    5c58:	f36f 02c3 	bfc	r2, #3, #1
    5c5c:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXESFMEAS != NULL)                                                  // If RAM has been allocated for message storage
    5c5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    5c62:	b1fb      	cbz	r3, 5ca4 <SFE_UBLOX_GNSS::checkCallbacks()+0x614>
      && (packetUBXESFMEAS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5c64:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
    5c68:	b1e5      	cbz	r5, 5ca4 <SFE_UBLOX_GNSS::checkCallbacks()+0x614>
      && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5c6a:	781a      	ldrb	r2, [r3, #0]
    5c6c:	0716      	lsls	r6, r2, #28
    5c6e:	d519      	bpl.n	5ca4 <SFE_UBLOX_GNSS::checkCallbacks()+0x614>
  {
    if (packetUBXESFMEAS->callbackPointer != NULL) // If the pointer to the callback has been defined
    5c70:	f8d3 608c 	ldr.w	r6, [r3, #140]	; 0x8c
    5c74:	b156      	cbz	r6, 5c8c <SFE_UBLOX_GNSS::checkCallbacks()+0x5fc>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for ESF MEAS"));
      packetUBXESFMEAS->callbackPointer(*packetUBXESFMEAS->callbackData); // Call the callback
    5c76:	2278      	movs	r2, #120	; 0x78
    5c78:	f105 0110 	add.w	r1, r5, #16
    5c7c:	4668      	mov	r0, sp
    5c7e:	f004 ffd5 	bl	ac2c <memcpy>
    5c82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5c86:	47b0      	blx	r6
    }
    if (packetUBXESFMEAS->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5c88:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    5c8c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    5c90:	b122      	cbz	r2, 5c9c <SFE_UBLOX_GNSS::checkCallbacks()+0x60c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for ESF MEAS"));
      packetUBXESFMEAS->callbackPointerPtr(packetUBXESFMEAS->callbackData); // Call the callback
    5c92:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
    5c96:	4790      	blx	r2
    }
    packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5c98:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    5c9c:	781a      	ldrb	r2, [r3, #0]
    5c9e:	f36f 02c3 	bfc	r2, #3, #1
    5ca2:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXESFRAW != NULL)                                                  // If RAM has been allocated for message storage
    5ca4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    5ca8:	b303      	cbz	r3, 5cec <SFE_UBLOX_GNSS::checkCallbacks()+0x65c>
      && (packetUBXESFRAW->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5caa:	f8d3 5244 	ldr.w	r5, [r3, #580]	; 0x244
    5cae:	b1ed      	cbz	r5, 5cec <SFE_UBLOX_GNSS::checkCallbacks()+0x65c>
      && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5cb0:	781a      	ldrb	r2, [r3, #0]
    5cb2:	0710      	lsls	r0, r2, #28
    5cb4:	d51a      	bpl.n	5cec <SFE_UBLOX_GNSS::checkCallbacks()+0x65c>
  {
    if (packetUBXESFRAW->callbackPointer != NULL) // If the pointer to the callback has been defined
    5cb6:	f8d3 623c 	ldr.w	r6, [r3, #572]	; 0x23c
    5cba:	b15e      	cbz	r6, 5cd4 <SFE_UBLOX_GNSS::checkCallbacks()+0x644>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for ESF RAW"));
      packetUBXESFRAW->callbackPointer(*packetUBXESFRAW->callbackData); // Call the callback
    5cbc:	f44f 720a 	mov.w	r2, #552	; 0x228
    5cc0:	f105 0110 	add.w	r1, r5, #16
    5cc4:	4668      	mov	r0, sp
    5cc6:	f004 ffb1 	bl	ac2c <memcpy>
    5cca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5cce:	47b0      	blx	r6
    }
    if (packetUBXESFRAW->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5cd0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    5cd4:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
    5cd8:	b122      	cbz	r2, 5ce4 <SFE_UBLOX_GNSS::checkCallbacks()+0x654>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for ESF RAW"));
      packetUBXESFRAW->callbackPointerPtr(packetUBXESFRAW->callbackData); // Call the callback
    5cda:	f8d3 0244 	ldr.w	r0, [r3, #580]	; 0x244
    5cde:	4790      	blx	r2
    }
    packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5ce0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    5ce4:	781a      	ldrb	r2, [r3, #0]
    5ce6:	f36f 02c3 	bfc	r2, #3, #1
    5cea:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXESFSTATUS != NULL)                                                  // If RAM has been allocated for message storage
    5cec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5cf0:	b30b      	cbz	r3, 5d36 <SFE_UBLOX_GNSS::checkCallbacks()+0x6a6>
      && (packetUBXESFSTATUS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5cf2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    5cf4:	b1fd      	cbz	r5, 5d36 <SFE_UBLOX_GNSS::checkCallbacks()+0x6a6>
      && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5cf6:	781a      	ldrb	r2, [r3, #0]
    5cf8:	0711      	lsls	r1, r2, #28
    5cfa:	d51c      	bpl.n	5d36 <SFE_UBLOX_GNSS::checkCallbacks()+0x6a6>
  {
    if (packetUBXESFSTATUS->callbackPointer != NULL) // If the pointer to the callback has been defined
    5cfc:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
    5d00:	f1b8 0f00 	cmp.w	r8, #0
    5d04:	d00d      	beq.n	5d22 <SFE_UBLOX_GNSS::checkCallbacks()+0x692>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for ESF STATUS"));
      packetUBXESFSTATUS->callbackPointer(*packetUBXESFSTATUS->callbackData); // Call the callback
    5d06:	f105 0710 	add.w	r7, r5, #16
    5d0a:	466e      	mov	r6, sp
    5d0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5d0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5d10:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    5d14:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    5d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5d1c:	47c0      	blx	r8
    }
    if (packetUBXESFSTATUS->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5d1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5d24:	b11a      	cbz	r2, 5d2e <SFE_UBLOX_GNSS::checkCallbacks()+0x69e>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for ESF STATUS"));
      packetUBXESFSTATUS->callbackPointerPtr(packetUBXESFSTATUS->callbackData); // Call the callback
    5d26:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    5d28:	4790      	blx	r2
    }
    packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5d2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5d2e:	781a      	ldrb	r2, [r3, #0]
    5d30:	f36f 02c3 	bfc	r2, #3, #1
    5d34:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXHNRATT != NULL)                                                  // If RAM has been allocated for message storage
    5d36:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    5d3a:	b1d3      	cbz	r3, 5d72 <SFE_UBLOX_GNSS::checkCallbacks()+0x6e2>
      && (packetUBXHNRATT->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5d3c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    5d3e:	b1c5      	cbz	r5, 5d72 <SFE_UBLOX_GNSS::checkCallbacks()+0x6e2>
      && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5d40:	781a      	ldrb	r2, [r3, #0]
    5d42:	0712      	lsls	r2, r2, #28
    5d44:	d515      	bpl.n	5d72 <SFE_UBLOX_GNSS::checkCallbacks()+0x6e2>
  {
    if (packetUBXHNRATT->callbackPointer != NULL) // If the pointer to the callback has been defined
    5d46:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    5d48:	b14e      	cbz	r6, 5d5e <SFE_UBLOX_GNSS::checkCallbacks()+0x6ce>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for HNR ATT"));
      packetUBXHNRATT->callbackPointer(*packetUBXHNRATT->callbackData); // Call the callback
    5d4a:	f105 0310 	add.w	r3, r5, #16
    5d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5d50:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    5d54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5d58:	47b0      	blx	r6
    }
    if (packetUBXHNRATT->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5d5a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    5d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5d60:	b11a      	cbz	r2, 5d6a <SFE_UBLOX_GNSS::checkCallbacks()+0x6da>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for HNR ATT"));
      packetUBXHNRATT->callbackPointerPtr(packetUBXHNRATT->callbackData); // Call the callback
    5d62:	6b18      	ldr	r0, [r3, #48]	; 0x30
    5d64:	4790      	blx	r2
    }
    packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5d66:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    5d6a:	781a      	ldrb	r2, [r3, #0]
    5d6c:	f36f 02c3 	bfc	r2, #3, #1
    5d70:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXHNRINS != NULL)                                                  // If RAM has been allocated for message storage
    5d72:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    5d76:	b1fb      	cbz	r3, 5db8 <SFE_UBLOX_GNSS::checkCallbacks()+0x728>
      && (packetUBXHNRINS->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5d78:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    5d7a:	b1ed      	cbz	r5, 5db8 <SFE_UBLOX_GNSS::checkCallbacks()+0x728>
      && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5d7c:	781a      	ldrb	r2, [r3, #0]
    5d7e:	0717      	lsls	r7, r2, #28
    5d80:	d51a      	bpl.n	5db8 <SFE_UBLOX_GNSS::checkCallbacks()+0x728>
  {
    if (packetUBXHNRINS->callbackPointer != NULL) // If the pointer to the callback has been defined
    5d82:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
    5d86:	f1b8 0f00 	cmp.w	r8, #0
    5d8a:	d00b      	beq.n	5da4 <SFE_UBLOX_GNSS::checkCallbacks()+0x714>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for HNR INS"));
      packetUBXHNRINS->callbackPointer(*packetUBXHNRINS->callbackData); // Call the callback
    5d8c:	f105 0710 	add.w	r7, r5, #16
    5d90:	466e      	mov	r6, sp
    5d92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5d94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5d96:	683b      	ldr	r3, [r7, #0]
    5d98:	6033      	str	r3, [r6, #0]
    5d9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5d9e:	47c0      	blx	r8
    }
    if (packetUBXHNRINS->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5da0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    5da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5da6:	b11a      	cbz	r2, 5db0 <SFE_UBLOX_GNSS::checkCallbacks()+0x720>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for HNR INS"));
      packetUBXHNRINS->callbackPointerPtr(packetUBXHNRINS->callbackData); // Call the callback
    5da8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    5daa:	4790      	blx	r2
    }
    packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5dac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    5db0:	781a      	ldrb	r2, [r3, #0]
    5db2:	f36f 02c3 	bfc	r2, #3, #1
    5db6:	701a      	strb	r2, [r3, #0]
  }

  if ((packetUBXHNRPVT != NULL)                                                  // If RAM has been allocated for message storage
    5db8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5dbc:	b343      	cbz	r3, 5e10 <SFE_UBLOX_GNSS::checkCallbacks()+0x780>
      && (packetUBXHNRPVT->callbackData != NULL)                                 // If RAM has been allocated for the copy of the data
    5dbe:	6d9d      	ldr	r5, [r3, #88]	; 0x58
    5dc0:	b335      	cbz	r5, 5e10 <SFE_UBLOX_GNSS::checkCallbacks()+0x780>
      && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == true)) // If the copy of the data is valid
    5dc2:	781a      	ldrb	r2, [r3, #0]
    5dc4:	0716      	lsls	r6, r2, #28
    5dc6:	d523      	bpl.n	5e10 <SFE_UBLOX_GNSS::checkCallbacks()+0x780>
  {
    if (packetUBXHNRPVT->callbackPointer != NULL) // If the pointer to the callback has been defined
    5dc8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
    5dca:	b1be      	cbz	r6, 5dfc <SFE_UBLOX_GNSS::checkCallbacks()+0x76c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for HNR PVT"));
      packetUBXHNRPVT->callbackPointer(*packetUBXHNRPVT->callbackData); // Call the callback
    5dcc:	f105 0e10 	add.w	lr, r5, #16
    5dd0:	46ec      	mov	ip, sp
    5dd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5dd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5dda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5dde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5de2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5de6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5dea:	e89e 0003 	ldmia.w	lr, {r0, r1}
    5dee:	e88c 0003 	stmia.w	ip, {r0, r1}
    5df2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5df6:	47b0      	blx	r6
    }
    if (packetUBXHNRPVT->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5df8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5dfe:	b11a      	cbz	r2, 5e08 <SFE_UBLOX_GNSS::checkCallbacks()+0x778>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for HNR PVT"));
      packetUBXHNRPVT->callbackPointerPtr(packetUBXHNRPVT->callbackData); // Call the callback
    5e00:	6d98      	ldr	r0, [r3, #88]	; 0x58
    5e02:	4790      	blx	r2
    }
    packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = false; // Mark the data as stale
    5e04:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5e08:	781a      	ldrb	r2, [r3, #0]
    5e0a:	f36f 02c3 	bfc	r2, #3, #1
    5e0e:	701a      	strb	r2, [r3, #0]
  }

#ifndef SFE_UBLOX_DISABLE_AUTO_NMEA
  if ((storageNMEAGPGGA != NULL)                                               // If RAM has been allocated for message storage
    5e10:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    5e14:	b34b      	cbz	r3, 5e6a <SFE_UBLOX_GNSS::checkCallbacks()+0x7da>
      && (storageNMEAGPGGA->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    5e16:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    5e1a:	b331      	cbz	r1, 5e6a <SFE_UBLOX_GNSS::checkCallbacks()+0x7da>
      && (storageNMEAGPGGA->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    5e1c:	781a      	ldrb	r2, [r3, #0]
    5e1e:	0750      	lsls	r0, r2, #29
    5e20:	d523      	bpl.n	5e6a <SFE_UBLOX_GNSS::checkCallbacks()+0x7da>
  {
    if (storageNMEAGPGGA->callbackPointer != NULL) // If the pointer to the callback has been defined
    5e22:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    5e26:	b1a5      	cbz	r5, 5e52 <SFE_UBLOX_GNSS::checkCallbacks()+0x7c2>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GPGGA"));
      storageNMEAGPGGA->callbackPointer(*storageNMEAGPGGA->callbackCopy); // Call the callback
    5e28:	68cb      	ldr	r3, [r1, #12]
    5e2a:	2255      	movs	r2, #85	; 0x55
    5e2c:	f8d1 8000 	ldr.w	r8, [r1]
    5e30:	4668      	mov	r0, sp
    5e32:	688e      	ldr	r6, [r1, #8]
    5e34:	3110      	adds	r1, #16
    5e36:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5e3a:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    5e3e:	f004 fef5 	bl	ac2c <memcpy>
    5e42:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    5e46:	4640      	mov	r0, r8
    5e48:	4639      	mov	r1, r7
    5e4a:	4632      	mov	r2, r6
    5e4c:	47a8      	blx	r5
    }
    if (storageNMEAGPGGA->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5e4e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    5e52:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    5e56:	b122      	cbz	r2, 5e62 <SFE_UBLOX_GNSS::checkCallbacks()+0x7d2>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GPGGA"));
      storageNMEAGPGGA->callbackPointerPtr(storageNMEAGPGGA->callbackCopy); // Call the callback
    5e58:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    5e5c:	4790      	blx	r2
    }
    storageNMEAGPGGA->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    5e5e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    5e62:	781a      	ldrb	r2, [r3, #0]
    5e64:	f36f 0282 	bfc	r2, #2, #1
    5e68:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGNGGA != NULL)                                               // If RAM has been allocated for message storage
    5e6a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    5e6e:	b34b      	cbz	r3, 5ec4 <SFE_UBLOX_GNSS::checkCallbacks()+0x834>
      && (storageNMEAGNGGA->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    5e70:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    5e74:	b331      	cbz	r1, 5ec4 <SFE_UBLOX_GNSS::checkCallbacks()+0x834>
      && (storageNMEAGNGGA->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    5e76:	781a      	ldrb	r2, [r3, #0]
    5e78:	0752      	lsls	r2, r2, #29
    5e7a:	d523      	bpl.n	5ec4 <SFE_UBLOX_GNSS::checkCallbacks()+0x834>
  {
    if (storageNMEAGNGGA->callbackPointer != NULL) // If the pointer to the callback has been defined
    5e7c:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    5e80:	b1a5      	cbz	r5, 5eac <SFE_UBLOX_GNSS::checkCallbacks()+0x81c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GNGGA"));
      storageNMEAGNGGA->callbackPointer(*storageNMEAGNGGA->callbackCopy); // Call the callback
    5e82:	68cb      	ldr	r3, [r1, #12]
    5e84:	2255      	movs	r2, #85	; 0x55
    5e86:	f8d1 8000 	ldr.w	r8, [r1]
    5e8a:	4668      	mov	r0, sp
    5e8c:	688e      	ldr	r6, [r1, #8]
    5e8e:	3110      	adds	r1, #16
    5e90:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5e94:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    5e98:	f004 fec8 	bl	ac2c <memcpy>
    5e9c:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    5ea0:	4640      	mov	r0, r8
    5ea2:	4639      	mov	r1, r7
    5ea4:	4632      	mov	r2, r6
    5ea6:	47a8      	blx	r5
    }
    if (storageNMEAGNGGA->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5ea8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    5eac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    5eb0:	b122      	cbz	r2, 5ebc <SFE_UBLOX_GNSS::checkCallbacks()+0x82c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GNGGA"));
      storageNMEAGNGGA->callbackPointerPtr(storageNMEAGNGGA->callbackCopy); // Call the callback
    5eb2:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    5eb6:	4790      	blx	r2
    }
    storageNMEAGNGGA->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    5eb8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    5ebc:	781a      	ldrb	r2, [r3, #0]
    5ebe:	f36f 0282 	bfc	r2, #2, #1
    5ec2:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGPVTG != NULL)                                               // If RAM has been allocated for message storage
    5ec4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    5ec8:	b34b      	cbz	r3, 5f1e <SFE_UBLOX_GNSS::checkCallbacks()+0x88e>
      && (storageNMEAGPVTG->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    5eca:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    5ece:	b331      	cbz	r1, 5f1e <SFE_UBLOX_GNSS::checkCallbacks()+0x88e>
      && (storageNMEAGPVTG->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    5ed0:	781a      	ldrb	r2, [r3, #0]
    5ed2:	0757      	lsls	r7, r2, #29
    5ed4:	d523      	bpl.n	5f1e <SFE_UBLOX_GNSS::checkCallbacks()+0x88e>
  {
    if (storageNMEAGPVTG->callbackPointer != NULL) // If the pointer to the callback has been defined
    5ed6:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    5eda:	b1a5      	cbz	r5, 5f06 <SFE_UBLOX_GNSS::checkCallbacks()+0x876>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GPVTG"));
      storageNMEAGPVTG->callbackPointer(*storageNMEAGPVTG->callbackCopy); // Call the callback
    5edc:	68cb      	ldr	r3, [r1, #12]
    5ede:	2255      	movs	r2, #85	; 0x55
    5ee0:	f8d1 8000 	ldr.w	r8, [r1]
    5ee4:	4668      	mov	r0, sp
    5ee6:	688e      	ldr	r6, [r1, #8]
    5ee8:	3110      	adds	r1, #16
    5eea:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5eee:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    5ef2:	f004 fe9b 	bl	ac2c <memcpy>
    5ef6:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    5efa:	4640      	mov	r0, r8
    5efc:	4639      	mov	r1, r7
    5efe:	4632      	mov	r2, r6
    5f00:	47a8      	blx	r5
    }
    if (storageNMEAGPVTG->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5f02:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    5f06:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    5f0a:	b122      	cbz	r2, 5f16 <SFE_UBLOX_GNSS::checkCallbacks()+0x886>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GPVTG"));
      storageNMEAGPVTG->callbackPointerPtr(storageNMEAGPVTG->callbackCopy); // Call the callback
    5f0c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    5f10:	4790      	blx	r2
    }
    storageNMEAGPVTG->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    5f12:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    5f16:	781a      	ldrb	r2, [r3, #0]
    5f18:	f36f 0282 	bfc	r2, #2, #1
    5f1c:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGNVTG != NULL)                                               // If RAM has been allocated for message storage
    5f1e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    5f22:	b34b      	cbz	r3, 5f78 <SFE_UBLOX_GNSS::checkCallbacks()+0x8e8>
      && (storageNMEAGNVTG->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    5f24:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    5f28:	b331      	cbz	r1, 5f78 <SFE_UBLOX_GNSS::checkCallbacks()+0x8e8>
      && (storageNMEAGNVTG->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    5f2a:	781a      	ldrb	r2, [r3, #0]
    5f2c:	0756      	lsls	r6, r2, #29
    5f2e:	d523      	bpl.n	5f78 <SFE_UBLOX_GNSS::checkCallbacks()+0x8e8>
  {
    if (storageNMEAGNVTG->callbackPointer != NULL) // If the pointer to the callback has been defined
    5f30:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    5f34:	b1a5      	cbz	r5, 5f60 <SFE_UBLOX_GNSS::checkCallbacks()+0x8d0>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GNVTG"));
      storageNMEAGNVTG->callbackPointer(*storageNMEAGNVTG->callbackCopy); // Call the callback
    5f36:	68cb      	ldr	r3, [r1, #12]
    5f38:	2255      	movs	r2, #85	; 0x55
    5f3a:	f8d1 8000 	ldr.w	r8, [r1]
    5f3e:	4668      	mov	r0, sp
    5f40:	688e      	ldr	r6, [r1, #8]
    5f42:	3110      	adds	r1, #16
    5f44:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5f48:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    5f4c:	f004 fe6e 	bl	ac2c <memcpy>
    5f50:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    5f54:	4640      	mov	r0, r8
    5f56:	4639      	mov	r1, r7
    5f58:	4632      	mov	r2, r6
    5f5a:	47a8      	blx	r5
    }
    if (storageNMEAGNVTG->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5f5c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    5f60:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    5f64:	b122      	cbz	r2, 5f70 <SFE_UBLOX_GNSS::checkCallbacks()+0x8e0>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GNVTG"));
      storageNMEAGNVTG->callbackPointerPtr(storageNMEAGNVTG->callbackCopy); // Call the callback
    5f66:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    5f6a:	4790      	blx	r2
    }
    storageNMEAGNVTG->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    5f6c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    5f70:	781a      	ldrb	r2, [r3, #0]
    5f72:	f36f 0282 	bfc	r2, #2, #1
    5f76:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGPRMC != NULL)                                               // If RAM has been allocated for message storage
    5f78:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    5f7c:	b34b      	cbz	r3, 5fd2 <SFE_UBLOX_GNSS::checkCallbacks()+0x942>
      && (storageNMEAGPRMC->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    5f7e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    5f82:	b331      	cbz	r1, 5fd2 <SFE_UBLOX_GNSS::checkCallbacks()+0x942>
      && (storageNMEAGPRMC->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    5f84:	781a      	ldrb	r2, [r3, #0]
    5f86:	0755      	lsls	r5, r2, #29
    5f88:	d523      	bpl.n	5fd2 <SFE_UBLOX_GNSS::checkCallbacks()+0x942>
  {
    if (storageNMEAGPRMC->callbackPointer != NULL) // If the pointer to the callback has been defined
    5f8a:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    5f8e:	b1a5      	cbz	r5, 5fba <SFE_UBLOX_GNSS::checkCallbacks()+0x92a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GPRMC"));
      storageNMEAGPRMC->callbackPointer(*storageNMEAGPRMC->callbackCopy); // Call the callback
    5f90:	68cb      	ldr	r3, [r1, #12]
    5f92:	2255      	movs	r2, #85	; 0x55
    5f94:	f8d1 8000 	ldr.w	r8, [r1]
    5f98:	4668      	mov	r0, sp
    5f9a:	688e      	ldr	r6, [r1, #8]
    5f9c:	3110      	adds	r1, #16
    5f9e:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5fa2:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    5fa6:	f004 fe41 	bl	ac2c <memcpy>
    5faa:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    5fae:	4640      	mov	r0, r8
    5fb0:	4639      	mov	r1, r7
    5fb2:	4632      	mov	r2, r6
    5fb4:	47a8      	blx	r5
    }
    if (storageNMEAGPRMC->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    5fb6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    5fba:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    5fbe:	b122      	cbz	r2, 5fca <SFE_UBLOX_GNSS::checkCallbacks()+0x93a>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GPRMC"));
      storageNMEAGPRMC->callbackPointerPtr(storageNMEAGPRMC->callbackCopy); // Call the callback
    5fc0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    5fc4:	4790      	blx	r2
    }
    storageNMEAGPRMC->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    5fc6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    5fca:	781a      	ldrb	r2, [r3, #0]
    5fcc:	f36f 0282 	bfc	r2, #2, #1
    5fd0:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGNRMC != NULL)                                               // If RAM has been allocated for message storage
    5fd2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    5fd6:	b34b      	cbz	r3, 602c <SFE_UBLOX_GNSS::checkCallbacks()+0x99c>
      && (storageNMEAGNRMC->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    5fd8:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    5fdc:	b331      	cbz	r1, 602c <SFE_UBLOX_GNSS::checkCallbacks()+0x99c>
      && (storageNMEAGNRMC->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    5fde:	781a      	ldrb	r2, [r3, #0]
    5fe0:	0750      	lsls	r0, r2, #29
    5fe2:	d523      	bpl.n	602c <SFE_UBLOX_GNSS::checkCallbacks()+0x99c>
  {
    if (storageNMEAGNRMC->callbackPointer != NULL) // If the pointer to the callback has been defined
    5fe4:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
    5fe8:	b1a5      	cbz	r5, 6014 <SFE_UBLOX_GNSS::checkCallbacks()+0x984>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GNRMC"));
      storageNMEAGNRMC->callbackPointer(*storageNMEAGNRMC->callbackCopy); // Call the callback
    5fea:	68cb      	ldr	r3, [r1, #12]
    5fec:	2255      	movs	r2, #85	; 0x55
    5fee:	f8d1 8000 	ldr.w	r8, [r1]
    5ff2:	4668      	mov	r0, sp
    5ff4:	688e      	ldr	r6, [r1, #8]
    5ff6:	3110      	adds	r1, #16
    5ff8:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    5ffc:	f8cd 3bf4 	str.w	r3, [sp, #3060]	; 0xbf4
    6000:	f004 fe14 	bl	ac2c <memcpy>
    6004:	f8dd 3bf4 	ldr.w	r3, [sp, #3060]	; 0xbf4
    6008:	4640      	mov	r0, r8
    600a:	4639      	mov	r1, r7
    600c:	4632      	mov	r2, r6
    600e:	47a8      	blx	r5
    }
    if (storageNMEAGNRMC->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    6010:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    6014:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    6018:	b122      	cbz	r2, 6024 <SFE_UBLOX_GNSS::checkCallbacks()+0x994>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GNRMC"));
      storageNMEAGNRMC->callbackPointerPtr(storageNMEAGNRMC->callbackCopy); // Call the callback
    601a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    601e:	4790      	blx	r2
    }
    storageNMEAGNRMC->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    6020:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    6024:	781a      	ldrb	r2, [r3, #0]
    6026:	f36f 0282 	bfc	r2, #2, #1
    602a:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGPZDA != NULL)                                               // If RAM has been allocated for message storage
    602c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    6030:	2b00      	cmp	r3, #0
    6032:	d03d      	beq.n	60b0 <SFE_UBLOX_GNSS::checkCallbacks()+0xa20>
      && (storageNMEAGPZDA->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    6034:	6f1d      	ldr	r5, [r3, #112]	; 0x70
    6036:	2d00      	cmp	r5, #0
    6038:	d03a      	beq.n	60b0 <SFE_UBLOX_GNSS::checkCallbacks()+0xa20>
      && (storageNMEAGPZDA->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    603a:	7819      	ldrb	r1, [r3, #0]
    603c:	0749      	lsls	r1, r1, #29
    603e:	d537      	bpl.n	60b0 <SFE_UBLOX_GNSS::checkCallbacks()+0xa20>
  {
    if (storageNMEAGPZDA->callbackPointer != NULL) // If the pointer to the callback has been defined
    6040:	6e9e      	ldr	r6, [r3, #104]	; 0x68
    6042:	b35e      	cbz	r6, 609c <SFE_UBLOX_GNSS::checkCallbacks()+0xa0c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GPZDA"));
      storageNMEAGPZDA->callbackPointer(*storageNMEAGPZDA->callbackCopy); // Call the callback
    6044:	f8d5 a000 	ldr.w	sl, [r5]
    6048:	f105 0c10 	add.w	ip, r5, #16
    604c:	f8d5 9004 	ldr.w	r9, [r5, #4]
    6050:	46eb      	mov	fp, sp
    6052:	f8d5 8008 	ldr.w	r8, [r5, #8]
    6056:	3530      	adds	r5, #48	; 0x30
    6058:	f855 7c24 	ldr.w	r7, [r5, #-36]
    605c:	f8dc 0000 	ldr.w	r0, [ip]
    6060:	f10c 0c10 	add.w	ip, ip, #16
    6064:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    6068:	46de      	mov	lr, fp
    606a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    606e:	f10b 0b10 	add.w	fp, fp, #16
    6072:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    6076:	45ac      	cmp	ip, r5
    6078:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    607c:	d1ee      	bne.n	605c <SFE_UBLOX_GNSS::checkCallbacks()+0x9cc>
    607e:	463b      	mov	r3, r7
    6080:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6084:	f8bc 7000 	ldrh.w	r7, [ip]
    6088:	4650      	mov	r0, sl
    608a:	4649      	mov	r1, r9
    608c:	4642      	mov	r2, r8
    608e:	f8ab 7000 	strh.w	r7, [fp]
    6092:	f88b 5002 	strb.w	r5, [fp, #2]
    6096:	47b0      	blx	r6
    }
    if (storageNMEAGPZDA->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    6098:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    609c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    609e:	b11a      	cbz	r2, 60a8 <SFE_UBLOX_GNSS::checkCallbacks()+0xa18>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GPZDA"));
      storageNMEAGPZDA->callbackPointerPtr(storageNMEAGPZDA->callbackCopy); // Call the callback
    60a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
    60a2:	4790      	blx	r2
    }
    storageNMEAGPZDA->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    60a4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    60a8:	781a      	ldrb	r2, [r3, #0]
    60aa:	f36f 0282 	bfc	r2, #2, #1
    60ae:	701a      	strb	r2, [r3, #0]
  }

  if ((storageNMEAGNZDA != NULL)                                               // If RAM has been allocated for message storage
    60b0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    60b4:	2b00      	cmp	r3, #0
    60b6:	d03d      	beq.n	6134 <SFE_UBLOX_GNSS::checkCallbacks()+0xaa4>
      && (storageNMEAGNZDA->callbackCopy != NULL)                              // If RAM has been allocated for the copy of the data
    60b8:	6f1d      	ldr	r5, [r3, #112]	; 0x70
    60ba:	2d00      	cmp	r5, #0
    60bc:	d03a      	beq.n	6134 <SFE_UBLOX_GNSS::checkCallbacks()+0xaa4>
      && (storageNMEAGNZDA->automaticFlags.flags.bits.callbackCopyValid == 1)) // If the copy of the data is valid
    60be:	7819      	ldrb	r1, [r3, #0]
    60c0:	074a      	lsls	r2, r1, #29
    60c2:	d537      	bpl.n	6134 <SFE_UBLOX_GNSS::checkCallbacks()+0xaa4>
  {
    if (storageNMEAGNZDA->callbackPointer != NULL) // If the pointer to the callback has been defined
    60c4:	6e9e      	ldr	r6, [r3, #104]	; 0x68
    60c6:	b35e      	cbz	r6, 6120 <SFE_UBLOX_GNSS::checkCallbacks()+0xa90>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callback for GNZDA"));
      storageNMEAGNZDA->callbackPointer(*storageNMEAGNZDA->callbackCopy); // Call the callback
    60c8:	f8d5 a000 	ldr.w	sl, [r5]
    60cc:	f105 0c10 	add.w	ip, r5, #16
    60d0:	f8d5 9004 	ldr.w	r9, [r5, #4]
    60d4:	46eb      	mov	fp, sp
    60d6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    60da:	3530      	adds	r5, #48	; 0x30
    60dc:	f855 7c24 	ldr.w	r7, [r5, #-36]
    60e0:	f8dc 0000 	ldr.w	r0, [ip]
    60e4:	f10c 0c10 	add.w	ip, ip, #16
    60e8:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    60ec:	46de      	mov	lr, fp
    60ee:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    60f2:	f10b 0b10 	add.w	fp, fp, #16
    60f6:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    60fa:	45ac      	cmp	ip, r5
    60fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6100:	d1ee      	bne.n	60e0 <SFE_UBLOX_GNSS::checkCallbacks()+0xa50>
    6102:	463b      	mov	r3, r7
    6104:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6108:	f8bc 7000 	ldrh.w	r7, [ip]
    610c:	4650      	mov	r0, sl
    610e:	4649      	mov	r1, r9
    6110:	4642      	mov	r2, r8
    6112:	f8ab 7000 	strh.w	r7, [fp]
    6116:	f88b 5002 	strb.w	r5, [fp, #2]
    611a:	47b0      	blx	r6
    }
    if (storageNMEAGNZDA->callbackPointerPtr != NULL) // If the pointer to the callback has been defined
    611c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    6120:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    6122:	b11a      	cbz	r2, 612c <SFE_UBLOX_GNSS::checkCallbacks()+0xa9c>
    {
      // if (_printDebug == true)
      //   _debugSerial->println(F("checkCallbacks: calling callbackPtr for GNZDA"));
      storageNMEAGNZDA->callbackPointerPtr(storageNMEAGNZDA->callbackCopy); // Call the callback
    6124:	6f18      	ldr	r0, [r3, #112]	; 0x70
    6126:	4790      	blx	r2
    }
    storageNMEAGNZDA->automaticFlags.flags.bits.callbackCopyValid = 0; // Mark the data as stale
    6128:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    612c:	781a      	ldrb	r2, [r3, #0]
    612e:	f36f 0282 	bfc	r2, #2, #1
    6132:	701a      	strb	r2, [r3, #0]
  }
#endif

  checkCallbacksReentrant = false;
    6134:	2300      	movs	r3, #0
    6136:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
    613a:	f60d 3dfc 	addw	sp, sp, #3068	; 0xbfc
    613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6142:	4770      	bx	lr

00006144 <SFE_UBLOX_GNSS::createFileBuffer()>:
  fileBufferMaxAvail = 0;
}

// PRIVATE: Create the file buffer. Called by .begin
bool SFE_UBLOX_GNSS::createFileBuffer(void)
{
    6144:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
    6146:	f8b0 5174 	ldrh.w	r5, [r0, #372]	; 0x174
{
    614a:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
    614c:	b135      	cbz	r5, 615c <SFE_UBLOX_GNSS::createFileBuffer()+0x18>
    }
#endif
    return (false);
  }

  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
    614e:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
    6152:	b1a3      	cbz	r3, 617e <SFE_UBLOX_GNSS::createFileBuffer()+0x3a>
  {                          // This will happen if you call .begin more than once - without calling .end first
#ifndef SFE_UBLOX_REDUCED_PROG_MEM
    if (_printDebug == true)
    6154:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
    6158:	bb00      	cbnz	r0, 619c <SFE_UBLOX_GNSS::createFileBuffer()+0x58>

  fileBufferHead = 0; // Initialize head and tail
  fileBufferTail = 0;

  return (true);
}
    615a:	bd38      	pop	{r3, r4, r5, pc}
    if (_printDebug == true)
    615c:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
    6160:	2800      	cmp	r0, #0
    6162:	d0fa      	beq.n	615a <SFE_UBLOX_GNSS::createFileBuffer()+0x16>
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
    6164:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
    6168:	2250      	movs	r2, #80	; 0x50
    616a:	491c      	ldr	r1, [pc, #112]	; (61dc <SFE_UBLOX_GNSS::createFileBuffer()+0x98>)
    616c:	6823      	ldr	r3, [r4, #0]
    616e:	4620      	mov	r0, r4
    6170:	685b      	ldr	r3, [r3, #4]
    6172:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    6174:	4620      	mov	r0, r4
    6176:	f004 f997 	bl	a4a8 <Print::println()>
    return (false);
    617a:	4628      	mov	r0, r5
}
    617c:	bd38      	pop	{r3, r4, r5, pc}
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
    617e:	4628      	mov	r0, r5
    6180:	f004 fdf0 	bl	ad64 <operator new[](unsigned int)>
  if (_printDebug == true)
    6184:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
    6188:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
  if (_printDebug == true)
    618c:	b99b      	cbnz	r3, 61b6 <SFE_UBLOX_GNSS::createFileBuffer()+0x72>
  fileBufferHead = 0; // Initialize head and tail
    618e:	2300      	movs	r3, #0
  return (true);
    6190:	2001      	movs	r0, #1
  fileBufferHead = 0; // Initialize head and tail
    6192:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
  fileBufferTail = 0;
    6196:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
}
    619a:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
    619c:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    61a0:	2242      	movs	r2, #66	; 0x42
    61a2:	490f      	ldr	r1, [pc, #60]	; (61e0 <SFE_UBLOX_GNSS::createFileBuffer()+0x9c>)
    61a4:	6823      	ldr	r3, [r4, #0]
    61a6:	4620      	mov	r0, r4
    61a8:	685b      	ldr	r3, [r3, #4]
    61aa:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    61ac:	4620      	mov	r0, r4
    61ae:	f004 f97b 	bl	a4a8 <Print::println()>
    return (false);
    61b2:	2000      	movs	r0, #0
}
    61b4:	bd38      	pop	{r3, r4, r5, pc}
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
    61b6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    61ba:	2225      	movs	r2, #37	; 0x25
    61bc:	4909      	ldr	r1, [pc, #36]	; (61e4 <SFE_UBLOX_GNSS::createFileBuffer()+0xa0>)
    61be:	6803      	ldr	r3, [r0, #0]
    61c0:	685b      	ldr	r3, [r3, #4]
    61c2:	4798      	blx	r3
    _debugSerial->println(fileBufferSize);
    61c4:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
	size_t print(int n)				{ return print((long)n); }
    61c8:	f8b4 1174 	ldrh.w	r1, [r4, #372]	; 0x174
    61cc:	4628      	mov	r0, r5
    61ce:	f004 f95f 	bl	a490 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    61d2:	4628      	mov	r0, r5
    61d4:	f004 f968 	bl	a4a8 <Print::println()>
    61d8:	e7d9      	b.n	618e <SFE_UBLOX_GNSS::createFileBuffer()+0x4a>
    61da:	bf00      	nop
    61dc:	200022cc 	.word	0x200022cc
    61e0:	20002320 	.word	0x20002320
    61e4:	20002364 	.word	0x20002364

000061e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>:
  return (true);
}

// PRIVATE: Write theBytes to the file buffer
void SFE_UBLOX_GNSS::writeToFileBuffer(uint8_t *theBytes, uint16_t numBytes)
{
    61e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Start writing at fileBufferHead. Wrap-around if required.
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
    61ec:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
{
    61f0:	4690      	mov	r8, r2
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
    61f2:	f8b0 6174 	ldrh.w	r6, [r0, #372]	; 0x174
{
    61f6:	4605      	mov	r5, r0
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
  {
    bytesBeforeWrapAround = numBytes; // There is enough room for all the data
  }
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
    61f8:	f8d0 0170 	ldr.w	r0, [r0, #368]	; 0x170
{
    61fc:	460f      	mov	r7, r1
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
    61fe:	1af6      	subs	r6, r6, r3
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
    6200:	4418      	add	r0, r3
    6202:	b2b6      	uxth	r6, r6
    6204:	4296      	cmp	r6, r2
    6206:	bf28      	it	cs
    6208:	4616      	movcs	r6, r2

  // Is there any data leftover which we need to copy to the 'bottom' of the buffer?
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
    620a:	eba8 0406 	sub.w	r4, r8, r6
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
    620e:	4632      	mov	r2, r6
    6210:	f004 fd0c 	bl	ac2c <memcpy>
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
    6214:	b2a4      	uxth	r4, r4
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
    6216:	bb0c      	cbnz	r4, 625c <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)+0x74>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
  }
  else
  {
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
    6218:	f8b5 3176 	ldrh.w	r3, [r5, #374]	; 0x176
    621c:	4498      	add	r8, r3
    621e:	fa1f f488 	uxth.w	r4, r8
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
    6222:	f8b5 3178 	ldrh.w	r3, [r5, #376]	; 0x178
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
    6226:	f8a5 4176 	strh.w	r4, [r5, #374]	; 0x176
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
    622a:	42a3      	cmp	r3, r4
    622c:	d809      	bhi.n	6242 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)+0x5a>
    return (fileBufferHead - fileBufferTail);
    622e:	1ae4      	subs	r4, r4, r3
  }

  // Update fileBufferMaxAvail if required
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
  if (bytesInBuffer > fileBufferMaxAvail)
    6230:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
    return (fileBufferHead - fileBufferTail);
    6234:	b2a4      	uxth	r4, r4
  if (bytesInBuffer > fileBufferMaxAvail)
    6236:	42a3      	cmp	r3, r4
    fileBufferMaxAvail = bytesInBuffer;
    6238:	bf38      	it	cc
    623a:	f8a5 417a 	strhcc.w	r4, [r5, #378]	; 0x17a
}
    623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
    6242:	f8b5 2174 	ldrh.w	r2, [r5, #372]	; 0x174
    6246:	1ad3      	subs	r3, r2, r3
    6248:	441c      	add	r4, r3
  if (bytesInBuffer > fileBufferMaxAvail)
    624a:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
    624e:	b2a4      	uxth	r4, r4
  if (bytesInBuffer > fileBufferMaxAvail)
    6250:	42a3      	cmp	r3, r4
    fileBufferMaxAvail = bytesInBuffer;
    6252:	bf38      	it	cc
    6254:	f8a5 417a 	strhcc.w	r4, [r5, #378]	; 0x17a
}
    6258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
    625c:	4622      	mov	r2, r4
    625e:	19b9      	adds	r1, r7, r6
    6260:	f8d5 0170 	ldr.w	r0, [r5, #368]	; 0x170
    6264:	f004 fce2 	bl	ac2c <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
    6268:	e7db      	b.n	6222 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)+0x3a>
    626a:	bf00      	nop

0000626c <SFE_UBLOX_GNSS::storePacket(ubxPacket*)>:
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
    626c:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
{
    6270:	b530      	push	{r4, r5, lr}
    6272:	4604      	mov	r4, r0
    6274:	b083      	sub	sp, #12
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
    6276:	2b00      	cmp	r3, #0
    6278:	d059      	beq.n	632e <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0xc2>
    627a:	f8b0 3174 	ldrh.w	r3, [r0, #372]	; 0x174
    627e:	2b00      	cmp	r3, #0
    6280:	d055      	beq.n	632e <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0xc2>
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
    6282:	f8b0 2176 	ldrh.w	r2, [r0, #374]	; 0x176
    6286:	460d      	mov	r5, r1
    6288:	f8b0 0178 	ldrh.w	r0, [r0, #376]	; 0x178
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
    628c:	8849      	ldrh	r1, [r1, #2]
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
    628e:	4282      	cmp	r2, r0
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
    6290:	f101 0108 	add.w	r1, r1, #8
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
    6294:	bf38      	it	cc
    6296:	18d2      	addcc	r2, r2, r3
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
    6298:	b289      	uxth	r1, r1
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
    629a:	1a12      	subs	r2, r2, r0
    629c:	b292      	uxth	r2, r2
  return (fileBufferSize - fileBufferSpaceUsed());
    629e:	1a9b      	subs	r3, r3, r2
  if (totalLength > fileBufferSpaceAvailable())
    62a0:	b29b      	uxth	r3, r3
    62a2:	4299      	cmp	r1, r3
    62a4:	d914      	bls.n	62d0 <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0x64>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    62a6:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    62aa:	b91b      	cbnz	r3, 62b4 <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0x48>
    62ac:	f894 00f2 	ldrb.w	r0, [r4, #242]	; 0xf2
    62b0:	2800      	cmp	r0, #0
    62b2:	d03a      	beq.n	632a <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0xbe>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
    62b4:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    62b8:	223d      	movs	r2, #61	; 0x3d
    62ba:	4921      	ldr	r1, [pc, #132]	; (6340 <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0xd4>)
    62bc:	6823      	ldr	r3, [r4, #0]
    62be:	4620      	mov	r0, r4
    62c0:	685b      	ldr	r3, [r3, #4]
    62c2:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    62c4:	4620      	mov	r0, r4
    62c6:	f004 f8ef 	bl	a4a8 <Print::println()>
    return (false);
    62ca:	2000      	movs	r0, #0
}
    62cc:	b003      	add	sp, #12
    62ce:	bd30      	pop	{r4, r5, pc}
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
    62d0:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
    62d4:	2202      	movs	r2, #2
    62d6:	4669      	mov	r1, sp
    62d8:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
    62da:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
    62de:	f7ff ff83 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  writeToFileBuffer(&msg->cls, 1);
    62e2:	2201      	movs	r2, #1
    62e4:	4629      	mov	r1, r5
    62e6:	4620      	mov	r0, r4
    62e8:	f7ff ff7e 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  writeToFileBuffer(&msg->id, 1);
    62ec:	2201      	movs	r2, #1
    62ee:	4620      	mov	r0, r4
    62f0:	18a9      	adds	r1, r5, r2
    62f2:	f7ff ff79 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  msg_length[0] = msg->len & 0xFF;
    62f6:	886b      	ldrh	r3, [r5, #2]
  writeToFileBuffer(msg_length, 2);
    62f8:	2202      	movs	r2, #2
    62fa:	a901      	add	r1, sp, #4
    62fc:	4620      	mov	r0, r4
  msg_length[0] = msg->len & 0xFF;
    62fe:	f8ad 3004 	strh.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
    6302:	f7ff ff71 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  writeToFileBuffer(msg->payload, msg->len);
    6306:	886a      	ldrh	r2, [r5, #2]
    6308:	68a9      	ldr	r1, [r5, #8]
    630a:	4620      	mov	r0, r4
    630c:	f7ff ff6c 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  writeToFileBuffer(&msg->checksumA, 1);
    6310:	2201      	movs	r2, #1
    6312:	f105 010c 	add.w	r1, r5, #12
    6316:	4620      	mov	r0, r4
    6318:	f7ff ff66 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  writeToFileBuffer(&msg->checksumB, 1);
    631c:	4620      	mov	r0, r4
    631e:	2201      	movs	r2, #1
    6320:	f105 010d 	add.w	r1, r5, #13
    6324:	f7ff ff60 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  return (true);
    6328:	2001      	movs	r0, #1
}
    632a:	b003      	add	sp, #12
    632c:	bd30      	pop	{r4, r5, pc}
    if (_printDebug == true)
    632e:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
    6332:	2800      	cmp	r0, #0
    6334:	d0f9      	beq.n	632a <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0xbe>
      _debugSerial->println(F("storePacket: file buffer not available!"));
    6336:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    633a:	2227      	movs	r2, #39	; 0x27
    633c:	4901      	ldr	r1, [pc, #4]	; (6344 <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0xd8>)
    633e:	e7bd      	b.n	62bc <SFE_UBLOX_GNSS::storePacket(ubxPacket*)+0x50>
    6340:	200020ac 	.word	0x200020ac
    6344:	20002084 	.word	0x20002084

00006348 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)>:
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
    6348:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
{
    634c:	b510      	push	{r4, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
    634e:	b35b      	cbz	r3, 63a8 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x60>
    6350:	f8b0 3174 	ldrh.w	r3, [r0, #372]	; 0x174
    6354:	b343      	cbz	r3, 63a8 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x60>
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
    6356:	f8b0 c176 	ldrh.w	ip, [r0, #374]	; 0x176
    635a:	f8b0 e178 	ldrh.w	lr, [r0, #376]	; 0x178
    635e:	45f4      	cmp	ip, lr
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
    6360:	bf38      	it	cc
    6362:	449c      	addcc	ip, r3
    6364:	ebac 0c0e 	sub.w	ip, ip, lr
    6368:	fa1f fc8c 	uxth.w	ip, ip
  return (fileBufferSize - fileBufferSpaceUsed());
    636c:	eba3 030c 	sub.w	r3, r3, ip
  if (numBytes > fileBufferSpaceAvailable())
    6370:	b29b      	uxth	r3, r3
    6372:	429a      	cmp	r2, r3
    6374:	d913      	bls.n	639e <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x56>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    6376:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    637a:	b913      	cbnz	r3, 6382 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x3a>
    637c:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
    6380:	b183      	cbz	r3, 63a4 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x5c>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
    6382:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    6386:	2240      	movs	r2, #64	; 0x40
    6388:	490c      	ldr	r1, [pc, #48]	; (63bc <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x74>)
    638a:	6823      	ldr	r3, [r4, #0]
    638c:	4620      	mov	r0, r4
    638e:	685b      	ldr	r3, [r3, #4]
    6390:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    6392:	4620      	mov	r0, r4
    6394:	f004 f888 	bl	a4a8 <Print::println()>
    return (false);
    6398:	2300      	movs	r3, #0
}
    639a:	4618      	mov	r0, r3
    639c:	bd10      	pop	{r4, pc}
  writeToFileBuffer(theBytes, numBytes);
    639e:	f7ff ff23 	bl	61e8 <SFE_UBLOX_GNSS::writeToFileBuffer(unsigned char*, unsigned short)>
  return (true);
    63a2:	2301      	movs	r3, #1
}
    63a4:	4618      	mov	r0, r3
    63a6:	bd10      	pop	{r4, pc}
    if (_printDebug == true)
    63a8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    63ac:	2b00      	cmp	r3, #0
    63ae:	d0f9      	beq.n	63a4 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x5c>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
    63b0:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    63b4:	222a      	movs	r2, #42	; 0x2a
    63b6:	4902      	ldr	r1, [pc, #8]	; (63c0 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x78>)
    63b8:	e7e7      	b.n	638a <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)+0x42>
    63ba:	bf00      	nop
    63bc:	20002288 	.word	0x20002288
    63c0:	2000225c 	.word	0x2000225c

000063c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>:

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(const ubxPacket *msg, uint16_t spotToStart)
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    63c4:	6883      	ldr	r3, [r0, #8]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    63c6:	185a      	adds	r2, r3, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    63c8:	5c59      	ldrb	r1, [r3, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    63ca:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    63cc:	f892 c001 	ldrb.w	ip, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    63d0:	041b      	lsls	r3, r3, #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    63d2:	78d0      	ldrb	r0, [r2, #3]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    63d4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    63d8:	430b      	orrs	r3, r1
  return (val);
}
    63da:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    63de:	4770      	bx	lr

000063e0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)>:
{
    63e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
    63e4:	780b      	ldrb	r3, [r1, #0]
{
    63e6:	460c      	mov	r4, r1
    63e8:	4605      	mov	r5, r0
  switch (msg->cls)
    63ea:	3b01      	subs	r3, #1
    63ec:	2b27      	cmp	r3, #39	; 0x27
    63ee:	d857      	bhi.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    63f0:	e8df f013 	tbh	[pc, r3, lsl #1]
    63f4:	00a40028 	.word	0x00a40028
    63f8:	00560056 	.word	0x00560056
    63fc:	016b0056 	.word	0x016b0056
    6400:	00560056 	.word	0x00560056
    6404:	00560056 	.word	0x00560056
    6408:	00560056 	.word	0x00560056
    640c:	00560190 	.word	0x00560190
    6410:	021d0056 	.word	0x021d0056
    6414:	00560056 	.word	0x00560056
    6418:	005602a0 	.word	0x005602a0
    641c:	00560056 	.word	0x00560056
    6420:	00560056 	.word	0x00560056
    6424:	00560056 	.word	0x00560056
    6428:	00560056 	.word	0x00560056
    642c:	00560056 	.word	0x00560056
    6430:	00560056 	.word	0x00560056
    6434:	00560056 	.word	0x00560056
    6438:	00560056 	.word	0x00560056
    643c:	00560056 	.word	0x00560056
    6440:	00580056 	.word	0x00580056
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
    6444:	680b      	ldr	r3, [r1, #0]
    6446:	4aae      	ldr	r2, [pc, #696]	; (6700 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x320>)
    6448:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    644c:	4293      	cmp	r3, r2
    644e:	f000 84da 	beq.w	6e06 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xa26>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
    6452:	4aac      	ldr	r2, [pc, #688]	; (6704 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x324>)
    6454:	4293      	cmp	r3, r2
    6456:	f000 863e 	beq.w	70d6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xcf6>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
    645a:	4aab      	ldr	r2, [pc, #684]	; (6708 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x328>)
    645c:	4293      	cmp	r3, r2
    645e:	f040 82e1 	bne.w	6a24 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x644>
      if (packetUBXNAVDOP != NULL)
    6462:	6983      	ldr	r3, [r0, #24]
    6464:	b1e3      	cbz	r3, 64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6466:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6468:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    646c:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
    646e:	6059      	str	r1, [r3, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
    6470:	8891      	ldrh	r1, [r2, #4]
    6472:	8119      	strh	r1, [r3, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
    6474:	88d1      	ldrh	r1, [r2, #6]
    6476:	8159      	strh	r1, [r3, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
    6478:	8911      	ldrh	r1, [r2, #8]
    647a:	8199      	strh	r1, [r3, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
    647c:	8951      	ldrh	r1, [r2, #10]
    647e:	81d9      	strh	r1, [r3, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
    6480:	8991      	ldrh	r1, [r2, #12]
    6482:	8219      	strh	r1, [r3, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
    6484:	89d1      	ldrh	r1, [r2, #14]
    6486:	8259      	strh	r1, [r3, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
    6488:	8a11      	ldrh	r1, [r2, #16]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    648a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
    648c:	8299      	strh	r1, [r3, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    648e:	6198      	str	r0, [r3, #24]
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6490:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6492:	b112      	cbz	r2, 649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6494:	070e      	lsls	r6, r1, #28
    6496:	f141 8090 	bpl.w	75ba <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x11da>
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
    649a:	074b      	lsls	r3, r1, #29
    649c:	f100 831c 	bmi.w	6ad8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f8>
}
    64a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
    64a4:	680b      	ldr	r3, [r1, #0]
    64a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    64aa:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
    64ae:	f000 840f 	beq.w	6cd0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8f0>
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
    64b2:	4a96      	ldr	r2, [pc, #600]	; (670c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x32c>)
    64b4:	4293      	cmp	r3, r2
    64b6:	f000 85d1 	beq.w	705c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc7c>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
    64ba:	4a95      	ldr	r2, [pc, #596]	; (6710 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x330>)
    64bc:	4293      	cmp	r3, r2
    64be:	d1ef      	bne.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXHNRINS != NULL)
    64c0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    64c4:	2b00      	cmp	r3, #0
    64c6:	d0eb      	beq.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    64c8:	688a      	ldr	r2, [r1, #8]
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    64ca:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64ce:	6811      	ldr	r1, [r2, #0]
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
    64d0:	6059      	str	r1, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64d2:	6891      	ldr	r1, [r2, #8]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
    64d4:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64d6:	68d1      	ldr	r1, [r2, #12]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
    64d8:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64da:	6911      	ldr	r1, [r2, #16]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
    64dc:	6159      	str	r1, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64de:	6951      	ldr	r1, [r2, #20]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
    64e0:	6199      	str	r1, [r3, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64e2:	6991      	ldr	r1, [r2, #24]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
    64e4:	61d9      	str	r1, [r3, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64e6:	69d1      	ldr	r1, [r2, #28]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
    64e8:	6219      	str	r1, [r3, #32]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    64ea:	6a11      	ldr	r1, [r2, #32]
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    64ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
    64ee:	6259      	str	r1, [r3, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    64f0:	6298      	str	r0, [r3, #40]	; 0x28
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    64f2:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    64f4:	2a00      	cmp	r2, #0
    64f6:	d0d0      	beq.n	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    64f8:	0708      	lsls	r0, r1, #28
    64fa:	d4ce      	bmi.n	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
    64fc:	1d19      	adds	r1, r3, #4
    64fe:	3324      	adds	r3, #36	; 0x24
    6500:	f8d1 c000 	ldr.w	ip, [r1]
    6504:	3110      	adds	r1, #16
    6506:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    650a:	3210      	adds	r2, #16
    650c:	f851 6c08 	ldr.w	r6, [r1, #-8]
    6510:	f851 0c04 	ldr.w	r0, [r1, #-4]
    6514:	4299      	cmp	r1, r3
    6516:	f842 cc10 	str.w	ip, [r2, #-16]
    651a:	f842 7c0c 	str.w	r7, [r2, #-12]
    651e:	f842 6c08 	str.w	r6, [r2, #-8]
    6522:	f842 0c04 	str.w	r0, [r2, #-4]
    6526:	d1eb      	bne.n	6500 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x120>
    6528:	680b      	ldr	r3, [r1, #0]
    652a:	6013      	str	r3, [r2, #0]
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
    652c:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    6530:	7813      	ldrb	r3, [r2, #0]
    6532:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
    6536:	4619      	mov	r1, r3
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
    6538:	7013      	strb	r3, [r2, #0]
    653a:	e7ae      	b.n	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
    if (msg->id == UBX_RXM_PMP)
    653c:	784b      	ldrb	r3, [r1, #1]
    653e:	2b72      	cmp	r3, #114	; 0x72
    6540:	f000 84c8 	beq.w	6ed4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xaf4>
    else if (msg->id == UBX_RXM_QZSSL6)
    6544:	2b73      	cmp	r3, #115	; 0x73
    6546:	f000 85f4 	beq.w	7132 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xd52>
    else if (msg->id == UBX_RXM_COR)
    654a:	2b34      	cmp	r3, #52	; 0x34
    654c:	f000 832f 	beq.w	6bae <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x7ce>
    else if (msg->id == UBX_RXM_SFRBX)
    6550:	2b13      	cmp	r3, #19
    6552:	f000 86a5 	beq.w	72a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xec0>
    else if (msg->id == UBX_RXM_RAWX)
    6556:	2b15      	cmp	r3, #21
    6558:	d1a2      	bne.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXRXMRAWX != NULL)
    655a:	6f02      	ldr	r2, [r0, #112]	; 0x70
    655c:	2a00      	cmp	r2, #0
    655e:	d09f      	beq.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    6560:	2300      	movs	r3, #0
    6562:	e000      	b.n	6566 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x186>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
    6564:	6f2a      	ldr	r2, [r5, #112]	; 0x70
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(const ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
    6566:	68a1      	ldr	r1, [r4, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
    6568:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
    656a:	5cc9      	ldrb	r1, [r1, r3]
        for (uint8_t i = 0; i < 8; i++)
    656c:	3301      	adds	r3, #1
    656e:	2b08      	cmp	r3, #8
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
    6570:	7091      	strb	r1, [r2, #2]
        for (uint8_t i = 0; i < 8; i++)
    6572:	d1f7      	bne.n	6564 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x184>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    6574:	68a2      	ldr	r2, [r4, #8]
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
    6576:	f04f 0e24 	mov.w	lr, #36	; 0x24
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
    657a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
    657c:	f04f 0c00 	mov.w	ip, #0
    6580:	8911      	ldrh	r1, [r2, #8]
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
    6582:	8159      	strh	r1, [r3, #10]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
    6584:	7a92      	ldrb	r2, [r2, #10]
    6586:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
    6588:	68a2      	ldr	r2, [r4, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
    658a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  return (msg->payload[spotToStart]);
    658c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
    658e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
    6590:	68a2      	ldr	r2, [r4, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
    6592:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  return (msg->payload[spotToStart]);
    6594:	7b11      	ldrb	r1, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
    6596:	7399      	strb	r1, [r3, #14]
  return (msg->payload[spotToStart]);
    6598:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
    659a:	73da      	strb	r2, [r3, #15]
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
    659c:	6f29      	ldr	r1, [r5, #112]	; 0x70
    659e:	7b4a      	ldrb	r2, [r1, #13]
    65a0:	fa5f f38c 	uxtb.w	r3, ip
    65a4:	429a      	cmp	r2, r3
    65a6:	d978      	bls.n	669a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x2ba>
    65a8:	8863      	ldrh	r3, [r4, #2]
    65aa:	ea4f 174c 	mov.w	r7, ip, lsl #5
    65ae:	3b10      	subs	r3, #16
    65b0:	ebb3 1f4c 	cmp.w	r3, ip, lsl #5
    65b4:	dd71      	ble.n	669a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x2ba>
          for (uint8_t j = 0; j < 8; j++)
    65b6:	f1ae 000c 	sub.w	r0, lr, #12
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
    65ba:	2601      	movs	r6, #1
    65bc:	2200      	movs	r2, #0
    65be:	e010      	b.n	65e2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x202>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
    65c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    65c2:	f100 0808 	add.w	r8, r0, #8
  return (msg->payload[spotToStart]);
    65c6:	68a1      	ldr	r1, [r4, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
    65c8:	443b      	add	r3, r7
  return (msg->payload[spotToStart]);
    65ca:	fa1f f888 	uxth.w	r8, r8
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
    65ce:	4413      	add	r3, r2
  return (msg->payload[spotToStart]);
    65d0:	f811 1008 	ldrb.w	r1, [r1, r8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
    65d4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
    65d8:	3601      	adds	r6, #1
    65da:	3201      	adds	r2, #1
    65dc:	3001      	adds	r0, #1
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
    65de:	6f29      	ldr	r1, [r5, #112]	; 0x70
    65e0:	b2f6      	uxtb	r6, r6
  return (msg->payload[spotToStart]);
    65e2:	68a3      	ldr	r3, [r4, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
    65e4:	4439      	add	r1, r7
            if (j < 4)
    65e6:	2a03      	cmp	r2, #3
  return (msg->payload[spotToStart]);
    65e8:	4403      	add	r3, r0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
    65ea:	4411      	add	r1, r2
  return (msg->payload[spotToStart]);
    65ec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
    65f0:	748b      	strb	r3, [r1, #18]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
    65f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  return (msg->payload[spotToStart]);
    65f4:	68a1      	ldr	r1, [r4, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
    65f6:	443b      	add	r3, r7
  return (msg->payload[spotToStart]);
    65f8:	5c09      	ldrb	r1, [r1, r0]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
    65fa:	4413      	add	r3, r2
    65fc:	7699      	strb	r1, [r3, #26]
            if (j < 4)
    65fe:	d9df      	bls.n	65c0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1e0>
          for (uint8_t j = 0; j < 8; j++)
    6600:	2e08      	cmp	r6, #8
    6602:	d1e9      	bne.n	65d8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1f8>
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
    6604:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6606:	f10c 0c01 	add.w	ip, ip, #1
  return (msg->payload[spotToStart]);
    660a:	68a2      	ldr	r2, [r4, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
    660c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
    6610:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
  return (msg->payload[spotToStart]);
    6614:	f812 200e 	ldrb.w	r2, [r2, lr]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
    6618:	719a      	strb	r2, [r3, #6]
  return (msg->payload[spotToStart]);
    661a:	68a3      	ldr	r3, [r4, #8]
    661c:	4473      	add	r3, lr
    661e:	785a      	ldrb	r2, [r3, #1]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
    6620:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6622:	eb03 134c 	add.w	r3, r3, ip, lsl #5
    6626:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
    6628:	68a3      	ldr	r3, [r4, #8]
    662a:	4473      	add	r3, lr
    662c:	789a      	ldrb	r2, [r3, #2]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
    662e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6630:	eb03 134c 	add.w	r3, r3, ip, lsl #5
    6634:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
    6636:	68a3      	ldr	r3, [r4, #8]
    6638:	4473      	add	r3, lr
    663a:	78da      	ldrb	r2, [r3, #3]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
    663c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    663e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
    6642:	725a      	strb	r2, [r3, #9]
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    6644:	68a3      	ldr	r3, [r4, #8]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
    6646:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    6648:	4473      	add	r3, lr
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
    664a:	443a      	add	r2, r7
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    664c:	7958      	ldrb	r0, [r3, #5]
    664e:	7919      	ldrb	r1, [r3, #4]
    6650:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
    6654:	8551      	strh	r1, [r2, #42]	; 0x2a
  return (msg->payload[spotToStart]);
    6656:	799b      	ldrb	r3, [r3, #6]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
    6658:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  return (msg->payload[spotToStart]);
    665c:	68a3      	ldr	r3, [r4, #8]
    665e:	4473      	add	r3, lr
    6660:	79da      	ldrb	r2, [r3, #7]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
    6662:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6664:	443b      	add	r3, r7
    6666:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
    666a:	68a3      	ldr	r3, [r4, #8]
    666c:	4473      	add	r3, lr
    666e:	7a1a      	ldrb	r2, [r3, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
    6670:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6672:	443b      	add	r3, r7
    6674:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
    6678:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  return (msg->payload[spotToStart]);
    667a:	68a2      	ldr	r2, [r4, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
    667c:	443b      	add	r3, r7
  return (msg->payload[spotToStart]);
    667e:	4472      	add	r2, lr
    6680:	7a52      	ldrb	r2, [r2, #9]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
    6682:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  return (msg->payload[spotToStart]);
    6686:	68a3      	ldr	r3, [r4, #8]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
    6688:	6f29      	ldr	r1, [r5, #112]	; 0x70
  return (msg->payload[spotToStart]);
    668a:	4473      	add	r3, lr
    668c:	f10e 0e20 	add.w	lr, lr, #32
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
    6690:	440f      	add	r7, r1
  return (msg->payload[spotToStart]);
    6692:	7a9b      	ldrb	r3, [r3, #10]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
    6694:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
    6698:	d181      	bne.n	659e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1be>
        packetUBXRXMRAWX->moduleQueried = true;
    669a:	2301      	movs	r3, #1
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    669c:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
        packetUBXRXMRAWX->moduleQueried = true;
    66a0:	f881 3b92 	strb.w	r3, [r1, #2962]	; 0xb92
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    66a4:	780b      	ldrb	r3, [r1, #0]
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    66a6:	2800      	cmp	r0, #0
    66a8:	f000 8213 	beq.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    66ac:	071e      	lsls	r6, r3, #28
    66ae:	f100 8210 	bmi.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
    66b2:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    66b6:	3102      	adds	r1, #2
    66b8:	f004 fab8 	bl	ac2c <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
    66bc:	6f29      	ldr	r1, [r5, #112]	; 0x70
    66be:	780a      	ldrb	r2, [r1, #0]
    66c0:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
    66c4:	4613      	mov	r3, r2
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
    66c6:	700a      	strb	r2, [r1, #0]
    66c8:	e203      	b.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
    66ca:	680b      	ldr	r3, [r1, #0]
    66cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    66d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
    66d4:	f000 83e6 	beq.w	6ea4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xac4>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
    66d8:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
    66dc:	f47f aee0 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXCFGRATE != NULL)
    66e0:	6f83      	ldr	r3, [r0, #120]	; 0x78
    66e2:	2b00      	cmp	r3, #0
    66e4:	f43f aedc 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    66e8:	688a      	ldr	r2, [r1, #8]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    66ea:	f04f 31ff 	mov.w	r1, #4294967295
    66ee:	8810      	ldrh	r0, [r2, #0]
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
    66f0:	8058      	strh	r0, [r3, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
    66f2:	8850      	ldrh	r0, [r2, #2]
    66f4:	8098      	strh	r0, [r3, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
    66f6:	8892      	ldrh	r2, [r2, #4]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    66f8:	6099      	str	r1, [r3, #8]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
    66fa:	80da      	strh	r2, [r3, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    66fc:	e6d0      	b.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    66fe:	bf00      	nop
    6700:	00140100 	.word	0x00140100
    6704:	00100300 	.word	0x00100300
    6708:	00120400 	.word	0x00120400
    670c:	00200100 	.word	0x00200100
    6710:	00240200 	.word	0x00240200
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
    6714:	680b      	ldr	r3, [r1, #0]
    6716:	4a84      	ldr	r2, [pc, #528]	; (6928 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x548>)
    6718:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    671c:	4293      	cmp	r3, r2
    671e:	f000 8334 	beq.w	6d8a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x9aa>
    else if (msg->id == UBX_TIM_SMEAS && msg->len <= UBX_TIM_SMEAS_MAX_LEN)
    6722:	784b      	ldrb	r3, [r1, #1]
    6724:	2b13      	cmp	r3, #19
    6726:	f47f aebb 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    672a:	884b      	ldrh	r3, [r1, #2]
    672c:	2b9c      	cmp	r3, #156	; 0x9c
    672e:	f63f aeb7 	bhi.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXTIMSMEAS != NULL)
    6732:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    6734:	2b00      	cmp	r3, #0
    6736:	f43f aeb3 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    673a:	688a      	ldr	r2, [r1, #8]
    673c:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMSMEAS->data.version = extractByte(msg, 0);
    673e:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
    6740:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMSMEAS->data.numMeas = extractByte(msg, 1);
    6742:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  return (msg->payload[spotToStart]);
    6744:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMSMEAS->data.numMeas = extractByte(msg, 1);
    6746:	715a      	strb	r2, [r3, #5]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6748:	f8d4 c008 	ldr.w	ip, [r4, #8]
        packetUBXTIMSMEAS->data.iTOW = extractLong(msg, 4);
    674c:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    674e:	f8dc 3004 	ldr.w	r3, [ip, #4]
        packetUBXTIMSMEAS->data.iTOW = extractLong(msg, 4);
    6752:	608b      	str	r3, [r1, #8]
        for (int i = 0; i < packetUBXTIMSMEAS->data.numMeas; i++) {
    6754:	794b      	ldrb	r3, [r1, #5]
    6756:	2b00      	cmp	r3, #0
    6758:	d05b      	beq.n	6812 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x432>
    675a:	260c      	movs	r6, #12
    675c:	2700      	movs	r7, #0
          packetUBXTIMSMEAS->data.data[i].sourceId = extractByte(msg, 12 + 24 * i);
    675e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  return (msg->payload[spotToStart]);
    6762:	f81c 3006 	ldrb.w	r3, [ip, r6]
        for (int i = 0; i < packetUBXTIMSMEAS->data.numMeas; i++) {
    6766:	3701      	adds	r7, #1
          packetUBXTIMSMEAS->data.data[i].sourceId = extractByte(msg, 12 + 24 * i);
    6768:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    676c:	740b      	strb	r3, [r1, #16]
  return (msg->payload[spotToStart]);
    676e:	68a1      	ldr	r1, [r4, #8]
          packetUBXTIMSMEAS->data.data[i].flags.all = extractByte(msg, 13 + 24 * i);
    6770:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  return (msg->payload[spotToStart]);
    6772:	4431      	add	r1, r6
          packetUBXTIMSMEAS->data.data[i].flags.all = extractByte(msg, 13 + 24 * i);
    6774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  return (msg->payload[spotToStart]);
    6778:	7848      	ldrb	r0, [r1, #1]
          packetUBXTIMSMEAS->data.data[i].flags.all = extractByte(msg, 13 + 24 * i);
    677a:	7458      	strb	r0, [r3, #17]
          packetUBXTIMSMEAS->data.data[i].phaseOffsetFrac = extractSignedChar(msg, 14 + 24 * i);
    677c:	7889      	ldrb	r1, [r1, #2]
    677e:	7499      	strb	r1, [r3, #18]
  return (msg->payload[spotToStart]);
    6780:	68a3      	ldr	r3, [r4, #8]
    6782:	4433      	add	r3, r6
    6784:	78d9      	ldrb	r1, [r3, #3]
          packetUBXTIMSMEAS->data.data[i].phaseUncFrac = extractByte(msg, 15 + 24 * i);
    6786:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    6788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    678c:	74d9      	strb	r1, [r3, #19]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    678e:	f8d4 c008 	ldr.w	ip, [r4, #8]
          packetUBXTIMSMEAS->data.data[i].phaseOffset = extractSignedLong(msg, 16 + 24 * i);
    6792:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    6794:	eb0c 0306 	add.w	r3, ip, r6
    6798:	3618      	adds	r6, #24
          packetUBXTIMSMEAS->data.data[i].phaseOffset = extractSignedLong(msg, 16 + 24 * i);
    679a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    679e:	f893 e005 	ldrb.w	lr, [r3, #5]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    67a2:	7918      	ldrb	r0, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    67a4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
    67a8:	f893 e006 	ldrb.w	lr, [r3, #6]
    67ac:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    67b0:	f893 e007 	ldrb.w	lr, [r3, #7]
    67b4:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
          packetUBXTIMSMEAS->data.data[i].phaseOffset = extractSignedLong(msg, 16 + 24 * i);
    67b8:	6150      	str	r0, [r2, #20]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    67ba:	f893 e009 	ldrb.w	lr, [r3, #9]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    67be:	7a18      	ldrb	r0, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    67c0:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
    67c4:	f893 e00a 	ldrb.w	lr, [r3, #10]
    67c8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    67cc:	f893 e00b 	ldrb.w	lr, [r3, #11]
    67d0:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
          packetUBXTIMSMEAS->data.data[i].phaseUnc = extractLong(msg, 20 + 24 * i);
    67d4:	6190      	str	r0, [r2, #24]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    67d6:	f893 e011 	ldrb.w	lr, [r3, #17]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    67da:	7c18      	ldrb	r0, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    67dc:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
    67e0:	f893 e012 	ldrb.w	lr, [r3, #18]
    67e4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    67e8:	f893 e013 	ldrb.w	lr, [r3, #19]
    67ec:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
          packetUBXTIMSMEAS->data.data[i].freqOffset = extractSignedLong(msg, 28 + 24 * i);
    67f0:	6210      	str	r0, [r2, #32]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    67f2:	f893 e015 	ldrb.w	lr, [r3, #21]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    67f6:	7d18      	ldrb	r0, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    67f8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
    67fc:	f893 e016 	ldrb.w	lr, [r3, #22]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6800:	7ddb      	ldrb	r3, [r3, #23]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6802:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6806:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
          packetUBXTIMSMEAS->data.data[i].freqUnc = extractLong(msg, 32 + 24 * i);
    680a:	6253      	str	r3, [r2, #36]	; 0x24
        for (int i = 0; i < packetUBXTIMSMEAS->data.numMeas; i++) {
    680c:	794b      	ldrb	r3, [r1, #5]
    680e:	42bb      	cmp	r3, r7
    6810:	dca5      	bgt.n	675e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x37e>
        packetUBXTIMSMEAS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6812:	f04f 33ff 	mov.w	r3, #4294967295
        if ((packetUBXTIMSMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6816:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
        packetUBXTIMSMEAS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    681a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        if ((packetUBXTIMSMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    681e:	b118      	cbz	r0, 6828 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x448>
            && (packetUBXTIMSMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6820:	780b      	ldrb	r3, [r1, #0]
    6822:	071b      	lsls	r3, r3, #28
    6824:	f140 86db 	bpl.w	75de <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x11fe>
        if (packetUBXTIMSMEAS->automaticFlags.flags.bits.addToFileBuffer)
    6828:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	e151      	b.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
    682e:	680b      	ldr	r3, [r1, #0]
    6830:	4a3e      	ldr	r2, [pc, #248]	; (692c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x54c>)
    6832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6836:	4293      	cmp	r3, r2
    6838:	f000 8311 	beq.w	6e5e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xa7e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
    683c:	4a3c      	ldr	r2, [pc, #240]	; (6930 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x550>)
    683e:	4293      	cmp	r3, r2
    6840:	f000 83ca 	beq.w	6fd8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xbf8>
    else if (msg->id == UBX_ESF_MEAS)
    6844:	784b      	ldrb	r3, [r1, #1]
    6846:	2b02      	cmp	r3, #2
    6848:	f000 814c 	beq.w	6ae4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x704>
    else if (msg->id == UBX_ESF_RAW)
    684c:	2b03      	cmp	r3, #3
    684e:	f000 84d4 	beq.w	71fa <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xe1a>
    else if (msg->id == UBX_ESF_STATUS)
    6852:	2b10      	cmp	r3, #16
    6854:	f47f ae24 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXESFSTATUS != NULL)
    6858:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
    685c:	2900      	cmp	r1, #0
    685e:	f43f ae1f 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6862:	68a0      	ldr	r0, [r4, #8]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
    6864:	461a      	mov	r2, r3
    6866:	2300      	movs	r3, #0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6868:	6806      	ldr	r6, [r0, #0]
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
    686a:	604e      	str	r6, [r1, #4]
  return (msg->payload[spotToStart]);
    686c:	7900      	ldrb	r0, [r0, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
    686e:	7208      	strb	r0, [r1, #8]
  return (msg->payload[spotToStart]);
    6870:	68a0      	ldr	r0, [r4, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
    6872:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
  return (msg->payload[spotToStart]);
    6876:	7b00      	ldrb	r0, [r0, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
    6878:	7408      	strb	r0, [r1, #16]
  return (msg->payload[spotToStart]);
    687a:	68a0      	ldr	r0, [r4, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
    687c:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
  return (msg->payload[spotToStart]);
    6880:	7bc0      	ldrb	r0, [r0, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
    6882:	74c8      	strb	r0, [r1, #19]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
    6884:	f8d5 7094 	ldr.w	r7, [r5, #148]	; 0x94
    6888:	7cfe      	ldrb	r6, [r7, #19]
    688a:	b298      	uxth	r0, r3
    688c:	0099      	lsls	r1, r3, #2
    688e:	4286      	cmp	r6, r0
    6890:	4439      	add	r1, r7
    6892:	d918      	bls.n	68c6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x4e6>
    6894:	8860      	ldrh	r0, [r4, #2]
    6896:	3810      	subs	r0, #16
    6898:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    689c:	dd13      	ble.n	68c6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x4e6>
  return (msg->payload[spotToStart]);
    689e:	68a0      	ldr	r0, [r4, #8]
    68a0:	5c86      	ldrb	r6, [r0, r2]
    68a2:	4410      	add	r0, r2
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
    68a4:	750e      	strb	r6, [r1, #20]
  return (msg->payload[spotToStart]);
    68a6:	7846      	ldrb	r6, [r0, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
    68a8:	754e      	strb	r6, [r1, #21]
  return (msg->payload[spotToStart]);
    68aa:	7880      	ldrb	r0, [r0, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
    68ac:	7588      	strb	r0, [r1, #22]
  return (msg->payload[spotToStart]);
    68ae:	68a1      	ldr	r1, [r4, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
    68b0:	f8d5 7094 	ldr.w	r7, [r5, #148]	; 0x94
  return (msg->payload[spotToStart]);
    68b4:	4411      	add	r1, r2
    68b6:	3204      	adds	r2, #4
    68b8:	78c8      	ldrb	r0, [r1, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
    68ba:	eb07 0183 	add.w	r1, r7, r3, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
    68be:	3301      	adds	r3, #1
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
    68c0:	75c8      	strb	r0, [r1, #23]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
    68c2:	2b07      	cmp	r3, #7
    68c4:	d1e0      	bne.n	6888 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x4a8>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    68c6:	f04f 33ff 	mov.w	r3, #4294967295
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    68ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    68cc:	633b      	str	r3, [r7, #48]	; 0x30
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    68ce:	783b      	ldrb	r3, [r7, #0]
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    68d0:	2a00      	cmp	r2, #0
    68d2:	f000 80fe 	beq.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    68d6:	0719      	lsls	r1, r3, #28
    68d8:	f100 80fb 	bmi.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
    68dc:	1d39      	adds	r1, r7, #4
    68de:	f107 0324 	add.w	r3, r7, #36	; 0x24
    68e2:	f8d1 c000 	ldr.w	ip, [r1]
    68e6:	3110      	adds	r1, #16
    68e8:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    68ec:	3210      	adds	r2, #16
    68ee:	f851 6c08 	ldr.w	r6, [r1, #-8]
    68f2:	f851 0c04 	ldr.w	r0, [r1, #-4]
    68f6:	4299      	cmp	r1, r3
    68f8:	f842 cc10 	str.w	ip, [r2, #-16]
    68fc:	f842 7c0c 	str.w	r7, [r2, #-12]
    6900:	f842 6c08 	str.w	r6, [r2, #-8]
    6904:	f842 0c04 	str.w	r0, [r2, #-4]
    6908:	d1eb      	bne.n	68e2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x502>
    690a:	680e      	ldr	r6, [r1, #0]
    690c:	688b      	ldr	r3, [r1, #8]
    690e:	6848      	ldr	r0, [r1, #4]
    6910:	6093      	str	r3, [r2, #8]
    6912:	6016      	str	r6, [r2, #0]
    6914:	6050      	str	r0, [r2, #4]
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
    6916:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
    691a:	780a      	ldrb	r2, [r1, #0]
    691c:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
    6920:	4613      	mov	r3, r2
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
    6922:	700a      	strb	r2, [r1, #0]
    6924:	e0d5      	b.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
    6926:	bf00      	nop
    6928:	001c0300 	.word	0x001c0300
    692c:	00101400 	.word	0x00101400
    6930:	00241500 	.word	0x00241500
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
    6934:	680b      	ldr	r3, [r1, #0]
    6936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    693a:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
    693e:	f000 8154 	beq.w	6bea <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x80a>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
    6942:	784b      	ldrb	r3, [r1, #1]
    6944:	2b80      	cmp	r3, #128	; 0x80
    6946:	f47f adab 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    694a:	884b      	ldrh	r3, [r1, #2]
    694c:	2ba4      	cmp	r3, #164	; 0xa4
    694e:	f63f ada7 	bhi.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXMGADBD != NULL)
    6952:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    6956:	2b00      	cmp	r3, #0
    6958:	f43f ada2 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
    695c:	7818      	ldrb	r0, [r3, #0]
    695e:	785a      	ldrb	r2, [r3, #1]
    6960:	4290      	cmp	r0, r2
    6962:	f0c0 85f9 	bcc.w	7558 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1178>
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
    6966:	1a82      	subs	r2, r0, r2
    6968:	b2d2      	uxtb	r2, r2
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
    696a:	2af8      	cmp	r2, #248	; 0xf8
    696c:	f200 85e7 	bhi.w	753e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x115e>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
    6970:	27ac      	movs	r7, #172	; 0xac
    6972:	22b5      	movs	r2, #181	; 0xb5
    6974:	fb07 3300 	mla	r3, r7, r0, r3
    6978:	709a      	strb	r2, [r3, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
    697a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    697e:	781a      	ldrb	r2, [r3, #0]
    6980:	fb07 3302 	mla	r3, r7, r2, r3
    6984:	2262      	movs	r2, #98	; 0x62
    6986:	70da      	strb	r2, [r3, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
    6988:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    698c:	781a      	ldrb	r2, [r3, #0]
    698e:	fb07 3302 	mla	r3, r7, r2, r3
    6992:	2213      	movs	r2, #19
    6994:	711a      	strb	r2, [r3, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
    6996:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    699a:	781a      	ldrb	r2, [r3, #0]
    699c:	fb07 3302 	mla	r3, r7, r2, r3
    69a0:	2280      	movs	r2, #128	; 0x80
    69a2:	715a      	strb	r2, [r3, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
    69a4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    69a8:	781a      	ldrb	r2, [r3, #0]
    69aa:	fb07 3302 	mla	r3, r7, r2, r3
    69ae:	8862      	ldrh	r2, [r4, #2]
    69b0:	719a      	strb	r2, [r3, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
    69b2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    69b6:	781a      	ldrb	r2, [r3, #0]
    69b8:	fb07 3302 	mla	r3, r7, r2, r3
    69bc:	8862      	ldrh	r2, [r4, #2]
    69be:	0a12      	lsrs	r2, r2, #8
    69c0:	71da      	strb	r2, [r3, #7]
          for (uint16_t i = 0; i < msg->len; i++)
    69c2:	8863      	ldrh	r3, [r4, #2]
    69c4:	b17b      	cbz	r3, 69e6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x606>
    69c6:	2200      	movs	r2, #0
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
    69c8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
  return (msg->payload[spotToStart]);
    69cc:	b291      	uxth	r1, r2
    69ce:	68a0      	ldr	r0, [r4, #8]
          for (uint16_t i = 0; i < msg->len; i++)
    69d0:	3201      	adds	r2, #1
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
    69d2:	781e      	ldrb	r6, [r3, #0]
  return (msg->payload[spotToStart]);
    69d4:	5c40      	ldrb	r0, [r0, r1]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
    69d6:	fb07 3306 	mla	r3, r7, r6, r3
    69da:	440b      	add	r3, r1
    69dc:	7218      	strb	r0, [r3, #8]
          for (uint16_t i = 0; i < msg->len; i++)
    69de:	b293      	uxth	r3, r2
    69e0:	8861      	ldrh	r1, [r4, #2]
    69e2:	4299      	cmp	r1, r3
    69e4:	d8f0      	bhi.n	69c8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x5e8>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
    69e6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    69ea:	22ac      	movs	r2, #172	; 0xac
    69ec:	7b21      	ldrb	r1, [r4, #12]
    69ee:	7818      	ldrb	r0, [r3, #0]
    69f0:	fb02 3300 	mla	r3, r2, r0, r3
    69f4:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
    69f8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    69fc:	7b61      	ldrb	r1, [r4, #13]
    69fe:	7818      	ldrb	r0, [r3, #0]
    6a00:	fb02 3300 	mla	r3, r2, r0, r3
    6a04:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
    6a08:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
    6a0c:	7813      	ldrb	r3, [r2, #0]
    6a0e:	3301      	adds	r3, #1
    6a10:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
    6a12:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    6a16:	781a      	ldrb	r2, [r3, #0]
    6a18:	2afa      	cmp	r2, #250	; 0xfa
    6a1a:	f47f ad41 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
            packetUBXMGADBD->head = 0;
    6a1e:	2200      	movs	r2, #0
    6a20:	701a      	strb	r2, [r3, #0]
    6a22:	e53d      	b.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
    6a24:	4a9d      	ldr	r2, [pc, #628]	; (6c9c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8bc>)
    6a26:	4293      	cmp	r3, r2
    6a28:	f000 848d 	beq.w	7346 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xf66>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
    6a2c:	4a9c      	ldr	r2, [pc, #624]	; (6ca0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8c0>)
    6a2e:	4293      	cmp	r3, r2
    6a30:	f000 84ce 	beq.w	73d0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xff0>
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
    6a34:	4a9b      	ldr	r2, [pc, #620]	; (6ca4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8c4>)
    6a36:	4293      	cmp	r3, r2
    6a38:	f000 8550 	beq.w	74dc <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x10fc>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
    6a3c:	4a9a      	ldr	r2, [pc, #616]	; (6ca8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8c8>)
    6a3e:	4293      	cmp	r3, r2
    6a40:	f000 858f 	beq.w	7562 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1182>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
    6a44:	4a99      	ldr	r2, [pc, #612]	; (6cac <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8cc>)
    6a46:	4293      	cmp	r3, r2
    6a48:	f000 85d4 	beq.w	75f4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1214>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
    6a4c:	4a98      	ldr	r2, [pc, #608]	; (6cb0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8d0>)
    6a4e:	4293      	cmp	r3, r2
    6a50:	f000 8611 	beq.w	7676 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1296>
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
    6a54:	4a97      	ldr	r2, [pc, #604]	; (6cb4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8d4>)
    6a56:	4293      	cmp	r3, r2
    6a58:	f000 8651 	beq.w	76fe <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x131e>
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
    6a5c:	4a96      	ldr	r2, [pc, #600]	; (6cb8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8d8>)
    6a5e:	4293      	cmp	r3, r2
    6a60:	f000 86b6 	beq.w	77d0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x13f0>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
    6a64:	4a95      	ldr	r2, [pc, #596]	; (6cbc <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8dc>)
    6a66:	4293      	cmp	r3, r2
    6a68:	f000 8773 	beq.w	7952 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1572>
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
    6a6c:	4a94      	ldr	r2, [pc, #592]	; (6cc0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8e0>)
    6a6e:	4293      	cmp	r3, r2
    6a70:	f000 87b2 	beq.w	79d8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x15f8>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
    6a74:	4a93      	ldr	r2, [pc, #588]	; (6cc4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8e4>)
    6a76:	4293      	cmp	r3, r2
    6a78:	f000 87e7 	beq.w	7a4a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x166a>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
    6a7c:	4a92      	ldr	r2, [pc, #584]	; (6cc8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8e8>)
    6a7e:	4293      	cmp	r3, r2
    6a80:	f001 8011 	beq.w	7aa6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x16c6>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
    6a84:	784a      	ldrb	r2, [r1, #1]
    6a86:	2a35      	cmp	r2, #53	; 0x35
    6a88:	f001 810e 	beq.w	7ca8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x18c8>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
    6a8c:	2a3c      	cmp	r2, #60	; 0x3c
    6a8e:	f001 8079 	beq.w	7b84 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x17a4>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
    6a92:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
    6a96:	f001 8185 	beq.w	7da4 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x19c4>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
    6a9a:	4a8c      	ldr	r2, [pc, #560]	; (6ccc <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x8ec>)
    6a9c:	4293      	cmp	r3, r2
    6a9e:	f47f acff 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXNAVEOE != NULL)
    6aa2:	69ee      	ldr	r6, [r5, #28]
    6aa4:	2e00      	cmp	r6, #0
    6aa6:	f43f acfb 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
    6aaa:	2100      	movs	r1, #0
    6aac:	4620      	mov	r0, r4
    6aae:	f7ff fc89 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6ab2:	f04f 33ff 	mov.w	r3, #4294967295
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
    6ab6:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6ab8:	60b3      	str	r3, [r6, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6aba:	6933      	ldr	r3, [r6, #16]
    6abc:	b143      	cbz	r3, 6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6abe:	7832      	ldrb	r2, [r6, #0]
    6ac0:	0712      	lsls	r2, r2, #28
    6ac2:	d405      	bmi.n	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
    6ac4:	6018      	str	r0, [r3, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
    6ac6:	69ee      	ldr	r6, [r5, #28]
    6ac8:	7833      	ldrb	r3, [r6, #0]
    6aca:	f043 0308 	orr.w	r3, r3, #8
    6ace:	7033      	strb	r3, [r6, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
    6ad0:	7833      	ldrb	r3, [r6, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
    6ad2:	075f      	lsls	r7, r3, #29
    6ad4:	f57f ace4 	bpl.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
          storePacket(msg);
    6ad8:	4621      	mov	r1, r4
    6ada:	4628      	mov	r0, r5
}
    6adc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
    6ae0:	f7ff bbc4 	b.w	626c <SFE_UBLOX_GNSS::storePacket(ubxPacket*)>
      if (packetUBXESFMEAS != NULL)
    6ae4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    6ae8:	2900      	cmp	r1, #0
    6aea:	f43f acd9 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6aee:	f8d4 9008 	ldr.w	r9, [r4, #8]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    6af2:	f101 0008 	add.w	r0, r1, #8
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
    6af6:	f8b4 a002 	ldrh.w	sl, [r4, #2]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6afa:	f06f 0607 	mvn.w	r6, #7
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6afe:	f8d9 3000 	ldr.w	r3, [r9]
  return (val);
    6b02:	464a      	mov	r2, r9
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6b04:	1a76      	subs	r6, r6, r1
    6b06:	f101 0e84 	add.w	lr, r1, #132	; 0x84
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
    6b0a:	604b      	str	r3, [r1, #4]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6b0c:	f1aa 0c08 	sub.w	ip, sl, #8
    6b10:	f8b9 3004 	ldrh.w	r3, [r9, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
    6b14:	810b      	strh	r3, [r1, #8]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6b16:	f891 8009 	ldrb.w	r8, [r1, #9]
    6b1a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    6b1e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
    6b22:	814b      	strh	r3, [r1, #10]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6b24:	eb00 0788 	add.w	r7, r0, r8, lsl #2
    6b28:	e014      	b.n	6b54 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x774>
    6b2a:	459c      	cmp	ip, r3
    6b2c:	dd16      	ble.n	6b5c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x77c>
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6b2e:	7a93      	ldrb	r3, [r2, #10]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6b30:	3204      	adds	r2, #4
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    6b32:	f892 b005 	ldrb.w	fp, [r2, #5]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6b36:	041b      	lsls	r3, r3, #16
    6b38:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6b3c:	f892 b004 	ldrb.w	fp, [r2, #4]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6b40:	ea43 030b 	orr.w	r3, r3, fp
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6b44:	f892 b007 	ldrb.w	fp, [r2, #7]
    6b48:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
    6b4c:	f840 3f04 	str.w	r3, [r0, #4]!
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
    6b50:	4586      	cmp	lr, r0
    6b52:	d003      	beq.n	6b5c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x77c>
    6b54:	4287      	cmp	r7, r0
    6b56:	eb06 0300 	add.w	r3, r6, r0
    6b5a:	d1e6      	bne.n	6b2a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x74a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
    6b5c:	f108 0802 	add.w	r8, r8, #2
    6b60:	ebba 0f88 	cmp.w	sl, r8, lsl #2
    6b64:	ea4f 0388 	mov.w	r3, r8, lsl #2
    6b68:	d90e      	bls.n	6b88 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x7a8>
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    6b6a:	eb09 0203 	add.w	r2, r9, r3
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6b6e:	f819 0003 	ldrb.w	r0, [r9, r3]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6b72:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    6b74:	7856      	ldrb	r6, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6b76:	041b      	lsls	r3, r3, #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6b78:	78d2      	ldrb	r2, [r2, #3]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    6b7a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    6b7e:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6b80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
    6b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6b88:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6b8c:	780b      	ldrb	r3, [r1, #0]
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6b8e:	2800      	cmp	r0, #0
    6b90:	d09f      	beq.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6b92:	071f      	lsls	r7, r3, #28
    6b94:	d49d      	bmi.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
    6b96:	2288      	movs	r2, #136	; 0x88
    6b98:	3104      	adds	r1, #4
    6b9a:	f004 f847 	bl	ac2c <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
    6b9e:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
    6ba2:	780a      	ldrb	r2, [r1, #0]
    6ba4:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
    6ba8:	4613      	mov	r3, r2
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
    6baa:	700a      	strb	r2, [r1, #0]
    6bac:	e791      	b.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
    6bae:	6e83      	ldr	r3, [r0, #104]	; 0x68
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	f43f ac75 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    6bb6:	689b      	ldr	r3, [r3, #8]
    6bb8:	2b00      	cmp	r3, #0
    6bba:	f43f ac71 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    6bbe:	688a      	ldr	r2, [r1, #8]
    6bc0:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
    6bc2:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
    6bc4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
    6bc6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
    6bc8:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
    6bca:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
    6bcc:	705a      	strb	r2, [r3, #1]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6bce:	6888      	ldr	r0, [r1, #8]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
    6bd0:	6eab      	ldr	r3, [r5, #104]	; 0x68
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6bd2:	6844      	ldr	r4, [r0, #4]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
    6bd4:	6899      	ldr	r1, [r3, #8]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
    6bd6:	781a      	ldrb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
    6bd8:	604c      	str	r4, [r1, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
    6bda:	8904      	ldrh	r4, [r0, #8]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
    6bdc:	f042 0208 	orr.w	r2, r2, #8
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
    6be0:	810c      	strh	r4, [r1, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
    6be2:	8940      	ldrh	r0, [r0, #10]
    6be4:	8148      	strh	r0, [r1, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
    6be6:	701a      	strb	r2, [r3, #0]
    6be8:	e45a      	b.n	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXMGAACK != NULL)
    6bea:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    6bee:	2b00      	cmp	r3, #0
    6bf0:	f43f ac56 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
    6bf4:	7818      	ldrb	r0, [r3, #0]
    6bf6:	785a      	ldrb	r2, [r3, #1]
    6bf8:	4290      	cmp	r0, r2
    6bfa:	f0c0 82f9 	bcc.w	71f0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xe10>
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
    6bfe:	1a82      	subs	r2, r0, r2
    6c00:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
    6c02:	2a0e      	cmp	r2, #14
    6c04:	f200 82df 	bhi.w	71c6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xde6>
  return (msg->payload[spotToStart]);
    6c08:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
    6c0a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
    6c0e:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
    6c10:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
    6c12:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c16:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
    6c18:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c1a:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
    6c1c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c20:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
    6c22:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c26:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
    6c28:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c2a:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
    6c2c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c30:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
    6c32:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c36:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
    6c38:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c3a:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
    6c3c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c40:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
    6c42:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c46:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
    6c48:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c4a:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
    6c4c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c50:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
    6c52:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c56:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
    6c58:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c5a:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
    6c5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c60:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
    6c62:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c66:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
    6c68:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c6a:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
    6c6c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c70:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
    6c72:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
  return (msg->payload[spotToStart]);
    6c76:	68a2      	ldr	r2, [r4, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
    6c78:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
    6c7a:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
    6c7c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6c80:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
    6c82:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
    6c86:	7813      	ldrb	r3, [r2, #0]
    6c88:	3301      	adds	r3, #1
    6c8a:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
    6c8c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
    6c90:	781a      	ldrb	r2, [r3, #0]
    6c92:	2a10      	cmp	r2, #16
    6c94:	f47f ac04 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    6c98:	e6c1      	b.n	6a1e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x63e>
    6c9a:	bf00      	nop
    6c9c:	00200500 	.word	0x00200500
    6ca0:	005c0700 	.word	0x005c0700
    6ca4:	00140900 	.word	0x00140900
    6ca8:	00141100 	.word	0x00141100
    6cac:	00241200 	.word	0x00241200
    6cb0:	001c1300 	.word	0x001c1300
    6cb4:	00241400 	.word	0x00241400
    6cb8:	00741700 	.word	0x00741700
    6cbc:	00142100 	.word	0x00142100
    6cc0:	00142200 	.word	0x00142200
    6cc4:	00182600 	.word	0x00182600
    6cc8:	00283b00 	.word	0x00283b00
    6ccc:	00046100 	.word	0x00046100
      if (packetUBXHNRPVT != NULL)
    6cd0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	f43f abe3 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6cda:	688a      	ldr	r2, [r1, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6cdc:	6811      	ldr	r1, [r2, #0]
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
    6cde:	6059      	str	r1, [r3, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
    6ce0:	8891      	ldrh	r1, [r2, #4]
    6ce2:	8119      	strh	r1, [r3, #8]
  return (msg->payload[spotToStart]);
    6ce4:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
    6ce6:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
    6ce8:	68a2      	ldr	r2, [r4, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
    6cea:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  return (msg->payload[spotToStart]);
    6cee:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
    6cf0:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
    6cf2:	68a2      	ldr	r2, [r4, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
    6cf4:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  return (msg->payload[spotToStart]);
    6cf8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
    6cfa:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
    6cfc:	68a2      	ldr	r2, [r4, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
    6cfe:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  return (msg->payload[spotToStart]);
    6d02:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
    6d04:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
    6d06:	68a2      	ldr	r2, [r4, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
    6d08:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  return (msg->payload[spotToStart]);
    6d0c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
    6d0e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
    6d10:	68a2      	ldr	r2, [r4, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
    6d12:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  return (msg->payload[spotToStart]);
    6d16:	7ad1      	ldrb	r1, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
    6d18:	73d9      	strb	r1, [r3, #15]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d1a:	68d1      	ldr	r1, [r2, #12]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
    6d1c:	6119      	str	r1, [r3, #16]
  return (msg->payload[spotToStart]);
    6d1e:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
    6d20:	751a      	strb	r2, [r3, #20]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
    6d22:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
  return (msg->payload[spotToStart]);
    6d26:	68a3      	ldr	r3, [r4, #8]
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6d28:	6d88      	ldr	r0, [r1, #88]	; 0x58
  return (msg->payload[spotToStart]);
    6d2a:	7c5a      	ldrb	r2, [r3, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
    6d2c:	754a      	strb	r2, [r1, #21]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d2e:	695a      	ldr	r2, [r3, #20]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
    6d30:	618a      	str	r2, [r1, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d32:	699a      	ldr	r2, [r3, #24]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
    6d34:	61ca      	str	r2, [r1, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d36:	69da      	ldr	r2, [r3, #28]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
    6d38:	620a      	str	r2, [r1, #32]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d3a:	6a1a      	ldr	r2, [r3, #32]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
    6d3c:	624a      	str	r2, [r1, #36]	; 0x24
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
    6d40:	628a      	str	r2, [r1, #40]	; 0x28
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
    6d44:	62ca      	str	r2, [r1, #44]	; 0x2c
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
    6d48:	630a      	str	r2, [r1, #48]	; 0x30
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
    6d4c:	634a      	str	r2, [r1, #52]	; 0x34
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
    6d50:	638a      	str	r2, [r1, #56]	; 0x38
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
    6d54:	63ca      	str	r2, [r1, #60]	; 0x3c
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
    6d58:	640a      	str	r2, [r1, #64]	; 0x40
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6d5a:	f04f 32ff 	mov.w	r2, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6d60:	64ca      	str	r2, [r1, #76]	; 0x4c
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
    6d62:	644b      	str	r3, [r1, #68]	; 0x44
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6d64:	780b      	ldrb	r3, [r1, #0]
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6d66:	2800      	cmp	r0, #0
    6d68:	f43f aeb3 	beq.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6d6c:	071a      	lsls	r2, r3, #28
    6d6e:	f53f aeb0 	bmi.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
    6d72:	2248      	movs	r2, #72	; 0x48
    6d74:	3104      	adds	r1, #4
    6d76:	f003 ff59 	bl	ac2c <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
    6d7a:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    6d7e:	780a      	ldrb	r2, [r1, #0]
    6d80:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
    6d84:	4613      	mov	r3, r2
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
    6d86:	700a      	strb	r2, [r1, #0]
    6d88:	e6a3      	b.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
      if (packetUBXTIMTM2 != NULL)
    6d8a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    6d8e:	2b00      	cmp	r3, #0
    6d90:	f43f ab86 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    6d94:	688a      	ldr	r2, [r1, #8]
    6d96:	7811      	ldrb	r1, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
    6d98:	7119      	strb	r1, [r3, #4]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
    6d9a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6d9e:	f04f 30ff 	mov.w	r0, #4294967295
  return (msg->payload[spotToStart]);
    6da2:	7851      	ldrb	r1, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
    6da4:	7159      	strb	r1, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
    6da6:	8851      	ldrh	r1, [r2, #2]
    6da8:	80d9      	strh	r1, [r3, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
    6daa:	8891      	ldrh	r1, [r2, #4]
    6dac:	8119      	strh	r1, [r3, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
    6dae:	88d1      	ldrh	r1, [r2, #6]
    6db0:	8159      	strh	r1, [r3, #10]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6db2:	6891      	ldr	r1, [r2, #8]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
    6db4:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6db6:	68d1      	ldr	r1, [r2, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
    6db8:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6dba:	6911      	ldr	r1, [r2, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
    6dbc:	6159      	str	r1, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6dbe:	6951      	ldr	r1, [r2, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
    6dc0:	6199      	str	r1, [r3, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6dc2:	6991      	ldr	r1, [r2, #24]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
    6dc6:	61d9      	str	r1, [r3, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6dc8:	6218      	str	r0, [r3, #32]
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6dca:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6dcc:	2a00      	cmp	r2, #0
    6dce:	f43f ab64 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6dd2:	0708      	lsls	r0, r1, #28
    6dd4:	f53f ab61 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(packetUBXTIMTM2->callbackData, &packetUBXTIMTM2->data, sizeof(UBX_TIM_TM2_data_t));
    6dd8:	685e      	ldr	r6, [r3, #4]
    6dda:	6898      	ldr	r0, [r3, #8]
    6ddc:	68d9      	ldr	r1, [r3, #12]
    6dde:	691f      	ldr	r7, [r3, #16]
    6de0:	6016      	str	r6, [r2, #0]
    6de2:	6050      	str	r0, [r2, #4]
    6de4:	6091      	str	r1, [r2, #8]
    6de6:	60d7      	str	r7, [r2, #12]
    6de8:	69d9      	ldr	r1, [r3, #28]
    6dea:	695e      	ldr	r6, [r3, #20]
    6dec:	6998      	ldr	r0, [r3, #24]
    6dee:	6191      	str	r1, [r2, #24]
    6df0:	6116      	str	r6, [r2, #16]
    6df2:	6150      	str	r0, [r2, #20]
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
    6df4:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    6df8:	7813      	ldrb	r3, [r2, #0]
    6dfa:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
    6dfe:	4619      	mov	r1, r3
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
    6e00:	7013      	strb	r3, [r2, #0]
    6e02:	f7ff bb4a 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
      if (packetUBXNAVPOSECEF != NULL)
    6e06:	6903      	ldr	r3, [r0, #16]
    6e08:	2b00      	cmp	r3, #0
    6e0a:	f43f ab49 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6e0e:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6e10:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e14:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
    6e16:	6059      	str	r1, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e18:	6851      	ldr	r1, [r2, #4]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
    6e1a:	6099      	str	r1, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e1c:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
    6e1e:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e20:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
    6e22:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e24:	6911      	ldr	r1, [r2, #16]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
    6e28:	6159      	str	r1, [r3, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6e2a:	6198      	str	r0, [r3, #24]
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6e2c:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6e2e:	2a00      	cmp	r2, #0
    6e30:	f43f ab33 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6e34:	0708      	lsls	r0, r1, #28
    6e36:	f53f ab30 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
    6e3a:	6859      	ldr	r1, [r3, #4]
    6e3c:	689f      	ldr	r7, [r3, #8]
    6e3e:	68de      	ldr	r6, [r3, #12]
    6e40:	6918      	ldr	r0, [r3, #16]
    6e42:	6011      	str	r1, [r2, #0]
    6e44:	6057      	str	r7, [r2, #4]
    6e46:	6096      	str	r6, [r2, #8]
    6e48:	60d0      	str	r0, [r2, #12]
    6e4a:	6959      	ldr	r1, [r3, #20]
    6e4c:	6111      	str	r1, [r2, #16]
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
    6e4e:	692a      	ldr	r2, [r5, #16]
    6e50:	7813      	ldrb	r3, [r2, #0]
    6e52:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
    6e56:	4619      	mov	r1, r3
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
    6e58:	7013      	strb	r3, [r2, #0]
    6e5a:	f7ff bb1e 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
      if (packetUBXESFALG != NULL)
    6e5e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    6e62:	2b00      	cmp	r3, #0
    6e64:	f43f ab1c 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6e68:	688a      	ldr	r2, [r1, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e6a:	6811      	ldr	r1, [r2, #0]
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
    6e6c:	6059      	str	r1, [r3, #4]
  return (msg->payload[spotToStart]);
    6e6e:	7911      	ldrb	r1, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
    6e70:	7219      	strb	r1, [r3, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
    6e72:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
  return (msg->payload[spotToStart]);
    6e76:	7951      	ldrb	r1, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
    6e78:	7259      	strb	r1, [r3, #9]
  return (msg->payload[spotToStart]);
    6e7a:	7991      	ldrb	r1, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
    6e7c:	7299      	strb	r1, [r3, #10]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6e7e:	6891      	ldr	r1, [r2, #8]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
    6e80:	60d9      	str	r1, [r3, #12]
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    6e82:	8991      	ldrh	r1, [r2, #12]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
    6e84:	8219      	strh	r1, [r3, #16]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6e86:	f04f 31ff 	mov.w	r1, #4294967295
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    6e8a:	89d2      	ldrh	r2, [r2, #14]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6e8c:	6159      	str	r1, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6e8e:	6a19      	ldr	r1, [r3, #32]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
    6e90:	825a      	strh	r2, [r3, #18]
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6e92:	781a      	ldrb	r2, [r3, #0]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    6e94:	b111      	cbz	r1, 6e9c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xabc>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    6e96:	0717      	lsls	r7, r2, #28
    6e98:	f140 8310 	bpl.w	74bc <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x10dc>
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
    6e9c:	0756      	lsls	r6, r2, #29
    6e9e:	f57f aaff 	bpl.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    6ea2:	e619      	b.n	6ad8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f8>
      if (packetUBXCFGPRT != NULL)
    6ea4:	6f43      	ldr	r3, [r0, #116]	; 0x74
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	f43f aafa 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    6eac:	688a      	ldr	r2, [r1, #8]
        packetUBXCFGPRT->dataValid = true;
    6eae:	2101      	movs	r1, #1
  return (msg->payload[spotToStart]);
    6eb0:	7810      	ldrb	r0, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
    6eb2:	7018      	strb	r0, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
    6eb4:	8850      	ldrh	r0, [r2, #2]
    6eb6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    6eb8:	8058      	strh	r0, [r3, #2]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6eba:	6850      	ldr	r0, [r2, #4]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
    6ebc:	6058      	str	r0, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ebe:	6890      	ldr	r0, [r2, #8]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
    6ec0:	6098      	str	r0, [r3, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
    6ec2:	8990      	ldrh	r0, [r2, #12]
    6ec4:	8198      	strh	r0, [r3, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
    6ec6:	89d0      	ldrh	r0, [r2, #14]
    6ec8:	81d8      	strh	r0, [r3, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
    6eca:	8a12      	ldrh	r2, [r2, #16]
        packetUBXCFGPRT->dataValid = true;
    6ecc:	7519      	strb	r1, [r3, #20]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
    6ece:	821a      	strh	r2, [r3, #16]
        packetUBXCFGPRT->dataValid = true;
    6ed0:	f7ff bae6 	b.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
    6ed4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d047      	beq.n	6f6a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb8a>
    6eda:	689b      	ldr	r3, [r3, #8]
    6edc:	2b00      	cmp	r3, #0
    6ede:	d044      	beq.n	6f6a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb8a>
  return (msg->payload[spotToStart]);
    6ee0:	688a      	ldr	r2, [r1, #8]
    6ee2:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
    6ee4:	701a      	strb	r2, [r3, #0]
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    6ee6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
    6ee8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6eea:	8851      	ldrh	r1, [r2, #2]
    6eec:	689b      	ldr	r3, [r3, #8]
    6eee:	8059      	strh	r1, [r3, #2]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ef0:	6851      	ldr	r1, [r2, #4]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
    6ef2:	6059      	str	r1, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ef4:	6891      	ldr	r1, [r2, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
    6ef6:	6099      	str	r1, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ef8:	68d1      	ldr	r1, [r2, #12]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
    6efa:	60d9      	str	r1, [r3, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
    6efc:	8a11      	ldrh	r1, [r2, #16]
    6efe:	8219      	strh	r1, [r3, #16]
  return (msg->payload[spotToStart]);
    6f00:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
    6f02:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
    6f04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  return (msg->payload[spotToStart]);
    6f06:	68a2      	ldr	r2, [r4, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
    6f08:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
    6f0a:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
    6f0c:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
    6f0e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6f10:	689b      	ldr	r3, [r3, #8]
    6f12:	781a      	ldrb	r2, [r3, #0]
    6f14:	2a00      	cmp	r2, #0
    6f16:	f040 8256 	bne.w	73c6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xfe6>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    6f1a:	68a2      	ldr	r2, [r4, #8]
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    6f1c:	f8b2 120c 	ldrh.w	r1, [r2, #524]	; 0x20c
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
    6f20:	8299      	strh	r1, [r3, #20]
  return (msg->payload[spotToStart]);
    6f22:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
    6f26:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
    6f28:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    6f2a:	6899      	ldr	r1, [r3, #8]
    6f2c:	780a      	ldrb	r2, [r1, #0]
    6f2e:	2a00      	cmp	r2, #0
    6f30:	f040 8243 	bne.w	73ba <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xfda>
    6f34:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
    6f36:	f44f 77fc 	mov.w	r7, #504	; 0x1f8
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
    6f3a:	2201      	movs	r2, #1
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
    6f3c:	f240 16f7 	movw	r6, #503	; 0x1f7
    6f40:	e003      	b.n	6f4a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb6a>
    6f42:	42b3      	cmp	r3, r6
    6f44:	d80c      	bhi.n	6f60 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb80>
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
    6f46:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    6f48:	6899      	ldr	r1, [r3, #8]
  return (msg->payload[spotToStart]);
    6f4a:	68a3      	ldr	r3, [r4, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
    6f4c:	4411      	add	r1, r2
  return (msg->payload[spotToStart]);
    6f4e:	4413      	add	r3, r2
    6f50:	4403      	add	r3, r0
    6f52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
    6f56:	75cb      	strb	r3, [r1, #23]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
    6f58:	b293      	uxth	r3, r2
    6f5a:	3201      	adds	r2, #1
    6f5c:	429f      	cmp	r7, r3
    6f5e:	d8f0      	bhi.n	6f42 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb62>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
    6f60:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    6f62:	781a      	ldrb	r2, [r3, #0]
    6f64:	f042 0208 	orr.w	r2, r2, #8
    6f68:	701a      	strb	r2, [r3, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
    6f6a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	f43f aa97 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    6f72:	689b      	ldr	r3, [r3, #8]
    6f74:	2b00      	cmp	r3, #0
    6f76:	f43f aa93 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
    6f7a:	21b5      	movs	r1, #181	; 0xb5
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
    6f7c:	2262      	movs	r2, #98	; 0x62
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
    6f7e:	7019      	strb	r1, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
    6f80:	2102      	movs	r1, #2
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
    6f82:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6f84:	689b      	ldr	r3, [r3, #8]
    6f86:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
    6f88:	2272      	movs	r2, #114	; 0x72
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
    6f8a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6f8c:	689b      	ldr	r3, [r3, #8]
    6f8e:	7099      	strb	r1, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
    6f90:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6f92:	689b      	ldr	r3, [r3, #8]
    6f94:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
    6f96:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6f98:	8862      	ldrh	r2, [r4, #2]
    6f9a:	689b      	ldr	r3, [r3, #8]
    6f9c:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
    6f9e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    6fa0:	8863      	ldrh	r3, [r4, #2]
    6fa2:	6892      	ldr	r2, [r2, #8]
    6fa4:	0a1b      	lsrs	r3, r3, #8
    6fa6:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
    6fa8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6faa:	8862      	ldrh	r2, [r4, #2]
    6fac:	6898      	ldr	r0, [r3, #8]
    6fae:	68a1      	ldr	r1, [r4, #8]
    6fb0:	3006      	adds	r0, #6
    6fb2:	f003 fe3b 	bl	ac2c <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
    6fb6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6fb8:	7b22      	ldrb	r2, [r4, #12]
    6fba:	689b      	ldr	r3, [r3, #8]
    6fbc:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
    6fc0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6fc2:	7b62      	ldrb	r2, [r4, #13]
    6fc4:	689b      	ldr	r3, [r3, #8]
    6fc6:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
    6fca:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    6fcc:	7813      	ldrb	r3, [r2, #0]
    6fce:	f043 0308 	orr.w	r3, r3, #8
    6fd2:	7013      	strb	r3, [r2, #0]
    6fd4:	f7ff ba64 	b.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXESFINS != NULL)
    6fd8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    6fdc:	2b00      	cmp	r3, #0
    6fde:	f43f aa5f 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    6fe2:	688a      	ldr	r2, [r1, #8]
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    6fe4:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6fe8:	6811      	ldr	r1, [r2, #0]
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
    6fea:	6059      	str	r1, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6fec:	6891      	ldr	r1, [r2, #8]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
    6fee:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ff0:	68d1      	ldr	r1, [r2, #12]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
    6ff2:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ff4:	6911      	ldr	r1, [r2, #16]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
    6ff6:	6159      	str	r1, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ff8:	6951      	ldr	r1, [r2, #20]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
    6ffa:	6199      	str	r1, [r3, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    6ffc:	6991      	ldr	r1, [r2, #24]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
    6ffe:	61d9      	str	r1, [r3, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7000:	69d1      	ldr	r1, [r2, #28]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
    7002:	6219      	str	r1, [r3, #32]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7004:	6a11      	ldr	r1, [r2, #32]
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
    7008:	6259      	str	r1, [r3, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    700a:	6298      	str	r0, [r3, #40]	; 0x28
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    700c:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    700e:	2a00      	cmp	r2, #0
    7010:	f43f aa43 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7014:	0708      	lsls	r0, r1, #28
    7016:	f53f aa40 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
    701a:	1d19      	adds	r1, r3, #4
    701c:	3324      	adds	r3, #36	; 0x24
    701e:	f8d1 c000 	ldr.w	ip, [r1]
    7022:	3110      	adds	r1, #16
    7024:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    7028:	3210      	adds	r2, #16
    702a:	f851 6c08 	ldr.w	r6, [r1, #-8]
    702e:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7032:	4299      	cmp	r1, r3
    7034:	f842 cc10 	str.w	ip, [r2, #-16]
    7038:	f842 7c0c 	str.w	r7, [r2, #-12]
    703c:	f842 6c08 	str.w	r6, [r2, #-8]
    7040:	f842 0c04 	str.w	r0, [r2, #-4]
    7044:	d1eb      	bne.n	701e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc3e>
    7046:	680b      	ldr	r3, [r1, #0]
    7048:	6013      	str	r3, [r2, #0]
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
    704a:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
    704e:	7813      	ldrb	r3, [r2, #0]
    7050:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
    7054:	4619      	mov	r1, r3
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
    7056:	7013      	strb	r3, [r2, #0]
    7058:	f7ff ba1f 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
      if (packetUBXHNRATT != NULL)
    705c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    7060:	2b00      	cmp	r3, #0
    7062:	f43f aa1d 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7066:	688a      	ldr	r2, [r1, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7068:	6811      	ldr	r1, [r2, #0]
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
    706a:	6059      	str	r1, [r3, #4]
  return (msg->payload[spotToStart]);
    706c:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
    706e:	721a      	strb	r2, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7070:	68a2      	ldr	r2, [r4, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
    7072:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7076:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    707a:	6891      	ldr	r1, [r2, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
    707c:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    707e:	68d1      	ldr	r1, [r2, #12]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
    7080:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7082:	6911      	ldr	r1, [r2, #16]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
    7084:	6159      	str	r1, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7086:	6951      	ldr	r1, [r2, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
    7088:	6199      	str	r1, [r3, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    708a:	6991      	ldr	r1, [r2, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
    708c:	61d9      	str	r1, [r3, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    708e:	69d1      	ldr	r1, [r2, #28]
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
    7092:	6219      	str	r1, [r3, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7094:	6258      	str	r0, [r3, #36]	; 0x24
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7096:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7098:	2a00      	cmp	r2, #0
    709a:	f43f a9fe 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    709e:	070e      	lsls	r6, r1, #28
    70a0:	f53f a9fb 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
    70a4:	685f      	ldr	r7, [r3, #4]
    70a6:	689e      	ldr	r6, [r3, #8]
    70a8:	68d8      	ldr	r0, [r3, #12]
    70aa:	6919      	ldr	r1, [r3, #16]
    70ac:	6017      	str	r7, [r2, #0]
    70ae:	6056      	str	r6, [r2, #4]
    70b0:	6090      	str	r0, [r2, #8]
    70b2:	60d1      	str	r1, [r2, #12]
    70b4:	6a19      	ldr	r1, [r3, #32]
    70b6:	695f      	ldr	r7, [r3, #20]
    70b8:	699e      	ldr	r6, [r3, #24]
    70ba:	69d8      	ldr	r0, [r3, #28]
    70bc:	61d1      	str	r1, [r2, #28]
    70be:	6117      	str	r7, [r2, #16]
    70c0:	6156      	str	r6, [r2, #20]
    70c2:	6190      	str	r0, [r2, #24]
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
    70c4:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    70c8:	7813      	ldrb	r3, [r2, #0]
    70ca:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
    70ce:	4619      	mov	r1, r3
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
    70d0:	7013      	strb	r3, [r2, #0]
    70d2:	f7ff b9e2 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
      if (packetUBXNAVSTATUS != NULL)
    70d6:	6943      	ldr	r3, [r0, #20]
    70d8:	2b00      	cmp	r3, #0
    70da:	f43f a9e1 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    70de:	688a      	ldr	r2, [r1, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    70e0:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
    70e2:	6059      	str	r1, [r3, #4]
  return (msg->payload[spotToStart]);
    70e4:	7911      	ldrb	r1, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
    70e6:	7219      	strb	r1, [r3, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
    70e8:	6943      	ldr	r3, [r0, #20]
  return (msg->payload[spotToStart]);
    70ea:	7951      	ldrb	r1, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
    70ec:	7259      	strb	r1, [r3, #9]
  return (msg->payload[spotToStart]);
    70ee:	7991      	ldrb	r1, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
    70f0:	7299      	strb	r1, [r3, #10]
  return (msg->payload[spotToStart]);
    70f2:	79d1      	ldrb	r1, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
    70f4:	72d9      	strb	r1, [r3, #11]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    70f6:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
    70f8:	60d9      	str	r1, [r3, #12]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    70fa:	f04f 31ff 	mov.w	r1, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    70fe:	68d2      	ldr	r2, [r2, #12]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7100:	6159      	str	r1, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7102:	6a19      	ldr	r1, [r3, #32]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
    7104:	611a      	str	r2, [r3, #16]
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7106:	781a      	ldrb	r2, [r3, #0]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7108:	2900      	cmp	r1, #0
    710a:	f43f aec7 	beq.w	6e9c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xabc>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    710e:	0717      	lsls	r7, r2, #28
    7110:	f53f aec4 	bmi.w	6e9c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xabc>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
    7114:	68da      	ldr	r2, [r3, #12]
    7116:	685e      	ldr	r6, [r3, #4]
    7118:	6898      	ldr	r0, [r3, #8]
    711a:	691b      	ldr	r3, [r3, #16]
    711c:	600e      	str	r6, [r1, #0]
    711e:	608a      	str	r2, [r1, #8]
    7120:	60cb      	str	r3, [r1, #12]
    7122:	6048      	str	r0, [r1, #4]
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
    7124:	6969      	ldr	r1, [r5, #20]
    7126:	780b      	ldrb	r3, [r1, #0]
    7128:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
    712c:	461a      	mov	r2, r3
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
    712e:	700b      	strb	r3, [r1, #0]
    7130:	e6b4      	b.n	6e9c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xabc>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
    7132:	6e41      	ldr	r1, [r0, #100]	; 0x64
    7134:	780b      	ldrb	r3, [r1, #0]
    7136:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    713a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    713e:	071b      	lsls	r3, r3, #28
    7140:	f140 82da 	bpl.w	76f8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1318>
    7144:	0852      	lsrs	r2, r2, #1
    7146:	f47f a9ab 	bne.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
    714a:	2702      	movs	r7, #2
    714c:	f44f 7688 	mov.w	r6, #272	; 0x110
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
    7150:	688b      	ldr	r3, [r1, #8]
    7152:	22b5      	movs	r2, #181	; 0xb5
    7154:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
    7156:	2262      	movs	r2, #98	; 0x62
    7158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    715a:	689b      	ldr	r3, [r3, #8]
    715c:	4433      	add	r3, r6
    715e:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
    7160:	2202      	movs	r2, #2
    7162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    7164:	689b      	ldr	r3, [r3, #8]
    7166:	4433      	add	r3, r6
    7168:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
    716a:	2273      	movs	r2, #115	; 0x73
    716c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    716e:	689b      	ldr	r3, [r3, #8]
    7170:	4433      	add	r3, r6
    7172:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
    7174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    7176:	8862      	ldrh	r2, [r4, #2]
    7178:	689b      	ldr	r3, [r3, #8]
    717a:	4433      	add	r3, r6
    717c:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
    717e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    7180:	8862      	ldrh	r2, [r4, #2]
    7182:	689b      	ldr	r3, [r3, #8]
    7184:	0a12      	lsrs	r2, r2, #8
    7186:	4433      	add	r3, r6
    7188:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
    718a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    718c:	8862      	ldrh	r2, [r4, #2]
    718e:	6898      	ldr	r0, [r3, #8]
    7190:	68a1      	ldr	r1, [r4, #8]
    7192:	4430      	add	r0, r6
    7194:	3006      	adds	r0, #6
    7196:	f003 fd49 	bl	ac2c <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
    719a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    719c:	7b22      	ldrb	r2, [r4, #12]
    719e:	689b      	ldr	r3, [r3, #8]
    71a0:	4433      	add	r3, r6
    71a2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
    71a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    71a8:	7b62      	ldrb	r2, [r4, #13]
    71aa:	689b      	ldr	r3, [r3, #8]
    71ac:	4433      	add	r3, r6
    71ae:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
    71b2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
    71b4:	7813      	ldrb	r3, [r2, #0]
    71b6:	f3c3 01c1 	ubfx	r1, r3, #3, #2
    71ba:	430f      	orrs	r7, r1
    71bc:	f367 03c4 	bfi	r3, r7, #3, #2
    71c0:	7013      	strb	r3, [r2, #0]
          break; // abort when added
    71c2:	f7ff b96d 	b.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    71c6:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
    71ca:	b923      	cbnz	r3, 71d6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xdf6>
    71cc:	f895 30f2 	ldrb.w	r3, [r5, #242]	; 0xf2
    71d0:	2b00      	cmp	r3, #0
    71d2:	f43f a965 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
    71d6:	f8d5 40dc 	ldr.w	r4, [r5, #220]	; 0xdc
    71da:	223c      	movs	r2, #60	; 0x3c
    71dc:	49b6      	ldr	r1, [pc, #728]	; (74b8 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x10d8>)
    71de:	6823      	ldr	r3, [r4, #0]
    71e0:	4620      	mov	r0, r4
    71e2:	685b      	ldr	r3, [r3, #4]
    71e4:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    71e6:	4620      	mov	r0, r4
}
    71e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71ec:	f003 b95c 	b.w	a4a8 <Print::println()>
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
    71f0:	f100 0110 	add.w	r1, r0, #16
    71f4:	1a8a      	subs	r2, r1, r2
    71f6:	b2d2      	uxtb	r2, r2
    71f8:	e503      	b.n	6c02 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x822>
      if (packetUBXESFRAW != NULL)
    71fa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    71fe:	2a00      	cmp	r2, #0
    7200:	f43f a94e 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
    7204:	8849      	ldrh	r1, [r1, #2]
    7206:	1f0b      	subs	r3, r1, #4
    7208:	bf48      	it	mi
    720a:	1ccb      	addmi	r3, r1, #3
    720c:	10db      	asrs	r3, r3, #3
    720e:	f882 3238 	strb.w	r3, [r2, #568]	; 0x238
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
    7212:	2204      	movs	r2, #4
    7214:	8866      	ldrh	r6, [r4, #2]
    7216:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    721a:	3603      	adds	r6, #3
    721c:	4608      	mov	r0, r1
    721e:	08f6      	lsrs	r6, r6, #3
    7220:	00f6      	lsls	r6, r6, #3
    7222:	3604      	adds	r6, #4
    7224:	e023      	b.n	726e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xe8e>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7226:	68a3      	ldr	r3, [r4, #8]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
    7228:	3008      	adds	r0, #8
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    722a:	189f      	adds	r7, r3, r2
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    722c:	f813 c002 	ldrb.w	ip, [r3, r2]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
    7230:	3208      	adds	r2, #8
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    7232:	78bb      	ldrb	r3, [r7, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    7234:	f897 e001 	ldrb.w	lr, [r7, #1]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
    7238:	f5b2 7f0d 	cmp.w	r2, #564	; 0x234
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    723c:	ea4f 4303 	mov.w	r3, r3, lsl #16
    7240:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    7244:	ea43 030c 	orr.w	r3, r3, ip
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7248:	f897 c003 	ldrb.w	ip, [r7, #3]
    724c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
    7250:	6003      	str	r3, [r0, #0]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    7252:	f897 c005 	ldrb.w	ip, [r7, #5]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7256:	793b      	ldrb	r3, [r7, #4]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    7258:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    725c:	f897 c006 	ldrb.w	ip, [r7, #6]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7260:	79ff      	ldrb	r7, [r7, #7]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    7262:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7266:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
    726a:	6043      	str	r3, [r0, #4]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
    726c:	d001      	beq.n	7272 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xe92>
    726e:	42b2      	cmp	r2, r6
    7270:	d1d9      	bne.n	7226 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xe46>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7272:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
    7276:	2800      	cmp	r0, #0
    7278:	f000 815e 	beq.w	7538 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1158>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    727c:	780b      	ldrb	r3, [r1, #0]
    727e:	071e      	lsls	r6, r3, #28
    7280:	f53f ac27 	bmi.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
    7284:	f44f 720e 	mov.w	r2, #568	; 0x238
    7288:	3108      	adds	r1, #8
    728a:	3004      	adds	r0, #4
    728c:	f003 fcce 	bl	ac2c <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
    7290:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
    7294:	780a      	ldrb	r2, [r1, #0]
    7296:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
    729a:	4613      	mov	r3, r2
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
    729c:	700a      	strb	r2, [r1, #0]
    729e:	e418      	b.n	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
      if (packetUBXRXMSFRBX != NULL)
    72a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    72a2:	2b00      	cmp	r3, #0
    72a4:	f43f a8fc 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    72a8:	688a      	ldr	r2, [r1, #8]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
    72aa:	f06f 0607 	mvn.w	r6, #7
  return (msg->payload[spotToStart]);
    72ae:	7811      	ldrb	r1, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
    72b0:	7119      	strb	r1, [r3, #4]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
    72b2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  return (msg->payload[spotToStart]);
    72b4:	7851      	ldrb	r1, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
    72b6:	7159      	strb	r1, [r3, #5]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
    72b8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  return (msg->payload[spotToStart]);
    72ba:	78d1      	ldrb	r1, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
    72bc:	71d9      	strb	r1, [r3, #7]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
    72be:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  return (msg->payload[spotToStart]);
    72c0:	7911      	ldrb	r1, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
    72c2:	7219      	strb	r1, [r3, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
    72c4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  return (msg->payload[spotToStart]);
    72c6:	7951      	ldrb	r1, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
    72c8:	7259      	strb	r1, [r3, #9]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
    72ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  return (msg->payload[spotToStart]);
    72cc:	7991      	ldrb	r1, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
    72ce:	7299      	strb	r1, [r3, #10]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
    72d0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    72d2:	f101 0008 	add.w	r0, r1, #8
    72d6:	7a0f      	ldrb	r7, [r1, #8]
    72d8:	1a76      	subs	r6, r6, r1
    72da:	f101 0c48 	add.w	ip, r1, #72	; 0x48
    72de:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    72e2:	4287      	cmp	r7, r0
    72e4:	eb06 0e00 	add.w	lr, r6, r0
    72e8:	d016      	beq.n	7318 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xf38>
    72ea:	8863      	ldrh	r3, [r4, #2]
    72ec:	3b08      	subs	r3, #8
    72ee:	4573      	cmp	r3, lr
    72f0:	dd12      	ble.n	7318 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xf38>
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    72f2:	7a93      	ldrb	r3, [r2, #10]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
    72f4:	3204      	adds	r2, #4
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
    72f6:	f892 e005 	ldrb.w	lr, [r2, #5]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    72fa:	041b      	lsls	r3, r3, #16
    72fc:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7300:	f892 e004 	ldrb.w	lr, [r2, #4]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
    7304:	ea43 030e 	orr.w	r3, r3, lr
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7308:	f892 e007 	ldrb.w	lr, [r2, #7]
    730c:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
    7310:	f840 3f04 	str.w	r3, [r0, #4]!
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
    7314:	4560      	cmp	r0, ip
    7316:	d1e4      	bne.n	72e2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xf02>
        packetUBXRXMSFRBX->moduleQueried = true;
    7318:	2301      	movs	r3, #1
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    731a:	6d88      	ldr	r0, [r1, #88]	; 0x58
        packetUBXRXMSFRBX->moduleQueried = true;
    731c:	f881 304c 	strb.w	r3, [r1, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7320:	2800      	cmp	r0, #0
    7322:	f000 8109 	beq.w	7538 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1158>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7326:	780b      	ldrb	r3, [r1, #0]
    7328:	071f      	lsls	r7, r3, #28
    732a:	f53f abd2 	bmi.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
    732e:	2248      	movs	r2, #72	; 0x48
    7330:	3104      	adds	r1, #4
    7332:	f003 fc7b 	bl	ac2c <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
    7336:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    7338:	780a      	ldrb	r2, [r1, #0]
    733a:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
    733e:	4613      	mov	r3, r2
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
    7340:	700a      	strb	r2, [r1, #0]
    7342:	f7ff bbc6 	b.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
      if (packetUBXNAVATT != NULL)
    7346:	6a03      	ldr	r3, [r0, #32]
    7348:	2b00      	cmp	r3, #0
    734a:	f43f a8a9 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    734e:	688a      	ldr	r2, [r1, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7350:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
    7352:	6059      	str	r1, [r3, #4]
  return (msg->payload[spotToStart]);
    7354:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
    7356:	721a      	strb	r2, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7358:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
    735a:	6a03      	ldr	r3, [r0, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    735c:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7360:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
    7362:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7364:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
    7366:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7368:	6911      	ldr	r1, [r2, #16]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
    736a:	6159      	str	r1, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    736c:	6951      	ldr	r1, [r2, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
    736e:	6199      	str	r1, [r3, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7370:	6991      	ldr	r1, [r2, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
    7372:	61d9      	str	r1, [r3, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7374:	69d1      	ldr	r1, [r2, #28]
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
    7378:	6219      	str	r1, [r3, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    737a:	6258      	str	r0, [r3, #36]	; 0x24
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    737c:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    737e:	2a00      	cmp	r2, #0
    7380:	f43f a88b 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7384:	0708      	lsls	r0, r1, #28
    7386:	f53f a888 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
    738a:	685f      	ldr	r7, [r3, #4]
    738c:	689e      	ldr	r6, [r3, #8]
    738e:	68d8      	ldr	r0, [r3, #12]
    7390:	6919      	ldr	r1, [r3, #16]
    7392:	6017      	str	r7, [r2, #0]
    7394:	6056      	str	r6, [r2, #4]
    7396:	6090      	str	r0, [r2, #8]
    7398:	60d1      	str	r1, [r2, #12]
    739a:	6a19      	ldr	r1, [r3, #32]
    739c:	695f      	ldr	r7, [r3, #20]
    739e:	699e      	ldr	r6, [r3, #24]
    73a0:	69d8      	ldr	r0, [r3, #28]
    73a2:	61d1      	str	r1, [r2, #28]
    73a4:	6117      	str	r7, [r2, #16]
    73a6:	6156      	str	r6, [r2, #20]
    73a8:	6190      	str	r0, [r2, #24]
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
    73aa:	6a2a      	ldr	r2, [r5, #32]
    73ac:	7813      	ldrb	r3, [r2, #0]
    73ae:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
    73b2:	4619      	mov	r1, r3
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
    73b4:	7013      	strb	r3, [r2, #0]
    73b6:	f7ff b870 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
    73ba:	884f      	ldrh	r7, [r1, #2]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
    73bc:	2f00      	cmp	r7, #0
    73be:	f43f add0 	beq.w	6f62 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb82>
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
    73c2:	2018      	movs	r0, #24
    73c4:	e5b9      	b.n	6f3a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb5a>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    73c6:	68a2      	ldr	r2, [r4, #8]
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    73c8:	8a91      	ldrh	r1, [r2, #20]
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
    73ca:	8299      	strh	r1, [r3, #20]
  return (msg->payload[spotToStart]);
    73cc:	7d92      	ldrb	r2, [r2, #22]
    73ce:	e5aa      	b.n	6f26 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xb46>
      if (packetUBXNAVPVT != NULL)
    73d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    73d2:	2b00      	cmp	r3, #0
    73d4:	f43f a864 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    73d8:	688a      	ldr	r2, [r1, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    73da:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
    73dc:	6059      	str	r1, [r3, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
    73de:	8891      	ldrh	r1, [r2, #4]
    73e0:	8119      	strh	r1, [r3, #8]
  return (msg->payload[spotToStart]);
    73e2:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
    73e4:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
    73e6:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
    73e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (msg->payload[spotToStart]);
    73ea:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
    73ec:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
    73ee:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
    73f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (msg->payload[spotToStart]);
    73f2:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
    73f4:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
    73f6:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
    73f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (msg->payload[spotToStart]);
    73fa:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
    73fc:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
    73fe:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
    7400:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (msg->payload[spotToStart]);
    7402:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
    7404:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
    7406:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
    7408:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (msg->payload[spotToStart]);
    740a:	7ad1      	ldrb	r1, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
    740c:	73d9      	strb	r1, [r3, #15]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    740e:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
    7410:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7412:	6911      	ldr	r1, [r2, #16]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
    7414:	6159      	str	r1, [r3, #20]
  return (msg->payload[spotToStart]);
    7416:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
    7418:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
    741a:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
    741c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (msg->payload[spotToStart]);
    741e:	7d51      	ldrb	r1, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
    7420:	7659      	strb	r1, [r3, #25]
  return (msg->payload[spotToStart]);
    7422:	7d91      	ldrb	r1, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
    7424:	7699      	strb	r1, [r3, #26]
  return (msg->payload[spotToStart]);
    7426:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
    7428:	76da      	strb	r2, [r3, #27]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    742a:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
    742c:	6a41      	ldr	r1, [r0, #36]	; 0x24
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    742e:	699a      	ldr	r2, [r3, #24]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
    7430:	61ca      	str	r2, [r1, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7432:	69da      	ldr	r2, [r3, #28]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
    7434:	620a      	str	r2, [r1, #32]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7436:	6a1a      	ldr	r2, [r3, #32]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
    7438:	624a      	str	r2, [r1, #36]	; 0x24
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    743a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
    743c:	628a      	str	r2, [r1, #40]	; 0x28
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    743e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
    7440:	62ca      	str	r2, [r1, #44]	; 0x2c
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
    7444:	630a      	str	r2, [r1, #48]	; 0x30
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
    7448:	634a      	str	r2, [r1, #52]	; 0x34
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    744a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
    744c:	638a      	str	r2, [r1, #56]	; 0x38
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    744e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
    7450:	63ca      	str	r2, [r1, #60]	; 0x3c
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
    7454:	640a      	str	r2, [r1, #64]	; 0x40
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
    7458:	644a      	str	r2, [r1, #68]	; 0x44
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    745a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    745c:	6f08      	ldr	r0, [r1, #112]	; 0x70
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
    745e:	648a      	str	r2, [r1, #72]	; 0x48
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
    7462:	64ca      	str	r2, [r1, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
    7464:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    7468:	f8a1 2050 	strh.w	r2, [r1, #80]	; 0x50
  return (msg->payload[spotToStart]);
    746c:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
    7470:	f881 2052 	strb.w	r2, [r1, #82]	; 0x52
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
    7476:	658a      	str	r2, [r1, #88]	; 0x58
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    7478:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
    747c:	f8a1 205c 	strh.w	r2, [r1, #92]	; 0x5c
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
    7480:	f04f 32ff 	mov.w	r2, #4294967295
    7484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
    7488:	e9c1 2218 	strd	r2, r2, [r1, #96]	; 0x60
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
    748c:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7490:	780b      	ldrb	r3, [r1, #0]
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7492:	2800      	cmp	r0, #0
    7494:	f43f ab1d 	beq.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7498:	071a      	lsls	r2, r3, #28
    749a:	f53f ab1a 	bmi.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
    749e:	225c      	movs	r2, #92	; 0x5c
    74a0:	3104      	adds	r1, #4
    74a2:	f003 fbc3 	bl	ac2c <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
    74a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    74a8:	780a      	ldrb	r2, [r1, #0]
    74aa:	f042 0208 	orr.w	r2, r2, #8
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
    74ae:	4613      	mov	r3, r2
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
    74b0:	700a      	strb	r2, [r1, #0]
    74b2:	f7ff bb0e 	b.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
    74b6:	bf00      	nop
    74b8:	2000238c 	.word	0x2000238c
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
    74bc:	68da      	ldr	r2, [r3, #12]
    74be:	685e      	ldr	r6, [r3, #4]
    74c0:	6898      	ldr	r0, [r3, #8]
    74c2:	691b      	ldr	r3, [r3, #16]
    74c4:	600e      	str	r6, [r1, #0]
    74c6:	608a      	str	r2, [r1, #8]
    74c8:	60cb      	str	r3, [r1, #12]
    74ca:	6048      	str	r0, [r1, #4]
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
    74cc:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
    74d0:	780b      	ldrb	r3, [r1, #0]
    74d2:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
    74d6:	461a      	mov	r2, r3
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
    74d8:	700b      	strb	r3, [r1, #0]
    74da:	e4df      	b.n	6e9c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xabc>
      if (packetUBXNAVODO != NULL)
    74dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    74de:	2b00      	cmp	r3, #0
    74e0:	f43e afde 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    74e4:	688a      	ldr	r2, [r1, #8]
    74e6:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
    74e8:	711a      	strb	r2, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    74ea:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
    74ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    74ee:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    74f2:	6851      	ldr	r1, [r2, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
    74f4:	6099      	str	r1, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    74f6:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
    74f8:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    74fa:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
    74fc:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    74fe:	6911      	ldr	r1, [r2, #16]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
    7502:	6159      	str	r1, [r3, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7504:	6198      	str	r0, [r3, #24]
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7506:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7508:	2a00      	cmp	r2, #0
    750a:	f43e afc6 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    750e:	070f      	lsls	r7, r1, #28
    7510:	f53e afc3 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
    7514:	6859      	ldr	r1, [r3, #4]
    7516:	689f      	ldr	r7, [r3, #8]
    7518:	68de      	ldr	r6, [r3, #12]
    751a:	6918      	ldr	r0, [r3, #16]
    751c:	6011      	str	r1, [r2, #0]
    751e:	6057      	str	r7, [r2, #4]
    7520:	6096      	str	r6, [r2, #8]
    7522:	60d0      	str	r0, [r2, #12]
    7524:	6959      	ldr	r1, [r3, #20]
    7526:	6111      	str	r1, [r2, #16]
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
    7528:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    752a:	7813      	ldrb	r3, [r2, #0]
    752c:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
    7530:	4619      	mov	r1, r3
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
    7532:	7013      	strb	r3, [r2, #0]
    7534:	f7fe bfb1 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7538:	780b      	ldrb	r3, [r1, #0]
    753a:	f7ff baca 	b.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    753e:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
    7542:	b923      	cbnz	r3, 754e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x116e>
    7544:	f895 30f2 	ldrb.w	r3, [r5, #242]	; 0xf2
    7548:	2b00      	cmp	r3, #0
    754a:	f43e afa9 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
    754e:	f8d5 40dc 	ldr.w	r4, [r5, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    7552:	2241      	movs	r2, #65	; 0x41
    7554:	499d      	ldr	r1, [pc, #628]	; (77cc <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x13ec>)
    7556:	e642      	b.n	71de <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xdfe>
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
    7558:	1f81      	subs	r1, r0, #6
    755a:	1a8a      	subs	r2, r1, r2
    755c:	b2d2      	uxtb	r2, r2
    755e:	f7ff ba04 	b.w	696a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x58a>
      if (packetUBXNAVVELECEF != NULL)
    7562:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7564:	2b00      	cmp	r3, #0
    7566:	f43e af9b 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    756a:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    756c:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7570:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
    7572:	6059      	str	r1, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7574:	6851      	ldr	r1, [r2, #4]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
    7576:	6099      	str	r1, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7578:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
    757a:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    757c:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
    757e:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7580:	6911      	ldr	r1, [r2, #16]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
    7584:	6159      	str	r1, [r3, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7586:	6198      	str	r0, [r3, #24]
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7588:	7819      	ldrb	r1, [r3, #0]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    758a:	2a00      	cmp	r2, #0
    758c:	f43e af85 	beq.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7590:	070e      	lsls	r6, r1, #28
    7592:	f53e af82 	bmi.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
    7596:	6859      	ldr	r1, [r3, #4]
    7598:	689f      	ldr	r7, [r3, #8]
    759a:	68de      	ldr	r6, [r3, #12]
    759c:	6918      	ldr	r0, [r3, #16]
    759e:	6011      	str	r1, [r2, #0]
    75a0:	6057      	str	r7, [r2, #4]
    75a2:	6096      	str	r6, [r2, #8]
    75a4:	60d0      	str	r0, [r2, #12]
    75a6:	6959      	ldr	r1, [r3, #20]
    75a8:	6111      	str	r1, [r2, #16]
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
    75aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    75ac:	7813      	ldrb	r3, [r2, #0]
    75ae:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
    75b2:	4619      	mov	r1, r3
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
    75b4:	7013      	strb	r3, [r2, #0]
    75b6:	f7fe bf70 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
    75ba:	6859      	ldr	r1, [r3, #4]
    75bc:	689f      	ldr	r7, [r3, #8]
    75be:	68de      	ldr	r6, [r3, #12]
    75c0:	6918      	ldr	r0, [r3, #16]
    75c2:	6011      	str	r1, [r2, #0]
    75c4:	6057      	str	r7, [r2, #4]
    75c6:	6096      	str	r6, [r2, #8]
    75c8:	60d0      	str	r0, [r2, #12]
    75ca:	6959      	ldr	r1, [r3, #20]
    75cc:	6111      	str	r1, [r2, #16]
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
    75ce:	69aa      	ldr	r2, [r5, #24]
    75d0:	7813      	ldrb	r3, [r2, #0]
    75d2:	f043 0308 	orr.w	r3, r3, #8
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
    75d6:	4619      	mov	r1, r3
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
    75d8:	7013      	strb	r3, [r2, #0]
    75da:	f7fe bf5e 	b.w	649a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xba>
          memcpy(packetUBXTIMSMEAS->callbackData, &packetUBXTIMSMEAS->data, sizeof(UBX_TIM_SMEAS_data_t));
    75de:	229c      	movs	r2, #156	; 0x9c
    75e0:	3104      	adds	r1, #4
    75e2:	f003 fb23 	bl	ac2c <memcpy>
          packetUBXTIMSMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
    75e6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    75e8:	781a      	ldrb	r2, [r3, #0]
    75ea:	f042 0208 	orr.w	r2, r2, #8
    75ee:	701a      	strb	r2, [r3, #0]
    75f0:	f7ff b91b 	b.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
      if (packetUBXNAVVELNED != NULL)
    75f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    75f6:	2b00      	cmp	r3, #0
    75f8:	f43e af52 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    75fc:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    75fe:	f04f 30ff 	mov.w	r0, #4294967295
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7602:	6811      	ldr	r1, [r2, #0]
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
    7604:	6059      	str	r1, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7606:	6851      	ldr	r1, [r2, #4]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
    7608:	6099      	str	r1, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    760a:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
    760c:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    760e:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
    7610:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7612:	6911      	ldr	r1, [r2, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
    7614:	6159      	str	r1, [r3, #20]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7616:	6951      	ldr	r1, [r2, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
    7618:	6199      	str	r1, [r3, #24]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    761a:	6991      	ldr	r1, [r2, #24]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
    761c:	61d9      	str	r1, [r3, #28]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    761e:	69d1      	ldr	r1, [r2, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
    7620:	6219      	str	r1, [r3, #32]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7622:	6a11      	ldr	r1, [r2, #32]
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7626:	6298      	str	r0, [r3, #40]	; 0x28
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
    7628:	6259      	str	r1, [r3, #36]	; 0x24
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    762a:	2a00      	cmp	r2, #0
    762c:	f43f a8fd 	beq.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7630:	7819      	ldrb	r1, [r3, #0]
    7632:	0708      	lsls	r0, r1, #28
    7634:	f53f a8f9 	bmi.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
    7638:	1d19      	adds	r1, r3, #4
    763a:	3324      	adds	r3, #36	; 0x24
    763c:	f8d1 c000 	ldr.w	ip, [r1]
    7640:	3110      	adds	r1, #16
    7642:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    7646:	3210      	adds	r2, #16
    7648:	f851 6c08 	ldr.w	r6, [r1, #-8]
    764c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7650:	4299      	cmp	r1, r3
    7652:	f842 cc10 	str.w	ip, [r2, #-16]
    7656:	f842 7c0c 	str.w	r7, [r2, #-12]
    765a:	f842 6c08 	str.w	r6, [r2, #-8]
    765e:	f842 0c04 	str.w	r0, [r2, #-4]
    7662:	d1eb      	bne.n	763c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x125c>
    7664:	680b      	ldr	r3, [r1, #0]
    7666:	6013      	str	r3, [r2, #0]
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
    7668:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    766a:	781a      	ldrb	r2, [r3, #0]
    766c:	f042 0208 	orr.w	r2, r2, #8
    7670:	701a      	strb	r2, [r3, #0]
    7672:	f7ff b8da 	b.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
      if (packetUBXNAVHPPOSECEF != NULL)
    7676:	6b83      	ldr	r3, [r0, #56]	; 0x38
    7678:	2b00      	cmp	r3, #0
    767a:	f43e af11 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    767e:	688a      	ldr	r2, [r1, #8]
    7680:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
    7682:	711a      	strb	r2, [r3, #4]
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
    7684:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
    7686:	6b83      	ldr	r3, [r0, #56]	; 0x38
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7688:	6851      	ldr	r1, [r2, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
    768a:	6099      	str	r1, [r3, #8]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    768c:	6891      	ldr	r1, [r2, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
    768e:	60d9      	str	r1, [r3, #12]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7690:	68d1      	ldr	r1, [r2, #12]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
    7692:	6119      	str	r1, [r3, #16]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    7694:	6911      	ldr	r1, [r2, #16]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
    7696:	6159      	str	r1, [r3, #20]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
    7698:	7d12      	ldrb	r2, [r2, #20]
    769a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
    769c:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
    769e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    76a0:	7d52      	ldrb	r2, [r2, #21]
    76a2:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
    76a4:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
    76a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    76a8:	7d92      	ldrb	r2, [r2, #22]
    76aa:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
    76ac:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
    76ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    76b0:	f04f 30ff 	mov.w	r0, #4294967295
  return (msg->payload[spotToStart]);
    76b4:	7dd1      	ldrb	r1, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
    76b6:	76d9      	strb	r1, [r3, #27]
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
    76b8:	6991      	ldr	r1, [r2, #24]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    76ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    76bc:	6218      	str	r0, [r3, #32]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
    76be:	61d9      	str	r1, [r3, #28]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    76c0:	2a00      	cmp	r2, #0
    76c2:	f43f a8b2 	beq.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    76c6:	7819      	ldrb	r1, [r3, #0]
    76c8:	0709      	lsls	r1, r1, #28
    76ca:	f53f a8ae 	bmi.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
    76ce:	685e      	ldr	r6, [r3, #4]
    76d0:	6898      	ldr	r0, [r3, #8]
    76d2:	68d9      	ldr	r1, [r3, #12]
    76d4:	691f      	ldr	r7, [r3, #16]
    76d6:	6016      	str	r6, [r2, #0]
    76d8:	6050      	str	r0, [r2, #4]
    76da:	6091      	str	r1, [r2, #8]
    76dc:	60d7      	str	r7, [r2, #12]
    76de:	695e      	ldr	r6, [r3, #20]
    76e0:	6998      	ldr	r0, [r3, #24]
    76e2:	69d9      	ldr	r1, [r3, #28]
    76e4:	6116      	str	r6, [r2, #16]
    76e6:	6150      	str	r0, [r2, #20]
    76e8:	6191      	str	r1, [r2, #24]
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
    76ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
    76ec:	781a      	ldrb	r2, [r3, #0]
    76ee:	f042 0208 	orr.w	r2, r2, #8
    76f2:	701a      	strb	r2, [r3, #0]
    76f4:	f7ff b899 	b.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
    76f8:	2701      	movs	r7, #1
    76fa:	4606      	mov	r6, r0
    76fc:	e528      	b.n	7150 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xd70>
      if (packetUBXNAVHPPOSLLH != NULL)
    76fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    7700:	2b00      	cmp	r3, #0
    7702:	f43e aecd 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    7706:	688a      	ldr	r2, [r1, #8]
    7708:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
    770a:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
    770c:	688f      	ldr	r7, [r1, #8]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
    770e:	2104      	movs	r1, #4
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
    7710:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
    7712:	4620      	mov	r0, r4
  return (msg->payload[spotToStart]);
    7714:	78fb      	ldrb	r3, [r7, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
    7716:	71f3      	strb	r3, [r6, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
    7718:	f7fe fe54 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    771c:	2108      	movs	r1, #8
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
    771e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7720:	4620      	mov	r0, r4
    7722:	f7fe fe4f 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7726:	210c      	movs	r1, #12
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
    7728:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    772a:	4620      	mov	r0, r4
    772c:	f7fe fe4a 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7730:	2110      	movs	r1, #16
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
    7732:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7734:	4620      	mov	r0, r4
    7736:	f7fe fe45 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    773a:	2114      	movs	r1, #20
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
    773c:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    773e:	4620      	mov	r0, r4
    7740:	f7fe fe40 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
    7744:	61b0      	str	r0, [r6, #24]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
    7746:	7e3b      	ldrb	r3, [r7, #24]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
    7748:	211c      	movs	r1, #28
    774a:	4620      	mov	r0, r4
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
    774c:	7733      	strb	r3, [r6, #28]
  return (msg->payload[spotToStart]);
    774e:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
    7750:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    7752:	7e52      	ldrb	r2, [r2, #25]
    7754:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
    7756:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
    7758:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    775a:	7e92      	ldrb	r2, [r2, #26]
    775c:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
    775e:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
    7760:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    7762:	7ed2      	ldrb	r2, [r2, #27]
    7764:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
    7766:	f7fe fe2d 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    776a:	6bee      	ldr	r6, [r5, #60]	; 0x3c
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
    776c:	2120      	movs	r1, #32
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
    776e:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
    7770:	4620      	mov	r0, r4
    7772:	f7fe fe27 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7776:	f04f 33ff 	mov.w	r3, #4294967295
    777a:	e9c6 0309 	strd	r0, r3, [r6, #36]	; 0x24
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    777e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7780:	2b00      	cmp	r3, #0
    7782:	f43f a9a5 	beq.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7786:	7832      	ldrb	r2, [r6, #0]
    7788:	0712      	lsls	r2, r2, #28
    778a:	f53f a9a1 	bmi.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
    778e:	1d32      	adds	r2, r6, #4
    7790:	3624      	adds	r6, #36	; 0x24
    7792:	f8d2 c000 	ldr.w	ip, [r2]
    7796:	3210      	adds	r2, #16
    7798:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    779c:	3310      	adds	r3, #16
    779e:	f852 0c08 	ldr.w	r0, [r2, #-8]
    77a2:	f852 1c04 	ldr.w	r1, [r2, #-4]
    77a6:	42b2      	cmp	r2, r6
    77a8:	f843 cc10 	str.w	ip, [r3, #-16]
    77ac:	f843 7c0c 	str.w	r7, [r3, #-12]
    77b0:	f843 0c08 	str.w	r0, [r3, #-8]
    77b4:	f843 1c04 	str.w	r1, [r3, #-4]
    77b8:	d1eb      	bne.n	7792 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x13b2>
    77ba:	6812      	ldr	r2, [r2, #0]
    77bc:	601a      	str	r2, [r3, #0]
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
    77be:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    77c0:	7833      	ldrb	r3, [r6, #0]
    77c2:	f043 0308 	orr.w	r3, r3, #8
    77c6:	7033      	strb	r3, [r6, #0]
    77c8:	f7ff b982 	b.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
    77cc:	200023cc 	.word	0x200023cc
      if (packetUBXNAVPVAT != NULL)
    77d0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    77d2:	2e00      	cmp	r6, #0
    77d4:	f43e ae64 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
    77d8:	2100      	movs	r1, #0
    77da:	4620      	mov	r0, r4
    77dc:	f7fe fdf2 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    77e0:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
    77e2:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
    77e4:	4620      	mov	r0, r4
  return (msg->payload[spotToStart]);
    77e6:	791b      	ldrb	r3, [r3, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
    77e8:	7233      	strb	r3, [r6, #8]
  return (msg->payload[spotToStart]);
    77ea:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
    77ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  return (msg->payload[spotToStart]);
    77ee:	7951      	ldrb	r1, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
    77f0:	7259      	strb	r1, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
    77f2:	88d1      	ldrh	r1, [r2, #6]
    77f4:	8159      	strh	r1, [r3, #10]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
    77f6:	2110      	movs	r1, #16
  return (msg->payload[spotToStart]);
    77f8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
    77fa:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
    77fc:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
    77fe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  return (msg->payload[spotToStart]);
    7800:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
    7802:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
    7804:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
    7806:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  return (msg->payload[spotToStart]);
    7808:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
    780a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
    780c:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
    780e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  return (msg->payload[spotToStart]);
    7810:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
    7812:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
    7814:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
    7816:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  return (msg->payload[spotToStart]);
    7818:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
    781a:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
    781c:	f7fe fdd2 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7820:	6c2e      	ldr	r6, [r5, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7822:	2114      	movs	r1, #20
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
    7824:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7826:	4620      	mov	r0, r4
    7828:	f7fe fdcc 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    782c:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
    782e:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7830:	4620      	mov	r0, r4
  return (msg->payload[spotToStart]);
    7832:	7e1b      	ldrb	r3, [r3, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
    7834:	7733      	strb	r3, [r6, #28]
  return (msg->payload[spotToStart]);
    7836:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
    7838:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  return (msg->payload[spotToStart]);
    783a:	7e51      	ldrb	r1, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
    783c:	7759      	strb	r1, [r3, #29]
  return (msg->payload[spotToStart]);
    783e:	7e91      	ldrb	r1, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
    7840:	7799      	strb	r1, [r3, #30]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7842:	211c      	movs	r1, #28
  return (msg->payload[spotToStart]);
    7844:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
    7846:	77da      	strb	r2, [r3, #31]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
    7848:	6c2e      	ldr	r6, [r5, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    784a:	f7fe fdbb 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    784e:	2120      	movs	r1, #32
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
    7850:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7852:	4620      	mov	r0, r4
    7854:	f7fe fdb6 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7858:	2124      	movs	r1, #36	; 0x24
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
    785a:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    785c:	4620      	mov	r0, r4
    785e:	f7fe fdb1 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7862:	2128      	movs	r1, #40	; 0x28
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
    7864:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7866:	4620      	mov	r0, r4
    7868:	f7fe fdac 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
    786c:	212c      	movs	r1, #44	; 0x2c
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
    786e:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
    7870:	4620      	mov	r0, r4
    7872:	f7fe fda7 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
    7876:	2130      	movs	r1, #48	; 0x30
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
    7878:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
    787a:	4620      	mov	r0, r4
    787c:	f7fe fda2 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7880:	2134      	movs	r1, #52	; 0x34
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
    7882:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7884:	4620      	mov	r0, r4
    7886:	f7fe fd9d 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    788a:	2138      	movs	r1, #56	; 0x38
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
    788c:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    788e:	4620      	mov	r0, r4
    7890:	f7fe fd98 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7894:	213c      	movs	r1, #60	; 0x3c
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
    7896:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7898:	4620      	mov	r0, r4
    789a:	f7fe fd93 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    789e:	2140      	movs	r1, #64	; 0x40
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
    78a0:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    78a2:	4620      	mov	r0, r4
    78a4:	f7fe fd8e 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
    78a8:	2144      	movs	r1, #68	; 0x44
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
    78aa:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
    78ac:	4620      	mov	r0, r4
    78ae:	f7fe fd89 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    78b2:	2148      	movs	r1, #72	; 0x48
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
    78b4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    78b6:	4620      	mov	r0, r4
    78b8:	f7fe fd84 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    78bc:	214c      	movs	r1, #76	; 0x4c
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
    78be:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    78c0:	4620      	mov	r0, r4
    78c2:	f7fe fd7f 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    78c6:	2150      	movs	r1, #80	; 0x50
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
    78c8:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    78ca:	4620      	mov	r0, r4
    78cc:	f7fe fd7a 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    78d0:	2154      	movs	r1, #84	; 0x54
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
    78d2:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    78d4:	4620      	mov	r0, r4
    78d6:	f7fe fd75 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    78da:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
    78dc:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
    78de:	2164      	movs	r1, #100	; 0x64
    78e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
    78e4:	4620      	mov	r0, r4
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
    78e6:	f8a6 205c 	strh.w	r2, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
    78ea:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
    78ee:	f8a6 205e 	strh.w	r2, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
    78f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
    78f6:	f8a6 2060 	strh.w	r2, [r6, #96]	; 0x60
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    78fa:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
    78fe:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
    7902:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
    7906:	f8a6 2064 	strh.w	r2, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
    790a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    790e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
    7912:	f7fe fd57 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
    7916:	2168      	movs	r1, #104	; 0x68
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
    7918:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
    791a:	4620      	mov	r0, r4
    791c:	f7fe fd52 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
    7920:	f04f 33ff 	mov.w	r3, #4294967295
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
    7924:	66f0      	str	r0, [r6, #108]	; 0x6c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7926:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
    792a:	e9c6 331e 	strd	r3, r3, [r6, #120]	; 0x78
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    792e:	2800      	cmp	r0, #0
    7930:	f43f a8ce 	beq.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7934:	7833      	ldrb	r3, [r6, #0]
    7936:	071f      	lsls	r7, r3, #28
    7938:	f53f a8ca 	bmi.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
    793c:	1d31      	adds	r1, r6, #4
    793e:	2274      	movs	r2, #116	; 0x74
    7940:	f003 f974 	bl	ac2c <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
    7944:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    7946:	7833      	ldrb	r3, [r6, #0]
    7948:	f043 0308 	orr.w	r3, r3, #8
    794c:	7033      	strb	r3, [r6, #0]
    794e:	f7ff b8bf 	b.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
      if (packetUBXNAVTIMEUTC != NULL)
    7952:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    7954:	2e00      	cmp	r6, #0
    7956:	f43e ada3 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
    795a:	2100      	movs	r1, #0
    795c:	4620      	mov	r0, r4
    795e:	f7fe fd31 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
    7962:	2104      	movs	r1, #4
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
    7964:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
    7966:	4620      	mov	r0, r4
    7968:	f7fe fd2c 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    796c:	2108      	movs	r1, #8
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
    796e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7970:	4620      	mov	r0, r4
    7972:	f7fe fd27 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    7976:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
    7978:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    797a:	f04f 30ff 	mov.w	r0, #4294967295
    797e:	8993      	ldrh	r3, [r2, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
    7980:	8233      	strh	r3, [r6, #16]
  return (msg->payload[spotToStart]);
    7982:	7b93      	ldrb	r3, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
    7984:	74b3      	strb	r3, [r6, #18]
  return (msg->payload[spotToStart]);
    7986:	7bd1      	ldrb	r1, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
    7988:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    798a:	74d9      	strb	r1, [r3, #19]
  return (msg->payload[spotToStart]);
    798c:	7c11      	ldrb	r1, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
    798e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7990:	7519      	strb	r1, [r3, #20]
  return (msg->payload[spotToStart]);
    7992:	7c51      	ldrb	r1, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
    7994:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7996:	7559      	strb	r1, [r3, #21]
  return (msg->payload[spotToStart]);
    7998:	7c91      	ldrb	r1, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
    799a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    799c:	7599      	strb	r1, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
    799e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  return (msg->payload[spotToStart]);
    79a0:	7cd1      	ldrb	r1, [r2, #19]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    79a2:	6a1a      	ldr	r2, [r3, #32]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    79a4:	6198      	str	r0, [r3, #24]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
    79a6:	75d9      	strb	r1, [r3, #23]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    79a8:	2a00      	cmp	r2, #0
    79aa:	f43e af3e 	beq.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    79ae:	7819      	ldrb	r1, [r3, #0]
    79b0:	0709      	lsls	r1, r1, #28
    79b2:	f53e af3a 	bmi.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
    79b6:	6859      	ldr	r1, [r3, #4]
    79b8:	689f      	ldr	r7, [r3, #8]
    79ba:	68de      	ldr	r6, [r3, #12]
    79bc:	6918      	ldr	r0, [r3, #16]
    79be:	6011      	str	r1, [r2, #0]
    79c0:	6057      	str	r7, [r2, #4]
    79c2:	6096      	str	r6, [r2, #8]
    79c4:	60d0      	str	r0, [r2, #12]
    79c6:	6959      	ldr	r1, [r3, #20]
    79c8:	6111      	str	r1, [r2, #16]
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
    79ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    79cc:	781a      	ldrb	r2, [r3, #0]
    79ce:	f042 0208 	orr.w	r2, r2, #8
    79d2:	701a      	strb	r2, [r3, #0]
    79d4:	f7fe bf29 	b.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
      if (packetUBXNAVCLOCK != NULL)
    79d8:	6c46      	ldr	r6, [r0, #68]	; 0x44
    79da:	2e00      	cmp	r6, #0
    79dc:	f43e ad60 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
    79e0:	2100      	movs	r1, #0
    79e2:	4620      	mov	r0, r4
    79e4:	f7fe fcee 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    79e8:	2104      	movs	r1, #4
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
    79ea:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    79ec:	4620      	mov	r0, r4
    79ee:	f7fe fce9 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    79f2:	2108      	movs	r1, #8
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
    79f4:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    79f6:	4620      	mov	r0, r4
    79f8:	f7fe fce4 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
    79fc:	210c      	movs	r1, #12
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
    79fe:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
    7a00:	4620      	mov	r0, r4
    7a02:	f7fe fcdf 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
    7a06:	2110      	movs	r1, #16
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
    7a08:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
    7a0a:	4620      	mov	r0, r4
    7a0c:	f7fe fcda 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7a10:	f04f 33ff 	mov.w	r3, #4294967295
    7a14:	e9c6 0305 	strd	r0, r3, [r6, #20]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7a18:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	f43f a858 	beq.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7a20:	7832      	ldrb	r2, [r6, #0]
    7a22:	0712      	lsls	r2, r2, #28
    7a24:	f53f a854 	bmi.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
    7a28:	6872      	ldr	r2, [r6, #4]
    7a2a:	68b7      	ldr	r7, [r6, #8]
    7a2c:	68f0      	ldr	r0, [r6, #12]
    7a2e:	6931      	ldr	r1, [r6, #16]
    7a30:	601a      	str	r2, [r3, #0]
    7a32:	605f      	str	r7, [r3, #4]
    7a34:	6098      	str	r0, [r3, #8]
    7a36:	60d9      	str	r1, [r3, #12]
    7a38:	6972      	ldr	r2, [r6, #20]
    7a3a:	611a      	str	r2, [r3, #16]
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
    7a3c:	6c6e      	ldr	r6, [r5, #68]	; 0x44
    7a3e:	7833      	ldrb	r3, [r6, #0]
    7a40:	f043 0308 	orr.w	r3, r3, #8
    7a44:	7033      	strb	r3, [r6, #0]
    7a46:	f7ff b843 	b.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
      if (packetUBXNAVTIMELS != NULL)
    7a4a:	6c86      	ldr	r6, [r0, #72]	; 0x48
    7a4c:	2e00      	cmp	r6, #0
    7a4e:	f43e ad27 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
    7a52:	2100      	movs	r1, #0
    7a54:	4620      	mov	r0, r4
    7a56:	f7fe fcb5 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    7a5a:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
    7a5c:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7a5e:	210c      	movs	r1, #12
  return (msg->payload[spotToStart]);
    7a60:	791b      	ldrb	r3, [r3, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7a62:	4620      	mov	r0, r4
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
    7a64:	7233      	strb	r3, [r6, #8]
  return (msg->payload[spotToStart]);
    7a66:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
    7a68:	6cab      	ldr	r3, [r5, #72]	; 0x48
  return (msg->payload[spotToStart]);
    7a6a:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
    7a6c:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
    7a6e:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
    7a70:	6cab      	ldr	r3, [r5, #72]	; 0x48
    7a72:	7a52      	ldrb	r2, [r2, #9]
    7a74:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
    7a76:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
    7a78:	6cab      	ldr	r3, [r5, #72]	; 0x48
  return (msg->payload[spotToStart]);
    7a7a:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
    7a7c:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
    7a7e:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
    7a80:	6cab      	ldr	r3, [r5, #72]	; 0x48
    7a82:	7ad2      	ldrb	r2, [r2, #11]
    7a84:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7a86:	f7fe fc9d 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    7a8a:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
    7a8c:	6cab      	ldr	r3, [r5, #72]	; 0x48
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7a8e:	f04f 31ff 	mov.w	r1, #4294967295
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
    7a92:	6118      	str	r0, [r3, #16]
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    7a94:	8a10      	ldrh	r0, [r2, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
    7a96:	8298      	strh	r0, [r3, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
    7a98:	8a50      	ldrh	r0, [r2, #18]
    7a9a:	82d8      	strh	r0, [r3, #22]
  return (msg->payload[spotToStart]);
    7a9c:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7a9e:	61d9      	str	r1, [r3, #28]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
    7aa0:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7aa2:	f7fe bcfd 	b.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
      if (packetUBXNAVSVIN != NULL)
    7aa6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    7aa8:	2b00      	cmp	r3, #0
    7aaa:	f43e acf9 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    7aae:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
    7ab0:	2104      	movs	r1, #4
  return (msg->payload[spotToStart]);
    7ab2:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
    7ab4:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
    7ab6:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    7ab8:	4620      	mov	r0, r4
    7aba:	f7fe fc83 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
    7abe:	2108      	movs	r1, #8
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
    7ac0:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
    7ac2:	4620      	mov	r0, r4
    7ac4:	f7fe fc7e 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7ac8:	210c      	movs	r1, #12
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
    7aca:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7acc:	4620      	mov	r0, r4
    7ace:	f7fe fc79 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7ad2:	2110      	movs	r1, #16
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
    7ad4:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7ad6:	4620      	mov	r0, r4
    7ad8:	f7fe fc74 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7adc:	2114      	movs	r1, #20
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
    7ade:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7ae0:	4620      	mov	r0, r4
    7ae2:	f7fe fc6f 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    7ae6:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
    7ae8:	61b0      	str	r0, [r6, #24]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
    7aea:	211c      	movs	r1, #28
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
    7aec:	7e1b      	ldrb	r3, [r3, #24]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
    7aee:	4620      	mov	r0, r4
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
    7af0:	7733      	strb	r3, [r6, #28]
  return (msg->payload[spotToStart]);
    7af2:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
    7af4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    7af6:	7e52      	ldrb	r2, [r2, #25]
    7af8:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
    7afa:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
    7afc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    7afe:	7e92      	ldrb	r2, [r2, #26]
    7b00:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
    7b02:	f7fe fc5f 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7b06:	6cee      	ldr	r6, [r5, #76]	; 0x4c
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
    7b08:	2120      	movs	r1, #32
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
    7b0a:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
    7b0c:	4620      	mov	r0, r4
    7b0e:	f7fe fc59 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    7b12:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
    7b14:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7b16:	f04f 32ff 	mov.w	r2, #4294967295
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
    7b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    7b1e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
  return (msg->payload[spotToStart]);
    7b22:	68a1      	ldr	r1, [r4, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
    7b24:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    7b26:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
    7b2a:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7b2e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    7b30:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    7b34:	2a00      	cmp	r2, #0
    7b36:	f43e ae78 	beq.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7b3a:	7819      	ldrb	r1, [r3, #0]
    7b3c:	070f      	lsls	r7, r1, #28
    7b3e:	f53e ae74 	bmi.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
    7b42:	1d19      	adds	r1, r3, #4
    7b44:	3324      	adds	r3, #36	; 0x24
    7b46:	f8d1 c000 	ldr.w	ip, [r1]
    7b4a:	3110      	adds	r1, #16
    7b4c:	f851 7c0c 	ldr.w	r7, [r1, #-12]
    7b50:	3210      	adds	r2, #16
    7b52:	f851 6c08 	ldr.w	r6, [r1, #-8]
    7b56:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7b5a:	4299      	cmp	r1, r3
    7b5c:	f842 cc10 	str.w	ip, [r2, #-16]
    7b60:	f842 7c0c 	str.w	r7, [r2, #-12]
    7b64:	f842 6c08 	str.w	r6, [r2, #-8]
    7b68:	f842 0c04 	str.w	r0, [r2, #-4]
    7b6c:	d1eb      	bne.n	7b46 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1766>
    7b6e:	684b      	ldr	r3, [r1, #4]
    7b70:	6808      	ldr	r0, [r1, #0]
    7b72:	6053      	str	r3, [r2, #4]
    7b74:	6010      	str	r0, [r2, #0]
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
    7b76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    7b78:	781a      	ldrb	r2, [r3, #0]
    7b7a:	f042 0208 	orr.w	r2, r2, #8
    7b7e:	701a      	strb	r2, [r3, #0]
    7b80:	f7fe be53 	b.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
    7b84:	884a      	ldrh	r2, [r1, #2]
    7b86:	2a28      	cmp	r2, #40	; 0x28
    7b88:	d002      	beq.n	7b90 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x17b0>
    7b8a:	2a40      	cmp	r2, #64	; 0x40
    7b8c:	f47e af81 	bne.w	6a92 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6b2>
      if (packetUBXNAVRELPOSNED != NULL)
    7b90:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7b92:	2b00      	cmp	r3, #0
    7b94:	f43e ac84 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
  return (msg->payload[spotToStart]);
    7b98:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
    7b9a:	2104      	movs	r1, #4
    7b9c:	4620      	mov	r0, r4
  return (msg->payload[spotToStart]);
    7b9e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
    7ba0:	711a      	strb	r2, [r3, #4]
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    7ba2:	f8d4 8008 	ldr.w	r8, [r4, #8]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
    7ba6:	6d6e      	ldr	r6, [r5, #84]	; 0x54
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    7ba8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
    7bac:	80f3      	strh	r3, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
    7bae:	f7fe fc09 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7bb2:	2108      	movs	r1, #8
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
    7bb4:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7bb6:	4620      	mov	r0, r4
    7bb8:	f7fe fc04 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7bbc:	210c      	movs	r1, #12
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
    7bbe:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7bc0:	4620      	mov	r0, r4
    7bc2:	f7fe fbff 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7bc6:	2110      	movs	r1, #16
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
    7bc8:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7bca:	4620      	mov	r0, r4
    7bcc:	f7fe fbfa 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
    7bd0:	8863      	ldrh	r3, [r4, #2]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
    7bd2:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
    7bd4:	2b28      	cmp	r3, #40	; 0x28
    7bd6:	f000 810e 	beq.w	7df6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1a16>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7bda:	2114      	movs	r1, #20
    7bdc:	4620      	mov	r0, r4
    7bde:	f7fe fbf1 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7be2:	2118      	movs	r1, #24
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
    7be4:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
    7be6:	4620      	mov	r0, r4
    7be8:	f7fe fbec 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
    7bec:	61f0      	str	r0, [r6, #28]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
    7bee:	f898 3020 	ldrb.w	r3, [r8, #32]
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
    7bf2:	2124      	movs	r1, #36	; 0x24
    7bf4:	4620      	mov	r0, r4
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
    7bf6:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
    7bfa:	68a2      	ldr	r2, [r4, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
    7bfc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7bfe:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
    7c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
    7c06:	68a2      	ldr	r2, [r4, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
    7c08:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7c0a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
    7c0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
    7c12:	68a2      	ldr	r2, [r4, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
    7c14:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7c16:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
    7c1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
    7c1e:	f7fe fbd1 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7c22:	6d6e      	ldr	r6, [r5, #84]	; 0x54
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
    7c24:	2128      	movs	r1, #40	; 0x28
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
    7c26:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
    7c28:	4620      	mov	r0, r4
    7c2a:	f7fe fbcb 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
    7c2e:	212c      	movs	r1, #44	; 0x2c
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
    7c30:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
    7c32:	4620      	mov	r0, r4
    7c34:	f7fe fbc6 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
    7c38:	2130      	movs	r1, #48	; 0x30
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
    7c3a:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
    7c3c:	4620      	mov	r0, r4
    7c3e:	f7fe fbc1 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
    7c42:	2134      	movs	r1, #52	; 0x34
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
    7c44:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
    7c46:	4620      	mov	r0, r4
    7c48:	f7fe fbbc 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
    7c4c:	213c      	movs	r1, #60	; 0x3c
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
    7c4e:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
    7c50:	4620      	mov	r0, r4
    7c52:	f7fe fbb7 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7c56:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7c58:	f04f 32ff 	mov.w	r2, #4294967295
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7c5c:	6d33      	ldr	r3, [r6, #80]	; 0x50
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7c5e:	6472      	str	r2, [r6, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7c60:	2b00      	cmp	r3, #0
    7c62:	f43e af35 	beq.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7c66:	7832      	ldrb	r2, [r6, #0]
    7c68:	0710      	lsls	r0, r2, #28
    7c6a:	f53e af31 	bmi.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
    7c6e:	1d32      	adds	r2, r6, #4
    7c70:	3644      	adds	r6, #68	; 0x44
    7c72:	f8d2 c000 	ldr.w	ip, [r2]
    7c76:	3210      	adds	r2, #16
    7c78:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    7c7c:	3310      	adds	r3, #16
    7c7e:	f852 0c08 	ldr.w	r0, [r2, #-8]
    7c82:	f852 1c04 	ldr.w	r1, [r2, #-4]
    7c86:	42b2      	cmp	r2, r6
    7c88:	f843 cc10 	str.w	ip, [r3, #-16]
    7c8c:	f843 7c0c 	str.w	r7, [r3, #-12]
    7c90:	f843 0c08 	str.w	r0, [r3, #-8]
    7c94:	f843 1c04 	str.w	r1, [r3, #-4]
    7c98:	d1eb      	bne.n	7c72 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1892>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
    7c9a:	6d6e      	ldr	r6, [r5, #84]	; 0x54
    7c9c:	7833      	ldrb	r3, [r6, #0]
    7c9e:	f043 0308 	orr.w	r3, r3, #8
    7ca2:	7033      	strb	r3, [r6, #0]
    7ca4:	f7fe bf14 	b.w	6ad0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f0>
      if (packetUBXNAVSAT != NULL)
    7ca8:	6d06      	ldr	r6, [r0, #80]	; 0x50
    7caa:	2e00      	cmp	r6, #0
    7cac:	f43e abf8 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
    7cb0:	2100      	movs	r1, #0
    7cb2:	4620      	mov	r0, r4
    7cb4:	f7fe fb86 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    7cb8:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
    7cba:	6070      	str	r0, [r6, #4]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
    7cbc:	2700      	movs	r7, #0
  return (msg->payload[spotToStart]);
    7cbe:	791b      	ldrb	r3, [r3, #4]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7cc0:	f04f 080c 	mov.w	r8, #12
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
    7cc4:	7233      	strb	r3, [r6, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
    7cc6:	2608      	movs	r6, #8
  return (msg->payload[spotToStart]);
    7cc8:	68a2      	ldr	r2, [r4, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
    7cca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  return (msg->payload[spotToStart]);
    7ccc:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
    7cce:	725a      	strb	r2, [r3, #9]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7cd0:	f8d5 9050 	ldr.w	r9, [r5, #80]	; 0x50
    7cd4:	e03a      	b.n	7d4c <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x196c>
    7cd6:	8862      	ldrh	r2, [r4, #2]
    7cd8:	3a08      	subs	r2, #8
    7cda:	429a      	cmp	r2, r3
    7cdc:	dd45      	ble.n	7d6a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x198a>
  return (msg->payload[spotToStart]);
    7cde:	68a2      	ldr	r2, [r4, #8]
    7ce0:	5d92      	ldrb	r2, [r2, r6]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
    7ce2:	f88c 200c 	strb.w	r2, [ip, #12]
  return (msg->payload[spotToStart]);
    7ce6:	68a2      	ldr	r2, [r4, #8]
    7ce8:	4432      	add	r2, r6
    7cea:	f892 c001 	ldrb.w	ip, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
    7cee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    7cf0:	441a      	add	r2, r3
    7cf2:	f882 c00d 	strb.w	ip, [r2, #13]
  return (msg->payload[spotToStart]);
    7cf6:	68a2      	ldr	r2, [r4, #8]
    7cf8:	4432      	add	r2, r6
    7cfa:	f892 c002 	ldrb.w	ip, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
    7cfe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    7d00:	441a      	add	r2, r3
    7d02:	f882 c00e 	strb.w	ip, [r2, #14]
  return (msg->payload[spotToStart]);
    7d06:	68a2      	ldr	r2, [r4, #8]
    7d08:	4432      	add	r2, r6
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
    7d0a:	f892 c003 	ldrb.w	ip, [r2, #3]
    7d0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    7d10:	441a      	add	r2, r3
    7d12:	f882 c00f 	strb.w	ip, [r2, #15]
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
    7d16:	68a2      	ldr	r2, [r4, #8]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
    7d18:	f8d5 9050 	ldr.w	r9, [r5, #80]	; 0x50
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    7d1c:	4432      	add	r2, r6
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7d1e:	360c      	adds	r6, #12
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
    7d20:	eb09 0a03 	add.w	sl, r9, r3
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    7d24:	f892 c005 	ldrb.w	ip, [r2, #5]
    7d28:	7913      	ldrb	r3, [r2, #4]
    7d2a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
    7d2e:	f8aa 3010 	strh.w	r3, [sl, #16]
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
    7d32:	f892 c007 	ldrb.w	ip, [r2, #7]
    7d36:	7993      	ldrb	r3, [r2, #6]
    7d38:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
    7d3c:	f8aa 3012 	strh.w	r3, [sl, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
    7d40:	f7fe fb40 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7d44:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
    7d46:	f8ca 0014 	str.w	r0, [sl, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7d4a:	d00e      	beq.n	7d6a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x198a>
    7d4c:	b2ba      	uxth	r2, r7
    7d4e:	f899 e009 	ldrb.w	lr, [r9, #9]
    7d52:	fb08 f307 	mul.w	r3, r8, r7
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
    7d56:	f106 0108 	add.w	r1, r6, #8
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7d5a:	4596      	cmp	lr, r2
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
    7d5c:	4620      	mov	r0, r4
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
    7d5e:	eb09 0c03 	add.w	ip, r9, r3
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
    7d62:	b289      	uxth	r1, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
    7d64:	f107 0701 	add.w	r7, r7, #1
    7d68:	d8b5      	bhi.n	7cd6 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x18f6>
        packetUBXNAVSAT->moduleQueried = true;
    7d6a:	2301      	movs	r3, #1
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7d6c:	f8d9 0c0c 	ldr.w	r0, [r9, #3084]	; 0xc0c
        packetUBXNAVSAT->moduleQueried = true;
    7d70:	f889 3c00 	strb.w	r3, [r9, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7d74:	b118      	cbz	r0, 7d7e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x199e>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7d76:	f899 3000 	ldrb.w	r3, [r9]
    7d7a:	071e      	lsls	r6, r3, #28
    7d7c:	d503      	bpl.n	7d86 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x19a6>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
    7d7e:	f899 3000 	ldrb.w	r3, [r9]
    7d82:	f7fe bea6 	b.w	6ad2 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x6f2>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
    7d86:	f109 0104 	add.w	r1, r9, #4
    7d8a:	f640 32fc 	movw	r2, #3068	; 0xbfc
    7d8e:	f002 ff4d 	bl	ac2c <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
    7d92:	f8d5 9050 	ldr.w	r9, [r5, #80]	; 0x50
    7d96:	f899 3000 	ldrb.w	r3, [r9]
    7d9a:	f043 0308 	orr.w	r3, r3, #8
    7d9e:	f889 3000 	strb.w	r3, [r9]
    7da2:	e7ec      	b.n	7d7e <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x199e>
      if (packetUBXNAVAOPSTATUS != NULL)
    7da4:	6dae      	ldr	r6, [r5, #88]	; 0x58
    7da6:	2e00      	cmp	r6, #0
    7da8:	f43e ab7a 	beq.w	64a0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0xc0>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
    7dac:	2100      	movs	r1, #0
    7dae:	4620      	mov	r0, r4
    7db0:	f7fe fb08 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
  return (msg->payload[spotToStart]);
    7db4:	68a3      	ldr	r3, [r4, #8]
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
    7db6:	6070      	str	r0, [r6, #4]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7db8:	f04f 31ff 	mov.w	r1, #4294967295
  return (msg->payload[spotToStart]);
    7dbc:	791a      	ldrb	r2, [r3, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
    7dbe:	7232      	strb	r2, [r6, #8]
  return (msg->payload[spotToStart]);
    7dc0:	795b      	ldrb	r3, [r3, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
    7dc2:	7273      	strb	r3, [r6, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7dc4:	6dab      	ldr	r3, [r5, #88]	; 0x58
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7dc6:	6a1a      	ldr	r2, [r3, #32]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
    7dc8:	6159      	str	r1, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
    7dca:	2a00      	cmp	r2, #0
    7dcc:	f43e ad2d 	beq.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
    7dd0:	7819      	ldrb	r1, [r3, #0]
    7dd2:	0709      	lsls	r1, r1, #28
    7dd4:	f53e ad29 	bmi.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
    7dd8:	685e      	ldr	r6, [r3, #4]
    7dda:	6898      	ldr	r0, [r3, #8]
    7ddc:	68d9      	ldr	r1, [r3, #12]
    7dde:	691b      	ldr	r3, [r3, #16]
    7de0:	6016      	str	r6, [r2, #0]
    7de2:	6050      	str	r0, [r2, #4]
    7de4:	6091      	str	r1, [r2, #8]
    7de6:	60d3      	str	r3, [r2, #12]
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
    7de8:	6dab      	ldr	r3, [r5, #88]	; 0x58
    7dea:	781a      	ldrb	r2, [r3, #0]
    7dec:	f042 0208 	orr.w	r2, r2, #8
    7df0:	701a      	strb	r2, [r3, #0]
    7df2:	f7fe bd1a 	b.w	682a <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x44a>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
    7df6:	2700      	movs	r7, #0
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
    7df8:	2118      	movs	r1, #24
    7dfa:	4620      	mov	r0, r4
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
    7dfc:	e9c6 7706 	strd	r7, r7, [r6, #24]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
    7e00:	f898 3014 	ldrb.w	r3, [r8, #20]
    7e04:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
    7e08:	68a2      	ldr	r2, [r4, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
    7e0a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7e0c:	7d52      	ldrb	r2, [r2, #21]
    7e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
    7e12:	68a2      	ldr	r2, [r4, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
    7e14:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7e16:	7d92      	ldrb	r2, [r2, #22]
    7e18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
    7e1c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    7e1e:	f883 7027 	strb.w	r7, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
    7e22:	6d6e      	ldr	r6, [r5, #84]	; 0x54
    7e24:	f7fe face 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
    7e28:	211c      	movs	r1, #28
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
    7e2a:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
    7e2c:	4620      	mov	r0, r4
    7e2e:	f7fe fac9 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
    7e32:	2120      	movs	r1, #32
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
    7e34:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
    7e36:	4620      	mov	r0, r4
    7e38:	f7fe fac4 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
    7e3c:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
    7e3e:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
    7e40:	4620      	mov	r0, r4
          packetUBXNAVRELPOSNED->data.accHeading = 0;
    7e42:	e9c6 770d 	strd	r7, r7, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
    7e46:	f7fe fabd 	bl	63c4 <SFE_UBLOX_GNSS::extractLong(ubxPacket const*, unsigned short)>
    7e4a:	6430      	str	r0, [r6, #64]	; 0x40
    7e4c:	e704      	b.n	7c58 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)+0x1878>
    7e4e:	bf00      	nop

00007e50 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)>:
{
    7e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e54:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
    7e56:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
{
    7e5a:	4604      	mov	r4, r0
    7e5c:	4688      	mov	r8, r1
    7e5e:	4615      	mov	r5, r2
    7e60:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
    7e64:	b9db      	cbnz	r3, 7e9e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4e>
    maximum_payload_size = packetCfgPayloadSize;
    7e66:	f8b0 a100 	ldrh.w	sl, [r0, #256]	; 0x100
  if (incomingUBX->counter < incomingUBX->len + 4)
    7e6a:	886b      	ldrh	r3, [r5, #2]
    7e6c:	88ae      	ldrh	r6, [r5, #4]
    7e6e:	3303      	adds	r3, #3
    7e70:	4637      	mov	r7, r6
    7e72:	42b3      	cmp	r3, r6
    7e74:	db0c      	blt.n	7e90 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x40>
  rollingChecksumA += incoming;
    7e76:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
  rollingChecksumB += rollingChecksumA;
    7e7a:	f894 2163 	ldrb.w	r2, [r4, #355]	; 0x163
  rollingChecksumA += incoming;
    7e7e:	4443      	add	r3, r8
    7e80:	b2db      	uxtb	r3, r3
    7e82:	f884 3162 	strb.w	r3, [r4, #354]	; 0x162
  rollingChecksumB += rollingChecksumA;
    7e86:	4413      	add	r3, r2
    7e88:	f884 3163 	strb.w	r3, [r4, #355]	; 0x163
  if (incomingUBX->counter == 0)
    7e8c:	88ae      	ldrh	r6, [r5, #4]
    7e8e:	4637      	mov	r7, r6
    7e90:	b956      	cbnz	r6, 7ea8 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x58>
    incomingUBX->cls = incoming;
    7e92:	f885 8000 	strb.w	r8, [r5]
  incomingUBX->counter++;
    7e96:	3701      	adds	r7, #1
    7e98:	80af      	strh	r7, [r5, #4]
}
    7e9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
    7e9e:	2b03      	cmp	r3, #3
    7ea0:	d039      	beq.n	7f16 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xc6>
    maximum_payload_size = 2;
    7ea2:	f04f 0a02 	mov.w	sl, #2
    7ea6:	e7e0      	b.n	7e6a <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a>
  else if (incomingUBX->counter == 1)
    7ea8:	2e01      	cmp	r6, #1
    7eaa:	d02e      	beq.n	7f0a <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xba>
  else if (incomingUBX->counter == 2) // Len LSB
    7eac:	2e02      	cmp	r6, #2
    7eae:	d065      	beq.n	7f7c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x12c>
  else if (incomingUBX->counter == 3) // Len MSB
    7eb0:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
    7eb2:	886b      	ldrh	r3, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
    7eb4:	d05e      	beq.n	7f74 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x124>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
    7eb6:	1d1a      	adds	r2, r3, #4
    7eb8:	4296      	cmp	r6, r2
    7eba:	f000 80a4 	beq.w	8006 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1b6>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
    7ebe:	3305      	adds	r3, #5
    7ec0:	429e      	cmp	r6, r3
    7ec2:	f000 80a3 	beq.w	800c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1bc>
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
    7ec6:	786a      	ldrb	r2, [r5, #1]
    7ec8:	4620      	mov	r0, r4
    7eca:	7829      	ldrb	r1, [r5, #0]
    7ecc:	f7fb fce4 	bl	3898 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)>
    uint16_t startingSpot = incomingUBX->startingSpot;
    7ed0:	88eb      	ldrh	r3, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
    7ed2:	2800      	cmp	r0, #0
    7ed4:	d058      	beq.n	7f88 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x138>
    if (ignoreThisPayload == false)
    7ed6:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    7eda:	2b00      	cmp	r3, #0
    7edc:	d1db      	bne.n	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
    7ede:	3e04      	subs	r6, #4
    7ee0:	1af3      	subs	r3, r6, r3
    7ee2:	4553      	cmp	r3, sl
    7ee4:	f280 8127 	bge.w	8136 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2e6>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
    7ee8:	68aa      	ldr	r2, [r5, #8]
    7eea:	f802 8003 	strb.w	r8, [r2, r3]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    7eee:	88ae      	ldrh	r6, [r5, #4]
    7ef0:	4637      	mov	r7, r6
    7ef2:	f10a 0306 	add.w	r3, sl, #6
    7ef6:	42b3      	cmp	r3, r6
    7ef8:	d1cd      	bne.n	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
    7efa:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    7efe:	2b00      	cmp	r3, #0
    7f00:	d04e      	beq.n	7fa0 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x150>
  incomingUBX->counter++;
    7f02:	3701      	adds	r7, #1
    7f04:	80af      	strh	r7, [r5, #4]
}
    7f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  incomingUBX->counter++;
    7f0a:	3701      	adds	r7, #1
    incomingUBX->id = incoming;
    7f0c:	f885 8001 	strb.w	r8, [r5, #1]
  incomingUBX->counter++;
    7f10:	80af      	strh	r7, [r5, #4]
}
    7f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
    7f16:	7852      	ldrb	r2, [r2, #1]
    7f18:	7829      	ldrb	r1, [r5, #0]
    7f1a:	f7fb fedb 	bl	3cd4 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)>
    if (maximum_payload_size == 0)
    7f1e:	4682      	mov	sl, r0
    7f20:	2800      	cmp	r0, #0
    7f22:	d1a2      	bne.n	7e6a <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    7f24:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    7f28:	b91b      	cbnz	r3, 7f32 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xe2>
    7f2a:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d09b      	beq.n	7e6a <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
    7f32:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    7f36:	2237      	movs	r2, #55	; 0x37
    7f38:	49af      	ldr	r1, [pc, #700]	; (81f8 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3a8>)
    7f3a:	6803      	ldr	r3, [r0, #0]
    7f3c:	685b      	ldr	r3, [r3, #4]
    7f3e:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    7f40:	7829      	ldrb	r1, [r5, #0]
    7f42:	2300      	movs	r3, #0
    7f44:	220a      	movs	r2, #10
    7f46:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    7f4a:	f002 fac9 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        _debugSerial->print(F(" ID: 0x"));
    7f4e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    7f52:	2207      	movs	r2, #7
    7f54:	49a9      	ldr	r1, [pc, #676]	; (81fc <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3ac>)
    7f56:	6803      	ldr	r3, [r0, #0]
    7f58:	685b      	ldr	r3, [r3, #4]
    7f5a:	4798      	blx	r3
        _debugSerial->println(incomingUBX->id);
    7f5c:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    7f60:	2300      	movs	r3, #0
    7f62:	220a      	movs	r2, #10
    7f64:	7869      	ldrb	r1, [r5, #1]
    7f66:	4630      	mov	r0, r6
    7f68:	f002 faba 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    7f6c:	4630      	mov	r0, r6
    7f6e:	f002 fa9b 	bl	a4a8 <Print::println()>
    7f72:	e77a      	b.n	7e6a <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a>
    incomingUBX->len |= incoming << 8;
    7f74:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
    7f78:	806b      	strh	r3, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    7f7a:	e78c      	b.n	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
  incomingUBX->counter++;
    7f7c:	3701      	adds	r7, #1
    incomingUBX->len = incoming;
    7f7e:	f8a5 8002 	strh.w	r8, [r5, #2]
  incomingUBX->counter++;
    7f82:	80af      	strh	r7, [r5, #4]
}
    7f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ignoreThisPayload == false)
    7f88:	f894 2154 	ldrb.w	r2, [r4, #340]	; 0x154
    7f8c:	2a00      	cmp	r2, #0
    7f8e:	d182      	bne.n	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
      if ((incomingUBX->counter - 4) >= startingSpot)
    7f90:	1ef2      	subs	r2, r6, #3
    7f92:	429a      	cmp	r2, r3
    7f94:	dca3      	bgt.n	7ede <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x8e>
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    7f96:	f10a 0306 	add.w	r3, sl, #6
    7f9a:	429e      	cmp	r6, r3
    7f9c:	f47f af7b 	bne.w	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
    7fa0:	2300      	movs	r3, #0
    7fa2:	7123      	strb	r3, [r4, #4]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    7fa4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    7fa8:	b923      	cbnz	r3, 7fb4 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x164>
    7faa:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    7fae:	b90b      	cbnz	r3, 7fb4 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x164>
  incomingUBX->counter++;
    7fb0:	4637      	mov	r7, r6
    7fb2:	e770      	b.n	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
    7fb4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    7fb8:	2231      	movs	r2, #49	; 0x31
    7fba:	4991      	ldr	r1, [pc, #580]	; (8200 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3b0>)
    7fbc:	6803      	ldr	r3, [r0, #0]
    7fbe:	685b      	ldr	r3, [r3, #4]
    7fc0:	4798      	blx	r3
      _debugSerial->print(F(" activePacketBuffer: "));
    7fc2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    7fc6:	2215      	movs	r2, #21
    7fc8:	498e      	ldr	r1, [pc, #568]	; (8204 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3b4>)
    7fca:	6803      	ldr	r3, [r0, #0]
    7fcc:	685b      	ldr	r3, [r3, #4]
    7fce:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    7fd0:	f894 1155 	ldrb.w	r1, [r4, #341]	; 0x155
    7fd4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    7fd8:	f002 fa5a 	bl	a490 <Print::print(long)>
      _debugSerial->print(F(" maximum_payload_size: "));
    7fdc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    7fe0:	2217      	movs	r2, #23
    7fe2:	4989      	ldr	r1, [pc, #548]	; (8208 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3b8>)
    7fe4:	6803      	ldr	r3, [r0, #0]
    7fe6:	685b      	ldr	r3, [r3, #4]
    7fe8:	4798      	blx	r3
      _debugSerial->println(maximum_payload_size);
    7fea:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
	size_t print(int n)				{ return print((long)n); }
    7fee:	4651      	mov	r1, sl
    7ff0:	4620      	mov	r0, r4
    7ff2:	f002 fa4d 	bl	a490 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    7ff6:	4620      	mov	r0, r4
    7ff8:	f002 fa56 	bl	a4a8 <Print::println()>
  incomingUBX->counter++;
    7ffc:	88af      	ldrh	r7, [r5, #4]
    7ffe:	3701      	adds	r7, #1
    8000:	80af      	strh	r7, [r5, #4]
}
    8002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    incomingUBX->checksumA = incoming;
    8006:	f885 800c 	strb.w	r8, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    800a:	e772      	b.n	7ef2 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xa2>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
    800c:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
    800e:	f885 800d 	strb.w	r8, [r5, #13]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
    8012:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
    8016:	7123      	strb	r3, [r4, #4]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
    8018:	89a9      	ldrh	r1, [r5, #12]
    801a:	4291      	cmp	r1, r2
    801c:	d065      	beq.n	80ea <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x29a>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
    801e:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
    8020:	782b      	ldrb	r3, [r5, #0]
    8022:	454b      	cmp	r3, r9
    8024:	f000 80ce 	beq.w	81c4 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x374>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
    8028:	2b05      	cmp	r3, #5
    802a:	f000 80d2 	beq.w	81d2 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x382>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    802e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8032:	b91b      	cbnz	r3, 803c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1ec>
    8034:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    8038:	2b00      	cmp	r3, #0
    803a:	d044      	beq.n	80c6 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x276>
        _debugSerial->print(F("Checksum failed:"));
    803c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8040:	2210      	movs	r2, #16
    8042:	4972      	ldr	r1, [pc, #456]	; (820c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3bc>)
    8044:	6803      	ldr	r3, [r0, #0]
    8046:	685b      	ldr	r3, [r3, #4]
    8048:	4798      	blx	r3
        _debugSerial->print(F(" checksumA: "));
    804a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    804e:	220c      	movs	r2, #12
    8050:	496f      	ldr	r1, [pc, #444]	; (8210 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3c0>)
    8052:	6803      	ldr	r3, [r0, #0]
    8054:	685b      	ldr	r3, [r3, #4]
    8056:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    8058:	2300      	movs	r3, #0
    805a:	220a      	movs	r2, #10
    805c:	7b29      	ldrb	r1, [r5, #12]
    805e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8062:	f002 fa3d 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        _debugSerial->print(F(" checksumB: "));
    8066:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    806a:	220c      	movs	r2, #12
    806c:	4969      	ldr	r1, [pc, #420]	; (8214 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3c4>)
    806e:	6803      	ldr	r3, [r0, #0]
    8070:	685b      	ldr	r3, [r3, #4]
    8072:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    8074:	2300      	movs	r3, #0
    8076:	220a      	movs	r2, #10
    8078:	7b69      	ldrb	r1, [r5, #13]
    807a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    807e:	f002 fa2f 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        _debugSerial->print(F(" rollingChecksumA: "));
    8082:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8086:	2213      	movs	r2, #19
    8088:	4963      	ldr	r1, [pc, #396]	; (8218 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3c8>)
    808a:	6803      	ldr	r3, [r0, #0]
    808c:	685b      	ldr	r3, [r3, #4]
    808e:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    8090:	2300      	movs	r3, #0
    8092:	220a      	movs	r2, #10
    8094:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
    8098:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    809c:	f002 fa20 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        _debugSerial->print(F(" rollingChecksumB: "));
    80a0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    80a4:	2213      	movs	r2, #19
    80a6:	495d      	ldr	r1, [pc, #372]	; (821c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3cc>)
    80a8:	6803      	ldr	r3, [r0, #0]
    80aa:	685b      	ldr	r3, [r3, #4]
    80ac:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    80ae:	2300      	movs	r3, #0
    80b0:	220a      	movs	r2, #10
    80b2:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
    80b6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    80ba:	f002 fa11 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        _debugSerial->println();
    80be:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    80c2:	f002 f9f1 	bl	a4a8 <Print::println()>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
    80c6:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    80ca:	2b03      	cmp	r3, #3
    80cc:	f47f af0f 	bne.w	7eee <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x9e>
      delete[] payloadAuto; // Created with new[]
    80d0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    80d4:	b108      	cbz	r0, 80da <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x28a>
    80d6:	f002 fe47 	bl	ad68 <operator delete[](void*)>
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    80da:	88ae      	ldrh	r6, [r5, #4]
      payloadAuto = NULL;   // Redundant?
    80dc:	2300      	movs	r3, #0
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    80de:	4637      	mov	r7, r6
      payloadAuto = NULL;   // Redundant?
    80e0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
      packetAuto.payload = payloadAuto;
    80e4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
    80e8:	e703      	b.n	7ef2 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xa2>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
    80ea:	2301      	movs	r3, #1
    80ec:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
    80ee:	f884 317f 	strb.w	r3, [r4, #383]	; 0x17f
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
    80f2:	7829      	ldrb	r1, [r5, #0]
    80f4:	4549      	cmp	r1, r9
    80f6:	d02d      	beq.n	8154 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x304>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
    80f8:	882b      	ldrh	r3, [r5, #0]
    80fa:	f240 1205 	movw	r2, #261	; 0x105
    80fe:	4293      	cmp	r3, r2
    8100:	d071      	beq.n	81e6 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x396>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
    8102:	2b05      	cmp	r3, #5
    8104:	d104      	bne.n	8110 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2c0>
    8106:	68ab      	ldr	r3, [r5, #8]
    8108:	781a      	ldrb	r2, [r3, #0]
    810a:	454a      	cmp	r2, r9
    810c:	f000 80b1 	beq.w	8272 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x422>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
    8110:	786a      	ldrb	r2, [r5, #1]
    8112:	4620      	mov	r0, r4
    8114:	f7fb fbc0 	bl	3898 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)>
    8118:	b308      	cbz	r0, 815e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x30e>
        if (_printDebug == true)
    811a:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    811e:	2b00      	cmp	r3, #0
    8120:	f040 8086 	bne.w	8230 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3e0>
      if (ignoreThisPayload == false)
    8124:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    8128:	2b00      	cmp	r3, #0
    812a:	d1cc      	bne.n	80c6 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x276>
        processUBXpacket(incomingUBX);
    812c:	4629      	mov	r1, r5
    812e:	4620      	mov	r0, r4
    8130:	f7fe f956 	bl	63e0 <SFE_UBLOX_GNSS::processUBXpacket(ubxPacket*)>
    8134:	e7c7      	b.n	80c6 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x276>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
    8136:	2300      	movs	r3, #0
    8138:	7123      	strb	r3, [r4, #4]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    813a:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    813e:	2b00      	cmp	r3, #0
    8140:	f000 80d3 	beq.w	82ea <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x49a>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
    8144:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8148:	2224      	movs	r2, #36	; 0x24
    814a:	4935      	ldr	r1, [pc, #212]	; (8220 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3d0>)
    814c:	6803      	ldr	r3, [r0, #0]
    814e:	685b      	ldr	r3, [r3, #4]
    8150:	4798      	blx	r3
    8152:	e736      	b.n	7fc2 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x172>
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
    8154:	786b      	ldrb	r3, [r5, #1]
    8156:	455b      	cmp	r3, fp
    8158:	d1ce      	bne.n	80f8 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2a8>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
    815a:	2301      	movs	r3, #1
    815c:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
    815e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8162:	2b00      	cmp	r3, #0
    8164:	d0de      	beq.n	8124 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2d4>
        _debugSerial->print(F("Incoming: Size: "));
    8166:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    816a:	2210      	movs	r2, #16
    816c:	492d      	ldr	r1, [pc, #180]	; (8224 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3d4>)
    816e:	6803      	ldr	r3, [r0, #0]
    8170:	685b      	ldr	r3, [r3, #4]
    8172:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    8174:	8869      	ldrh	r1, [r5, #2]
    8176:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    817a:	f002 f989 	bl	a490 <Print::print(long)>
        _debugSerial->print(F(" Received: "));
    817e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8182:	220b      	movs	r2, #11
    8184:	4928      	ldr	r1, [pc, #160]	; (8228 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3d8>)
    8186:	6803      	ldr	r3, [r0, #0]
    8188:	685b      	ldr	r3, [r3, #4]
    818a:	4798      	blx	r3
        printPacket(incomingUBX);
    818c:	2200      	movs	r2, #0
    818e:	4629      	mov	r1, r5
    8190:	4620      	mov	r0, r4
    8192:	f7fd f9a1 	bl	54d8 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
    8196:	7bab      	ldrb	r3, [r5, #14]
    8198:	2b01      	cmp	r3, #1
    819a:	f000 80a0 	beq.w	82de <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x48e>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
    819e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
    81a2:	2b01      	cmp	r3, #1
    81a4:	f000 8095 	beq.w	82d2 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x482>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
    81a8:	7beb      	ldrb	r3, [r5, #15]
    81aa:	2b01      	cmp	r3, #1
    81ac:	f000 808b 	beq.w	82c6 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x476>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
    81b0:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
    81b4:	2b01      	cmp	r3, #1
    81b6:	d1b5      	bne.n	8124 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2d4>
          _debugSerial->println(F("packetAck classAndIDmatch"));
    81b8:	491c      	ldr	r1, [pc, #112]	; (822c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3dc>)
    81ba:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    81be:	f7fa fe5b 	bl	2e78 <Print::println(__FlashStringHelper const*) [clone .isra.0]>
    81c2:	e7af      	b.n	8124 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2d4>
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
    81c4:	786a      	ldrb	r2, [r5, #1]
    81c6:	455a      	cmp	r2, fp
    81c8:	f47f af2e 	bne.w	8028 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d8>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
    81cc:	2300      	movs	r3, #0
    81ce:	73eb      	strb	r3, [r5, #15]
    81d0:	e72d      	b.n	802e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1de>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
    81d2:	68ab      	ldr	r3, [r5, #8]
    81d4:	781a      	ldrb	r2, [r3, #0]
    81d6:	454a      	cmp	r2, r9
    81d8:	f47f af29 	bne.w	802e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1de>
    81dc:	785b      	ldrb	r3, [r3, #1]
    81de:	455b      	cmp	r3, fp
    81e0:	f47f af25 	bne.w	802e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1de>
    81e4:	e7f2      	b.n	81cc <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x37c>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
    81e6:	68ab      	ldr	r3, [r5, #8]
    81e8:	781a      	ldrb	r2, [r3, #0]
    81ea:	454a      	cmp	r2, r9
    81ec:	d190      	bne.n	8110 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2c0>
    81ee:	785b      	ldrb	r3, [r3, #1]
    81f0:	455b      	cmp	r3, fp
    81f2:	d18d      	bne.n	8110 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2c0>
    81f4:	e7b1      	b.n	815a <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x30a>
    81f6:	bf00      	nop
    81f8:	20001d8c 	.word	0x20001d8c
    81fc:	20001dc4 	.word	0x20001dc4
    8200:	20001f48 	.word	0x20001f48
    8204:	20001f7c 	.word	0x20001f7c
    8208:	20001f94 	.word	0x20001f94
    820c:	20001ec4 	.word	0x20001ec4
    8210:	20001ed8 	.word	0x20001ed8
    8214:	20001ee8 	.word	0x20001ee8
    8218:	20001ef8 	.word	0x20001ef8
    821c:	20001f0c 	.word	0x20001f0c
    8220:	20001f20 	.word	0x20001f20
    8224:	20001e44 	.word	0x20001e44
    8228:	20001e58 	.word	0x20001e58
    822c:	20001ea8 	.word	0x20001ea8
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
    8230:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8234:	2233      	movs	r2, #51	; 0x33
    8236:	4930      	ldr	r1, [pc, #192]	; (82f8 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4a8>)
    8238:	6803      	ldr	r3, [r0, #0]
    823a:	685b      	ldr	r3, [r3, #4]
    823c:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    823e:	7829      	ldrb	r1, [r5, #0]
    8240:	2300      	movs	r3, #0
    8242:	2210      	movs	r2, #16
    8244:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8248:	f002 f94a 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->print(F(" ID: 0x"));
    824c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8250:	2207      	movs	r2, #7
    8252:	492a      	ldr	r1, [pc, #168]	; (82fc <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4ac>)
    8254:	6803      	ldr	r3, [r0, #0]
    8256:	685b      	ldr	r3, [r3, #4]
    8258:	4798      	blx	r3
          _debugSerial->println(incomingUBX->id, HEX);
    825a:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    825e:	2300      	movs	r3, #0
    8260:	2210      	movs	r2, #16
    8262:	7869      	ldrb	r1, [r5, #1]
    8264:	4630      	mov	r0, r6
    8266:	f002 f93b 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    826a:	4630      	mov	r0, r6
    826c:	f002 f91c 	bl	a4a8 <Print::println()>
    8270:	e775      	b.n	815e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x30e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
    8272:	785b      	ldrb	r3, [r3, #1]
    8274:	455b      	cmp	r3, fp
    8276:	f47f af4b 	bne.w	8110 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2c0>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
    827a:	2203      	movs	r2, #3
        if (_printDebug == true)
    827c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
    8280:	73ea      	strb	r2, [r5, #15]
        if (_printDebug == true)
    8282:	2b00      	cmp	r3, #0
    8284:	f43f af4e 	beq.w	8124 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2d4>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    8288:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    828c:	491c      	ldr	r1, [pc, #112]	; (8300 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4b0>)
    828e:	f7fa fde3 	bl	2e58 <Print::write(char const*) [clone .isra.0]>
          _debugSerial->print(incomingUBX->payload[0], HEX);
    8292:	68aa      	ldr	r2, [r5, #8]
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8294:	2300      	movs	r3, #0
    8296:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    829a:	7811      	ldrb	r1, [r2, #0]
    829c:	2210      	movs	r2, #16
    829e:	f002 f91f 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    82a2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    82a6:	4917      	ldr	r1, [pc, #92]	; (8304 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4b4>)
    82a8:	f7fa fdd6 	bl	2e58 <Print::write(char const*) [clone .isra.0]>
          _debugSerial->println(incomingUBX->payload[1], HEX);
    82ac:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
    82b0:	68ab      	ldr	r3, [r5, #8]
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    82b2:	2210      	movs	r2, #16
    82b4:	4630      	mov	r0, r6
    82b6:	7859      	ldrb	r1, [r3, #1]
    82b8:	2300      	movs	r3, #0
    82ba:	f002 f911 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    82be:	4630      	mov	r0, r6
    82c0:	f002 f8f2 	bl	a4a8 <Print::println()>
    82c4:	e74b      	b.n	815e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x30e>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
    82c6:	4910      	ldr	r1, [pc, #64]	; (8308 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4b8>)
    82c8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    82cc:	f7fa fdd4 	bl	2e78 <Print::println(__FlashStringHelper const*) [clone .isra.0]>
    82d0:	e76e      	b.n	81b0 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x360>
          _debugSerial->println(F("packetAck now valid"));
    82d2:	490e      	ldr	r1, [pc, #56]	; (830c <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4bc>)
    82d4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    82d8:	f7fa fdce 	bl	2e78 <Print::println(__FlashStringHelper const*) [clone .isra.0]>
    82dc:	e764      	b.n	81a8 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x358>
          _debugSerial->println(F("packetCfg now valid"));
    82de:	490c      	ldr	r1, [pc, #48]	; (8310 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4c0>)
    82e0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    82e4:	f7fa fdc8 	bl	2e78 <Print::println(__FlashStringHelper const*) [clone .isra.0]>
    82e8:	e759      	b.n	819e <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x34e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    82ea:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    82ee:	2b00      	cmp	r3, #0
    82f0:	f43f add1 	beq.w	7e96 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x46>
    82f4:	e726      	b.n	8144 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2f4>
    82f6:	bf00      	nop
    82f8:	20001e10 	.word	0x20001e10
    82fc:	20001dc4 	.word	0x20001dc4
    8300:	20001dcc 	.word	0x20001dcc
    8304:	20001dfc 	.word	0x20001dfc
    8308:	20001e8c 	.word	0x20001e8c
    830c:	20001e78 	.word	0x20001e78
    8310:	20001e64 	.word	0x20001e64

00008314 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)>:
{
    8314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8318:	4604      	mov	r4, r0
    831a:	b085      	sub	sp, #20
  if (_outputPort != NULL)
    831c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
{
    8320:	4617      	mov	r7, r2
    8322:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    8326:	461d      	mov	r5, r3
    8328:	f88d 100f 	strb.w	r1, [sp, #15]
  if (_outputPort != NULL)
    832c:	b118      	cbz	r0, 8336 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
    832e:	6803      	ldr	r3, [r0, #0]
    8330:	b2c9      	uxtb	r1, r1
    8332:	681b      	ldr	r3, [r3, #0]
    8334:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
    8336:	7920      	ldrb	r0, [r4, #4]
    8338:	2801      	cmp	r0, #1
    833a:	d91b      	bls.n	8374 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x60>
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
    833c:	2802      	cmp	r0, #2
    833e:	d005      	beq.n	834c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x38>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
    8340:	2803      	cmp	r0, #3
    8342:	f000 826a 	beq.w	881a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x506>
}
    8346:	b005      	add	sp, #20
    8348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
    834c:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    8350:	2b00      	cmp	r3, #0
    8352:	f000 80bf 	beq.w	84d4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1c0>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
    8356:	2b01      	cmp	r3, #1
    8358:	f000 80f9 	beq.w	854e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x23a>
    else if (ubxFrameCounter == 2) // Class
    835c:	3b02      	subs	r3, #2
    835e:	2b05      	cmp	r3, #5
    8360:	f200 81af 	bhi.w	86c2 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3ae>
    8364:	e8df f013 	tbh	[pc, r3, lsl #1]
    8368:	0200014a 	.word	0x0200014a
    836c:	01f001fb 	.word	0x01f001fb
    8370:	015c01bc 	.word	0x015c01bc
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
    8374:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8378:	29b5      	cmp	r1, #181	; 0xb5
    837a:	f000 80cb 	beq.w	8514 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x200>
    else if (incoming == '$')
    837e:	2924      	cmp	r1, #36	; 0x24
    8380:	f000 809e 	beq.w	84c0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1ac>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
    8384:	29d3      	cmp	r1, #211	; 0xd3
    8386:	f000 8127 	beq.w	85d8 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2c4>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
    838a:	2801      	cmp	r0, #1
    838c:	d1db      	bne.n	8346 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x32>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
    838e:	f994 3164 	ldrsb.w	r3, [r4, #356]	; 0x164
    8392:	2b00      	cmp	r3, #0
    8394:	f000 80d0 	beq.w	8538 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x224>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
    8398:	2b01      	cmp	r3, #1
    839a:	f000 80cb 	beq.w	8534 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x220>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
    839e:	b2da      	uxtb	r2, r3
    83a0:	2a05      	cmp	r2, #5
    83a2:	f240 80e4 	bls.w	856e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x25a>
      if (isThisNMEAauto())
    83a6:	4620      	mov	r0, r4
    83a8:	f7fb ff52 	bl	4250 <SFE_UBLOX_GNSS::isThisNMEAauto()>
    83ac:	b338      	cbz	r0, 83fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xea>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
    83ae:	4620      	mov	r0, r4
    83b0:	f7fc f8de 	bl	4570 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()>
    83b4:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
    83b6:	4620      	mov	r0, r4
    83b8:	f7fc f97a 	bl	46b0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()>
    83bc:	4606      	mov	r6, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
    83be:	4620      	mov	r0, r4
    83c0:	f7fc fcaa 	bl	4d18 <SFE_UBLOX_GNSS::getNMEAMaxLength()>
        if (*lengthPtr < nmeaMaxLength)
    83c4:	782b      	ldrb	r3, [r5, #0]
    83c6:	4283      	cmp	r3, r0
    83c8:	d219      	bcs.n	83fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xea>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
    83ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83ce:	54f2      	strb	r2, [r6, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
    83d0:	782b      	ldrb	r3, [r5, #0]
    83d2:	3301      	adds	r3, #1
    83d4:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
    83d6:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
    83d8:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
    83da:	d110      	bne.n	83fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xea>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    83dc:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    83e0:	b913      	cbnz	r3, 83e8 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xd4>
    83e2:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    83e6:	b153      	cbz	r3, 83fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xea>
              _debugSerial->println(F("process: NMEA buffer is full!"));
    83e8:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    83ec:	221d      	movs	r2, #29
    83ee:	49b7      	ldr	r1, [pc, #732]	; (86cc <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3b8>)
    83f0:	682b      	ldr	r3, [r5, #0]
    83f2:	4628      	mov	r0, r5
    83f4:	685b      	ldr	r3, [r3, #4]
    83f6:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    83f8:	4628      	mov	r0, r5
    83fa:	f002 f855 	bl	a4a8 <Print::println()>
      if (logThisNMEA())
    83fe:	4620      	mov	r0, r4
    8400:	f7fb fcd4 	bl	3dac <SFE_UBLOX_GNSS::logThisNMEA()>
    8404:	2800      	cmp	r0, #0
    8406:	f040 8201 	bne.w	880c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4f8>
      if (processThisNMEA())
    840a:	4620      	mov	r0, r4
    840c:	f7fb fe30 	bl	4070 <SFE_UBLOX_GNSS::processThisNMEA()>
        processNMEA(incoming); // Pass incoming to processNMEA
    8410:	f89d 100f 	ldrb.w	r1, [sp, #15]
      if (processThisNMEA())
    8414:	2800      	cmp	r0, #0
    8416:	f040 81f5 	bne.w	8804 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4f0>
    if (incoming == '*')
    841a:	292a      	cmp	r1, #42	; 0x2a
    841c:	f000 809e 	beq.w	855c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x248>
    nmeaByteCounter++; // Increment the byte counter
    8420:	f894 2164 	ldrb.w	r2, [r4, #356]	; 0x164
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
    8424:	f994 3165 	ldrsb.w	r3, [r4, #357]	; 0x165
    nmeaByteCounter++; // Increment the byte counter
    8428:	3201      	adds	r2, #1
    842a:	b255      	sxtb	r5, r2
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
    842c:	42ab      	cmp	r3, r5
    nmeaByteCounter++; // Increment the byte counter
    842e:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
    8432:	d06c      	beq.n	850e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1fa>
    if (nmeaByteCounter == 0) // Check if we are done
    8434:	2d00      	cmp	r5, #0
    8436:	d186      	bne.n	8346 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x32>
      if (isThisNMEAauto())
    8438:	4620      	mov	r0, r4
    843a:	f7fb ff09 	bl	4250 <SFE_UBLOX_GNSS::isThisNMEAauto()>
    843e:	2800      	cmp	r0, #0
    8440:	d039      	beq.n	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
    8442:	4620      	mov	r0, r4
    8444:	f7fc f894 	bl	4570 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()>
    8448:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
    844a:	4620      	mov	r0, r4
    844c:	f7fc f930 	bl	46b0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()>
    8450:	4606      	mov	r6, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
    8452:	4620      	mov	r0, r4
    8454:	f7fc fc60 	bl	4d18 <SFE_UBLOX_GNSS::getNMEAMaxLength()>
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
    8458:	f100 3cff 	add.w	ip, r0, #4294967295
        uint8_t nmeaMaxLength = getNMEAMaxLength();
    845c:	4680      	mov	r8, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
    845e:	f1bc 0f01 	cmp.w	ip, #1
    8462:	dd17      	ble.n	8494 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x180>
        uint8_t thisChar = '\0';
    8464:	462a      	mov	r2, r5
        uint8_t charsChecked = 1; // Start after the $
    8466:	2301      	movs	r3, #1
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
    8468:	783d      	ldrb	r5, [r7, #0]
        uint8_t nmeaChecksum = 0;
    846a:	4610      	mov	r0, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
    846c:	4619      	mov	r1, r3
    846e:	3d04      	subs	r5, #4
    8470:	e00b      	b.n	848a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x176>
    8472:	2a2a      	cmp	r2, #42	; 0x2a
    8474:	f000 8213 	beq.w	889e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x58a>
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
    8478:	5cf2      	ldrb	r2, [r6, r3]
          charsChecked++; // Increment the counter
    847a:	3301      	adds	r3, #1
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
    847c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
    847e:	b2db      	uxtb	r3, r3
            nmeaChecksum ^= thisChar;
    8480:	bf18      	it	ne
    8482:	4050      	eorne	r0, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
    8484:	4563      	cmp	r3, ip
    8486:	4619      	mov	r1, r3
    8488:	da01      	bge.n	848e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x17a>
    848a:	428d      	cmp	r5, r1
    848c:	dcf1      	bgt.n	8472 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x15e>
        if (thisChar == '*') // Make sure we found the *
    848e:	2a2a      	cmp	r2, #42	; 0x2a
    8490:	f000 8205 	beq.w	889e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x58a>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    8494:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8498:	b913      	cbnz	r3, 84a0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x18c>
    849a:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    849e:	b153      	cbz	r3, 84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
    84a0:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    84a4:	2220      	movs	r2, #32
    84a6:	498a      	ldr	r1, [pc, #552]	; (86d0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3bc>)
    84a8:	682b      	ldr	r3, [r5, #0]
    84aa:	4628      	mov	r0, r5
    84ac:	685b      	ldr	r3, [r3, #4]
    84ae:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    84b0:	4628      	mov	r0, r5
    84b2:	f001 fff9 	bl	a4a8 <Print::println()>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
    84b6:	2300      	movs	r3, #0
    84b8:	7123      	strb	r3, [r4, #4]
}
    84ba:	b005      	add	sp, #20
    84bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nmeaByteCounter = 0; // Reset the NMEA byte counter
    84c0:	2200      	movs	r2, #0
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
    84c2:	2001      	movs	r0, #1
    84c4:	4613      	mov	r3, r2
      nmeaByteCounter = 0; // Reset the NMEA byte counter
    84c6:	f884 2164 	strb.w	r2, [r4, #356]	; 0x164
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
    84ca:	7120      	strb	r0, [r4, #4]
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
    84cc:	4423      	add	r3, r4
    84ce:	f883 1166 	strb.w	r1, [r3, #358]	; 0x166
    if (nmeaByteCounter == 5)
    84d2:	e7a2      	b.n	841a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x106>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
    84d4:	f89d 800f 	ldrb.w	r8, [sp, #15]
    84d8:	f1b8 0fb5 	cmp.w	r8, #181	; 0xb5
    84dc:	d025      	beq.n	852a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x216>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
    84de:	7123      	strb	r3, [r4, #4]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    84e0:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    84e4:	2b01      	cmp	r3, #1
    84e6:	d065      	beq.n	85b4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2a0>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
    84e8:	b34b      	cbz	r3, 853e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x22a>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
    84ea:	2b02      	cmp	r3, #2
    84ec:	d06b      	beq.n	85c6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2b2>
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
    84ee:	462b      	mov	r3, r5
    84f0:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    84f4:	4641      	mov	r1, r8
    84f6:	4620      	mov	r0, r4
    84f8:	9600      	str	r6, [sp, #0]
    84fa:	f7ff fca9 	bl	7e50 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)>
    ubxFrameCounter++;
    84fe:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    8502:	3301      	adds	r3, #1
    8504:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
}
    8508:	b005      	add	sp, #20
    850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
    850e:	2300      	movs	r3, #0
    8510:	7123      	strb	r3, [r4, #4]
    8512:	e78f      	b.n	8434 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x120>
      ubxFrameCounter = 0;
    8514:	2300      	movs	r3, #0
    8516:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
      packetBuf.counter = 0;
    851a:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
      ignoreThisPayload = false; // We should not ignore this payload - yet
    851e:	f44f 7300 	mov.w	r3, #512	; 0x200
    8522:	f8a4 3154 	strh.w	r3, [r4, #340]	; 0x154
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
    8526:	2302      	movs	r3, #2
    8528:	7123      	strb	r3, [r4, #4]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    852a:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    852e:	f04f 08b5 	mov.w	r8, #181	; 0xb5
    8532:	e7d7      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
    8534:	2947      	cmp	r1, #71	; 0x47
    8536:	d0c9      	beq.n	84cc <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1b8>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
    8538:	2300      	movs	r3, #0
    853a:	7123      	strb	r3, [r4, #4]
    853c:	e76d      	b.n	841a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x106>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
    853e:	462b      	mov	r3, r5
    8540:	463a      	mov	r2, r7
    8542:	4641      	mov	r1, r8
    8544:	4620      	mov	r0, r4
    8546:	9600      	str	r6, [sp, #0]
    8548:	f7ff fc82 	bl	7e50 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)>
    854c:	e7d7      	b.n	84fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1ea>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
    854e:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8552:	f1b8 0f62 	cmp.w	r8, #98	; 0x62
    8556:	d0c3      	beq.n	84e0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1cc>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
    8558:	2300      	movs	r3, #0
    855a:	e7c0      	b.n	84de <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1ca>
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
    855c:	f994 3165 	ldrsb.w	r3, [r4, #357]	; 0x165
    nmeaByteCounter++; // Increment the byte counter
    8560:	22fc      	movs	r2, #252	; 0xfc
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
    8562:	3304      	adds	r3, #4
    nmeaByteCounter++; // Increment the byte counter
    8564:	f884 2164 	strb.w	r2, [r4, #356]	; 0x164
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
    8568:	f47f aeed 	bne.w	8346 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x32>
    856c:	e7a3      	b.n	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
    856e:	18e2      	adds	r2, r4, r3
    if (nmeaByteCounter == 5)
    8570:	2b05      	cmp	r3, #5
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
    8572:	f882 1166 	strb.w	r1, [r2, #358]	; 0x166
    if (nmeaByteCounter == 5)
    8576:	f47f af50 	bne.w	841a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x106>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
    857a:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
    857e:	b3bb      	cbz	r3, 85f0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2dc>
      if (isThisNMEAauto())
    8580:	4620      	mov	r0, r4
    8582:	f7fb fe65 	bl	4250 <SFE_UBLOX_GNSS::isThisNMEAauto()>
    8586:	2800      	cmp	r0, #0
    8588:	f040 8170 	bne.w	886c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x558>
      if (logThisNMEA())
    858c:	4620      	mov	r0, r4
    858e:	f7fb fc0d 	bl	3dac <SFE_UBLOX_GNSS::logThisNMEA()>
    8592:	2800      	cmp	r0, #0
    8594:	f040 8163 	bne.w	885e <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x54a>
      if (processThisNMEA())
    8598:	4620      	mov	r0, r4
    859a:	f7fb fd69 	bl	4070 <SFE_UBLOX_GNSS::processThisNMEA()>
    859e:	2800      	cmp	r0, #0
    85a0:	f040 813e 	bne.w	8820 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x50c>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
    85a4:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
    85a8:	2b05      	cmp	r3, #5
    85aa:	f63f aefc 	bhi.w	83a6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x92>
    if (incoming == '*')
    85ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
    85b2:	e732      	b.n	841a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x106>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
    85b4:	462b      	mov	r3, r5
    85b6:	f504 728a 	add.w	r2, r4, #276	; 0x114
    85ba:	4641      	mov	r1, r8
    85bc:	4620      	mov	r0, r4
    85be:	9600      	str	r6, [sp, #0]
    85c0:	f7ff fc46 	bl	7e50 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)>
    85c4:	e79b      	b.n	84fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1ea>
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
    85c6:	462b      	mov	r3, r5
    85c8:	f504 7292 	add.w	r2, r4, #292	; 0x124
    85cc:	4641      	mov	r1, r8
    85ce:	4620      	mov	r0, r4
    85d0:	9600      	str	r6, [sp, #0]
    85d2:	f7ff fc3d 	bl	7e50 <SFE_UBLOX_GNSS::processUBX(unsigned char, ubxPacket*, unsigned char, unsigned char)>
    85d6:	e792      	b.n	84fe <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1ea>
      rtcmFrameCounter = 0;
    85d8:	2200      	movs	r2, #0
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
    85da:	2303      	movs	r3, #3
      rtcmFrameCounter = 0;
    85dc:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
    85e0:	7123      	strb	r3, [r4, #4]
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
    85e2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
    85e6:	4620      	mov	r0, r4
    85e8:	f7fc fcd6 	bl	4f98 <SFE_UBLOX_GNSS::processRTCMframe(unsigned char, unsigned short*)>
    85ec:	7120      	strb	r0, [r4, #4]
}
    85ee:	e6aa      	b.n	8346 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x32>
        _signsOfLife = isNMEAHeaderValid();
    85f0:	4620      	mov	r0, r4
    85f2:	f7fb fcb5 	bl	3f60 <SFE_UBLOX_GNSS::isNMEAHeaderValid()>
    85f6:	f884 017f 	strb.w	r0, [r4, #383]	; 0x17f
    85fa:	e7c1      	b.n	8580 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x26c>
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
    85fc:	2300      	movs	r3, #0
      packetBuf.cls = incoming; // (Duplication)
    85fe:	f89d 800f 	ldrb.w	r8, [sp, #15]
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
    8602:	f8a4 3162 	strh.w	r3, [r4, #354]	; 0x162
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
    8606:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
    860a:	2302      	movs	r3, #2
      packetBuf.cls = incoming; // (Duplication)
    860c:	f884 8124 	strb.w	r8, [r4, #292]	; 0x124
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
    8610:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
    8614:	88fb      	ldrh	r3, [r7, #6]
    8616:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    861a:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    861e:	e761      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
    8620:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
    8624:	2b00      	cmp	r3, #0
    8626:	f040 8185 	bne.w	8934 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x620>
        packetBuf.checksumB = incoming;
    862a:	f89d 800f 	ldrb.w	r8, [sp, #15]
    862e:	f884 8131 	strb.w	r8, [r4, #305]	; 0x131
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
    8632:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    8636:	2b02      	cmp	r3, #2
    8638:	f47f af54 	bne.w	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
    863c:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
    8640:	2a05      	cmp	r2, #5
    8642:	d1c0      	bne.n	85c6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2b2>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
    8644:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    8648:	7808      	ldrb	r0, [r1, #0]
    864a:	42a8      	cmp	r0, r5
    864c:	d1bb      	bne.n	85c6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2b2>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
    864e:	7848      	ldrb	r0, [r1, #1]
    8650:	42b0      	cmp	r0, r6
    8652:	d1b8      	bne.n	85c6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2b2>
        if (packetBuf.len == 2) // Check if .len is 2
    8654:	f8b4 0126 	ldrh.w	r0, [r4, #294]	; 0x126
    8658:	2802      	cmp	r0, #2
    865a:	f000 824e 	beq.w	8afa <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x7e6>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    865e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8662:	b91b      	cbnz	r3, 866c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x358>
    8664:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    8668:	2b00      	cmp	r3, #0
    866a:	d0ac      	beq.n	85c6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2b2>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    866c:	4919      	ldr	r1, [pc, #100]	; (86d4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3c0>)
    866e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8672:	f7fa fbf1 	bl	2e58 <Print::write(char const*) [clone .isra.0]>
            _debugSerial->print(packetBuf.payload[0], HEX);
    8676:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    867a:	2210      	movs	r2, #16
    867c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8680:	7819      	ldrb	r1, [r3, #0]
    8682:	2300      	movs	r3, #0
    8684:	f001 ff2c 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    8688:	4913      	ldr	r1, [pc, #76]	; (86d8 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3c4>)
    868a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    868e:	f7fa fbe3 	bl	2e58 <Print::write(char const*) [clone .isra.0]>
            _debugSerial->print(packetBuf.payload[1], HEX);
    8692:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8696:	2210      	movs	r2, #16
    8698:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    869c:	7859      	ldrb	r1, [r3, #1]
    869e:	2300      	movs	r3, #0
    86a0:	f001 ff1e 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    86a4:	490d      	ldr	r1, [pc, #52]	; (86dc <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3c8>)
    86a6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    86aa:	f7fa fbd5 	bl	2e58 <Print::write(char const*) [clone .isra.0]>
            _debugSerial->println(packetBuf.len);
    86ae:	f8d4 80dc 	ldr.w	r8, [r4, #220]	; 0xdc
	size_t print(int n)				{ return print((long)n); }
    86b2:	f8b4 1126 	ldrh.w	r1, [r4, #294]	; 0x126
    86b6:	4640      	mov	r0, r8
    86b8:	f001 feea 	bl	a490 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    86bc:	4640      	mov	r0, r8
    86be:	f001 fef3 	bl	a4a8 <Print::println()>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    86c2:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
      processUBX(incoming, &packetAck, requestedClass, requestedID);
    86c6:	f89d 800f 	ldrb.w	r8, [sp, #15]
    86ca:	e70b      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
    86cc:	200029bc 	.word	0x200029bc
    86d0:	20002a10 	.word	0x20002a10
    86d4:	20002984 	.word	0x20002984
    86d8:	20001dc4 	.word	0x20001dc4
    86dc:	200029b4 	.word	0x200029b4
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
    86e0:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
    86e4:	2b00      	cmp	r3, #0
    86e6:	f040 812f 	bne.w	8948 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x634>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    86ea:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    86ee:	b913      	cbnz	r3, 86f6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x3e2>
    86f0:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    86f4:	b30b      	cbz	r3, 873a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x426>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
    86f6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    86fa:	222f      	movs	r2, #47	; 0x2f
    86fc:	49bd      	ldr	r1, [pc, #756]	; (89f4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x6e0>)
    86fe:	6803      	ldr	r3, [r0, #0]
    8700:	685b      	ldr	r3, [r3, #4]
    8702:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8704:	2300      	movs	r3, #0
    8706:	2210      	movs	r2, #16
    8708:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
    870c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8710:	f001 fee6 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->print(F(" ID: 0x"));
    8714:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8718:	2207      	movs	r2, #7
    871a:	49b7      	ldr	r1, [pc, #732]	; (89f8 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x6e4>)
    871c:	6803      	ldr	r3, [r0, #0]
    871e:	685b      	ldr	r3, [r3, #4]
    8720:	4798      	blx	r3
          _debugSerial->println(packetBuf.id, HEX);
    8722:	f8d4 80dc 	ldr.w	r8, [r4, #220]	; 0xdc
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8726:	2300      	movs	r3, #0
    8728:	2210      	movs	r2, #16
    872a:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
    872e:	4640      	mov	r0, r8
    8730:	f001 fed6 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    8734:	4640      	mov	r0, r8
    8736:	f001 feb7 	bl	a4a8 <Print::println()>
        packetBuf.checksumA = incoming;
    873a:	f89d 800f 	ldrb.w	r8, [sp, #15]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    873e:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
        packetBuf.checksumA = incoming;
    8742:	f884 8130 	strb.w	r8, [r4, #304]	; 0x130
    8746:	e6cd      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
      packetBuf.len |= incoming << 8; // (Duplication)
    8748:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
    874c:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8750:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
    8754:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    8758:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    875c:	e6c2      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
      packetBuf.len = incoming; // (Duplication)
    875e:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8762:	f8a4 8126 	strh.w	r8, [r4, #294]	; 0x126
    8766:	e6bb      	b.n	84e0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1cc>
      if (packetBuf.cls != UBX_CLASS_ACK)
    8768:	f894 9124 	ldrb.w	r9, [r4, #292]	; 0x124
      packetBuf.id = incoming; // (Duplication)
    876c:	f89d 800f 	ldrb.w	r8, [sp, #15]
      if (packetBuf.cls != UBX_CLASS_ACK)
    8770:	f1b9 0f05 	cmp.w	r9, #5
      packetBuf.id = incoming; // (Duplication)
    8774:	f884 8125 	strb.w	r8, [r4, #293]	; 0x125
      if (packetBuf.cls != UBX_CLASS_ACK)
    8778:	f43f aeb2 	beq.w	84e0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1cc>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
    877c:	45b0      	cmp	r8, r6
    877e:	d102      	bne.n	8786 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x472>
    8780:	45a9      	cmp	r9, r5
    8782:	f000 81ac 	beq.w	8ade <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x7ca>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
    8786:	4642      	mov	r2, r8
    8788:	4649      	mov	r1, r9
    878a:	4620      	mov	r0, r4
    878c:	f7fb f884 	bl	3898 <SFE_UBLOX_GNSS::checkAutomatic(unsigned char, unsigned char)>
    8790:	2800      	cmp	r0, #0
    8792:	f000 80e3 	beq.w	895c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x648>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
    8796:	4642      	mov	r2, r8
    8798:	4649      	mov	r1, r9
    879a:	4620      	mov	r0, r4
    879c:	f7fb fa9a 	bl	3cd4 <SFE_UBLOX_GNSS::getMaxPayloadSize(unsigned char, unsigned char)>
          if (maxPayload == 0)
    87a0:	4680      	mov	r8, r0
    87a2:	2800      	cmp	r0, #0
    87a4:	f040 8150 	bne.w	8a48 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x734>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    87a8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    87ac:	2b00      	cmp	r3, #0
    87ae:	f040 8129 	bne.w	8a04 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x6f0>
    87b2:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    87b6:	2b00      	cmp	r3, #0
    87b8:	f040 8124 	bne.w	8a04 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x6f0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
    87bc:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    87c0:	b130      	cbz	r0, 87d0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4bc>
            delete[] payloadAuto; // Created with new[]
    87c2:	f002 fad1 	bl	ad68 <operator delete[](void*)>
            payloadAuto = NULL;   // Redundant?
    87c6:	2300      	movs	r3, #0
    87c8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            packetAuto.payload = payloadAuto;
    87cc:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
    87d0:	4640      	mov	r0, r8
    87d2:	f002 fac7 	bl	ad64 <operator new[](unsigned int)>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
    87d6:	2303      	movs	r3, #3
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
    87d8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
    87dc:	f884 3155 	strb.w	r3, [r4, #341]	; 0x155
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
    87e0:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
          packetAuto.payload = payloadAuto;
    87e4:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
    87e8:	f8a4 3144 	strh.w	r3, [r4, #324]	; 0x144
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
    87ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    87f0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            if (_printDebug == true)
    87f4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    87f8:	2b00      	cmp	r3, #0
    87fa:	f040 8149 	bne.w	8a90 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x77c>
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
    87fe:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8802:	e674      	b.n	84ee <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1da>
        processNMEA(incoming); // Pass incoming to processNMEA
    8804:	4620      	mov	r0, r4
    8806:	f7fb fd0d 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
    880a:	e6d0      	b.n	85ae <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x29a>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
    880c:	2201      	movs	r2, #1
    880e:	f10d 010f 	add.w	r1, sp, #15
    8812:	4620      	mov	r0, r4
    8814:	f7fd fd98 	bl	6348 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)>
    8818:	e5f7      	b.n	840a <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0xf6>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
    881a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    881e:	e6e0      	b.n	85e2 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x2ce>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
    8820:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
    8824:	4620      	mov	r0, r4
    8826:	f7fb fcfd 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
        processNMEA(nmeaAddressField[1]);
    882a:	f894 1167 	ldrb.w	r1, [r4, #359]	; 0x167
    882e:	4620      	mov	r0, r4
    8830:	f7fb fcf8 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
        processNMEA(nmeaAddressField[2]);
    8834:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
    8838:	4620      	mov	r0, r4
    883a:	f7fb fcf3 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
        processNMEA(nmeaAddressField[3]);
    883e:	f894 1169 	ldrb.w	r1, [r4, #361]	; 0x169
    8842:	4620      	mov	r0, r4
    8844:	f7fb fcee 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
        processNMEA(nmeaAddressField[4]);
    8848:	f894 116a 	ldrb.w	r1, [r4, #362]	; 0x16a
    884c:	4620      	mov	r0, r4
    884e:	f7fb fce9 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
        processNMEA(nmeaAddressField[5]);
    8852:	f894 116b 	ldrb.w	r1, [r4, #363]	; 0x16b
    8856:	4620      	mov	r0, r4
    8858:	f7fb fce4 	bl	4224 <SFE_UBLOX_GNSS::processNMEA(char)>
    885c:	e6a2      	b.n	85a4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x290>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
    885e:	2206      	movs	r2, #6
    8860:	f504 71b3 	add.w	r1, r4, #358	; 0x166
    8864:	4620      	mov	r0, r4
    8866:	f7fd fd6f 	bl	6348 <SFE_UBLOX_GNSS::storeFileBytes(unsigned char*, unsigned short)>
    886a:	e695      	b.n	8598 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x284>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
    886c:	4620      	mov	r0, r4
    886e:	f7fb fe7f 	bl	4570 <SFE_UBLOX_GNSS::getNMEAWorkingLengthPtr()>
    8872:	4606      	mov	r6, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
    8874:	4620      	mov	r0, r4
    8876:	f7fb ff1b 	bl	46b0 <SFE_UBLOX_GNSS::getNMEAWorkingNMEAPtr()>
    887a:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
    887c:	4620      	mov	r0, r4
    887e:	f7fc fa4b 	bl	4d18 <SFE_UBLOX_GNSS::getNMEAMaxLength()>
        *lengthPtr = 6;                           // Set the working copy length
    8882:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
    8884:	4602      	mov	r2, r0
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
    8886:	2100      	movs	r1, #0
        *lengthPtr = 6;                           // Set the working copy length
    8888:	7033      	strb	r3, [r6, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
    888a:	4628      	mov	r0, r5
    888c:	f005 fb6a 	bl	df64 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
    8890:	f8d4 3166 	ldr.w	r3, [r4, #358]	; 0x166
    8894:	602b      	str	r3, [r5, #0]
    8896:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
    889a:	80ab      	strh	r3, [r5, #4]
    889c:	e676      	b.n	858c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x278>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
    889e:	0902      	lsrs	r2, r0, #4
    88a0:	f102 0530 	add.w	r5, r2, #48	; 0x30
    88a4:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
    88a6:	2d39      	cmp	r5, #57	; 0x39
    88a8:	d901      	bls.n	88ae <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x59a>
            expectedChecksum1 += 'A' - ':';
    88aa:	3237      	adds	r2, #55	; 0x37
    88ac:	b2d5      	uxtb	r5, r2
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
    88ae:	f000 000f 	and.w	r0, r0, #15
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
    88b2:	5cf2      	ldrb	r2, [r6, r3]
    88b4:	eb06 0a03 	add.w	sl, r6, r3
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
    88b8:	f100 0930 	add.w	r9, r0, #48	; 0x30
          if (expectedChecksum2 >= ':') // Handle Hex correctly
    88bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
    88c0:	bf88      	it	hi
    88c2:	f100 0937 	addhi.w	r9, r0, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
    88c6:	42aa      	cmp	r2, r5
    88c8:	d04c      	beq.n	8964 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x650>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    88ca:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    88ce:	b923      	cbnz	r3, 88da <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x5c6>
    88d0:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    88d4:	2b00      	cmp	r3, #0
    88d6:	f43f adee 	beq.w	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
    88da:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    88de:	222a      	movs	r2, #42	; 0x2a
    88e0:	4946      	ldr	r1, [pc, #280]	; (89fc <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x6e8>)
    88e2:	6803      	ldr	r3, [r0, #0]
    88e4:	685b      	ldr	r3, [r3, #4]
    88e6:	4798      	blx	r3
              _debugSerial->write(expectedChecksum1);
    88e8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    88ec:	4629      	mov	r1, r5
    88ee:	6803      	ldr	r3, [r0, #0]
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
    88f4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    88f8:	4649      	mov	r1, r9
    88fa:	6803      	ldr	r3, [r0, #0]
    88fc:	681b      	ldr	r3, [r3, #0]
    88fe:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
    8900:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8904:	2205      	movs	r2, #5
    8906:	493e      	ldr	r1, [pc, #248]	; (8a00 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x6ec>)
    8908:	6803      	ldr	r3, [r0, #0]
    890a:	685b      	ldr	r3, [r3, #4]
    890c:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
    890e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8912:	f89a 1000 	ldrb.w	r1, [sl]
    8916:	6803      	ldr	r3, [r0, #0]
    8918:	681b      	ldr	r3, [r3, #0]
    891a:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
    891c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8920:	f89a 1001 	ldrb.w	r1, [sl, #1]
    8924:	6803      	ldr	r3, [r0, #0]
    8926:	681b      	ldr	r3, [r3, #0]
    8928:	4798      	blx	r3
              _debugSerial->println();
    892a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    892e:	f001 fdbb 	bl	a4a8 <Print::println()>
    8932:	e5c0      	b.n	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
      else if (packetBuf.len == 1) // Check if length is one
    8934:	2b01      	cmp	r3, #1
    8936:	f000 80a6 	beq.w	8a86 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x772>
        packetBuf.payload[1] = incoming;
    893a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    893e:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8942:	f883 8001 	strb.w	r8, [r3, #1]
    8946:	e674      	b.n	8632 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x31e>
        packetBuf.payload[0] = incoming;
    8948:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    894c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8950:	701a      	strb	r2, [r3, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    8952:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
      processUBX(incoming, &packetAck, requestedClass, requestedID);
    8956:	f89d 800f 	ldrb.w	r8, [sp, #15]
    895a:	e5c3      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
          ignoreThisPayload = true;
    895c:	2301      	movs	r3, #1
    895e:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
    8962:	e5bd      	b.n	84e0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1cc>
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
    8964:	f89a 3001 	ldrb.w	r3, [sl, #1]
    8968:	454b      	cmp	r3, r9
    896a:	d1ae      	bne.n	88ca <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x5b6>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
    896c:	4620      	mov	r0, r4
    896e:	f7fb ff3f 	bl	47f0 <SFE_UBLOX_GNSS::getNMEACompleteLengthPtr()>
    8972:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
    8974:	4620      	mov	r0, r4
    8976:	f7fb ffdb 	bl	4930 <SFE_UBLOX_GNSS::getNMEACompleteNMEAPtr()>
    897a:	4681      	mov	r9, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
    897c:	4642      	mov	r2, r8
    897e:	2100      	movs	r1, #0
    8980:	f005 faf0 	bl	df64 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
    8984:	4648      	mov	r0, r9
    8986:	783a      	ldrb	r2, [r7, #0]
    8988:	4631      	mov	r1, r6
    898a:	f002 f94f 	bl	ac2c <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
    898e:	783b      	ldrb	r3, [r7, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
    8990:	4620      	mov	r0, r4
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
    8992:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
    8994:	f7fc fa40 	bl	4e18 <SFE_UBLOX_GNSS::getNMEAFlagsPtr()>
    8998:	4681      	mov	r9, r0
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
    899a:	4620      	mov	r0, r4
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
    899c:	f899 5000 	ldrb.w	r5, [r9]
            *flagsPtr = flagsCopy;                      // Update the flags
    89a0:	f025 0503 	bic.w	r5, r5, #3
    89a4:	f045 0a01 	orr.w	sl, r5, #1
    89a8:	f889 a000 	strb.w	sl, [r9]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
    89ac:	f7fb fcec 	bl	4388 <SFE_UBLOX_GNSS::doesThisNMEAHaveCallback()>
    89b0:	2800      	cmp	r0, #0
    89b2:	f43f ad80 	beq.w	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
    89b6:	f01a 0104 	ands.w	r1, sl, #4
    89ba:	f47f ad7c 	bne.w	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
    89be:	4620      	mov	r0, r4
    89c0:	9102      	str	r1, [sp, #8]
    89c2:	f7fc f855 	bl	4a70 <SFE_UBLOX_GNSS::getNMEACallbackLengthPtr()>
    89c6:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
    89c8:	4620      	mov	r0, r4
                *flagsPtr = flagsCopy;                                      // Update the flags
    89ca:	f045 0505 	orr.w	r5, r5, #5
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
    89ce:	f7fc f8f5 	bl	4bbc <SFE_UBLOX_GNSS::getNMEACallbackNMEAPtr()>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
    89d2:	4642      	mov	r2, r8
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
    89d4:	4680      	mov	r8, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
    89d6:	9902      	ldr	r1, [sp, #8]
    89d8:	f005 fac4 	bl	df64 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
    89dc:	4631      	mov	r1, r6
    89de:	4640      	mov	r0, r8
    89e0:	783a      	ldrb	r2, [r7, #0]
    89e2:	f002 f923 	bl	ac2c <memcpy>
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
    89e6:	783b      	ldrb	r3, [r7, #0]
    89e8:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
    89ec:	f889 5000 	strb.w	r5, [r9]
          }
    89f0:	e561      	b.n	84b6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1a2>
    89f2:	bf00      	nop
    89f4:	20002954 	.word	0x20002954
    89f8:	20001dc4 	.word	0x20001dc4
    89fc:	200029dc 	.word	0x200029dc
    8a00:	20002a08 	.word	0x20002a08
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
    8a04:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8a08:	2234      	movs	r2, #52	; 0x34
    8a0a:	494b      	ldr	r1, [pc, #300]	; (8b38 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x824>)
    8a0c:	6803      	ldr	r3, [r0, #0]
    8a0e:	685b      	ldr	r3, [r3, #4]
    8a10:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    8a12:	2300      	movs	r3, #0
    8a14:	220a      	movs	r2, #10
    8a16:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
    8a1a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8a1e:	f001 fd5f 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
              _debugSerial->print(F(" ID: 0x"));
    8a22:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8a26:	2207      	movs	r2, #7
    8a28:	4944      	ldr	r1, [pc, #272]	; (8b3c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x828>)
    8a2a:	6803      	ldr	r3, [r0, #0]
    8a2c:	685b      	ldr	r3, [r3, #4]
    8a2e:	4798      	blx	r3
              _debugSerial->println(packetBuf.id);
    8a30:	f8d4 90dc 	ldr.w	r9, [r4, #220]	; 0xdc
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    8a34:	2300      	movs	r3, #0
    8a36:	220a      	movs	r2, #10
    8a38:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
    8a3c:	4648      	mov	r0, r9
    8a3e:	f001 fd4f 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    8a42:	4648      	mov	r0, r9
    8a44:	f001 fd30 	bl	a4a8 <Print::println()>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
    8a48:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8a4c:	2800      	cmp	r0, #0
    8a4e:	f43f aebf 	beq.w	87d0 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4bc>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    8a52:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
    8a56:	b922      	cbnz	r2, 8a62 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x74e>
    8a58:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
    8a5c:	2a00      	cmp	r2, #0
    8a5e:	f43f aeb0 	beq.w	87c2 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4ae>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
    8a62:	f8d4 90dc 	ldr.w	r9, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8a66:	2241      	movs	r2, #65	; 0x41
    8a68:	4935      	ldr	r1, [pc, #212]	; (8b40 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x82c>)
    8a6a:	f8d9 3000 	ldr.w	r3, [r9]
    8a6e:	4648      	mov	r0, r9
    8a70:	685b      	ldr	r3, [r3, #4]
    8a72:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    8a74:	4648      	mov	r0, r9
    8a76:	f001 fd17 	bl	a4a8 <Print::println()>
            delete[] payloadAuto; // Created with new[]
    8a7a:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8a7e:	2800      	cmp	r0, #0
    8a80:	f43f aea1 	beq.w	87c6 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4b2>
    8a84:	e69d      	b.n	87c2 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x4ae>
        packetBuf.checksumA = incoming;
    8a86:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8a8a:	f884 8130 	strb.w	r8, [r4, #304]	; 0x130
    8a8e:	e5d0      	b.n	8632 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x31e>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
    8a90:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8a94:	2230      	movs	r2, #48	; 0x30
    8a96:	492b      	ldr	r1, [pc, #172]	; (8b44 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x830>)
    8a98:	6803      	ldr	r3, [r0, #0]
    8a9a:	685b      	ldr	r3, [r3, #4]
    8a9c:	4798      	blx	r3
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8a9e:	2300      	movs	r3, #0
    8aa0:	2210      	movs	r2, #16
    8aa2:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
    8aa6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8aaa:	f001 fd19 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
              _debugSerial->print(F(" ID: 0x"));
    8aae:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8ab2:	2207      	movs	r2, #7
    8ab4:	4921      	ldr	r1, [pc, #132]	; (8b3c <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x828>)
    8ab6:	6803      	ldr	r3, [r0, #0]
    8ab8:	685b      	ldr	r3, [r3, #4]
    8aba:	4798      	blx	r3
              _debugSerial->println(packetBuf.id, HEX);
    8abc:	f8d4 80dc 	ldr.w	r8, [r4, #220]	; 0xdc
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8ac0:	2300      	movs	r3, #0
    8ac2:	2210      	movs	r2, #16
    8ac4:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
    8ac8:	4640      	mov	r0, r8
    8aca:	f001 fd09 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    8ace:	4640      	mov	r0, r8
    8ad0:	f001 fcea 	bl	a4a8 <Print::println()>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    8ad4:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
      processUBX(incoming, &packetAck, requestedClass, requestedID);
    8ad8:	f89d 800f 	ldrb.w	r8, [sp, #15]
    8adc:	e502      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
    8ade:	2300      	movs	r3, #0
    8ae0:	f884 3155 	strb.w	r3, [r4, #341]	; 0x155
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
    8ae4:	f887 9000 	strb.w	r9, [r7]
          incomingUBX->id = packetBuf.id;
    8ae8:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
    8aec:	707b      	strb	r3, [r7, #1]
          incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
    8aee:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
    8af2:	80bb      	strh	r3, [r7, #4]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    8af4:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
          incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
    8af8:	e4f4      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
          packetAck.len = packetBuf.len;
    8afa:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
          packetAck.id = packetBuf.id;
    8afe:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
          packetAck.cls = packetBuf.cls;
    8b02:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
          packetAck.id = packetBuf.id;
    8b06:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
          packetAck.counter = packetBuf.counter;
    8b0a:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
    8b0e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
    8b12:	2301      	movs	r3, #1
    8b14:	f884 3155 	strb.w	r3, [r4, #341]	; 0x155
          packetAck.payload[0] = packetBuf.payload[0];
    8b18:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    8b1c:	780a      	ldrb	r2, [r1, #0]
    8b1e:	701a      	strb	r2, [r3, #0]
          packetAck.payload[1] = packetBuf.payload[1];
    8b20:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
    8b24:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    8b28:	7852      	ldrb	r2, [r2, #1]
      processUBX(incoming, &packetAck, requestedClass, requestedID);
    8b2a:	f89d 800f 	ldrb.w	r8, [sp, #15]
          packetAck.payload[1] = packetBuf.payload[1];
    8b2e:	705a      	strb	r2, [r3, #1]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
    8b30:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
    8b34:	e4d6      	b.n	84e4 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)+0x1d0>
    8b36:	bf00      	nop
    8b38:	200028a4 	.word	0x200028a4
    8b3c:	20001dc4 	.word	0x20001dc4
    8b40:	200028dc 	.word	0x200028dc
    8b44:	20002920 	.word	0x20002920

00008b48 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]>:
bool SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket *incomingUBX, uint8_t requestedClass, uint8_t requestedID)
    8b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b4c:	4699      	mov	r9, r3
		txBuffer[0] = (address << 1);
    8b4e:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
		transmitting = 1;
    8b52:	2601      	movs	r6, #1
    8b54:	4690      	mov	r8, r2
		txBuffer[0] = (address << 1);
    8b56:	005b      	lsls	r3, r3, #1
    _i2cPort->beginTransmission(_gpsI2Caddress);
    8b58:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
bool SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket *incomingUBX, uint8_t requestedClass, uint8_t requestedID)
    8b5c:	4604      	mov	r4, r0
    8b5e:	b083      	sub	sp, #12
    8b60:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
    8b64:	460f      	mov	r7, r1
		transmitting = 1;
    8b66:	f882 6130 	strb.w	r6, [r2, #304]	; 0x130
		return write((uint8_t)n);
    8b6a:	21fd      	movs	r1, #253	; 0xfd
		txBufferLength = 1;
    8b6c:	f882 612f 	strb.w	r6, [r2, #303]	; 0x12f
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
    8b70:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
		return write((uint8_t)n);
    8b74:	6803      	ldr	r3, [r0, #0]
    8b76:	681b      	ldr	r3, [r3, #0]
    8b78:	4798      	blx	r3
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
    8b7a:	2100      	movs	r1, #0
    8b7c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8b80:	f7f8 fbdc 	bl	133c <TwoWire::endTransmission(unsigned char)>
    if (i2cError != 0)
    8b84:	b1e0      	cbz	r0, 8bc0 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x78>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    8b86:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8b8a:	4605      	mov	r5, r0
    8b8c:	b913      	cbnz	r3, 8b94 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x4c>
    8b8e:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    8b92:	b18b      	cbz	r3, 8bb8 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x70>
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
    8b94:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8b98:	2233      	movs	r2, #51	; 0x33
    8b9a:	497c      	ldr	r1, [pc, #496]	; (8d8c <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x244>)
    8b9c:	6803      	ldr	r3, [r0, #0]
    8b9e:	685b      	ldr	r3, [r3, #4]
    8ba0:	4798      	blx	r3
        _debugSerial->println(bytesReturned);
    8ba2:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    8ba6:	2300      	movs	r3, #0
    8ba8:	220a      	movs	r2, #10
    8baa:	4629      	mov	r1, r5
    8bac:	4620      	mov	r0, r4
    8bae:	f001 fc97 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    8bb2:	4620      	mov	r0, r4
    8bb4:	f001 fc78 	bl	a4a8 <Print::println()>
      return (false); // Sensor did not return 2 bytes
    8bb8:	2000      	movs	r0, #0
} // end checkUbloxI2C()
    8bba:	b003      	add	sp, #12
    8bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return requestFrom(address, quantity, (uint8_t)1);
    8bc0:	4633      	mov	r3, r6
    8bc2:	2202      	movs	r2, #2
    8bc4:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
    8bc8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8bcc:	f7f8 fc36 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
    if (bytesReturned != 2)
    8bd0:	2802      	cmp	r0, #2
    8bd2:	4605      	mov	r5, r0
    8bd4:	d00b      	beq.n	8bee <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0xa6>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    8bd6:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8bda:	b91b      	cbnz	r3, 8be4 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x9c>
    8bdc:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    8be0:	2b00      	cmp	r3, #0
    8be2:	d0e9      	beq.n	8bb8 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x70>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
    8be4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8be8:	2234      	movs	r2, #52	; 0x34
    8bea:	4969      	ldr	r1, [pc, #420]	; (8d90 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x248>)
    8bec:	e7d6      	b.n	8b9c <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x54>
      uint8_t msb = _i2cPort->read();
    8bee:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8bf2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8dac <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x264>
    8bf6:	6803      	ldr	r3, [r0, #0]
    8bf8:	695b      	ldr	r3, [r3, #20]
    8bfa:	4553      	cmp	r3, sl
    8bfc:	f040 8098 	bne.w	8d30 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x1e8>
		if (rxBufferIndex >= rxBufferLength) return -1;
    8c00:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    8c04:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    8c08:	429a      	cmp	r2, r3
    8c0a:	f240 808c 	bls.w	8d26 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x1de>
		return rxBuffer[rxBufferIndex++];
    8c0e:	1c5a      	adds	r2, r3, #1
    8c10:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    8c14:	4418      	add	r0, r3
    8c16:	7e85      	ldrb	r5, [r0, #26]
      uint8_t lsb = _i2cPort->read();
    8c18:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8c1c:	6803      	ldr	r3, [r0, #0]
    8c1e:	695b      	ldr	r3, [r3, #20]
    8c20:	4553      	cmp	r3, sl
    8c22:	f040 8088 	bne.w	8d36 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x1ee>
		if (rxBufferIndex >= rxBufferLength) return -1;
    8c26:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
      bytesAvailable = (uint16_t)msb << 8 | lsb;
    8c2a:	022b      	lsls	r3, r5, #8
    8c2c:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    8c30:	b21b      	sxth	r3, r3
    8c32:	4291      	cmp	r1, r2
    8c34:	f240 80a8 	bls.w	8d88 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x240>
		return rxBuffer[rxBufferIndex++];
    8c38:	1c51      	adds	r1, r2, #1
    8c3a:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    8c3e:	4410      	add	r0, r2
    8c40:	7e82      	ldrb	r2, [r0, #26]
    8c42:	4313      	orrs	r3, r2
    8c44:	fa1f fb83 	uxth.w	fp, r3
    if (bytesAvailable == 0)
    8c48:	f1bb 0f00 	cmp.w	fp, #0
    8c4c:	d044      	beq.n	8cd8 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x190>
    if (bytesAvailable & ((uint16_t)1 << 15))
    8c4e:	2b00      	cmp	r3, #0
    8c50:	db6b      	blt.n	8d2a <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x1e2>
    if (bytesAvailable > 100)
    8c52:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
      if (_printDebug == true)
    8c56:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if (bytesAvailable > 100)
    8c5a:	d947      	bls.n	8cec <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x1a4>
      if (_printDebug == true)
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d17b      	bne.n	8d58 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x210>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
    8c60:	7966      	ldrb	r6, [r4, #5]
		return requestFrom(address, quantity, (uint8_t)1);
    8c62:	2301      	movs	r3, #1
    8c64:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
    8c68:	455e      	cmp	r6, fp
    8c6a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8c6e:	bf28      	it	cs
    8c70:	465e      	movcs	r6, fp
    8c72:	b2f2      	uxtb	r2, r6
    8c74:	f7f8 fbe2 	bl	143c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
      if ((uint16_t)bytesReturned == bytesToRead)
    8c78:	42b0      	cmp	r0, r6
    8c7a:	d19d      	bne.n	8bb8 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x70>
        for (uint16_t x = 0; x < bytesToRead; x++)
    8c7c:	b30e      	cbz	r6, 8cc2 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x17a>
    8c7e:	2500      	movs	r5, #0
    8c80:	e016      	b.n	8cb0 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x168>
		if (rxBufferIndex >= rxBufferLength) return -1;
    8c82:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    8c86:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    8c8a:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    8c8c:	f103 0201 	add.w	r2, r3, #1
    8c90:	4403      	add	r3, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    8c92:	d91f      	bls.n	8cd4 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x18c>
		return rxBuffer[rxBufferIndex++];
    8c94:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    8c98:	7e99      	ldrb	r1, [r3, #26]
    8c9a:	3501      	adds	r5, #1
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
    8c9c:	4643      	mov	r3, r8
    8c9e:	463a      	mov	r2, r7
    8ca0:	4620      	mov	r0, r4
    8ca2:	f8cd 9000 	str.w	r9, [sp]
    8ca6:	f7ff fb35 	bl	8314 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)>
        for (uint16_t x = 0; x < bytesToRead; x++)
    8caa:	b2ab      	uxth	r3, r5
    8cac:	429e      	cmp	r6, r3
    8cae:	d908      	bls.n	8cc2 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x17a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
    8cb0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    8cb4:	6803      	ldr	r3, [r0, #0]
    8cb6:	695b      	ldr	r3, [r3, #20]
    8cb8:	4553      	cmp	r3, sl
    8cba:	d0e2      	beq.n	8c82 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x13a>
    8cbc:	4798      	blx	r3
    8cbe:	b2c1      	uxtb	r1, r0
    8cc0:	e7eb      	b.n	8c9a <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x152>
      bytesAvailable -= bytesToRead;
    8cc2:	ebab 0b06 	sub.w	fp, fp, r6
    8cc6:	fa1f fb8b 	uxth.w	fp, fp
    while (bytesAvailable)
    8cca:	f1bb 0f00 	cmp.w	fp, #0
    8cce:	d1c7      	bne.n	8c60 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x118>
  return (true);
    8cd0:	2001      	movs	r0, #1
    8cd2:	e772      	b.n	8bba <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x72>
    8cd4:	21ff      	movs	r1, #255	; 0xff
    8cd6:	e7e0      	b.n	8c9a <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x152>
      if (_printDebug == true)
    8cd8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    8cdc:	2b00      	cmp	r3, #0
    8cde:	d12f      	bne.n	8d40 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x1f8>
    8ce0:	4b2c      	ldr	r3, [pc, #176]	; (8d94 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x24c>)
      return (false);
    8ce2:	2000      	movs	r0, #0
    8ce4:	681b      	ldr	r3, [r3, #0]
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
    8ce6:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
      return (false);
    8cea:	e766      	b.n	8bba <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x72>
      if (_printDebug == true)
    8cec:	2b00      	cmp	r3, #0
    8cee:	d0ec      	beq.n	8cca <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x182>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
    8cf0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8cf4:	2217      	movs	r2, #23
    8cf6:	4928      	ldr	r1, [pc, #160]	; (8d98 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x250>)
    8cf8:	6803      	ldr	r3, [r0, #0]
    8cfa:	685b      	ldr	r3, [r3, #4]
    8cfc:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    8cfe:	4659      	mov	r1, fp
    8d00:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8d04:	f001 fbc4 	bl	a490 <Print::print(long)>
        _debugSerial->println(F(" bytes"));
    8d08:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8d0c:	2206      	movs	r2, #6
    8d0e:	4923      	ldr	r1, [pc, #140]	; (8d9c <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x254>)
    8d10:	682b      	ldr	r3, [r5, #0]
    8d12:	4628      	mov	r0, r5
    8d14:	685b      	ldr	r3, [r3, #4]
    8d16:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    8d18:	4628      	mov	r0, r5
    8d1a:	f001 fbc5 	bl	a4a8 <Print::println()>
    while (bytesAvailable)
    8d1e:	f1bb 0f00 	cmp.w	fp, #0
    8d22:	d19d      	bne.n	8c60 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x118>
    8d24:	e7d4      	b.n	8cd0 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x188>
      bytesAvailable = (uint16_t)msb << 8 | lsb;
    8d26:	f64f 7bff 	movw	fp, #65535	; 0xffff
      bytesAvailable &= ~((uint16_t)1 << 15);
    8d2a:	f3cb 0b0e 	ubfx	fp, fp, #0, #15
    8d2e:	e790      	b.n	8c52 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x10a>
      uint8_t msb = _i2cPort->read();
    8d30:	4798      	blx	r3
    8d32:	4605      	mov	r5, r0
    8d34:	e770      	b.n	8c18 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0xd0>
      uint8_t lsb = _i2cPort->read();
    8d36:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
    8d38:	022b      	lsls	r3, r5, #8
    8d3a:	b2c2      	uxtb	r2, r0
    8d3c:	b21b      	sxth	r3, r3
    8d3e:	e780      	b.n	8c42 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0xfa>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
    8d40:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8d44:	2227      	movs	r2, #39	; 0x27
    8d46:	4916      	ldr	r1, [pc, #88]	; (8da0 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x258>)
    8d48:	682b      	ldr	r3, [r5, #0]
    8d4a:	4628      	mov	r0, r5
    8d4c:	685b      	ldr	r3, [r3, #4]
    8d4e:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    8d50:	4628      	mov	r0, r5
    8d52:	f001 fba9 	bl	a4a8 <Print::println()>
    8d56:	e7c3      	b.n	8ce0 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x198>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
    8d58:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8d5c:	221f      	movs	r2, #31
    8d5e:	4911      	ldr	r1, [pc, #68]	; (8da4 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x25c>)
    8d60:	6803      	ldr	r3, [r0, #0]
    8d62:	685b      	ldr	r3, [r3, #4]
    8d64:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    8d66:	4659      	mov	r1, fp
    8d68:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    8d6c:	f001 fb90 	bl	a490 <Print::print(long)>
        _debugSerial->println(F(" bytes received"));
    8d70:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    8d74:	220f      	movs	r2, #15
    8d76:	490c      	ldr	r1, [pc, #48]	; (8da8 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x260>)
    8d78:	682b      	ldr	r3, [r5, #0]
    8d7a:	4628      	mov	r0, r5
    8d7c:	685b      	ldr	r3, [r3, #4]
    8d7e:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    8d80:	4628      	mov	r0, r5
    8d82:	f001 fb91 	bl	a4a8 <Print::println()>
    8d86:	e76b      	b.n	8c60 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0x118>
    8d88:	22ff      	movs	r2, #255	; 0xff
    8d8a:	e75a      	b.n	8c42 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]+0xfa>
    8d8c:	200020ec 	.word	0x200020ec
    8d90:	20002120 	.word	0x20002120
    8d94:	20004bc4 	.word	0x20004bc4
    8d98:	200021b0 	.word	0x200021b0
    8d9c:	200021c8 	.word	0x200021c8
    8da0:	20002158 	.word	0x20002158
    8da4:	20002180 	.word	0x20002180
    8da8:	200021a0 	.word	0x200021a0
    8dac:	00000eb5 	.word	0x00000eb5

00008db0 <SFE_UBLOX_GNSS::checkUbloxSerial(ubxPacket*, unsigned char, unsigned char)>:
{
    8db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8db4:	4604      	mov	r4, r0
    8db6:	b082      	sub	sp, #8
    8db8:	4688      	mov	r8, r1
    8dba:	4617      	mov	r7, r2
    8dbc:	461e      	mov	r6, r3
  while (_serialPort->available())
    8dbe:	e00b      	b.n	8dd8 <SFE_UBLOX_GNSS::checkUbloxSerial(ubxPacket*, unsigned char, unsigned char)+0x28>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
    8dc0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    8dc4:	6803      	ldr	r3, [r0, #0]
    8dc6:	695b      	ldr	r3, [r3, #20]
    8dc8:	4798      	blx	r3
    8dca:	463b      	mov	r3, r7
    8dcc:	b2c1      	uxtb	r1, r0
    8dce:	4642      	mov	r2, r8
    8dd0:	4620      	mov	r0, r4
    8dd2:	9600      	str	r6, [sp, #0]
    8dd4:	f7ff fa9e 	bl	8314 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)>
  while (_serialPort->available())
    8dd8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    8ddc:	6803      	ldr	r3, [r0, #0]
    8dde:	691d      	ldr	r5, [r3, #16]
    8de0:	47a8      	blx	r5
    8de2:	2800      	cmp	r0, #0
    8de4:	d1ec      	bne.n	8dc0 <SFE_UBLOX_GNSS::checkUbloxSerial(ubxPacket*, unsigned char, unsigned char)+0x10>
} // end checkUbloxSerial()
    8de6:	2001      	movs	r0, #1
    8de8:	b002      	add	sp, #8
    8dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dee:	bf00      	nop

00008df0 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)>:
{
    8df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8df4:	4698      	mov	r8, r3
  for (uint8_t i = 0; i < spiBufferIndex; i++)
    8df6:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
{
    8dfa:	b084      	sub	sp, #16
    8dfc:	4606      	mov	r6, r0
    8dfe:	460f      	mov	r7, r1
    8e00:	4692      	mov	sl, r2
  for (uint8_t i = 0; i < spiBufferIndex; i++)
    8e02:	b18b      	cbz	r3, 8e28 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x38>
    8e04:	2400      	movs	r4, #0
    8e06:	4620      	mov	r0, r4
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
    8e08:	f8d6 110c 	ldr.w	r1, [r6, #268]	; 0x10c
  for (uint8_t i = 0; i < spiBufferIndex; i++)
    8e0c:	3401      	adds	r4, #1
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
    8e0e:	4653      	mov	r3, sl
    8e10:	463a      	mov	r2, r7
    8e12:	5c09      	ldrb	r1, [r1, r0]
    8e14:	4630      	mov	r0, r6
    8e16:	f8cd 8000 	str.w	r8, [sp]
    8e1a:	f7ff fa7b 	bl	8314 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
    8e1e:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
    8e22:	b2e0      	uxtb	r0, r4
    8e24:	4283      	cmp	r3, r0
    8e26:	d8ef      	bhi.n	8e08 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x18>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
    8e28:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
  spiBufferIndex = 0;
    8e2c:	2400      	movs	r4, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
    8e2e:	f8d6 00e4 	ldr.w	r0, [r6, #228]	; 0xe4
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
    8e32:	9302      	str	r3, [sp, #8]
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    8e34:	2307      	movs	r3, #7
  spiBufferIndex = 0;
    8e36:	f886 4110 	strb.w	r4, [r6, #272]	; 0x110
    8e3a:	9303      	str	r3, [sp, #12]
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
    8e3c:	ab04      	add	r3, sp, #16
    8e3e:	e913 0006 	ldmdb	r3, {r1, r2}
    8e42:	f7f8 f905 	bl	1050 <SPIClass::beginTransaction(SPISettings)>
  digitalWrite(_csPin, LOW);
    8e46:	4621      	mov	r1, r4
    8e48:	f896 00e8 	ldrb.w	r0, [r6, #232]	; 0xe8
    8e4c:	f001 fe4e 	bl	aaec <digitalWrite>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8e50:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
    8e54:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    8e56:	23ff      	movs	r3, #255	; 0xff
    8e58:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8e5a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8e5c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8e60:	d0fb      	beq.n	8e5a <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x6a>
    8e62:	6f51      	ldr	r1, [r2, #116]	; 0x74
    8e64:	b2c9      	uxtb	r1, r1
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
    8e66:	29ff      	cmp	r1, #255	; 0xff
    8e68:	d048      	beq.n	8efc <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x10c>
		port().TDR = data;
    8e6a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
    8e6e:	29ff      	cmp	r1, #255	; 0xff
    8e70:	d101      	bne.n	8e76 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x86>
    8e72:	7933      	ldrb	r3, [r6, #4]
    8e74:	b193      	cbz	r3, 8e9c <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0xac>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
    8e76:	4653      	mov	r3, sl
    8e78:	463a      	mov	r2, r7
    8e7a:	4630      	mov	r0, r6
    8e7c:	f8cd 8000 	str.w	r8, [sp]
    8e80:	f7ff fa48 	bl	8314 <SFE_UBLOX_GNSS::process(unsigned char, ubxPacket*, unsigned char, unsigned char)>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8e84:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
    8e88:	681d      	ldr	r5, [r3, #0]
		port().TDR = data;
    8e8a:	f8c5 9064 	str.w	r9, [r5, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8e8e:	6dec      	ldr	r4, [r5, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8e90:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    8e94:	d0fb      	beq.n	8e8e <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x9e>
    8e96:	6f69      	ldr	r1, [r5, #116]	; 0x74
    8e98:	b2c9      	uxtb	r1, r1
    8e9a:	e7e8      	b.n	8e6e <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x7e>
  digitalWrite(_csPin, HIGH);
    8e9c:	2101      	movs	r1, #1
    8e9e:	f896 00e8 	ldrb.w	r0, [r6, #232]	; 0xe8
    8ea2:	f001 fe23 	bl	aaec <digitalWrite>
  _spiPort->endTransaction();
    8ea6:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
		if (interruptMasksUsed) {
    8eaa:	7cd3      	ldrb	r3, [r2, #19]
    8eac:	b313      	cbz	r3, 8ef4 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x104>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8eae:	07dd      	lsls	r5, r3, #31
    8eb0:	d504      	bpl.n	8ebc <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0xcc>
    8eb2:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8eb4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8eb8:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    8ebc:	079c      	lsls	r4, r3, #30
    8ebe:	d504      	bpl.n	8eca <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0xda>
    8ec0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    8ec2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8ec6:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    8eca:	0758      	lsls	r0, r3, #29
    8ecc:	d504      	bpl.n	8ed8 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0xe8>
    8ece:	6b10      	ldr	r0, [r2, #48]	; 0x30
    8ed0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8ed4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8ed8:	0719      	lsls	r1, r3, #28
    8eda:	d504      	bpl.n	8ee6 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0xf6>
    8edc:	6b50      	ldr	r0, [r2, #52]	; 0x34
    8ede:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8ee2:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    8ee6:	06db      	lsls	r3, r3, #27
    8ee8:	d504      	bpl.n	8ef4 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x104>
    8eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
    8eec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8ef0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
} // end checkUbloxSpi()
    8ef4:	2001      	movs	r0, #1
    8ef6:	b004      	add	sp, #16
    8ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
    8efc:	7933      	ldrb	r3, [r6, #4]
    8efe:	2b00      	cmp	r3, #0
    8f00:	d1b3      	bne.n	8e6a <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x7a>
    digitalWrite(_csPin, HIGH);
    8f02:	2101      	movs	r1, #1
    8f04:	f896 00e8 	ldrb.w	r0, [r6, #232]	; 0xe8
    8f08:	f001 fdf0 	bl	aaec <digitalWrite>
    _spiPort->endTransaction();
    8f0c:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
		if (interruptMasksUsed) {
    8f10:	7cda      	ldrb	r2, [r3, #19]
    8f12:	b312      	cbz	r2, 8f5a <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x16a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8f14:	07d5      	lsls	r5, r2, #31
    8f16:	d504      	bpl.n	8f22 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x132>
    8f18:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8f1a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8f1e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    8f22:	0794      	lsls	r4, r2, #30
    8f24:	d504      	bpl.n	8f30 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x140>
    8f26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    8f28:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8f2c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    8f30:	0750      	lsls	r0, r2, #29
    8f32:	d504      	bpl.n	8f3e <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x14e>
    8f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8f36:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8f3a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    8f3e:	0711      	lsls	r1, r2, #28
    8f40:	d504      	bpl.n	8f4c <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x15c>
    8f42:	6b58      	ldr	r0, [r3, #52]	; 0x34
    8f44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8f48:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    8f4c:	06d7      	lsls	r7, r2, #27
    8f4e:	d504      	bpl.n	8f5a <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x16a>
    8f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8f52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8f56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    delay(spiPollingWait);
    8f5a:	f896 0159 	ldrb.w	r0, [r6, #345]	; 0x159
    8f5e:	f001 fd71 	bl	aa44 <delay>
    return (true);
    8f62:	e7c7      	b.n	8ef4 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)+0x104>

00008f64 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)>:
{
    8f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f68:	4d7d      	ldr	r5, [pc, #500]	; (9160 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x1fc>)
    8f6a:	4699      	mov	r9, r3
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
    8f6c:	2302      	movs	r3, #2
{
    8f6e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    8f72:	682e      	ldr	r6, [r5, #0]
    8f74:	4604      	mov	r4, r0
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
    8f76:	738b      	strb	r3, [r1, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    8f78:	f880 3122 	strb.w	r3, [r0, #290]	; 0x122
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    8f7c:	f880 3132 	strb.w	r3, [r0, #306]	; 0x132
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    8f80:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
    8f84:	73cb      	strb	r3, [r1, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    8f86:	f880 3123 	strb.w	r3, [r0, #291]	; 0x123
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    8f8a:	f880 3133 	strb.w	r3, [r0, #307]	; 0x133
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    8f8e:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
    8f92:	682b      	ldr	r3, [r5, #0]
  while (millis() - startTime < maxTime)
    8f94:	1b9b      	subs	r3, r3, r6
    8f96:	42bb      	cmp	r3, r7
    8f98:	d26c      	bcs.n	9074 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x110>
    8f9a:	468b      	mov	fp, r1
    8f9c:	4690      	mov	r8, r2
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    8f9e:	f240 1a01 	movw	sl, #257	; 0x101
    8fa2:	e00a      	b.n	8fba <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x56>
  else if (commType == COMM_TYPE_SERIAL)
    8fa4:	2b01      	cmp	r3, #1
    8fa6:	d04d      	beq.n	9044 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xe0>
  else if (commType == COMM_TYPE_SPI)
    8fa8:	2b02      	cmp	r3, #2
    8faa:	d052      	beq.n	9052 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xee>
    delay(1); // Allow an RTOS to get an elbow in (#11)
    8fac:	2001      	movs	r0, #1
    8fae:	f001 fd49 	bl	aa44 <delay>
    8fb2:	682b      	ldr	r3, [r5, #0]
  while (millis() - startTime < maxTime)
    8fb4:	1b9b      	subs	r3, r3, r6
    8fb6:	42bb      	cmp	r3, r7
    8fb8:	d25c      	bcs.n	9074 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x110>
  if (commType == COMM_TYPE_I2C)
    8fba:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d1f0      	bne.n	8fa4 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x40>
    8fc2:	682b      	ldr	r3, [r5, #0]
  if (millis() - lastCheck >= i2cPollingWait)
    8fc4:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
    8fc8:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
    8fcc:	1a5b      	subs	r3, r3, r1
    8fce:	4293      	cmp	r3, r2
    8fd0:	d307      	bcc.n	8fe2 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x7e>
    8fd2:	464b      	mov	r3, r9
    8fd4:	4642      	mov	r2, r8
    8fd6:	4659      	mov	r1, fp
    8fd8:	4620      	mov	r0, r4
    8fda:	f7ff fdb5 	bl	8b48 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
    8fde:	2800      	cmp	r0, #0
    8fe0:	d0e4      	beq.n	8fac <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    8fe2:	f8bb 200e 	ldrh.w	r2, [fp, #14]
    8fe6:	4552      	cmp	r2, sl
    8fe8:	d01f      	beq.n	902a <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xc6>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
    8fea:	f89b 300f 	ldrb.w	r3, [fp, #15]
    8fee:	2b01      	cmp	r3, #1
    8ff0:	d00c      	beq.n	900c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xa8>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d1da      	bne.n	8fac <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
    8ff6:	f240 2301 	movw	r3, #513	; 0x201
    8ffa:	429a      	cmp	r2, r3
    8ffc:	d0d6      	beq.n	8fac <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
        if (_printDebug == true)
    8ffe:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9002:	2b00      	cmp	r3, #0
    9004:	d173      	bne.n	90ee <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x18a>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
    9006:	2002      	movs	r0, #2
}
    9008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
    900c:	f89b 3000 	ldrb.w	r3, [fp]
    9010:	4543      	cmp	r3, r8
    9012:	d103      	bne.n	901c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xb8>
    9014:	f89b 3001 	ldrb.w	r3, [fp, #1]
    9018:	454b      	cmp	r3, r9
    901a:	d0c7      	beq.n	8fac <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
        if (_printDebug == true)
    901c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9020:	2b00      	cmp	r3, #0
    9022:	d148      	bne.n	90b6 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x152>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
    9024:	200d      	movs	r0, #13
}
    9026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    902a:	f89b 3000 	ldrb.w	r3, [fp]
    902e:	4543      	cmp	r3, r8
    9030:	d016      	beq.n	9060 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xfc>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
    9032:	f89b 300f 	ldrb.w	r3, [fp, #15]
    9036:	2b01      	cmp	r3, #1
    9038:	d1db      	bne.n	8ff2 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x8e>
        if (_printDebug == true)
    903a:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    903e:	2b00      	cmp	r3, #0
    9040:	d0f0      	beq.n	9024 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xc0>
    9042:	e038      	b.n	90b6 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x152>
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
    9044:	464b      	mov	r3, r9
    9046:	4642      	mov	r2, r8
    9048:	4659      	mov	r1, fp
    904a:	4620      	mov	r0, r4
    904c:	f7ff feb0 	bl	8db0 <SFE_UBLOX_GNSS::checkUbloxSerial(ubxPacket*, unsigned char, unsigned char)>
    9050:	e7c5      	b.n	8fde <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x7a>
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
    9052:	464b      	mov	r3, r9
    9054:	4642      	mov	r2, r8
    9056:	4659      	mov	r1, fp
    9058:	4620      	mov	r0, r4
    905a:	f7ff fec9 	bl	8df0 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)>
    905e:	e7be      	b.n	8fde <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x7a>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    9060:	f89b 3001 	ldrb.w	r3, [fp, #1]
    9064:	454b      	cmp	r3, r9
    9066:	d1e4      	bne.n	9032 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xce>
        if (_printDebug == true)
    9068:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    906c:	2b00      	cmp	r3, #0
    906e:	d15a      	bne.n	9126 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x1c2>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
    9070:	200b      	movs	r0, #11
    9072:	e003      	b.n	907c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x118>
  if (_printDebug == true)
    9074:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9078:	b913      	cbnz	r3, 9080 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x11c>
  return (SFE_UBLOX_STATUS_TIMEOUT);
    907a:	2003      	movs	r0, #3
}
    907c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
    9080:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9084:	2224      	movs	r2, #36	; 0x24
    9086:	4937      	ldr	r1, [pc, #220]	; (9164 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x200>)
    9088:	6803      	ldr	r3, [r0, #0]
    908a:	685b      	ldr	r3, [r3, #4]
    908c:	4798      	blx	r3
    908e:	6829      	ldr	r1, [r5, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9090:	2300      	movs	r3, #0
    9092:	220a      	movs	r2, #10
    9094:	1b89      	subs	r1, r1, r6
    9096:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    909a:	f001 fa21 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->println(F(" msec. No packet received."));
    909e:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    90a2:	221a      	movs	r2, #26
    90a4:	4930      	ldr	r1, [pc, #192]	; (9168 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x204>)
    90a6:	6823      	ldr	r3, [r4, #0]
    90a8:	4620      	mov	r0, r4
    90aa:	685b      	ldr	r3, [r3, #4]
    90ac:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    90ae:	4620      	mov	r0, r4
    90b0:	f001 f9fa 	bl	a4a8 <Print::println()>
    90b4:	e7e1      	b.n	907a <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x116>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
    90b6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    90ba:	2233      	movs	r2, #51	; 0x33
    90bc:	492b      	ldr	r1, [pc, #172]	; (916c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x208>)
    90be:	6803      	ldr	r3, [r0, #0]
    90c0:	685b      	ldr	r3, [r3, #4]
    90c2:	4798      	blx	r3
    90c4:	6829      	ldr	r1, [r5, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    90c6:	2300      	movs	r3, #0
    90c8:	220a      	movs	r2, #10
    90ca:	1b89      	subs	r1, r1, r6
    90cc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    90d0:	f001 fa06 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    90d4:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    90d8:	2205      	movs	r2, #5
    90da:	4925      	ldr	r1, [pc, #148]	; (9170 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x20c>)
    90dc:	6823      	ldr	r3, [r4, #0]
    90de:	4620      	mov	r0, r4
    90e0:	685b      	ldr	r3, [r3, #4]
    90e2:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    90e4:	4620      	mov	r0, r4
    90e6:	f001 f9df 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
    90ea:	200d      	movs	r0, #13
    90ec:	e7c6      	b.n	907c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x118>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
    90ee:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    90f2:	2238      	movs	r2, #56	; 0x38
    90f4:	491f      	ldr	r1, [pc, #124]	; (9174 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x210>)
    90f6:	6803      	ldr	r3, [r0, #0]
    90f8:	685b      	ldr	r3, [r3, #4]
    90fa:	4798      	blx	r3
    90fc:	6829      	ldr	r1, [r5, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    90fe:	2300      	movs	r3, #0
    9100:	220a      	movs	r2, #10
    9102:	1b89      	subs	r1, r1, r6
    9104:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    9108:	f001 f9ea 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    910c:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9110:	2205      	movs	r2, #5
    9112:	4917      	ldr	r1, [pc, #92]	; (9170 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x20c>)
    9114:	6823      	ldr	r3, [r4, #0]
    9116:	4620      	mov	r0, r4
    9118:	685b      	ldr	r3, [r3, #4]
    911a:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    911c:	4620      	mov	r0, r4
    911e:	f001 f9c3 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
    9122:	2002      	movs	r0, #2
    9124:	e7aa      	b.n	907c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x118>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
    9126:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    912a:	2239      	movs	r2, #57	; 0x39
    912c:	4912      	ldr	r1, [pc, #72]	; (9178 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x214>)
    912e:	6803      	ldr	r3, [r0, #0]
    9130:	685b      	ldr	r3, [r3, #4]
    9132:	4798      	blx	r3
    9134:	6829      	ldr	r1, [r5, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9136:	2300      	movs	r3, #0
    9138:	220a      	movs	r2, #10
    913a:	1b89      	subs	r1, r1, r6
    913c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    9140:	f001 f9ce 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    9144:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9148:	2205      	movs	r2, #5
    914a:	4909      	ldr	r1, [pc, #36]	; (9170 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x20c>)
    914c:	6823      	ldr	r3, [r4, #0]
    914e:	4620      	mov	r0, r4
    9150:	685b      	ldr	r3, [r3, #4]
    9152:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9154:	4620      	mov	r0, r4
    9156:	f001 f9a7 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
    915a:	200b      	movs	r0, #11
    915c:	e78e      	b.n	907c <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x118>
    915e:	bf00      	nop
    9160:	20004bc4 	.word	0x20004bc4
    9164:	200026bc 	.word	0x200026bc
    9168:	200026e4 	.word	0x200026e4
    916c:	2000264c 	.word	0x2000264c
    9170:	20002644 	.word	0x20002644
    9174:	20002680 	.word	0x20002680
    9178:	20002608 	.word	0x20002608

0000917c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)>:
{
    917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9180:	4ea2      	ldr	r6, [pc, #648]	; (940c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x290>)
    9182:	b082      	sub	sp, #8
    9184:	4699      	mov	r9, r3
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
    9186:	2302      	movs	r3, #2
    9188:	f8d6 a000 	ldr.w	sl, [r6]
{
    918c:	4604      	mov	r4, r0
    918e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    9192:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
    9194:	738b      	strb	r3, [r1, #14]
{
    9196:	4690      	mov	r8, r2
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    9198:	f880 3122 	strb.w	r3, [r0, #290]	; 0x122
  while (millis() < (startTime + (unsigned long)maxTime))
    919c:	4457      	add	r7, sl
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    919e:	f880 3132 	strb.w	r3, [r0, #306]	; 0x132
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    91a2:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
    91a6:	73cb      	strb	r3, [r1, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    91a8:	f880 3123 	strb.w	r3, [r0, #291]	; 0x123
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    91ac:	f880 3133 	strb.w	r3, [r0, #307]	; 0x133
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
    91b0:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
    91b4:	6833      	ldr	r3, [r6, #0]
  while (millis() < (startTime + (unsigned long)maxTime))
    91b6:	42bb      	cmp	r3, r7
    91b8:	d30b      	bcc.n	91d2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x56>
    91ba:	e18f      	b.n	94dc <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x360>
  else if (commType == COMM_TYPE_SERIAL)
    91bc:	2801      	cmp	r0, #1
    91be:	d071      	beq.n	92a4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x128>
  else if (commType == COMM_TYPE_SPI)
    91c0:	2802      	cmp	r0, #2
    91c2:	d076      	beq.n	92b2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x136>
    delay(1); // Allow an RTOS to get an elbow in (#11)
    91c4:	2001      	movs	r0, #1
    91c6:	f001 fc3d 	bl	aa44 <delay>
    91ca:	6833      	ldr	r3, [r6, #0]
  while (millis() < (startTime + (unsigned long)maxTime))
    91cc:	42bb      	cmp	r3, r7
    91ce:	f080 8099 	bcs.w	9304 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x188>
  if (commType == COMM_TYPE_I2C)
    91d2:	f894 00cf 	ldrb.w	r0, [r4, #207]	; 0xcf
    91d6:	2800      	cmp	r0, #0
    91d8:	d1f0      	bne.n	91bc <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x40>
    91da:	6833      	ldr	r3, [r6, #0]
  if (millis() - lastCheck >= i2cPollingWait)
    91dc:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
    91e0:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
    91e4:	1a5b      	subs	r3, r3, r1
    91e6:	4293      	cmp	r3, r2
    91e8:	d307      	bcc.n	91fa <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x7e>
    91ea:	464b      	mov	r3, r9
    91ec:	4642      	mov	r2, r8
    91ee:	4629      	mov	r1, r5
    91f0:	4620      	mov	r0, r4
    91f2:	f7ff fca9 	bl	8b48 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
    91f6:	2800      	cmp	r0, #0
    91f8:	d0e4      	beq.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    91fa:	7beb      	ldrb	r3, [r5, #15]
    91fc:	2b01      	cmp	r3, #1
    91fe:	d012      	beq.n	9226 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xaa>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
    9200:	2b02      	cmp	r3, #2
    9202:	f894 2123 	ldrb.w	r2, [r4, #291]	; 0x123
    9206:	d141      	bne.n	928c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x110>
    9208:	2a01      	cmp	r2, #1
    920a:	f000 80dc 	beq.w	93c6 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x24a>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
    920e:	2a03      	cmp	r2, #3
    9210:	f000 8082 	beq.w	9318 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x19c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
    9214:	4313      	orrs	r3, r2
    9216:	d1d5      	bne.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
        if (_printDebug == true)
    9218:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
    921c:	2a00      	cmp	r2, #0
    921e:	f040 8105 	bne.w	942c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x2b0>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
    9222:	2001      	movs	r0, #1
    9224:	e075      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    9226:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
    922a:	2b01      	cmp	r3, #1
    922c:	d048      	beq.n	92c0 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x144>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
    922e:	2b03      	cmp	r3, #3
    9230:	d072      	beq.n	9318 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x19c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    9232:	2b00      	cmp	r3, #0
    9234:	d1c6      	bne.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
    9236:	7baa      	ldrb	r2, [r5, #14]
    9238:	2a01      	cmp	r2, #1
    923a:	d1c3      	bne.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
    923c:	782a      	ldrb	r2, [r5, #0]
    923e:	4542      	cmp	r2, r8
    9240:	d1c0      	bne.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
    9242:	786a      	ldrb	r2, [r5, #1]
    9244:	454a      	cmp	r2, r9
    9246:	d1bd      	bne.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
        if (_printDebug == true)
    9248:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
    924c:	2a00      	cmp	r2, #0
    924e:	f000 80b8 	beq.w	93c2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x246>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
    9252:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9256:	223e      	movs	r2, #62	; 0x3e
    9258:	496d      	ldr	r1, [pc, #436]	; (9410 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x294>)
    925a:	6805      	ldr	r5, [r0, #0]
    925c:	9301      	str	r3, [sp, #4]
    925e:	686d      	ldr	r5, [r5, #4]
    9260:	47a8      	blx	r5
    9262:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9264:	9b01      	ldr	r3, [sp, #4]
    9266:	eba1 010a 	sub.w	r1, r1, sl
    926a:	220a      	movs	r2, #10
    926c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    9270:	f001 f936 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    9274:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9278:	2205      	movs	r2, #5
    927a:	4966      	ldr	r1, [pc, #408]	; (9414 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x298>)
    927c:	6823      	ldr	r3, [r4, #0]
    927e:	4620      	mov	r0, r4
    9280:	685b      	ldr	r3, [r3, #4]
    9282:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9284:	4620      	mov	r0, r4
    9286:	f001 f90f 	bl	a4a8 <Print::println()>
    928a:	e09a      	b.n	93c2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x246>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
    928c:	2a01      	cmp	r2, #1
    928e:	d1be      	bne.n	920e <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x92>
    9290:	89eb      	ldrh	r3, [r5, #14]
    9292:	2b00      	cmp	r3, #0
    9294:	d196      	bne.n	91c4 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x48>
        if (_printDebug == true)
    9296:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    929a:	2b00      	cmp	r3, #0
    929c:	f040 8101 	bne.w	94a2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x326>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
    92a0:	2002      	movs	r0, #2
    92a2:	e036      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
    92a4:	464b      	mov	r3, r9
    92a6:	4642      	mov	r2, r8
    92a8:	4629      	mov	r1, r5
    92aa:	4620      	mov	r0, r4
    92ac:	f7ff fd80 	bl	8db0 <SFE_UBLOX_GNSS::checkUbloxSerial(ubxPacket*, unsigned char, unsigned char)>
    92b0:	e7a1      	b.n	91f6 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x7a>
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
    92b2:	464b      	mov	r3, r9
    92b4:	4642      	mov	r2, r8
    92b6:	4629      	mov	r1, r5
    92b8:	4620      	mov	r0, r4
    92ba:	f7ff fd99 	bl	8df0 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)>
    92be:	e79a      	b.n	91f6 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x7a>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    92c0:	7bab      	ldrb	r3, [r5, #14]
    92c2:	2b01      	cmp	r3, #1
    92c4:	782b      	ldrb	r3, [r5, #0]
    92c6:	d00a      	beq.n	92de <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x162>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
    92c8:	4543      	cmp	r3, r8
    92ca:	d102      	bne.n	92d2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x156>
    92cc:	786b      	ldrb	r3, [r5, #1]
    92ce:	454b      	cmp	r3, r9
    92d0:	d0de      	beq.n	9290 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x114>
        if (_printDebug == true)
    92d2:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    92d6:	2b00      	cmp	r3, #0
    92d8:	d17b      	bne.n	93d2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x256>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
    92da:	200d      	movs	r0, #13
    92dc:	e019      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    92de:	4543      	cmp	r3, r8
    92e0:	d1f7      	bne.n	92d2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x156>
    92e2:	786a      	ldrb	r2, [r5, #1]
    92e4:	454a      	cmp	r2, r9
    92e6:	d1ef      	bne.n	92c8 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x14c>
        if (_printDebug == true)
    92e8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    92ec:	2b00      	cmp	r3, #0
    92ee:	d068      	beq.n	93c2 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x246>
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
    92f0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    92f4:	223c      	movs	r2, #60	; 0x3c
    92f6:	4948      	ldr	r1, [pc, #288]	; (9418 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x29c>)
    92f8:	6803      	ldr	r3, [r0, #0]
    92fa:	685b      	ldr	r3, [r3, #4]
    92fc:	4798      	blx	r3
    92fe:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9300:	2300      	movs	r3, #0
    9302:	e7b0      	b.n	9266 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0xea>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    9304:	7beb      	ldrb	r3, [r5, #15]
    9306:	2b01      	cmp	r3, #1
    9308:	d049      	beq.n	939e <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x222>
  if (_printDebug == true)
    930a:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    930e:	bb3b      	cbnz	r3, 9360 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x1e4>
  return (SFE_UBLOX_STATUS_TIMEOUT);
    9310:	2003      	movs	r0, #3
}
    9312:	b002      	add	sp, #8
    9314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (_printDebug == true)
    9318:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    931c:	b91b      	cbnz	r3, 9326 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x1aa>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
    931e:	2004      	movs	r0, #4
}
    9320:	b002      	add	sp, #8
    9322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
    9326:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    932a:	223a      	movs	r2, #58	; 0x3a
    932c:	493b      	ldr	r1, [pc, #236]	; (941c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x2a0>)
    932e:	6803      	ldr	r3, [r0, #0]
    9330:	685b      	ldr	r3, [r3, #4]
    9332:	4798      	blx	r3
    9334:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9336:	2300      	movs	r3, #0
    9338:	220a      	movs	r2, #10
    933a:	eba1 010a 	sub.w	r1, r1, sl
    933e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    9342:	f001 f8cd 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    9346:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    934a:	2205      	movs	r2, #5
    934c:	4931      	ldr	r1, [pc, #196]	; (9414 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x298>)
    934e:	6823      	ldr	r3, [r4, #0]
    9350:	4620      	mov	r0, r4
    9352:	685b      	ldr	r3, [r3, #4]
    9354:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9356:	4620      	mov	r0, r4
    9358:	f001 f8a6 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
    935c:	2004      	movs	r0, #4
    935e:	e7d8      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
    9360:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9364:	2222      	movs	r2, #34	; 0x22
    9366:	492e      	ldr	r1, [pc, #184]	; (9420 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x2a4>)
    9368:	6803      	ldr	r3, [r0, #0]
    936a:	685b      	ldr	r3, [r3, #4]
    936c:	4798      	blx	r3
    936e:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9370:	2300      	movs	r3, #0
    9372:	220a      	movs	r2, #10
    9374:	eba1 010a 	sub.w	r1, r1, sl
    9378:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    937c:	f001 f8b0 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    _debugSerial->println(F(" msec."));
    9380:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9384:	2206      	movs	r2, #6
    9386:	4927      	ldr	r1, [pc, #156]	; (9424 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x2a8>)
    9388:	6823      	ldr	r3, [r4, #0]
    938a:	4620      	mov	r0, r4
    938c:	685b      	ldr	r3, [r3, #4]
    938e:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9390:	4620      	mov	r0, r4
    9392:	f001 f889 	bl	a4a8 <Print::println()>
  return (SFE_UBLOX_STATUS_TIMEOUT);
    9396:	2003      	movs	r0, #3
}
    9398:	b002      	add	sp, #8
    939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    939e:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
    93a2:	2b02      	cmp	r3, #2
    93a4:	d1b1      	bne.n	930a <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x18e>
    93a6:	7bab      	ldrb	r3, [r5, #14]
    93a8:	2b01      	cmp	r3, #1
    93aa:	d1ae      	bne.n	930a <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x18e>
    93ac:	782b      	ldrb	r3, [r5, #0]
    93ae:	4543      	cmp	r3, r8
    93b0:	d1ab      	bne.n	930a <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x18e>
    93b2:	786b      	ldrb	r3, [r5, #1]
    93b4:	454b      	cmp	r3, r9
    93b6:	d1a8      	bne.n	930a <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x18e>
    if (_printDebug == true)
    93b8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    93bc:	2b00      	cmp	r3, #0
    93be:	f040 8092 	bne.w	94e6 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x36a>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
    93c2:	200b      	movs	r0, #11
    93c4:	e7a5      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
        if (_printDebug == true)
    93c6:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    93ca:	2b00      	cmp	r3, #0
    93cc:	d14c      	bne.n	9468 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x2ec>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
    93ce:	200a      	movs	r0, #10
    93d0:	e79f      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
    93d2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    93d6:	2231      	movs	r2, #49	; 0x31
    93d8:	4913      	ldr	r1, [pc, #76]	; (9428 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x2ac>)
    93da:	6803      	ldr	r3, [r0, #0]
    93dc:	685b      	ldr	r3, [r3, #4]
    93de:	4798      	blx	r3
    93e0:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    93e2:	2300      	movs	r3, #0
    93e4:	220a      	movs	r2, #10
    93e6:	eba1 010a 	sub.w	r1, r1, sl
    93ea:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    93ee:	f001 f877 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    93f2:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    93f6:	2205      	movs	r2, #5
    93f8:	4906      	ldr	r1, [pc, #24]	; (9414 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x298>)
    93fa:	6823      	ldr	r3, [r4, #0]
    93fc:	4620      	mov	r0, r4
    93fe:	685b      	ldr	r3, [r3, #4]
    9400:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9402:	4620      	mov	r0, r4
    9404:	f001 f850 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
    9408:	200d      	movs	r0, #13
    940a:	e782      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
    940c:	20004bc4 	.word	0x20004bc4
    9410:	2000251c 	.word	0x2000251c
    9414:	20002644 	.word	0x20002644
    9418:	20002410 	.word	0x20002410
    941c:	200024e0 	.word	0x200024e0
    9420:	200025dc 	.word	0x200025dc
    9424:	20002600 	.word	0x20002600
    9428:	20002484 	.word	0x20002484
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
    942c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9430:	2240      	movs	r2, #64	; 0x40
    9432:	4937      	ldr	r1, [pc, #220]	; (9510 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x394>)
    9434:	6805      	ldr	r5, [r0, #0]
    9436:	9301      	str	r3, [sp, #4]
    9438:	686d      	ldr	r5, [r5, #4]
    943a:	47a8      	blx	r5
    943c:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    943e:	9b01      	ldr	r3, [sp, #4]
    9440:	220a      	movs	r2, #10
    9442:	eba1 010a 	sub.w	r1, r1, sl
    9446:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    944a:	f001 f849 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    944e:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9452:	2205      	movs	r2, #5
    9454:	492f      	ldr	r1, [pc, #188]	; (9514 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x398>)
    9456:	6823      	ldr	r3, [r4, #0]
    9458:	4620      	mov	r0, r4
    945a:	685b      	ldr	r3, [r3, #4]
    945c:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    945e:	4620      	mov	r0, r4
    9460:	f001 f822 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
    9464:	2001      	movs	r0, #1
    9466:	e754      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
    9468:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    946c:	2230      	movs	r2, #48	; 0x30
    946e:	492a      	ldr	r1, [pc, #168]	; (9518 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x39c>)
    9470:	6803      	ldr	r3, [r0, #0]
    9472:	685b      	ldr	r3, [r3, #4]
    9474:	4798      	blx	r3
    9476:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    9478:	2300      	movs	r3, #0
    947a:	220a      	movs	r2, #10
    947c:	eba1 010a 	sub.w	r1, r1, sl
    9480:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    9484:	f001 f82c 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    9488:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    948c:	2205      	movs	r2, #5
    948e:	4921      	ldr	r1, [pc, #132]	; (9514 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x398>)
    9490:	6823      	ldr	r3, [r4, #0]
    9492:	4620      	mov	r0, r4
    9494:	685b      	ldr	r3, [r3, #4]
    9496:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9498:	4620      	mov	r0, r4
    949a:	f001 f805 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
    949e:	200a      	movs	r0, #10
    94a0:	e737      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
    94a2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    94a6:	2225      	movs	r2, #37	; 0x25
    94a8:	491c      	ldr	r1, [pc, #112]	; (951c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x3a0>)
    94aa:	6803      	ldr	r3, [r0, #0]
    94ac:	685b      	ldr	r3, [r3, #4]
    94ae:	4798      	blx	r3
    94b0:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    94b2:	2300      	movs	r3, #0
    94b4:	220a      	movs	r2, #10
    94b6:	eba1 010a 	sub.w	r1, r1, sl
    94ba:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    94be:	f001 f80f 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          _debugSerial->println(F(" msec"));
    94c2:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    94c6:	2205      	movs	r2, #5
    94c8:	4912      	ldr	r1, [pc, #72]	; (9514 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x398>)
    94ca:	6823      	ldr	r3, [r4, #0]
    94cc:	4620      	mov	r0, r4
    94ce:	685b      	ldr	r3, [r3, #4]
    94d0:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    94d2:	4620      	mov	r0, r4
    94d4:	f000 ffe8 	bl	a4a8 <Print::println()>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
    94d8:	2002      	movs	r0, #2
    94da:	e71a      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
    94dc:	7bcb      	ldrb	r3, [r1, #15]
    94de:	2b01      	cmp	r3, #1
    94e0:	f47f af13 	bne.w	930a <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x18e>
    94e4:	e75f      	b.n	93a6 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x22a>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    94e6:	490e      	ldr	r1, [pc, #56]	; (9520 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x3a4>)
    94e8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    94ec:	f7f9 fcb4 	bl	2e58 <Print::write(char const*) [clone .isra.0]>
    94f0:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    94f2:	2300      	movs	r3, #0
    94f4:	220a      	movs	r2, #10
    94f6:	eba1 010a 	sub.w	r1, r1, sl
    94fa:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    94fe:	f000 ffef 	bl	a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      _debugSerial->println(F(" msec. "));
    9502:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    9506:	4907      	ldr	r1, [pc, #28]	; (9524 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x3a8>)
    9508:	f7f9 fcb6 	bl	2e78 <Print::println(__FlashStringHelper const*) [clone .isra.0]>
    return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data... But no ACK!
    950c:	200b      	movs	r0, #11
    950e:	e700      	b.n	9312 <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)+0x196>
    9510:	2000255c 	.word	0x2000255c
    9514:	20002644 	.word	0x20002644
    9518:	20002450 	.word	0x20002450
    951c:	200024b8 	.word	0x200024b8
    9520:	200025a0 	.word	0x200025a0
    9524:	200025d4 	.word	0x200025d4

00009528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>:
{
    9528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    952c:	4604      	mov	r4, r0
    952e:	b082      	sub	sp, #8
    9530:	4698      	mov	r8, r3
    9532:	4616      	mov	r6, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
    9534:	f7fb fd5e 	bl	4ff4 <SFE_UBLOX_GNSS::calcChecksum(ubxPacket*)>
  if (_printDebug == true)
    9538:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
{
    953c:	460d      	mov	r5, r1
  if (_printDebug == true)
    953e:	2b00      	cmp	r3, #0
    9540:	d139      	bne.n	95b6 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x8e>
  if (commType == COMM_TYPE_I2C)
    9542:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
    9546:	b1f3      	cbz	r3, 9586 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x5e>
  else if (commType == COMM_TYPE_SERIAL)
    9548:	2b01      	cmp	r3, #1
    954a:	d064      	beq.n	9616 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0xee>
  else if (commType == COMM_TYPE_SPI)
    954c:	2b02      	cmp	r3, #2
    954e:	d04b      	beq.n	95e8 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0xc0>
  if (maxWait > 0)
    9550:	b1a6      	cbz	r6, 957c <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x54>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
    9552:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
    9554:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
    9558:	2a06      	cmp	r2, #6
    955a:	d002      	beq.n	9562 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x3a>
    955c:	f1b8 0f00 	cmp.w	r8, #0
    9560:	d036      	beq.n	95d0 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0xa8>
      if (_printDebug == true)
    9562:	2b00      	cmp	r3, #0
    9564:	d14a      	bne.n	95fc <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0xd4>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
    9566:	786b      	ldrb	r3, [r5, #1]
    9568:	4629      	mov	r1, r5
    956a:	4620      	mov	r0, r4
    956c:	9600      	str	r6, [sp, #0]
    956e:	f7ff fe05 	bl	917c <SFE_UBLOX_GNSS::waitForACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)>
    9572:	4607      	mov	r7, r0
}
    9574:	4638      	mov	r0, r7
    9576:	b002      	add	sp, #8
    9578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    957c:	4637      	mov	r7, r6
    957e:	4638      	mov	r0, r7
    9580:	b002      	add	sp, #8
    9582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    retVal = sendI2cCommand(outgoingUBX, maxWait);
    9586:	4632      	mov	r2, r6
    9588:	4629      	mov	r1, r5
    958a:	4620      	mov	r0, r4
    958c:	f7fb fd56 	bl	503c <SFE_UBLOX_GNSS::sendI2cCommand(ubxPacket*, unsigned short)>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
    9590:	4607      	mov	r7, r0
    9592:	2800      	cmp	r0, #0
    9594:	d0dc      	beq.n	9550 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x28>
      if (_printDebug == true)
    9596:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    959a:	2b00      	cmp	r3, #0
    959c:	d0ef      	beq.n	957e <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x56>
        _debugSerial->println(F("Send I2C Command failed"));
    959e:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    95a2:	2217      	movs	r2, #23
    95a4:	492e      	ldr	r1, [pc, #184]	; (9660 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x138>)
    95a6:	6823      	ldr	r3, [r4, #0]
    95a8:	4620      	mov	r0, r4
    95aa:	685b      	ldr	r3, [r3, #4]
    95ac:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    95ae:	4620      	mov	r0, r4
    95b0:	f000 ff7a 	bl	a4a8 <Print::println()>
    95b4:	e7e3      	b.n	957e <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x56>
    _debugSerial->print(F("\nSending: "));
    95b6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    95ba:	220a      	movs	r2, #10
    95bc:	4929      	ldr	r1, [pc, #164]	; (9664 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x13c>)
    95be:	6803      	ldr	r3, [r0, #0]
    95c0:	685b      	ldr	r3, [r3, #4]
    95c2:	4798      	blx	r3
    printPacket(outgoingUBX, true); // Always print payload
    95c4:	2201      	movs	r2, #1
    95c6:	4629      	mov	r1, r5
    95c8:	4620      	mov	r0, r4
    95ca:	f7fb ff85 	bl	54d8 <SFE_UBLOX_GNSS::printPacket(ubxPacket*, bool)>
    95ce:	e7b8      	b.n	9542 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x1a>
      if (_printDebug == true)
    95d0:	bb43      	cbnz	r3, 9624 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0xfc>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
    95d2:	786b      	ldrb	r3, [r5, #1]
    95d4:	4629      	mov	r1, r5
    95d6:	4620      	mov	r0, r4
    95d8:	9600      	str	r6, [sp, #0]
    95da:	f7ff fcc3 	bl	8f64 <SFE_UBLOX_GNSS::waitForNoACKResponse(ubxPacket*, unsigned char, unsigned char, unsigned short)>
    95de:	4607      	mov	r7, r0
}
    95e0:	4638      	mov	r0, r7
    95e2:	b002      	add	sp, #8
    95e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (spiBuffer == NULL)
    95e8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    95ec:	b33b      	cbz	r3, 963e <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x116>
    95ee:	4629      	mov	r1, r5
    95f0:	4620      	mov	r0, r4
    95f2:	f7fb fe5d 	bl	52b0 <SFE_UBLOX_GNSS::sendSpiCommand(ubxPacket*) [clone .part.0]>
  if (maxWait > 0)
    95f6:	2e00      	cmp	r6, #0
    95f8:	d0c0      	beq.n	957c <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x54>
    95fa:	e7aa      	b.n	9552 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x2a>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
    95fc:	f8d4 70dc 	ldr.w	r7, [r4, #220]	; 0xdc
    9600:	2225      	movs	r2, #37	; 0x25
    9602:	4919      	ldr	r1, [pc, #100]	; (9668 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x140>)
    9604:	683b      	ldr	r3, [r7, #0]
    9606:	4638      	mov	r0, r7
    9608:	685b      	ldr	r3, [r3, #4]
    960a:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    960c:	4638      	mov	r0, r7
    960e:	f000 ff4b 	bl	a4a8 <Print::println()>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
    9612:	782a      	ldrb	r2, [r5, #0]
    9614:	e7a7      	b.n	9566 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x3e>
    sendSerialCommand(outgoingUBX);
    9616:	4629      	mov	r1, r5
    9618:	4620      	mov	r0, r4
    961a:	f7fb fde3 	bl	51e4 <SFE_UBLOX_GNSS::sendSerialCommand(ubxPacket*)>
  if (maxWait > 0)
    961e:	2e00      	cmp	r6, #0
    9620:	d0ac      	beq.n	957c <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x54>
    9622:	e796      	b.n	9552 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x2a>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
    9624:	f8d4 70dc 	ldr.w	r7, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9628:	2228      	movs	r2, #40	; 0x28
    962a:	4910      	ldr	r1, [pc, #64]	; (966c <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x144>)
    962c:	683b      	ldr	r3, [r7, #0]
    962e:	4638      	mov	r0, r7
    9630:	685b      	ldr	r3, [r3, #4]
    9632:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9634:	4638      	mov	r0, r7
    9636:	f000 ff37 	bl	a4a8 <Print::println()>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
    963a:	782a      	ldrb	r2, [r5, #0]
    963c:	e7c9      	b.n	95d2 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0xaa>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    963e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9642:	b91b      	cbnz	r3, 964c <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x124>
    9644:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    9648:	2b00      	cmp	r3, #0
    964a:	d081      	beq.n	9550 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x28>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
    964c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9650:	2234      	movs	r2, #52	; 0x34
    9652:	4907      	ldr	r1, [pc, #28]	; (9670 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x148>)
    9654:	6803      	ldr	r3, [r0, #0]
    9656:	685b      	ldr	r3, [r3, #4]
    9658:	4798      	blx	r3
  if (maxWait > 0)
    965a:	2e00      	cmp	r6, #0
    965c:	d08e      	beq.n	957c <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x54>
    965e:	e778      	b.n	9552 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)+0x2a>
    9660:	20002018 	.word	0x20002018
    9664:	2000200c 	.word	0x2000200c
    9668:	20002030 	.word	0x20002030
    966c:	20002058 	.word	0x20002058
    9670:	20002224 	.word	0x20002224

00009674 <SFE_UBLOX_GNSS::saveConfiguration(unsigned short)>:
{
    9674:	b510      	push	{r4, lr}
  packetCfg.startingSpot = 0;
    9676:	2300      	movs	r3, #0
{
    9678:	460a      	mov	r2, r1
  packetCfg.cls = UBX_CLASS_CFG;
    967a:	4c0d      	ldr	r4, [pc, #52]	; (96b0 <SFE_UBLOX_GNSS::saveConfiguration(unsigned short)+0x3c>)
  memset(payloadCfg, 0, packetCfg.len);
    967c:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
  packetCfg.cls = UBX_CLASS_CFG;
    9680:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
  packetCfg.startingSpot = 0;
    9684:	f8a0 313a 	strh.w	r3, [r0, #314]	; 0x13a
  memset(payloadCfg, 0, packetCfg.len);
    9688:	600b      	str	r3, [r1, #0]
    968a:	604b      	str	r3, [r1, #4]
    968c:	608b      	str	r3, [r1, #8]
  packetCfg.payload[4] = 0xFF; // Set any bit in the saveMask field to save current config to Flash and BBR
    968e:	21ff      	movs	r1, #255	; 0xff
    9690:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
    9694:	7121      	strb	r1, [r4, #4]
  packetCfg.payload[5] = 0xFF;
    9696:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
    969a:	7161      	strb	r1, [r4, #5]
  return (sendCommand(&packetCfg, maxWait) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    969c:	f500 719a 	add.w	r1, r0, #308	; 0x134
    96a0:	f7ff ff42 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
}
    96a4:	f1a0 000a 	sub.w	r0, r0, #10
    96a8:	fab0 f080 	clz	r0, r0
    96ac:	0940      	lsrs	r0, r0, #5
    96ae:	bd10      	pop	{r4, pc}
    96b0:	000c0906 	.word	0x000c0906

000096b4 <SFE_UBLOX_GNSS::setDynamicModel(dynModel, unsigned short)>:
{
    96b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  packetCfg.cls = UBX_CLASS_CFG;
    96b6:	f242 4306 	movw	r3, #9222	; 0x2406
  packetCfg.startingSpot = 0;
    96ba:	2500      	movs	r5, #0
{
    96bc:	b083      	sub	sp, #12
    96be:	460f      	mov	r7, r1
  if (sendCommand(&packetCfg, maxWait) != SFE_UBLOX_STATUS_DATA_RECEIVED) // We are expecting data and an ACK
    96c0:	f500 719a 	add.w	r1, r0, #308	; 0x134
  packetCfg.cls = UBX_CLASS_CFG;
    96c4:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
  packetCfg.startingSpot = 0;
    96c8:	f8a0 513a 	strh.w	r5, [r0, #314]	; 0x13a
  if (sendCommand(&packetCfg, maxWait) != SFE_UBLOX_STATUS_DATA_RECEIVED) // We are expecting data and an ACK
    96cc:	462b      	mov	r3, r5
    96ce:	9101      	str	r1, [sp, #4]
{
    96d0:	4604      	mov	r4, r0
    96d2:	4616      	mov	r6, r2
  if (sendCommand(&packetCfg, maxWait) != SFE_UBLOX_STATUS_DATA_RECEIVED) // We are expecting data and an ACK
    96d4:	f7ff ff28 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
    96d8:	280b      	cmp	r0, #11
    96da:	9901      	ldr	r1, [sp, #4]
    96dc:	d002      	beq.n	96e4 <SFE_UBLOX_GNSS::setDynamicModel(dynModel, unsigned short)+0x30>
    return (false);
    96de:	4628      	mov	r0, r5
}
    96e0:	b003      	add	sp, #12
    96e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  payloadCfg[0] |= 0x01;            // mask: set only the dyn bit (0)
    96e4:	f8d4 c104 	ldr.w	ip, [r4, #260]	; 0x104
  return (sendCommand(&packetCfg, maxWait) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    96e8:	4632      	mov	r2, r6
  packetCfg.len = 36;
    96ea:	f04f 0e24 	mov.w	lr, #36	; 0x24
  return (sendCommand(&packetCfg, maxWait) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    96ee:	462b      	mov	r3, r5
  payloadCfg[0] |= 0x01;            // mask: set only the dyn bit (0)
    96f0:	f89c 6000 	ldrb.w	r6, [ip]
  return (sendCommand(&packetCfg, maxWait) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    96f4:	4620      	mov	r0, r4
  payloadCfg[0] |= 0x01;            // mask: set only the dyn bit (0)
    96f6:	f046 0601 	orr.w	r6, r6, #1
    96fa:	f88c 6000 	strb.w	r6, [ip]
  payloadCfg[2] = newDynamicModel; // dynModel
    96fe:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
    9702:	70b7      	strb	r7, [r6, #2]
  packetCfg.len = 36;
    9704:	f8a4 e136 	strh.w	lr, [r4, #310]	; 0x136
  packetCfg.startingSpot = 0;
    9708:	f8a4 513a 	strh.w	r5, [r4, #314]	; 0x13a
  return (sendCommand(&packetCfg, maxWait) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    970c:	f7ff ff0c 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
    9710:	f1a0 000a 	sub.w	r0, r0, #10
    9714:	fab0 f080 	clz	r0, r0
    9718:	0940      	lsrs	r0, r0, #5
}
    971a:	b003      	add	sp, #12
    971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    971e:	bf00      	nop

00009720 <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)>:
{
    9720:	b570      	push	{r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
    9722:	6f45      	ldr	r5, [r0, #116]	; 0x74
{
    9724:	b082      	sub	sp, #8
    9726:	4604      	mov	r4, r0
    9728:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
    972a:	b1f5      	cbz	r5, 976a <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)+0x4a>
  packetCfg.startingSpot = 0;
    972c:	2300      	movs	r3, #0
  payloadCfg[0] = portID;
    972e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
  packetCfg.cls = UBX_CLASS_CFG;
    9732:	4812      	ldr	r0, [pc, #72]	; (977c <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)+0x5c>)
  packetCfg.startingSpot = 0;
    9734:	f8a4 313a 	strh.w	r3, [r4, #314]	; 0x13a
  packetCfg.cls = UBX_CLASS_CFG;
    9738:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
    973c:	4620      	mov	r0, r4
  payloadCfg[0] = portID;
    973e:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
    9740:	f504 719a 	add.w	r1, r4, #308	; 0x134
    9744:	f7ff fef0 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
  delete packetUBXCFGPRT;
    9748:	6f63      	ldr	r3, [r4, #116]	; 0x74
    974a:	280b      	cmp	r0, #11
    974c:	bf18      	it	ne
    974e:	280d      	cmpne	r0, #13
    9750:	bf0c      	ite	eq
    9752:	2501      	moveq	r5, #1
    9754:	2500      	movne	r5, #0
    9756:	b11b      	cbz	r3, 9760 <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)+0x40>
    9758:	2118      	movs	r1, #24
    975a:	4618      	mov	r0, r3
    975c:	f001 fb06 	bl	ad6c <operator delete(void*, unsigned int)>
  packetUBXCFGPRT = NULL;
    9760:	2300      	movs	r3, #0
}
    9762:	4628      	mov	r0, r5
  packetUBXCFGPRT = NULL;
    9764:	6763      	str	r3, [r4, #116]	; 0x74
}
    9766:	b002      	add	sp, #8
    9768:	bd70      	pop	{r4, r5, r6, pc}
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
    976a:	2018      	movs	r0, #24
    976c:	9201      	str	r2, [sp, #4]
    976e:	f001 faf7 	bl	ad60 <operator new(unsigned int)>
    9772:	9a01      	ldr	r2, [sp, #4]
    9774:	6760      	str	r0, [r4, #116]	; 0x74
  packetUBXCFGPRT->dataValid = false;
    9776:	7505      	strb	r5, [r0, #20]
  return (true);
    9778:	e7d8      	b.n	972c <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)+0xc>
    977a:	bf00      	nop
    977c:	00010006 	.word	0x00010006

00009780 <SFE_UBLOX_GNSS::isConnected(unsigned short)>:
{
    9780:	b570      	push	{r4, r5, r6, lr}
  if (commType == COMM_TYPE_I2C)
    9782:	f890 60cf 	ldrb.w	r6, [r0, #207]	; 0xcf
{
    9786:	4604      	mov	r4, r0
    9788:	460d      	mov	r5, r1
  if (commType == COMM_TYPE_I2C)
    978a:	b176      	cbz	r6, 97aa <SFE_UBLOX_GNSS::isConnected(unsigned short)+0x2a>
  else if (commType == COMM_TYPE_SERIAL)
    978c:	2e01      	cmp	r6, #1
    return (getPortSettingsInternal(COM_PORT_UART1, maxWait)); // Could be UART2 - but this is just a response check
    978e:	462a      	mov	r2, r5
  else if (commType == COMM_TYPE_SERIAL)
    9790:	d005      	beq.n	979e <SFE_UBLOX_GNSS::isConnected(unsigned short)+0x1e>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
    9792:	4620      	mov	r0, r4
    9794:	2104      	movs	r1, #4
}
    9796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
    979a:	f7ff bfc1 	b.w	9720 <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)>
    return (getPortSettingsInternal(COM_PORT_UART1, maxWait)); // Could be UART2 - but this is just a response check
    979e:	4631      	mov	r1, r6
    97a0:	4620      	mov	r0, r4
}
    97a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (getPortSettingsInternal(COM_PORT_UART1, maxWait)); // Could be UART2 - but this is just a response check
    97a6:	f7ff bfbb 	b.w	9720 <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)>
		txBuffer[0] = (address << 1);
    97aa:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
		transmitting = 1;
    97ae:	2101      	movs	r1, #1
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
    97b0:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		txBuffer[0] = (address << 1);
    97b4:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    97b6:	f883 1130 	strb.w	r1, [r3, #304]	; 0x130
		txBuffer[0] = (address << 1);
    97ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		txBufferLength = 1;
    97be:	f883 112f 	strb.w	r1, [r3, #303]	; 0x12f
		return endTransmission(1);
    97c2:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
    97c6:	f7f7 fdb9 	bl	133c <TwoWire::endTransmission(unsigned char)>
    if (_i2cPort->endTransmission() != 0)
    97ca:	b950      	cbnz	r0, 97e2 <SFE_UBLOX_GNSS::isConnected(unsigned short)+0x62>
  if (commType == COMM_TYPE_I2C)
    97cc:	f894 60cf 	ldrb.w	r6, [r4, #207]	; 0xcf
    97d0:	2e00      	cmp	r6, #0
    97d2:	d1db      	bne.n	978c <SFE_UBLOX_GNSS::isConnected(unsigned short)+0xc>
    return (getPortSettingsInternal(COM_PORT_I2C, maxWait));
    97d4:	462a      	mov	r2, r5
    97d6:	4631      	mov	r1, r6
    97d8:	4620      	mov	r0, r4
}
    97da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (getPortSettingsInternal(COM_PORT_I2C, maxWait));
    97de:	f7ff bf9f 	b.w	9720 <SFE_UBLOX_GNSS::getPortSettingsInternal(unsigned char, unsigned short)>
}
    97e2:	4630      	mov	r0, r6
    97e4:	bd70      	pop	{r4, r5, r6, pc}
    97e6:	bf00      	nop

000097e8 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)>:
{
    97e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97ea:	461d      	mov	r5, r3
  _i2cPort = &wirePort; // Grab which port the user wants us to use
    97ec:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  commType = COMM_TYPE_I2C;
    97f0:	2300      	movs	r3, #0
  if (packetCfgPayloadSize == 0)
    97f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
{
    97f6:	4604      	mov	r4, r0
    97f8:	f89d 6018 	ldrb.w	r6, [sp, #24]
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
    97fc:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
  commType = COMM_TYPE_I2C;
    9800:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
    9804:	f880 317f 	strb.w	r3, [r0, #383]	; 0x17f
  if (packetCfgPayloadSize == 0)
    9808:	2900      	cmp	r1, #0
    980a:	d055      	beq.n	98b8 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xd0>
  createFileBuffer();
    980c:	4620      	mov	r0, r4
    980e:	f7fc fc99 	bl	6144 <SFE_UBLOX_GNSS::createFileBuffer()>
  bool connected = isConnected(maxWait);
    9812:	4629      	mov	r1, r5
    9814:	4620      	mov	r0, r4
    9816:	f7ff ffb3 	bl	9780 <SFE_UBLOX_GNSS::isConnected(unsigned short)>
  if (!connected)
    981a:	bb90      	cbnz	r0, 9882 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x9a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    981c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9820:	2b00      	cmp	r3, #0
    9822:	d13d      	bne.n	98a0 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xb8>
    9824:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    9828:	2b00      	cmp	r3, #0
    982a:	d139      	bne.n	98a0 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xb8>
    connected = isConnected(maxWait);
    982c:	4629      	mov	r1, r5
    982e:	4620      	mov	r0, r4
    9830:	f7ff ffa6 	bl	9780 <SFE_UBLOX_GNSS::isConnected(unsigned short)>
  if (!connected)
    9834:	bb28      	cbnz	r0, 9882 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x9a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    9836:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    983a:	bb2b      	cbnz	r3, 9888 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xa0>
    983c:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    9840:	bb13      	cbnz	r3, 9888 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xa0>
    connected = isConnected(maxWait);
    9842:	4629      	mov	r1, r5
    9844:	4620      	mov	r0, r4
    9846:	f7ff ff9b 	bl	9780 <SFE_UBLOX_GNSS::isConnected(unsigned short)>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
    984a:	f080 0301 	eor.w	r3, r0, #1
    connected = isConnected(maxWait);
    984e:	4605      	mov	r5, r0
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
    9850:	b2db      	uxtb	r3, r3
    9852:	b1bb      	cbz	r3, 9884 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x9c>
    9854:	b1b6      	cbz	r6, 9884 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x9c>
    9856:	f894 517f 	ldrb.w	r5, [r4, #383]	; 0x17f
    985a:	b19d      	cbz	r5, 9884 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x9c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    985c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9860:	b913      	cbnz	r3, 9868 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x80>
    9862:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
    9866:	b163      	cbz	r3, 9882 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x9a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
    9868:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
    986c:	2230      	movs	r2, #48	; 0x30
    986e:	4915      	ldr	r1, [pc, #84]	; (98c4 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xdc>)
    9870:	6823      	ldr	r3, [r4, #0]
    9872:	4620      	mov	r0, r4
    9874:	685b      	ldr	r3, [r3, #4]
    9876:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9878:	4620      	mov	r0, r4
    987a:	f000 fe15 	bl	a4a8 <Print::println()>
}
    987e:	4628      	mov	r0, r5
    9880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    9882:	2501      	movs	r5, #1
}
    9884:	4628      	mov	r0, r5
    9886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _debugSerial->println(F("begin: isConnected - third attempt"));
    9888:	f8d4 70dc 	ldr.w	r7, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    988c:	2222      	movs	r2, #34	; 0x22
    988e:	490e      	ldr	r1, [pc, #56]	; (98c8 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xe0>)
    9890:	683b      	ldr	r3, [r7, #0]
    9892:	4638      	mov	r0, r7
    9894:	685b      	ldr	r3, [r3, #4]
    9896:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9898:	4638      	mov	r0, r7
    989a:	f000 fe05 	bl	a4a8 <Print::println()>
    989e:	e7d0      	b.n	9842 <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x5a>
      _debugSerial->println(F("begin: isConnected - second attempt"));
    98a0:	f8d4 70dc 	ldr.w	r7, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    98a4:	2223      	movs	r2, #35	; 0x23
    98a6:	4909      	ldr	r1, [pc, #36]	; (98cc <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0xe4>)
    98a8:	683b      	ldr	r3, [r7, #0]
    98aa:	4638      	mov	r0, r7
    98ac:	685b      	ldr	r3, [r3, #4]
    98ae:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    98b0:	4638      	mov	r0, r7
    98b2:	f000 fdf9 	bl	a4a8 <Print::println()>
    98b6:	e7b9      	b.n	982c <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x44>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
    98b8:	f44f 718a 	mov.w	r1, #276	; 0x114
    98bc:	f7f9 ffa2 	bl	3804 <SFE_UBLOX_GNSS::setPacketCfgPayloadSize(unsigned int)>
    98c0:	e7a4      	b.n	980c <SFE_UBLOX_GNSS::begin(TwoWire&, unsigned char, unsigned short, bool)+0x24>
    98c2:	bf00      	nop
    98c4:	20002870 	.word	0x20002870
    98c8:	2000284c 	.word	0x2000284c
    98cc:	20002828 	.word	0x20002828

000098d0 <SFE_UBLOX_GNSS::setNavigationFrequency(unsigned char, unsigned short)>:
  if (navFreq == 0) // Return now if navFreq is zero
    98d0:	b909      	cbnz	r1, 98d6 <SFE_UBLOX_GNSS::setNavigationFrequency(unsigned char, unsigned short)+0x6>
    return (false);
    98d2:	2000      	movs	r0, #0
}
    98d4:	4770      	bx	lr
  if (navFreq > 40)
    98d6:	2928      	cmp	r1, #40	; 0x28
    98d8:	bf28      	it	cs
    98da:	2128      	movcs	r1, #40	; 0x28
{
    98dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98e0:	460d      	mov	r5, r1
  i2cPollingWaitNAV = 1000 / (((int)navFreq) * 4);                                                // This is the number of ms to wait between checks for new I2C data. Max is 250. Min is 6.
    98e2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    98e6:	0089      	lsls	r1, r1, #2
  i2cPollingWait = i2cPollingWaitNAV < i2cPollingWaitHNR ? i2cPollingWaitNAV : i2cPollingWaitHNR; // Set i2cPollingWait to the lower of NAV and HNR
    98e8:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
  packetCfg.startingSpot = 0;
    98ec:	2700      	movs	r7, #0
{
    98ee:	b082      	sub	sp, #8
    98f0:	4604      	mov	r4, r0
    98f2:	4616      	mov	r6, r2
  packetCfg.startingSpot = 0;
    98f4:	f8a0 713a 	strh.w	r7, [r0, #314]	; 0x13a
  i2cPollingWaitNAV = 1000 / (((int)navFreq) * 4);                                                // This is the number of ms to wait between checks for new I2C data. Max is 250. Min is 6.
    98f8:	fbb8 f1f1 	udiv	r1, r8, r1
    98fc:	b2c9      	uxtb	r1, r1
  i2cPollingWait = i2cPollingWaitNAV < i2cPollingWaitHNR ? i2cPollingWaitNAV : i2cPollingWaitHNR; // Set i2cPollingWait to the lower of NAV and HNR
    98fe:	428b      	cmp	r3, r1
  i2cPollingWaitNAV = 1000 / (((int)navFreq) * 4);                                                // This is the number of ms to wait between checks for new I2C data. Max is 250. Min is 6.
    9900:	f880 1157 	strb.w	r1, [r0, #343]	; 0x157
  i2cPollingWait = i2cPollingWaitNAV < i2cPollingWaitHNR ? i2cPollingWaitNAV : i2cPollingWaitHNR; // Set i2cPollingWait to the lower of NAV and HNR
    9904:	bf28      	it	cs
    9906:	460b      	movcs	r3, r1
  if (sendCommand(&packetCfg, maxWait) != SFE_UBLOX_STATUS_DATA_RECEIVED) // We are expecting data and an ACK
    9908:	f500 719a 	add.w	r1, r0, #308	; 0x134
  i2cPollingWait = i2cPollingWaitNAV < i2cPollingWaitHNR ? i2cPollingWaitNAV : i2cPollingWaitHNR; // Set i2cPollingWait to the lower of NAV and HNR
    990c:	f880 3156 	strb.w	r3, [r0, #342]	; 0x156
  packetCfg.cls = UBX_CLASS_CFG;
    9910:	f640 0306 	movw	r3, #2054	; 0x806
  if (sendCommand(&packetCfg, maxWait) != SFE_UBLOX_STATUS_DATA_RECEIVED) // We are expecting data and an ACK
    9914:	9101      	str	r1, [sp, #4]
  packetCfg.cls = UBX_CLASS_CFG;
    9916:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
  if (sendCommand(&packetCfg, maxWait) != SFE_UBLOX_STATUS_DATA_RECEIVED) // We are expecting data and an ACK
    991a:	463b      	mov	r3, r7
    991c:	f7ff fe04 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
    9920:	280b      	cmp	r0, #11
    9922:	9901      	ldr	r1, [sp, #4]
    9924:	d003      	beq.n	992e <SFE_UBLOX_GNSS::setNavigationFrequency(unsigned char, unsigned short)+0x5e>
    return (false);
    9926:	2000      	movs	r0, #0
}
    9928:	b002      	add	sp, #8
    992a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint16_t measurementRate = 1000 / navFreq;
    992e:	fbb8 f8f5 	udiv	r8, r8, r5
  payloadCfg[0] = measurementRate & 0xFF; // measRate LSB
    9932:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  bool result = ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    9936:	4632      	mov	r2, r6
    9938:	4620      	mov	r0, r4
  payloadCfg[0] = measurementRate & 0xFF; // measRate LSB
    993a:	f883 8000 	strb.w	r8, [r3]
  payloadCfg[1] = measurementRate >> 8;   // measRate MSB
    993e:	ea4f 2818 	mov.w	r8, r8, lsr #8
    9942:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    9946:	f883 8001 	strb.w	r8, [r3, #1]
  bool result = ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    994a:	463b      	mov	r3, r7
    994c:	f7ff fdec 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
    9950:	f1a0 000a 	sub.w	r0, r0, #10
  if (packetUBXCFGRATE == NULL)
    9954:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  bool result = ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    9956:	fab0 f080 	clz	r0, r0
    995a:	0940      	lsrs	r0, r0, #5
  if (packetUBXCFGRATE == NULL)
    995c:	2b00      	cmp	r3, #0
    995e:	d0e3      	beq.n	9928 <SFE_UBLOX_GNSS::setNavigationFrequency(unsigned char, unsigned short)+0x58>
  packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0; // Mark all datums as stale (read before)
    9960:	609f      	str	r7, [r3, #8]
}
    9962:	b002      	add	sp, #8
    9964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009968 <SFE_UBLOX_GNSS::setI2COutput(unsigned char, unsigned short)>:
{
    9968:	b5f0      	push	{r4, r5, r6, r7, lr}
    996a:	460e      	mov	r6, r1
  packetCfg.cls = UBX_CLASS_CFG;
    996c:	4915      	ldr	r1, [pc, #84]	; (99c4 <SFE_UBLOX_GNSS::setI2COutput(unsigned char, unsigned short)+0x5c>)
  packetCfg.startingSpot = 0;
    996e:	2500      	movs	r5, #0
  payloadCfg[0] = portID;
    9970:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
  packetCfg.cls = UBX_CLASS_CFG;
    9974:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
{
    9978:	b083      	sub	sp, #12
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
    997a:	f500 719a 	add.w	r1, r0, #308	; 0x134
  packetCfg.startingSpot = 0;
    997e:	f8a0 513a 	strh.w	r5, [r0, #314]	; 0x13a
  payloadCfg[0] = portID;
    9982:	701d      	strb	r5, [r3, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
    9984:	462b      	mov	r3, r5
{
    9986:	4604      	mov	r4, r0
    9988:	4617      	mov	r7, r2
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
    998a:	9101      	str	r1, [sp, #4]
    998c:	f7ff fdcc 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
  if (getPortSettings(portID, maxWait) == false)
    9990:	280b      	cmp	r0, #11
    9992:	d002      	beq.n	999a <SFE_UBLOX_GNSS::setI2COutput(unsigned char, unsigned short)+0x32>
    return (false); // Something went wrong. Bail.
    9994:	4628      	mov	r0, r5
}
    9996:	b003      	add	sp, #12
    9998:	bdf0      	pop	{r4, r5, r6, r7, pc}
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
    999a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    999e:	462b      	mov	r3, r5
  packetCfg.startingSpot = 0;
    99a0:	f8a4 513a 	strh.w	r5, [r4, #314]	; 0x13a
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    99a4:	463a      	mov	r2, r7
  packetCfg.cls = UBX_CLASS_CFG;
    99a6:	4d08      	ldr	r5, [pc, #32]	; (99c8 <SFE_UBLOX_GNSS::setI2COutput(unsigned char, unsigned short)+0x60>)
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    99a8:	9901      	ldr	r1, [sp, #4]
  packetCfg.cls = UBX_CLASS_CFG;
    99aa:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
    99ae:	7386      	strb	r6, [r0, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    99b0:	4620      	mov	r0, r4
    99b2:	f7ff fdb9 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
    99b6:	f1a0 000a 	sub.w	r0, r0, #10
    99ba:	fab0 f080 	clz	r0, r0
    99be:	0940      	lsrs	r0, r0, #5
}
    99c0:	b003      	add	sp, #12
    99c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99c4:	00010006 	.word	0x00010006
    99c8:	00140006 	.word	0x00140006

000099cc <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)>:
{
    99cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (packetUBXNAVPVT == NULL)
    99ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
    99d0:	b083      	sub	sp, #12
    99d2:	4604      	mov	r4, r0
    99d4:	460e      	mov	r6, r1
  if (packetUBXNAVPVT == NULL)
    99d6:	b3a5      	cbz	r5, 9a42 <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x76>
  packetCfg.cls = UBX_CLASS_CFG;
    99d8:	4b2e      	ldr	r3, [pc, #184]	; (9a94 <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0xc8>)
  packetCfg.startingSpot = 0;
    99da:	2700      	movs	r7, #0
  payloadCfg[0] = UBX_CLASS_NAV;
    99dc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
  payloadCfg[1] = UBX_NAV_PVT;
    99e0:	2007      	movs	r0, #7
  packetCfg.cls = UBX_CLASS_CFG;
    99e2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  payloadCfg[0] = UBX_CLASS_NAV;
    99e6:	2301      	movs	r3, #1
  packetCfg.startingSpot = 0;
    99e8:	f8a4 713a 	strh.w	r7, [r4, #314]	; 0x13a
  payloadCfg[0] = UBX_CLASS_NAV;
    99ec:	700b      	strb	r3, [r1, #0]
  payloadCfg[1] = UBX_NAV_PVT;
    99ee:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    99f2:	7048      	strb	r0, [r1, #1]
  bool ok = ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    99f4:	4620      	mov	r0, r4
  payloadCfg[2] = rate; // rate relative to navigation freq.
    99f6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    99fa:	708b      	strb	r3, [r1, #2]
  bool ok = ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
    99fc:	463b      	mov	r3, r7
    99fe:	f504 719a 	add.w	r1, r4, #308	; 0x134
    9a02:	f7ff fd91 	bl	9528 <SFE_UBLOX_GNSS::sendCommand(ubxPacket*, unsigned short, bool)>
  if (ok)
    9a06:	280a      	cmp	r0, #10
    9a08:	d008      	beq.n	9a1c <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x50>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
    9a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    return (result); // Bail if setAutoPVT failed
    9a0c:	4638      	mov	r0, r7
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
    9a0e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    9a12:	f367 0200 	bfi	r2, r7, #0, #1
    9a16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  if (!result)
    9a1a:	e010      	b.n	9a3e <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x72>
    packetUBXNAVPVT->automaticFlags.flags.bits.automatic = (rate > 0);
    9a1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9a1e:	782a      	ldrb	r2, [r5, #0]
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
    9a20:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    packetUBXNAVPVT->automaticFlags.flags.bits.automatic = (rate > 0);
    9a24:	f022 0203 	bic.w	r2, r2, #3
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
    9a28:	f367 0300 	bfi	r3, r7, #0, #1
    packetUBXNAVPVT->automaticFlags.flags.bits.automatic = (rate > 0);
    9a2c:	f042 0201 	orr.w	r2, r2, #1
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
    9a30:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    packetUBXNAVPVT->automaticFlags.flags.bits.automatic = (rate > 0);
    9a34:	702a      	strb	r2, [r5, #0]
  if (packetUBXNAVPVT->callbackData == NULL) // Check if RAM has been allocated for the callback copy
    9a36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    9a38:	b182      	cbz	r2, 9a5c <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x90>
  return (true);
    9a3a:	2001      	movs	r0, #1
  packetUBXNAVPVT->callbackPointerPtr = callbackPointerPtr; // RAM has been allocated so now update the pointer
    9a3c:	66ee      	str	r6, [r5, #108]	; 0x6c
}
    9a3e:	b003      	add	sp, #12
    9a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
    9a42:	2074      	movs	r0, #116	; 0x74
    9a44:	9201      	str	r2, [sp, #4]
    9a46:	f001 f98b 	bl	ad60 <operator new(unsigned int)>
    9a4a:	9a01      	ldr	r2, [sp, #4]
    9a4c:	6260      	str	r0, [r4, #36]	; 0x24
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
    9a4e:	7005      	strb	r5, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
    9a50:	6705      	str	r5, [r0, #112]	; 0x70
  packetUBXNAVPVT->callbackPointerPtr = NULL;
    9a52:	e9c0 551a 	strd	r5, r5, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
    9a56:	e9c0 5518 	strd	r5, r5, [r0, #96]	; 0x60
  return (true);
    9a5a:	e7bd      	b.n	99d8 <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0xc>
    packetUBXNAVPVT->callbackData = new UBX_NAV_PVT_data_t; // Allocate RAM for the main struct
    9a5c:	205c      	movs	r0, #92	; 0x5c
    9a5e:	f001 f97f 	bl	ad60 <operator new(unsigned int)>
    9a62:	6728      	str	r0, [r5, #112]	; 0x70
  if (packetUBXNAVPVT->callbackData == NULL)
    9a64:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9a66:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    9a68:	2b00      	cmp	r3, #0
    9a6a:	d1e6      	bne.n	9a3a <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x6e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
    9a6c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    9a70:	b91b      	cbnz	r3, 9a7a <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0xae>
    9a72:	f894 00f2 	ldrb.w	r0, [r4, #242]	; 0xf2
    9a76:	2800      	cmp	r0, #0
    9a78:	d0e1      	beq.n	9a3e <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x72>
      _debugSerial->println(F("setAutoPVTcallbackPtr: RAM alloc failed!"));
    9a7a:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
							  return write((const uint8_t *)str, strlen(str)); }
    9a7e:	2228      	movs	r2, #40	; 0x28
    9a80:	4905      	ldr	r1, [pc, #20]	; (9a98 <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0xcc>)
    9a82:	6823      	ldr	r3, [r4, #0]
    9a84:	4620      	mov	r0, r4
    9a86:	685b      	ldr	r3, [r3, #4]
    9a88:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    9a8a:	4620      	mov	r0, r4
    9a8c:	f000 fd0c 	bl	a4a8 <Print::println()>
    return (false);
    9a90:	2000      	movs	r0, #0
    9a92:	e7d4      	b.n	9a3e <SFE_UBLOX_GNSS::setAutoPVTcallbackPtr(void (*)(UBX_NAV_PVT_data_t*), unsigned short)+0x72>
    9a94:	00030106 	.word	0x00030106
    9a98:	20002700 	.word	0x20002700

00009a9c <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)>:
  if (commType == COMM_TYPE_I2C)
    9a9c:	f890 30cf 	ldrb.w	r3, [r0, #207]	; 0xcf
{
    9aa0:	b510      	push	{r4, lr}
  return checkUbloxInternal(&packetCfg, requestedClass, requestedID);
    9aa2:	f500 7e9a 	add.w	lr, r0, #308	; 0x134
  if (commType == COMM_TYPE_I2C)
    9aa6:	b12b      	cbz	r3, 9ab4 <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)+0x18>
  else if (commType == COMM_TYPE_SERIAL)
    9aa8:	2b01      	cmp	r3, #1
    9aaa:	d01c      	beq.n	9ae6 <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)+0x4a>
  else if (commType == COMM_TYPE_SPI)
    9aac:	2b02      	cmp	r3, #2
    9aae:	d013      	beq.n	9ad8 <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)+0x3c>
  return false;
    9ab0:	2000      	movs	r0, #0
}
    9ab2:	bd10      	pop	{r4, pc}
    9ab4:	4b0f      	ldr	r3, [pc, #60]	; (9af4 <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)+0x58>)
  if (millis() - lastCheck >= i2cPollingWait)
    9ab6:	f8d0 415c 	ldr.w	r4, [r0, #348]	; 0x15c
    9aba:	681b      	ldr	r3, [r3, #0]
    9abc:	f890 c156 	ldrb.w	ip, [r0, #342]	; 0x156
    9ac0:	1b1b      	subs	r3, r3, r4
    9ac2:	4563      	cmp	r3, ip
    9ac4:	d306      	bcc.n	9ad4 <SFE_UBLOX_GNSS::checkUblox(unsigned char, unsigned char)+0x38>
    9ac6:	4613      	mov	r3, r2
    9ac8:	460a      	mov	r2, r1
    9aca:	4671      	mov	r1, lr
}
    9acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ad0:	f7ff b83a 	b.w	8b48 <SFE_UBLOX_GNSS::checkUbloxI2C(ubxPacket*, unsigned char, unsigned char) [clone .part.0]>
  return (true);
    9ad4:	2001      	movs	r0, #1
}
    9ad6:	bd10      	pop	{r4, pc}
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
    9ad8:	4613      	mov	r3, r2
    9ada:	460a      	mov	r2, r1
    9adc:	4671      	mov	r1, lr
}
    9ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
    9ae2:	f7ff b985 	b.w	8df0 <SFE_UBLOX_GNSS::checkUbloxSpi(ubxPacket*, unsigned char, unsigned char)>
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
    9ae6:	4613      	mov	r3, r2
    9ae8:	460a      	mov	r2, r1
    9aea:	4671      	mov	r1, lr
}
    9aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
    9af0:	f7ff b95e 	b.w	8db0 <SFE_UBLOX_GNSS::checkUbloxSerial(ubxPacket*, unsigned char, unsigned char)>
    9af4:	20004bc4 	.word	0x20004bc4

00009af8 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    9af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9afa:	4c1d      	ldr	r4, [pc, #116]	; (9b70 <now()+0x78>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    9afc:	4d1d      	ldr	r5, [pc, #116]	; (9b74 <now()+0x7c>)
    9afe:	6823      	ldr	r3, [r4, #0]
    9b00:	682a      	ldr	r2, [r5, #0]
    9b02:	4e1d      	ldr	r6, [pc, #116]	; (9b78 <now()+0x80>)
    9b04:	1a9b      	subs	r3, r3, r2
    9b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9b0a:	d32f      	bcc.n	9b6c <now()+0x74>
    9b0c:	6831      	ldr	r1, [r6, #0]
    9b0e:	3101      	adds	r1, #1
    9b10:	6823      	ldr	r3, [r4, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    9b12:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
    9b16:	4608      	mov	r0, r1
  while (millis() - prevMillis >= 1000) {
    9b18:	3101      	adds	r1, #1
    9b1a:	1a9b      	subs	r3, r3, r2
    9b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9b20:	d2f6      	bcs.n	9b10 <now()+0x18>
    9b22:	6030      	str	r0, [r6, #0]
    9b24:	602a      	str	r2, [r5, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    9b26:	4f15      	ldr	r7, [pc, #84]	; (9b7c <now()+0x84>)
    9b28:	683b      	ldr	r3, [r7, #0]
    9b2a:	4283      	cmp	r3, r0
    9b2c:	d80f      	bhi.n	9b4e <now()+0x56>
    if (getTimePtr != 0) {
    9b2e:	4b14      	ldr	r3, [pc, #80]	; (9b80 <now()+0x88>)
    9b30:	681b      	ldr	r3, [r3, #0]
    9b32:	b163      	cbz	r3, 9b4e <now()+0x56>
      time_t t = getTimePtr();
    9b34:	4798      	blx	r3
      if (t != 0) {
    9b36:	4301      	orrs	r1, r0
    9b38:	d00b      	beq.n	9b52 <now()+0x5a>
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    9b3a:	4b12      	ldr	r3, [pc, #72]	; (9b84 <now()+0x8c>)
    9b3c:	6822      	ldr	r2, [r4, #0]
    9b3e:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    9b40:	602a      	str	r2, [r5, #0]
  Status = timeSet;
    9b42:	2202      	movs	r2, #2
  nextSyncTime = (uint32_t)t + syncInterval;
    9b44:	4403      	add	r3, r0
  sysTime = (uint32_t)t;  
    9b46:	6030      	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    9b48:	603b      	str	r3, [r7, #0]
  Status = timeSet;
    9b4a:	4b0f      	ldr	r3, [pc, #60]	; (9b88 <now()+0x90>)
    9b4c:	701a      	strb	r2, [r3, #0]
}
    9b4e:	2100      	movs	r1, #0
    9b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    9b52:	490d      	ldr	r1, [pc, #52]	; (9b88 <now()+0x90>)
        nextSyncTime = sysTime + syncInterval;
    9b54:	4b0b      	ldr	r3, [pc, #44]	; (9b84 <now()+0x8c>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    9b56:	780a      	ldrb	r2, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
    9b58:	6830      	ldr	r0, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    9b5a:	3a00      	subs	r2, #0
        nextSyncTime = sysTime + syncInterval;
    9b5c:	681b      	ldr	r3, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    9b5e:	bf18      	it	ne
    9b60:	2201      	movne	r2, #1
        nextSyncTime = sysTime + syncInterval;
    9b62:	4403      	add	r3, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    9b64:	700a      	strb	r2, [r1, #0]
}
    9b66:	2100      	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
    9b68:	603b      	str	r3, [r7, #0]
}
    9b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b6c:	6830      	ldr	r0, [r6, #0]
    9b6e:	e7da      	b.n	9b26 <now()+0x2e>
    9b70:	20004bc4 	.word	0x20004bc4
    9b74:	200046c8 	.word	0x200046c8
    9b78:	20004750 	.word	0x20004750
    9b7c:	2000474c 	.word	0x2000474c
    9b80:	20004b0c 	.word	0x20004b0c
    9b84:	20003748 	.word	0x20003748
    9b88:	20004bec 	.word	0x20004bec

00009b8c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b8c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9b90:	b672      	cpsid	i
	if (_triggered == false) {
    9b92:	7f43      	ldrb	r3, [r0, #29]
    9b94:	b95b      	cbnz	r3, 9bae <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    9b96:	7f01      	ldrb	r1, [r0, #28]
    9b98:	2901      	cmp	r1, #1
{
    9b9a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    9b9c:	d00b      	beq.n	9bb6 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    9b9e:	2903      	cmp	r1, #3
    9ba0:	d013      	beq.n	9bca <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    9ba2:	2301      	movs	r3, #1
    9ba4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9ba6:	b902      	cbnz	r2, 9baa <EventResponder::triggerEventNotImmediate()+0x1e>
    9ba8:	b662      	cpsie	i
}
    9baa:	bc30      	pop	{r4, r5}
    9bac:	4770      	bx	lr
    9bae:	b90a      	cbnz	r2, 9bb4 <EventResponder::triggerEventNotImmediate()+0x28>
    9bb0:	b662      	cpsie	i
    9bb2:	4770      	bx	lr
    9bb4:	4770      	bx	lr
			if (firstYield == nullptr) {
    9bb6:	4c12      	ldr	r4, [pc, #72]	; (9c00 <EventResponder::triggerEventNotImmediate()+0x74>)
    9bb8:	6821      	ldr	r1, [r4, #0]
    9bba:	b1b1      	cbz	r1, 9bea <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    9bbc:	4911      	ldr	r1, [pc, #68]	; (9c04 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9bbe:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    9bc0:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    9bc2:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    9bc4:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    9bc6:	6158      	str	r0, [r3, #20]
				lastYield = this;
    9bc8:	e7eb      	b.n	9ba2 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    9bca:	4d0f      	ldr	r5, [pc, #60]	; (9c08 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9bcc:	490f      	ldr	r1, [pc, #60]	; (9c0c <EventResponder::triggerEventNotImmediate()+0x80>)
    9bce:	682c      	ldr	r4, [r5, #0]
    9bd0:	b18c      	cbz	r4, 9bf6 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    9bd2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9bd4:	680b      	ldr	r3, [r1, #0]
    9bd6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    9bd8:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9bda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9bde:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    9be2:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9be4:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    9be8:	e7db      	b.n	9ba2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    9bea:	4b06      	ldr	r3, [pc, #24]	; (9c04 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    9bec:	6020      	str	r0, [r4, #0]
				lastYield = this;
    9bee:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    9bf0:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    9bf4:	e7d5      	b.n	9ba2 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    9bf6:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    9bfa:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    9bfc:	e7ed      	b.n	9bda <EventResponder::triggerEventNotImmediate()+0x4e>
    9bfe:	bf00      	nop
    9c00:	20004754 	.word	0x20004754
    9c04:	20004760 	.word	0x20004760
    9c08:	2000475c 	.word	0x2000475c
    9c0c:	20004758 	.word	0x20004758

00009c10 <EventResponder::runFromInterrupt()>:
{
    9c10:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c12:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9c16:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9c18:	4c0c      	ldr	r4, [pc, #48]	; (9c4c <EventResponder::runFromInterrupt()+0x3c>)
    9c1a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9c1c:	b180      	cbz	r0, 9c40 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    9c1e:	4e0c      	ldr	r6, [pc, #48]	; (9c50 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    9c20:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    9c22:	6943      	ldr	r3, [r0, #20]
    9c24:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    9c26:	b173      	cbz	r3, 9c46 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9c28:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    9c2a:	b902      	cbnz	r2, 9c2e <EventResponder::runFromInterrupt()+0x1e>
    9c2c:	b662      	cpsie	i
			(*(first->_function))(*first);
    9c2e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    9c30:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9c32:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c34:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9c38:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9c3a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9c3c:	2800      	cmp	r0, #0
    9c3e:	d1f0      	bne.n	9c22 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    9c40:	b902      	cbnz	r2, 9c44 <EventResponder::runFromInterrupt()+0x34>
    9c42:	b662      	cpsie	i
}
    9c44:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    9c46:	6033      	str	r3, [r6, #0]
    9c48:	e7ef      	b.n	9c2a <EventResponder::runFromInterrupt()+0x1a>
    9c4a:	bf00      	nop
    9c4c:	2000475c 	.word	0x2000475c
    9c50:	20004758 	.word	0x20004758

00009c54 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    9c54:	f7ff bfdc 	b.w	9c10 <EventResponder::runFromInterrupt()>

00009c58 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9c58:	4904      	ldr	r1, [pc, #16]	; (9c6c <systick_isr+0x14>)
	systick_millis_count++;
    9c5a:	4a05      	ldr	r2, [pc, #20]	; (9c70 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    9c5c:	6849      	ldr	r1, [r1, #4]
    9c5e:	4b05      	ldr	r3, [pc, #20]	; (9c74 <systick_isr+0x1c>)
    9c60:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    9c62:	6813      	ldr	r3, [r2, #0]
    9c64:	3301      	adds	r3, #1
    9c66:	6013      	str	r3, [r2, #0]
}
    9c68:	4770      	bx	lr
    9c6a:	bf00      	nop
    9c6c:	e0001000 	.word	0xe0001000
    9c70:	20004bc4 	.word	0x20004bc4
    9c74:	20004bc0 	.word	0x20004bc0

00009c78 <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
    9c78:	2001      	movs	r0, #1
    9c7a:	4770      	bx	lr

00009c7c <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    9c7c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    9c80:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    9c84:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    9c86:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    9c88:	4293      	cmp	r3, r2
    9c8a:	d202      	bcs.n	9c92 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    9c8c:	3a01      	subs	r2, #1
    9c8e:	1ad0      	subs	r0, r2, r3
}
    9c90:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    9c92:	6b41      	ldr	r1, [r0, #52]	; 0x34
    9c94:	3901      	subs	r1, #1
    9c96:	440a      	add	r2, r1
    9c98:	1ad0      	subs	r0, r2, r3
    9c9a:	4770      	bx	lr

00009c9c <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    9c9c:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    9c9e:	b672      	cpsid	i
	head = rx_buffer_head_;
    9ca0:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    9ca4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    9ca8:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    9caa:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    9cac:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    9cae:	bf3c      	itt	cc
    9cb0:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    9cb2:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    9cb4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    9cb6:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    9cb8:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    9cba:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    9cbe:	4418      	add	r0, r3
    9cc0:	4770      	bx	lr
    9cc2:	bf00      	nop

00009cc4 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    9cc4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    9cc8:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    9cca:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    9cce:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    9cd0:	b29b      	uxth	r3, r3
	if (head == tail) {
    9cd2:	4299      	cmp	r1, r3
{
    9cd4:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    9cd6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    9cd8:	d014      	beq.n	9d04 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9cda:	3301      	adds	r3, #1
    9cdc:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    9cde:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9ce0:	4298      	cmp	r0, r3
    9ce2:	bf98      	it	ls
    9ce4:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    9ce6:	4299      	cmp	r1, r3
    9ce8:	d806      	bhi.n	9cf8 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    9cea:	1a5b      	subs	r3, r3, r1
    9cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
    9cee:	5cd0      	ldrb	r0, [r2, r3]
    9cf0:	b2c0      	uxtb	r0, r0
	}
}
    9cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9cf6:	4770      	bx	lr
		return rx_buffer_[tail];
    9cf8:	6a12      	ldr	r2, [r2, #32]
}
    9cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    9cfe:	5cd0      	ldrb	r0, [r2, r3]
    9d00:	b2c0      	uxtb	r0, r0
}
    9d02:	4770      	bx	lr
		__disable_irq();
    9d04:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    9d06:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    9d0a:	b280      	uxth	r0, r0
		if (head == tail) {
    9d0c:	4281      	cmp	r1, r0
    9d0e:	d001      	beq.n	9d14 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    9d10:	b662      	cpsie	i
    9d12:	e7e2      	b.n	9cda <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    9d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9d16:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    9d1a:	d103      	bne.n	9d24 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    9d1c:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    9d20:	b662      	cpsie	i
			return c;
    9d22:	e7e6      	b.n	9cf2 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    9d24:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    9d26:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    9d28:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    9d2a:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    9d2c:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    9d30:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    9d34:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    9d36:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    9d3a:	704b      	strb	r3, [r1, #1]
    9d3c:	e7f0      	b.n	9d20 <HardwareSerialIMXRT::peek()+0x5c>
    9d3e:	bf00      	nop

00009d40 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    9d40:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    9d44:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    9d46:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    9d4a:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    9d4c:	b29b      	uxth	r3, r3
	if (head == tail) {
    9d4e:	4299      	cmp	r1, r3
{
    9d50:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    9d52:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    9d54:	d025      	beq.n	9da2 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9d56:	3301      	adds	r3, #1
    9d58:	6b94      	ldr	r4, [r2, #56]	; 0x38
    9d5a:	429c      	cmp	r4, r3
    9d5c:	d916      	bls.n	9d8c <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    9d5e:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    9d60:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    9d64:	4298      	cmp	r0, r3
    9d66:	d917      	bls.n	9d98 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    9d68:	6a10      	ldr	r0, [r2, #32]
    9d6a:	5cc0      	ldrb	r0, [r0, r3]
    9d6c:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    9d6e:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    9d70:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    9d74:	b145      	cbz	r5, 9d88 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    9d76:	4299      	cmp	r1, r3
    9d78:	d31c      	bcc.n	9db4 <HardwareSerialIMXRT::read()+0x74>
    9d7a:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    9d7c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    9d7e:	4299      	cmp	r1, r3
    9d80:	d302      	bcc.n	9d88 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    9d82:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    9d84:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    9d88:	bc30      	pop	{r4, r5}
    9d8a:	4770      	bx	lr
    9d8c:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    9d90:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9d92:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    9d94:	4298      	cmp	r0, r3
    9d96:	d8e7      	bhi.n	9d68 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    9d98:	1a18      	subs	r0, r3, r0
    9d9a:	6a55      	ldr	r5, [r2, #36]	; 0x24
    9d9c:	5c28      	ldrb	r0, [r5, r0]
    9d9e:	b2c0      	uxtb	r0, r0
    9da0:	e7e5      	b.n	9d6e <HardwareSerialIMXRT::read()+0x2e>
    9da2:	4608      	mov	r0, r1
		__disable_irq();
    9da4:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    9da6:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    9daa:	b289      	uxth	r1, r1
		if (head == tail) {
    9dac:	4288      	cmp	r0, r1
    9dae:	d004      	beq.n	9dba <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    9db0:	b662      	cpsie	i
    9db2:	e7d0      	b.n	9d56 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    9db4:	440c      	add	r4, r1
    9db6:	1ae3      	subs	r3, r4, r3
    9db8:	e7e0      	b.n	9d7c <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    9dba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9dbc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    9dc0:	d103      	bne.n	9dca <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    9dc2:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    9dc6:	b662      	cpsie	i
			return c;
    9dc8:	e7de      	b.n	9d88 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    9dca:	69e0      	ldr	r0, [r4, #28]
    9dcc:	f3c0 0009 	ubfx	r0, r0, #0, #10
    9dd0:	e7f9      	b.n	9dc6 <HardwareSerialIMXRT::read()+0x86>
    9dd2:	bf00      	nop

00009dd4 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    9dd4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    9dd8:	b143      	cbz	r3, 9dec <HardwareSerialIMXRT::flush()+0x18>
{
    9dda:	b510      	push	{r4, lr}
    9ddc:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    9dde:	f002 fc31 	bl	c644 <yield>
    9de2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    9de6:	2b00      	cmp	r3, #0
    9de8:	d1f9      	bne.n	9dde <HardwareSerialIMXRT::flush()+0xa>
}
    9dea:	bd10      	pop	{r4, pc}
    9dec:	4770      	bx	lr
    9dee:	bf00      	nop

00009df0 <HardwareSerialIMXRT::end()>:
{
    9df0:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    9df2:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    9df6:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    9dfa:	6809      	ldr	r1, [r1, #0]
    9dfc:	4211      	tst	r1, r2
    9dfe:	d028      	beq.n	9e52 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    9e00:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    9e04:	4604      	mov	r4, r0
    9e06:	b132      	cbz	r2, 9e16 <HardwareSerialIMXRT::end()+0x26>
    9e08:	f002 fc1c 	bl	c644 <yield>
    9e0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    9e10:	2b00      	cmp	r3, #0
    9e12:	d1f9      	bne.n	9e08 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    9e14:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    9e16:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    9e18:	4a0e      	ldr	r2, [pc, #56]	; (9e54 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    9e1a:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    9e1c:	7e20      	ldrb	r0, [r4, #24]
    9e1e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    9e22:	7d00      	ldrb	r0, [r0, #20]
    9e24:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    9e28:	6845      	ldr	r5, [r0, #4]
    9e2a:	2005      	movs	r0, #5
    9e2c:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    9e2e:	7e65      	ldrb	r5, [r4, #25]
    9e30:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    9e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    9e38:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    9e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    9e3e:	6852      	ldr	r2, [r2, #4]
    9e40:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    9e42:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    9e46:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    9e4a:	b113      	cbz	r3, 9e52 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    9e4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    9e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    9e52:	bd38      	pop	{r3, r4, r5, pc}
    9e54:	20002e18 	.word	0x20002e18

00009e58 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    9e58:	ee07 1a90 	vmov	s15, r1
    9e5c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; a0c8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    9e60:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    9e62:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    9e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    9e6a:	ed9f 6a98 	vldr	s12, [pc, #608]	; a0cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    9e6e:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    9e72:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    9e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    9e7a:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    9e7c:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    9e7e:	2401      	movs	r4, #1
		float div = base / (float)osr;
    9e80:	ee07 1a90 	vmov	s15, r1
    9e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9e88:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    9e8c:	ee77 7a05 	vadd.f32	s15, s14, s10
    9e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    9e94:	ee17 3a90 	vmov	r3, s15
    9e98:	4563      	cmp	r3, ip
    9e9a:	bfa8      	it	ge
    9e9c:	4663      	movge	r3, ip
    9e9e:	2b01      	cmp	r3, #1
    9ea0:	bfb8      	it	lt
    9ea2:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    9ea4:	ee07 3a90 	vmov	s15, r3
    9ea8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    9eac:	ee76 6ac7 	vsub.f32	s13, s13, s14
    9eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    9eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ebc:	bf48      	it	mi
    9ebe:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    9ec2:	eef4 7ac6 	vcmpe.f32	s15, s12
    9ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9eca:	d803      	bhi.n	9ed4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    9ecc:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    9ed0:	468e      	mov	lr, r1
			bestdiv = divint;
    9ed2:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    9ed4:	3101      	adds	r1, #1
    9ed6:	2921      	cmp	r1, #33	; 0x21
    9ed8:	d1d2      	bne.n	9e80 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    9eda:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    9edc:	6943      	ldr	r3, [r0, #20]
    9ede:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    9ee2:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    9ee6:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    9eea:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    9eec:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    9ef0:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    9ef4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    9ef8:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    9efc:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    9f00:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    9f02:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    9f04:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    9f08:	eba1 010c 	sub.w	r1, r1, ip
    9f0c:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    9f10:	6839      	ldr	r1, [r7, #0]
    9f12:	691e      	ldr	r6, [r3, #16]
    9f14:	ea41 0106 	orr.w	r1, r1, r6
    9f18:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    9f1a:	bf14      	ite	ne
    9f1c:	2101      	movne	r1, #1
    9f1e:	2100      	moveq	r1, #0
    9f20:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    9f22:	f040 80ac 	bne.w	a07e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9f26:	7e01      	ldrb	r1, [r0, #24]
    9f28:	4e69      	ldr	r6, [pc, #420]	; (a0d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    9f2a:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    9f2e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; a0f0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    9f32:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    9f36:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9f3a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    9f3e:	68b9      	ldr	r1, [r7, #8]
    9f40:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    9f44:	6879      	ldr	r1, [r7, #4]
    9f46:	f8d8 7018 	ldr.w	r7, [r8, #24]
    9f4a:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    9f4c:	f1ba 0f00 	cmp.w	sl, #0
    9f50:	d003      	beq.n	9f5a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    9f52:	f8d8 1020 	ldr.w	r1, [r8, #32]
    9f56:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    9f5a:	7e47      	ldrb	r7, [r0, #25]
    9f5c:	21d9      	movs	r1, #217	; 0xd9
    9f5e:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    9f62:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    9f66:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    9f6a:	f8dc 7008 	ldr.w	r7, [ip, #8]
    9f6e:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    9f70:	f8dc 1004 	ldr.w	r1, [ip, #4]
    9f74:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    9f78:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    9f7a:	7e41      	ldrb	r1, [r0, #25]
    9f7c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    9f80:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    9f82:	b10f      	cbz	r7, 9f88 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    9f84:	6c09      	ldr	r1, [r1, #64]	; 0x40
    9f86:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    9f88:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    9f8c:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    9f90:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    9f94:	bfcc      	ite	gt
    9f96:	f04f 0e00 	movgt.w	lr, #0
    9f9a:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    9f9e:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    9fa2:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    9fa6:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    9fa8:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    9faa:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9fac:	7859      	ldrb	r1, [r3, #1]
    9fae:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    9fb2:	2100      	movs	r1, #0
    9fb4:	60e9      	str	r1, [r5, #12]
    9fb6:	4947      	ldr	r1, [pc, #284]	; (a0d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    9fb8:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    9fbc:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    9fbe:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    9fc2:	4c45      	ldr	r4, [pc, #276]	; (a0d8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    9fc4:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    9fc8:	784f      	ldrb	r7, [r1, #1]
    9fca:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    9fce:	4b43      	ldr	r3, [pc, #268]	; (a0dc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    9fd0:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    9fd2:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    9fd6:	6944      	ldr	r4, [r0, #20]
    9fd8:	7861      	ldrb	r1, [r4, #1]
    9fda:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    9fde:	f001 011f 	and.w	r1, r1, #31
    9fe2:	009b      	lsls	r3, r3, #2
    9fe4:	fa0e f101 	lsl.w	r1, lr, r1
    9fe8:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    9fea:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    9fec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9fee:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    9ff2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    9ff4:	0753      	lsls	r3, r2, #29
    9ff6:	d43e      	bmi.n	a076 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    9ff8:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    9ffc:	f002 010f 	and.w	r1, r2, #15
    a000:	2904      	cmp	r1, #4
    a002:	bf08      	it	eq
    a004:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    a008:	0697      	lsls	r7, r2, #26
    a00a:	d52e      	bpl.n	a06a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    a00c:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    a00e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    a012:	2900      	cmp	r1, #0
    a014:	d13a      	bne.n	a08c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    a016:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    a018:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    a01a:	d503      	bpl.n	a024 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    a01c:	692b      	ldr	r3, [r5, #16]
    a01e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a022:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    a024:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    a026:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    a028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    a02c:	bf48      	it	mi
    a02e:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    a032:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    a034:	05d3      	lsls	r3, r2, #23
    a036:	d503      	bpl.n	a040 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    a038:	692b      	ldr	r3, [r5, #16]
    a03a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a03e:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    a040:	68a3      	ldr	r3, [r4, #8]
    a042:	b183      	cbz	r3, a066 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a044:	4e26      	ldr	r6, [pc, #152]	; (a0e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    a046:	7834      	ldrb	r4, [r6, #0]
    a048:	2c00      	cmp	r4, #0
    a04a:	d03a      	beq.n	a0c2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    a04c:	1e61      	subs	r1, r4, #1
    a04e:	4d25      	ldr	r5, [pc, #148]	; (a0e4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    a050:	b2c9      	uxtb	r1, r1
    a052:	1f2b      	subs	r3, r5, #4
    a054:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    a058:	e001      	b.n	a05e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    a05a:	4299      	cmp	r1, r3
    a05c:	d025      	beq.n	a0aa <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    a05e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    a062:	4290      	cmp	r0, r2
    a064:	d1f9      	bne.n	a05a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    a066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    a06a:	7e81      	ldrb	r1, [r0, #26]
    a06c:	2900      	cmp	r1, #0
    a06e:	d0d2      	beq.n	a016 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    a070:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    a074:	e7cf      	b.n	a016 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    a076:	4b1c      	ldr	r3, [pc, #112]	; (a0e8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    a078:	ea4c 0303 	orr.w	r3, ip, r3
    a07c:	e7be      	b.n	9ffc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    a07e:	7e47      	ldrb	r7, [r0, #25]
    a080:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    a084:	4e12      	ldr	r6, [pc, #72]	; (a0d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    a086:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    a08a:	e76a      	b.n	9f62 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    a08c:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    a08e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    a092:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    a096:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    a09a:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    a09e:	68b6      	ldr	r6, [r6, #8]
    a0a0:	6831      	ldr	r1, [r6, #0]
    a0a2:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    a0a6:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    a0a8:	e7b5      	b.n	a016 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    a0aa:	1c63      	adds	r3, r4, #1
    a0ac:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    a0ae:	4a0f      	ldr	r2, [pc, #60]	; (a0ec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    a0b0:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    a0b2:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    a0b4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    a0b8:	f043 0302 	orr.w	r3, r3, #2
    a0bc:	7013      	strb	r3, [r2, #0]
};
    a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a0c2:	2301      	movs	r3, #1
    a0c4:	4d07      	ldr	r5, [pc, #28]	; (a0e4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    a0c6:	e7f2      	b.n	a0ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    a0c8:	4bb71b00 	.word	0x4bb71b00
    a0cc:	60ad78ec 	.word	0x60ad78ec
    a0d0:	20002e18 	.word	0x20002e18
    a0d4:	20004000 	.word	0x20004000
    a0d8:	e000e400 	.word	0xe000e400
    a0dc:	38003840 	.word	0x38003840
    a0e0:	20004bee 	.word	0x20004bee
    a0e4:	20004764 	.word	0x20004764
    a0e8:	003c0010 	.word	0x003c0010
    a0ec:	20004bfd 	.word	0x20004bfd
    a0f0:	0001f038 	.word	0x0001f038

0000a0f4 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    a0f4:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    a0f8:	b9b8      	cbnz	r0, a12a <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a0fa:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    a0fe:	b94b      	cbnz	r3, a114 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a100:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    a104:	b93a      	cbnz	r2, a116 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    a106:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    a10a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    a10e:	b150      	cbz	r0, a126 <nvic_execution_priority()+0x32>
    a110:	4298      	cmp	r0, r3
    a112:	d208      	bcs.n	a126 <nvic_execution_priority()+0x32>
}
    a114:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    a116:	2a0f      	cmp	r2, #15
    a118:	d9f7      	bls.n	a10a <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    a11a:	4b05      	ldr	r3, [pc, #20]	; (a130 <nvic_execution_priority()+0x3c>)
    a11c:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    a11e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    a122:	2800      	cmp	r0, #0
    a124:	d1f4      	bne.n	a110 <nvic_execution_priority()+0x1c>
    a126:	4618      	mov	r0, r3
	return priority;
    a128:	4770      	bx	lr
	if (faultmask) return -1;
    a12a:	f04f 30ff 	mov.w	r0, #4294967295
    a12e:	e7f1      	b.n	a114 <nvic_execution_priority()+0x20>
    a130:	e000e3f0 	.word	0xe000e3f0

0000a134 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    a134:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    a136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a13a:	4604      	mov	r4, r0
    a13c:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    a13e:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    a140:	b113      	cbz	r3, a148 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    a142:	6d42      	ldr	r2, [r0, #84]	; 0x54
    a144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    a148:	7ea3      	ldrb	r3, [r4, #26]
    a14a:	b12b      	cbz	r3, a158 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    a14c:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    a14e:	69b3      	ldr	r3, [r6, #24]
    a150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a154:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    a156:	b662      	cpsie	i
	head = tx_buffer_head_;
    a158:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    a15c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    a15e:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    a160:	3501      	adds	r5, #1
    a162:	42ab      	cmp	r3, r5
    a164:	d84c      	bhi.n	a200 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    a166:	f04f 0800 	mov.w	r8, #0
    a16a:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    a16c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    a170:	b29b      	uxth	r3, r3
    a172:	429d      	cmp	r5, r3
    a174:	d019      	beq.n	a1aa <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    a176:	e028      	b.n	a1ca <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    a178:	6973      	ldr	r3, [r6, #20]
    a17a:	021b      	lsls	r3, r3, #8
    a17c:	d510      	bpl.n	a1a0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    a17e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a182:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    a184:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a186:	3301      	adds	r3, #1
    a188:	429a      	cmp	r2, r3
    a18a:	d936      	bls.n	a1fa <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    a18c:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    a18e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a190:	4299      	cmp	r1, r3
    a192:	d92d      	bls.n	a1f0 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    a194:	69e1      	ldr	r1, [r4, #28]
    a196:	5ccb      	ldrb	r3, [r1, r3]
    a198:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    a19a:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    a19c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    a1a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    a1a4:	b29b      	uxth	r3, r3
    a1a6:	42ab      	cmp	r3, r5
    a1a8:	d10f      	bne.n	a1ca <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    a1aa:	f7ff ffa3 	bl	a0f4 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    a1ae:	6963      	ldr	r3, [r4, #20]
    a1b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    a1b4:	4283      	cmp	r3, r0
    a1b6:	dadf      	bge.n	a178 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    a1b8:	28ff      	cmp	r0, #255	; 0xff
    a1ba:	ddf1      	ble.n	a1a0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    a1bc:	f002 fa42 	bl	c644 <yield>
	while (tx_buffer_tail_ == head) {
    a1c0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    a1c4:	b29b      	uxth	r3, r3
    a1c6:	42ab      	cmp	r3, r5
    a1c8:	d0ef      	beq.n	a1aa <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    a1ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a1cc:	42ab      	cmp	r3, r5
    a1ce:	d91a      	bls.n	a206 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    a1d0:	b2ff      	uxtb	r7, r7
    a1d2:	69e3      	ldr	r3, [r4, #28]
    a1d4:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    a1d6:	b672      	cpsid	i
	transmitting_ = 1;
    a1d8:	2001      	movs	r0, #1
    a1da:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    a1de:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    a1e2:	69b3      	ldr	r3, [r6, #24]
    a1e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    a1e8:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    a1ea:	b662      	cpsie	i
}
    a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    a1f0:	1a5b      	subs	r3, r3, r1
    a1f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    a1f4:	5ccb      	ldrb	r3, [r1, r3]
    a1f6:	b2db      	uxtb	r3, r3
    a1f8:	e7cf      	b.n	a19a <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    a1fa:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a1fc:	4613      	mov	r3, r2
    a1fe:	e7c6      	b.n	a18e <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    a200:	fa1f f885 	uxth.w	r8, r5
    a204:	e7b2      	b.n	a16c <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    a206:	1aed      	subs	r5, r5, r3
    a208:	b2ff      	uxtb	r7, r7
    a20a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a20c:	555f      	strb	r7, [r3, r5]
    a20e:	e7e2      	b.n	a1d6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

0000a210 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    a210:	f7ff bf90 	b.w	a134 <HardwareSerialIMXRT::write9bit(unsigned long)>

0000a214 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    a214:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    a216:	6953      	ldr	r3, [r2, #20]
    a218:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    a21c:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    a21e:	d043      	beq.n	a2a8 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    a220:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    a222:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    a226:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    a22a:	d03a      	beq.n	a2a2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    a22c:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    a230:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    a234:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    a236:	b2b6      	uxth	r6, r6
    a238:	e007      	b.n	a24a <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    a23a:	6a01      	ldr	r1, [r0, #32]
    a23c:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    a240:	f10e 33ff 	add.w	r3, lr, #4294967295
    a244:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    a248:	d01d      	beq.n	a286 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    a24a:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    a24c:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a24e:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    a250:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    a254:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a258:	429c      	cmp	r4, r3
    a25a:	bf98      	it	ls
    a25c:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    a25e:	fa1f fc8c 	uxth.w	ip, ip
    a262:	459c      	cmp	ip, r3
    a264:	d0ec      	beq.n	a240 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    a266:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    a268:	fa5f fc81 	uxtb.w	ip, r1
    a26c:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    a26e:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    a270:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    a274:	d8e1      	bhi.n	a23a <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    a276:	6a43      	ldr	r3, [r0, #36]	; 0x24
    a278:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    a27c:	f10e 33ff 	add.w	r3, lr, #4294967295
    a280:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    a284:	d1e1      	bne.n	a24a <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    a286:	b2ab      	uxth	r3, r5
    a288:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    a28c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    a28e:	b143      	cbz	r3, a2a2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    a290:	42b5      	cmp	r5, r6
    a292:	d354      	bcc.n	a33e <HardwareSerialIMXRT::IRQHandler()+0x12a>
    a294:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    a296:	6c01      	ldr	r1, [r0, #64]	; 0x40
    a298:	42a9      	cmp	r1, r5
    a29a:	d802      	bhi.n	a2a2 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    a29c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    a29e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    a2a2:	6953      	ldr	r3, [r2, #20]
    a2a4:	02d9      	lsls	r1, r3, #11
    a2a6:	d445      	bmi.n	a334 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    a2a8:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    a2aa:	0233      	lsls	r3, r6, #8
    a2ac:	d528      	bpl.n	a300 <HardwareSerialIMXRT::IRQHandler()+0xec>
    a2ae:	6953      	ldr	r3, [r2, #20]
    a2b0:	021d      	lsls	r5, r3, #8
    a2b2:	d525      	bpl.n	a300 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    a2b4:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    a2b8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    a2bc:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    a2be:	b29b      	uxth	r3, r3
    a2c0:	e006      	b.n	a2d0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    a2c2:	69c1      	ldr	r1, [r0, #28]
    a2c4:	5cc9      	ldrb	r1, [r1, r3]
    a2c6:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    a2c8:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    a2ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    a2cc:	054c      	lsls	r4, r1, #21
    a2ce:	d412      	bmi.n	a2f6 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    a2d0:	42ab      	cmp	r3, r5
    a2d2:	d038      	beq.n	a346 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a2d4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    a2d6:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    a2d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a2da:	429c      	cmp	r4, r3
    a2dc:	bf98      	it	ls
    a2de:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    a2e0:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    a2e2:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    a2e6:	d8ec      	bhi.n	a2c2 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    a2e8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a2ea:	5d09      	ldrb	r1, [r1, r4]
    a2ec:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    a2ee:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    a2f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    a2f2:	054c      	lsls	r4, r1, #21
    a2f4:	d5ec      	bpl.n	a2d0 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    a2f6:	b299      	uxth	r1, r3
		if (head == tail) {
    a2f8:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    a2fa:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    a2fe:	d025      	beq.n	a34c <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    a300:	0271      	lsls	r1, r6, #9
    a302:	d516      	bpl.n	a332 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    a304:	6953      	ldr	r3, [r2, #20]
    a306:	025b      	lsls	r3, r3, #9
    a308:	d513      	bpl.n	a332 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    a30a:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    a30c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    a30e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    a312:	b113      	cbz	r3, a31a <HardwareSerialIMXRT::IRQHandler()+0x106>
    a314:	6d41      	ldr	r1, [r0, #84]	; 0x54
    a316:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    a31a:	7e83      	ldrb	r3, [r0, #26]
    a31c:	b12b      	cbz	r3, a32a <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    a31e:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    a320:	6993      	ldr	r3, [r2, #24]
    a322:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    a326:	6193      	str	r3, [r2, #24]
			__enable_irq();
    a328:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    a32a:	6993      	ldr	r3, [r2, #24]
    a32c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    a330:	6193      	str	r3, [r2, #24]
}
    a332:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    a334:	6953      	ldr	r3, [r2, #20]
    a336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a33a:	6153      	str	r3, [r2, #20]
    a33c:	e7b4      	b.n	a2a8 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    a33e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    a340:	1b89      	subs	r1, r1, r6
    a342:	440d      	add	r5, r1
    a344:	e7a7      	b.n	a296 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    a346:	b29b      	uxth	r3, r3
    a348:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    a34c:	6993      	ldr	r3, [r2, #24]
    a34e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    a352:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    a354:	6993      	ldr	r3, [r2, #24]
    a356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    a35a:	6193      	str	r3, [r2, #24]
    a35c:	e7d0      	b.n	a300 <HardwareSerialIMXRT::IRQHandler()+0xec>
    a35e:	bf00      	nop

0000a360 <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    a360:	4801      	ldr	r0, [pc, #4]	; (a368 <IRQHandler_Serial1+0x8>)
    a362:	f7ff bf57 	b.w	a214 <HardwareSerialIMXRT::IRQHandler()>
    a366:	bf00      	nop
    a368:	20003328 	.word	0x20003328

0000a36c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a36c:	4608      	mov	r0, r1
    a36e:	f002 b8d5 	b.w	c51c <usb_serial_putchar>
    a372:	bf00      	nop

0000a374 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    a374:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    a376:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    a378:	bf08      	it	eq
    a37a:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    a37c:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    a37e:	b391      	cbz	r1, a3e6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    a380:	f04f 0e21 	mov.w	lr, #33	; 0x21
    a384:	e001      	b.n	a38a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    a386:	fa5f fe86 	uxtb.w	lr, r6
    a38a:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    a38e:	fbb1 f5f2 	udiv	r5, r1, r2
    a392:	fb02 1415 	mls	r4, r2, r5, r1
    a396:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a39a:	2c09      	cmp	r4, #9
    a39c:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    a3a0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    a3a4:	bf98      	it	ls
    a3a6:	fa5f f48c 	uxtbls.w	r4, ip
    a3aa:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    a3ae:	bf88      	it	hi
    a3b0:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    a3b2:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a3b4:	44ec      	add	ip, sp
			n /= base;
    a3b6:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a3b8:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    a3bc:	d2e3      	bcs.n	a386 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    a3be:	b14b      	cbz	r3, a3d4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    a3c0:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    a3c4:	222d      	movs	r2, #45	; 0x2d
		i--;
    a3c6:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    a3ca:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    a3ce:	446b      	add	r3, sp
    a3d0:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    a3d4:	6803      	ldr	r3, [r0, #0]
    a3d6:	a901      	add	r1, sp, #4
    a3d8:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    a3dc:	685b      	ldr	r3, [r3, #4]
    a3de:	4471      	add	r1, lr
    a3e0:	4798      	blx	r3
}
    a3e2:	b00a      	add	sp, #40	; 0x28
    a3e4:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    a3e6:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a3e8:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    a3ec:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a3f0:	e7e5      	b.n	a3be <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    a3f2:	bf00      	nop

0000a3f4 <Print::write(unsigned char const*, unsigned int)>:
{
    a3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    a3f8:	460c      	mov	r4, r1
    a3fa:	b1d1      	cbz	r1, a432 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    a3fc:	b1ea      	cbz	r2, a43a <Print::write(unsigned char const*, unsigned int)+0x46>
    a3fe:	4680      	mov	r8, r0
    a400:	188e      	adds	r6, r1, r2
	size_t count = 0;
    a402:	2500      	movs	r5, #0
    a404:	4f0e      	ldr	r7, [pc, #56]	; (a440 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    a406:	e004      	b.n	a412 <Print::write(unsigned char const*, unsigned int)+0x1e>
    a408:	f002 f888 	bl	c51c <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    a40c:	42b4      	cmp	r4, r6
    a40e:	4405      	add	r5, r0
    a410:	d00c      	beq.n	a42c <Print::write(unsigned char const*, unsigned int)+0x38>
    a412:	f8d8 3000 	ldr.w	r3, [r8]
    a416:	f814 0b01 	ldrb.w	r0, [r4], #1
    a41a:	681b      	ldr	r3, [r3, #0]
    a41c:	42bb      	cmp	r3, r7
    a41e:	d0f3      	beq.n	a408 <Print::write(unsigned char const*, unsigned int)+0x14>
    a420:	4601      	mov	r1, r0
    a422:	4640      	mov	r0, r8
    a424:	4798      	blx	r3
    a426:	42b4      	cmp	r4, r6
    a428:	4405      	add	r5, r0
    a42a:	d1f2      	bne.n	a412 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    a42c:	4628      	mov	r0, r5
    a42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    a432:	460d      	mov	r5, r1
}
    a434:	4628      	mov	r0, r5
    a436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    a43a:	4615      	mov	r5, r2
    a43c:	e7f6      	b.n	a42c <Print::write(unsigned char const*, unsigned int)+0x38>
    a43e:	bf00      	nop
    a440:	0000a36d 	.word	0x0000a36d

0000a444 <Print::print(String const&)>:
{
    a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    a448:	688c      	ldr	r4, [r1, #8]
    a44a:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    a44c:	b1dc      	cbz	r4, a486 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    a44e:	2500      	movs	r5, #0
    a450:	4688      	mov	r8, r1
    a452:	4606      	mov	r6, r0
	size_t count = 0;
    a454:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    a456:	462b      	mov	r3, r5
    a458:	2221      	movs	r2, #33	; 0x21
    a45a:	a901      	add	r1, sp, #4
    a45c:	4640      	mov	r0, r8
    a45e:	f000 f95d 	bl	a71c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    a462:	2c20      	cmp	r4, #32
    a464:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    a466:	6833      	ldr	r3, [r6, #0]
    a468:	bf28      	it	cs
    a46a:	2220      	movcs	r2, #32
    a46c:	a901      	add	r1, sp, #4
    a46e:	4630      	mov	r0, r6
    a470:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    a472:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    a474:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    a476:	4798      	blx	r3
    a478:	4407      	add	r7, r0
	while (len > 0) {
    a47a:	2c00      	cmp	r4, #0
    a47c:	d1eb      	bne.n	a456 <Print::print(String const&)+0x12>
}
    a47e:	4638      	mov	r0, r7
    a480:	b00a      	add	sp, #40	; 0x28
    a482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    a486:	4627      	mov	r7, r4
}
    a488:	4638      	mov	r0, r7
    a48a:	b00a      	add	sp, #40	; 0x28
    a48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a490 <Print::print(long)>:
	if (n < 0) {
    a490:	2900      	cmp	r1, #0
    a492:	db03      	blt.n	a49c <Print::print(long)+0xc>
	uint8_t sign=0;
    a494:	2300      	movs	r3, #0
	if (base == 0) {
    a496:	220a      	movs	r2, #10
    a498:	f7ff bf6c 	b.w	a374 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    a49c:	4249      	negs	r1, r1
		sign = '-';
    a49e:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    a4a0:	220a      	movs	r2, #10
    a4a2:	f7ff bf67 	b.w	a374 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    a4a6:	bf00      	nop

0000a4a8 <Print::println()>:
{
    a4a8:	b500      	push	{lr}
	return write(buf, 2);
    a4aa:	6803      	ldr	r3, [r0, #0]
{
    a4ac:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    a4ae:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    a4b2:	2202      	movs	r2, #2
    a4b4:	a901      	add	r1, sp, #4
    a4b6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    a4b8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    a4bc:	4798      	blx	r3
}
    a4be:	b003      	add	sp, #12
    a4c0:	f85d fb04 	ldr.w	pc, [sp], #4

0000a4c4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    a4c4:	4b05      	ldr	r3, [pc, #20]	; (a4dc <_write+0x18>)
    a4c6:	2802      	cmp	r0, #2
    a4c8:	bf88      	it	hi
    a4ca:	4603      	movhi	r3, r0
{
    a4cc:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    a4ce:	681c      	ldr	r4, [r3, #0]
    a4d0:	4618      	mov	r0, r3
    a4d2:	6863      	ldr	r3, [r4, #4]
}
    a4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    a4d8:	4718      	bx	r3
    a4da:	bf00      	nop
    a4dc:	20003318 	.word	0x20003318

0000a4e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    a4e0:	b95a      	cbnz	r2, a4fa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    a4e2:	6803      	ldr	r3, [r0, #0]
    a4e4:	b2c9      	uxtb	r1, r1
    a4e6:	4a07      	ldr	r2, [pc, #28]	; (a504 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    a4e8:	681b      	ldr	r3, [r3, #0]
    a4ea:	4293      	cmp	r3, r2
{
    a4ec:	b500      	push	{lr}
    a4ee:	d106      	bne.n	a4fe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    a4f0:	4608      	mov	r0, r1
}
    a4f2:	f85d eb04 	ldr.w	lr, [sp], #4
    a4f6:	f002 b811 	b.w	c51c <usb_serial_putchar>
    a4fa:	f7ff bf3b 	b.w	a374 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    a4fe:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    a502:	4718      	bx	r3
    a504:	0000a36d 	.word	0x0000a36d

0000a508 <String::String(char const*)>:
String::String(const char *cstr)
    a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer = NULL;
    a50a:	2600      	movs	r6, #0
String::String(const char *cstr)
    a50c:	4604      	mov	r4, r0
	capacity = 0;
    a50e:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    a512:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    a514:	b129      	cbz	r1, a522 <String::String(char const*)+0x1a>
    a516:	4608      	mov	r0, r1
    a518:	460d      	mov	r5, r1
    a51a:	f003 feb1 	bl	e280 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    a51e:	4607      	mov	r7, r0
    a520:	b908      	cbnz	r0, a526 <String::String(char const*)+0x1e>
}
    a522:	4620      	mov	r0, r4
    a524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    a526:	3001      	adds	r0, #1
    a528:	f002 fe28 	bl	d17c <malloc>
	if (newbuffer) {
    a52c:	2800      	cmp	r0, #0
    a52e:	d0f8      	beq.n	a522 <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
    a530:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    a532:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    a534:	6020      	str	r0, [r4, #0]
	len = length;
    a536:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    a53a:	f003 fe35 	bl	e1a8 <strcpy>
}
    a53e:	4620      	mov	r0, r4
    a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a542:	bf00      	nop

0000a544 <String::String(String const&)>:
String::String(const String &value)
    a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    a546:	4288      	cmp	r0, r1
	buffer = NULL;
    a548:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    a54c:	4604      	mov	r4, r0
	len = 0;
    a54e:	6085      	str	r5, [r0, #8]
	capacity = 0;
    a550:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    a554:	d002      	beq.n	a55c <String::String(String const&)+0x18>
    a556:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    a558:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    a55a:	b90e      	cbnz	r6, a560 <String::String(String const&)+0x1c>
}
    a55c:	4620      	mov	r0, r4
    a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    a560:	1c70      	adds	r0, r6, #1
    a562:	f002 fe0b 	bl	d17c <malloc>
	if (newbuffer) {
    a566:	2800      	cmp	r0, #0
    a568:	d0f8      	beq.n	a55c <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
    a56a:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    a56c:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    a56e:	6020      	str	r0, [r4, #0]
	len = length;
    a570:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    a574:	f003 fe18 	bl	e1a8 <strcpy>
}
    a578:	4620      	mov	r0, r4
    a57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a57c <String::~String()>:
String::~String()
    a57c:	b510      	push	{r4, lr}
    a57e:	4604      	mov	r4, r0
	free(buffer);
    a580:	6800      	ldr	r0, [r0, #0]
    a582:	f002 fe03 	bl	d18c <free>
}
    a586:	4620      	mov	r0, r4
    a588:	bd10      	pop	{r4, pc}
    a58a:	bf00      	nop

0000a58c <String::copy(char const*, unsigned int)>:
{
    a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a58e:	4604      	mov	r4, r0
	if (length == 0) {
    a590:	4615      	mov	r5, r2
    a592:	b932      	cbnz	r2, a5a2 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    a594:	6803      	ldr	r3, [r0, #0]
    a596:	b103      	cbz	r3, a59a <String::copy(char const*, unsigned int)+0xe>
    a598:	701a      	strb	r2, [r3, #0]
		len = 0;
    a59a:	2300      	movs	r3, #0
}
    a59c:	4620      	mov	r0, r4
		len = 0;
    a59e:	60a3      	str	r3, [r4, #8]
}
    a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    a5a2:	6843      	ldr	r3, [r0, #4]
    a5a4:	460e      	mov	r6, r1
    a5a6:	429a      	cmp	r2, r3
    a5a8:	d91c      	bls.n	a5e4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    a5aa:	1c51      	adds	r1, r2, #1
    a5ac:	6800      	ldr	r0, [r0, #0]
    a5ae:	f003 f8b1 	bl	d714 <realloc>
	if (newbuffer) {
    a5b2:	4607      	mov	r7, r0
    a5b4:	b160      	cbz	r0, a5d0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    a5b6:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    a5b8:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    a5bc:	b90b      	cbnz	r3, a5c2 <String::copy(char const*, unsigned int)+0x36>
    a5be:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    a5c0:	6827      	ldr	r7, [r4, #0]
    a5c2:	4631      	mov	r1, r6
    a5c4:	4638      	mov	r0, r7
	len = length;
    a5c6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    a5c8:	f003 fdee 	bl	e1a8 <strcpy>
}
    a5cc:	4620      	mov	r0, r4
    a5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    a5d0:	6820      	ldr	r0, [r4, #0]
    a5d2:	b110      	cbz	r0, a5da <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    a5d4:	f002 fdda 	bl	d18c <free>
			buffer = NULL;
    a5d8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    a5da:	2300      	movs	r3, #0
}
    a5dc:	4620      	mov	r0, r4
		len = capacity = 0;
    a5de:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    a5e4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    a5e6:	4631      	mov	r1, r6
	len = length;
    a5e8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    a5ea:	4638      	mov	r0, r7
    a5ec:	f003 fddc 	bl	e1a8 <strcpy>
	return *this;
    a5f0:	e7ec      	b.n	a5cc <String::copy(char const*, unsigned int)+0x40>
    a5f2:	bf00      	nop

0000a5f4 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    a5f4:	b510      	push	{r4, lr}
	buffer = NULL;
    a5f6:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    a5f8:	b08a      	sub	sp, #40	; 0x28
    a5fa:	4604      	mov	r4, r0
	itoa(value, buf, base);
    a5fc:	4608      	mov	r0, r1
    a5fe:	a901      	add	r1, sp, #4
	len = 0;
    a600:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    a602:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    a606:	f002 fda3 	bl	d150 <itoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    a60a:	a801      	add	r0, sp, #4
    a60c:	f003 fe38 	bl	e280 <strlen>
    a610:	a901      	add	r1, sp, #4
    a612:	4602      	mov	r2, r0
    a614:	4620      	mov	r0, r4
    a616:	f7ff ffb9 	bl	a58c <String::copy(char const*, unsigned int)>
}
    a61a:	4620      	mov	r0, r4
    a61c:	b00a      	add	sp, #40	; 0x28
    a61e:	bd10      	pop	{r4, pc}

0000a620 <String::String(long long, unsigned char)>:
String::String(long long value, unsigned char base)
    a620:	b510      	push	{r4, lr}
    a622:	4619      	mov	r1, r3
    a624:	b092      	sub	sp, #72	; 0x48
    a626:	4604      	mov	r4, r0
	buffer = NULL;
    a628:	2300      	movs	r3, #0
String::String(long long value, unsigned char base)
    a62a:	4610      	mov	r0, r2
	lltoa(value, buf, base);
    a62c:	aa01      	add	r2, sp, #4
	len = 0;
    a62e:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    a630:	e9c4 3300 	strd	r3, r3, [r4]
	lltoa(value, buf, base);
    a634:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    a638:	f000 fc0a 	bl	ae50 <lltoa>
		copy(cstr, strlen(cstr));
    a63c:	a801      	add	r0, sp, #4
    a63e:	f003 fe1f 	bl	e280 <strlen>
    a642:	a901      	add	r1, sp, #4
    a644:	4602      	mov	r2, r0
    a646:	4620      	mov	r0, r4
    a648:	f7ff ffa0 	bl	a58c <String::copy(char const*, unsigned int)>
}
    a64c:	4620      	mov	r0, r4
    a64e:	b012      	add	sp, #72	; 0x48
    a650:	bd10      	pop	{r4, pc}
    a652:	bf00      	nop

0000a654 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    a654:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    a656:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    a658:	4604      	mov	r4, r0
    a65a:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    a65c:	1c88      	adds	r0, r1, #2
	len = 0;
    a65e:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    a660:	466a      	mov	r2, sp
	capacity = 0;
    a662:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    a666:	f000 fc07 	bl	ae78 <dtostrf>
	if (cstr) {
    a66a:	4605      	mov	r5, r0
    a66c:	b148      	cbz	r0, a682 <String::String(float, unsigned char)+0x2e>
		copy(cstr, strlen(cstr));
    a66e:	f003 fe07 	bl	e280 <strlen>
    a672:	4629      	mov	r1, r5
    a674:	4602      	mov	r2, r0
    a676:	4620      	mov	r0, r4
    a678:	f7ff ff88 	bl	a58c <String::copy(char const*, unsigned int)>
}
    a67c:	4620      	mov	r0, r4
    a67e:	b00b      	add	sp, #44	; 0x2c
    a680:	bd30      	pop	{r4, r5, pc}
	} else {
		len = 0;
    a682:	60a0      	str	r0, [r4, #8]
}
    a684:	4620      	mov	r0, r4
    a686:	b00b      	add	sp, #44	; 0x2c
    a688:	bd30      	pop	{r4, r5, pc}
    a68a:	bf00      	nop

0000a68c <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    a68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a690:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    a692:	6800      	ldr	r0, [r0, #0]
{
    a694:	460d      	mov	r5, r1
    a696:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    a698:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    a69a:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    a69c:	d809      	bhi.n	a6b2 <String::append(char const*, unsigned int)+0x26>
    a69e:	18c2      	adds	r2, r0, r3
    a6a0:	4291      	cmp	r1, r2
    a6a2:	d206      	bcs.n	a6b2 <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    a6a4:	1a0f      	subs	r7, r1, r0
		self = true;
    a6a6:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
    a6aa:	b936      	cbnz	r6, a6ba <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    a6ac:	4620      	mov	r0, r4
    a6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    a6b2:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    a6b6:	2e00      	cmp	r6, #0
    a6b8:	d0f8      	beq.n	a6ac <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    a6ba:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    a6be:	6862      	ldr	r2, [r4, #4]
    a6c0:	4590      	cmp	r8, r2
    a6c2:	d90c      	bls.n	a6de <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    a6c4:	f108 0101 	add.w	r1, r8, #1
    a6c8:	f003 f824 	bl	d714 <realloc>
	if (newbuffer) {
    a6cc:	2800      	cmp	r0, #0
    a6ce:	d0ed      	beq.n	a6ac <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    a6d0:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    a6d2:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    a6d6:	b913      	cbnz	r3, a6de <String::append(char const*, unsigned int)+0x52>
    a6d8:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    a6da:	6820      	ldr	r0, [r4, #0]
    a6dc:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    a6de:	f1b9 0f00 	cmp.w	r9, #0
    a6e2:	d108      	bne.n	a6f6 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    a6e4:	4629      	mov	r1, r5
    a6e6:	4418      	add	r0, r3
    a6e8:	f003 fd5e 	bl	e1a8 <strcpy>
}
    a6ec:	4620      	mov	r0, r4
	len = newlen;
    a6ee:	f8c4 8008 	str.w	r8, [r4, #8]
}
    a6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    a6f6:	4632      	mov	r2, r6
    a6f8:	19c1      	adds	r1, r0, r7
    a6fa:	4418      	add	r0, r3
    a6fc:	f000 fa96 	bl	ac2c <memcpy>
		buffer[newlen] = 0;
    a700:	6823      	ldr	r3, [r4, #0]
    a702:	2200      	movs	r2, #0
    a704:	f803 2008 	strb.w	r2, [r3, r8]
    a708:	e7f0      	b.n	a6ec <String::append(char const*, unsigned int)+0x60>
    a70a:	bf00      	nop

0000a70c <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    a70c:	b510      	push	{r4, lr}
    a70e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    a710:	688a      	ldr	r2, [r1, #8]
    a712:	6809      	ldr	r1, [r1, #0]
    a714:	f7ff ffba 	bl	a68c <String::append(char const*, unsigned int)>
	return a;
}
    a718:	4620      	mov	r0, r4
    a71a:	bd10      	pop	{r4, pc}

0000a71c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    a71c:	b1c2      	cbz	r2, a750 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    a71e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    a720:	fab1 f681 	clz	r6, r1
    a724:	460c      	mov	r4, r1
    a726:	0976      	lsrs	r6, r6, #5
    a728:	b119      	cbz	r1, a732 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    a72a:	6885      	ldr	r5, [r0, #8]
    a72c:	429d      	cmp	r5, r3
    a72e:	d801      	bhi.n	a734 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    a730:	700e      	strb	r6, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    a732:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    a734:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    a736:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    a73a:	6801      	ldr	r1, [r0, #0]
    a73c:	4620      	mov	r0, r4
    a73e:	4565      	cmp	r5, ip
    a740:	4419      	add	r1, r3
    a742:	bf28      	it	cs
    a744:	4665      	movcs	r5, ip
    a746:	462a      	mov	r2, r5
    a748:	f003 fc5e 	bl	e008 <strncpy>
	buf[n] = 0;
    a74c:	5566      	strb	r6, [r4, r5]
}
    a74e:	bd70      	pop	{r4, r5, r6, pc}
    a750:	4770      	bx	lr
    a752:	bf00      	nop

0000a754 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a754:	49a2      	ldr	r1, [pc, #648]	; (a9e0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a756:	4ba3      	ldr	r3, [pc, #652]	; (a9e4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a758:	4288      	cmp	r0, r1
{
    a75a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a75e:	4ca2      	ldr	r4, [pc, #648]	; (a9e8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a760:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a762:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a764:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a768:	d91b      	bls.n	a7a2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a76a:	4ba0      	ldr	r3, [pc, #640]	; (a9ec <set_arm_clock+0x298>)
    a76c:	4298      	cmp	r0, r3
    a76e:	f240 8102 	bls.w	a976 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a772:	1ac3      	subs	r3, r0, r3
    a774:	499e      	ldr	r1, [pc, #632]	; (a9f0 <set_arm_clock+0x29c>)
    a776:	0a1b      	lsrs	r3, r3, #8
    a778:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a77c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a780:	09db      	lsrs	r3, r3, #7
    a782:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a786:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a78a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a78e:	428b      	cmp	r3, r1
    a790:	bf28      	it	cs
    a792:	460b      	movcs	r3, r1
    a794:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    a798:	4b96      	ldr	r3, [pc, #600]	; (a9f4 <set_arm_clock+0x2a0>)
    a79a:	fba3 3707 	umull	r3, r7, r3, r7
    a79e:	08ff      	lsrs	r7, r7, #3
    a7a0:	e004      	b.n	a7ac <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a7a2:	4f95      	ldr	r7, [pc, #596]	; (a9f8 <set_arm_clock+0x2a4>)
    a7a4:	42b8      	cmp	r0, r7
    a7a6:	bf8c      	ite	hi
    a7a8:	270e      	movhi	r7, #14
    a7aa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a7ac:	498d      	ldr	r1, [pc, #564]	; (a9e4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7ae:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a7b2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7b6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a7b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a7bc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7c0:	d20c      	bcs.n	a7dc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a7c2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a7c6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a7ca:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a7ce:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a7d2:	680b      	ldr	r3, [r1, #0]
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	dafc      	bge.n	a7d2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7d8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a7dc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    a7e0:	d124      	bne.n	a82c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a7e2:	4986      	ldr	r1, [pc, #536]	; (a9fc <set_arm_clock+0x2a8>)
    a7e4:	690c      	ldr	r4, [r1, #16]
    a7e6:	4986      	ldr	r1, [pc, #536]	; (aa00 <set_arm_clock+0x2ac>)
    a7e8:	43a1      	bics	r1, r4
    a7ea:	f000 80ea 	beq.w	a9c2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a7ee:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    a7f2:	4634      	mov	r4, r6
    a7f4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a7f8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a7fc:	d004      	beq.n	a808 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a7fe:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a802:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a804:	4b77      	ldr	r3, [pc, #476]	; (a9e4 <set_arm_clock+0x290>)
    a806:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a808:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    a80c:	d007      	beq.n	a81e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a80e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a812:	4974      	ldr	r1, [pc, #464]	; (a9e4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a814:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a816:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a818:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    a81a:	071a      	lsls	r2, r3, #28
    a81c:	d4fc      	bmi.n	a818 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a81e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a822:	4a70      	ldr	r2, [pc, #448]	; (a9e4 <set_arm_clock+0x290>)
    a824:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a826:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a828:	069b      	lsls	r3, r3, #26
    a82a:	d4fc      	bmi.n	a826 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a82c:	4c75      	ldr	r4, [pc, #468]	; (aa04 <set_arm_clock+0x2b0>)
    a82e:	42a0      	cmp	r0, r4
    a830:	f200 80ce 	bhi.w	a9d0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a834:	f04f 0c01 	mov.w	ip, #1
    a838:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    a83a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a83c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a840:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a844:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a848:	42a2      	cmp	r2, r4
    a84a:	d818      	bhi.n	a87e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a84c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    a850:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    a854:	f040 808d 	bne.w	a972 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a858:	f1bc 0f04 	cmp.w	ip, #4
    a85c:	f200 8091 	bhi.w	a982 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a860:	180a      	adds	r2, r1, r0
    a862:	42a2      	cmp	r2, r4
    a864:	f200 80a4 	bhi.w	a9b0 <set_arm_clock+0x25c>
    a868:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a86c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    a86e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a872:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a876:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a87a:	42a2      	cmp	r2, r4
    a87c:	d9e6      	bls.n	a84c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a87e:	f10c 31ff 	add.w	r1, ip, #4294967295
    a882:	028c      	lsls	r4, r1, #10
    a884:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a888:	485f      	ldr	r0, [pc, #380]	; (aa08 <set_arm_clock+0x2b4>)
    a88a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    a88c:	4a5f      	ldr	r2, [pc, #380]	; (aa0c <set_arm_clock+0x2b8>)
    a88e:	4290      	cmp	r0, r2
    a890:	d97f      	bls.n	a992 <set_arm_clock+0x23e>
    a892:	f8df a1a4 	ldr.w	sl, [pc, #420]	; aa38 <set_arm_clock+0x2e4>
    a896:	226c      	movs	r2, #108	; 0x6c
    a898:	485d      	ldr	r0, [pc, #372]	; (aa10 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a89a:	4d58      	ldr	r5, [pc, #352]	; (a9fc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a89c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a8a0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a8a4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a8a8:	f8df c190 	ldr.w	ip, [pc, #400]	; aa3c <set_arm_clock+0x2e8>
    a8ac:	ea0e 0c0c 	and.w	ip, lr, ip
    a8b0:	45d4      	cmp	ip, sl
    a8b2:	d009      	beq.n	a8c8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a8b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a8b8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    a8bc:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a8c0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a8c2:	682a      	ldr	r2, [r5, #0]
    a8c4:	2a00      	cmp	r2, #0
    a8c6:	dafc      	bge.n	a8c2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a8c8:	4a46      	ldr	r2, [pc, #280]	; (a9e4 <set_arm_clock+0x290>)
    a8ca:	6915      	ldr	r5, [r2, #16]
    a8cc:	f005 0507 	and.w	r5, r5, #7
    a8d0:	429d      	cmp	r5, r3
    a8d2:	d003      	beq.n	a8dc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a8d4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a8d6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a8d8:	03dd      	lsls	r5, r3, #15
    a8da:	d4fc      	bmi.n	a8d6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a8dc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    a8e0:	d009      	beq.n	a8f6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a8e2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a8e6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a8ea:	4a3e      	ldr	r2, [pc, #248]	; (a9e4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a8ec:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a8ee:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a8f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a8f2:	0799      	lsls	r1, r3, #30
    a8f4:	d4fc      	bmi.n	a8f0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a8f6:	4947      	ldr	r1, [pc, #284]	; (aa14 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a8f8:	4a47      	ldr	r2, [pc, #284]	; (aa18 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a8fa:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a8fc:	4291      	cmp	r1, r2
    a8fe:	d83c      	bhi.n	a97a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a900:	4b46      	ldr	r3, [pc, #280]	; (aa1c <set_arm_clock+0x2c8>)
    a902:	09c9      	lsrs	r1, r1, #7
    a904:	fba3 3101 	umull	r3, r1, r3, r1
    a908:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a90a:	1e4b      	subs	r3, r1, #1
    a90c:	021b      	lsls	r3, r3, #8
    a90e:	ea86 0203 	eor.w	r2, r6, r3
    a912:	f412 7f40 	tst.w	r2, #768	; 0x300
    a916:	d006      	beq.n	a926 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a918:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a91c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    a920:	4a30      	ldr	r2, [pc, #192]	; (a9e4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a922:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    a924:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a926:	4a2f      	ldr	r2, [pc, #188]	; (a9e4 <set_arm_clock+0x290>)
    a928:	6953      	ldr	r3, [r2, #20]
    a92a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    a92e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a930:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a932:	069b      	lsls	r3, r3, #26
    a934:	d4fc      	bmi.n	a930 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a936:	4b3a      	ldr	r3, [pc, #232]	; (aa20 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a938:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a93a:	fba3 2300 	umull	r2, r3, r3, r0
    a93e:	f04f 32ff 	mov.w	r2, #4294967295
    a942:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    a946:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a94a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    a94e:	4a35      	ldr	r2, [pc, #212]	; (aa24 <set_arm_clock+0x2d0>)
    a950:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a952:	4a35      	ldr	r2, [pc, #212]	; (aa28 <set_arm_clock+0x2d4>)
    a954:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a956:	4a35      	ldr	r2, [pc, #212]	; (aa2c <set_arm_clock+0x2d8>)
    a958:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a95a:	d208      	bcs.n	a96e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a95c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a960:	4a21      	ldr	r2, [pc, #132]	; (a9e8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a962:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    a966:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a968:	6813      	ldr	r3, [r2, #0]
    a96a:	2b00      	cmp	r3, #0
    a96c:	dafc      	bge.n	a968 <set_arm_clock+0x214>
	}

	return frequency;
}
    a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a972:	4673      	mov	r3, lr
    a974:	e762      	b.n	a83c <set_arm_clock+0xe8>
    a976:	2712      	movs	r7, #18
    a978:	e718      	b.n	a7ac <set_arm_clock+0x58>
    a97a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    a97e:	2104      	movs	r1, #4
    a980:	e7c5      	b.n	a90e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a982:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a986:	4820      	ldr	r0, [pc, #128]	; (aa08 <set_arm_clock+0x2b4>)
    a988:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a98a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a98c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a98e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a992:	4a27      	ldr	r2, [pc, #156]	; (aa30 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a994:	f8df a0a8 	ldr.w	sl, [pc, #168]	; aa40 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a998:	fba2 2000 	umull	r2, r0, r2, r0
    a99c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    a99e:	4825      	ldr	r0, [pc, #148]	; (aa34 <set_arm_clock+0x2e0>)
    a9a0:	2a36      	cmp	r2, #54	; 0x36
    a9a2:	bf38      	it	cc
    a9a4:	2236      	movcc	r2, #54	; 0x36
    a9a6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a9aa:	ea42 0a0a 	orr.w	sl, r2, sl
    a9ae:	e774      	b.n	a89a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a9b0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    a9b4:	2300      	movs	r3, #0
    a9b6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    a9ba:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    a9be:	46ac      	mov	ip, r5
    a9c0:	e762      	b.n	a888 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a9c2:	461d      	mov	r5, r3
    a9c4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    a9c8:	4611      	mov	r1, r2
    a9ca:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    a9ce:	e713      	b.n	a7f8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    a9d0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    a9d2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a9d6:	4602      	mov	r2, r0
    a9d8:	4631      	mov	r1, r6
    a9da:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    a9dc:	46e6      	mov	lr, ip
    a9de:	e753      	b.n	a888 <set_arm_clock+0x134>
    a9e0:	1f78a400 	.word	0x1f78a400
    a9e4:	400fc000 	.word	0x400fc000
    a9e8:	40080000 	.word	0x40080000
    a9ec:	23c34600 	.word	0x23c34600
    a9f0:	004cb223 	.word	0x004cb223
    a9f4:	51eb851f 	.word	0x51eb851f
    a9f8:	016e3600 	.word	0x016e3600
    a9fc:	400d8000 	.word	0x400d8000
    aa00:	80003040 	.word	0x80003040
    aa04:	269fb1ff 	.word	0x269fb1ff
    aa08:	005b8d80 	.word	0x005b8d80
    aa0c:	4df67eff 	.word	0x4df67eff
    aa10:	4d3f6400 	.word	0x4d3f6400
    aa14:	08f0d17f 	.word	0x08f0d17f
    aa18:	2cb4177f 	.word	0x2cb4177f
    aa1c:	00e5109f 	.word	0x00e5109f
    aa20:	431bde83 	.word	0x431bde83
    aa24:	200032c4 	.word	0x200032c4
    aa28:	200032c0 	.word	0x200032c0
    aa2c:	20004b98 	.word	0x20004b98
    aa30:	165e9f81 	.word	0x165e9f81
    aa34:	00b71b00 	.word	0x00b71b00
    aa38:	8000206c 	.word	0x8000206c
    aa3c:	8001307f 	.word	0x8001307f
    aa40:	80002000 	.word	0x80002000

0000aa44 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    aa44:	b900      	cbnz	r0, aa48 <delay+0x4>
    aa46:	4770      	bx	lr
{
    aa48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    aa4c:	2101      	movs	r1, #1
    aa4e:	4681      	mov	r9, r0
    aa50:	4c21      	ldr	r4, [pc, #132]	; (aad8 <delay+0x94>)
    aa52:	4d22      	ldr	r5, [pc, #136]	; (aadc <delay+0x98>)
    aa54:	4e22      	ldr	r6, [pc, #136]	; (aae0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    aa56:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    aa5a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    aa5c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    aa5e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    aa62:	2b00      	cmp	r3, #0
    aa64:	d1f7      	bne.n	aa56 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    aa66:	491f      	ldr	r1, [pc, #124]	; (aae4 <delay+0xa0>)
    aa68:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    aa6a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aa6e:	f8df a078 	ldr.w	sl, [pc, #120]	; aae8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    aa72:	1a1b      	subs	r3, r3, r0
    aa74:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    aa76:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aa7a:	f8da 2000 	ldr.w	r2, [sl]
    aa7e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    aa82:	455a      	cmp	r2, fp
    aa84:	bf94      	ite	ls
    aa86:	4490      	addls	r8, r2
    aa88:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    aa8a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    aa8e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    aa90:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    aa92:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    aa96:	2b00      	cmp	r3, #0
    aa98:	d1f7      	bne.n	aa8a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    aa9a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aa9c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    aaa0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    aaa2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aaa6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    aaaa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    aaae:	bf94      	ite	ls
    aab0:	4462      	addls	r2, ip
    aab2:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    aab6:	eba2 0208 	sub.w	r2, r2, r8
    aaba:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    aabe:	d306      	bcc.n	aace <delay+0x8a>
			if (--msec == 0) return;
    aac0:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    aac4:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    aac8:	d1df      	bne.n	aa8a <delay+0x46>
}
    aaca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    aace:	f001 fdb9 	bl	c644 <yield>
		while ((micros() - start) >= 1000) {
    aad2:	4904      	ldr	r1, [pc, #16]	; (aae4 <delay+0xa0>)
    aad4:	e7d9      	b.n	aa8a <delay+0x46>
    aad6:	bf00      	nop
    aad8:	20004bc8 	.word	0x20004bc8
    aadc:	20004bc4 	.word	0x20004bc4
    aae0:	20004bc0 	.word	0x20004bc0
    aae4:	e0001000 	.word	0xe0001000
    aae8:	20004b98 	.word	0x20004b98

0000aaec <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    aaec:	2827      	cmp	r0, #39	; 0x27
    aaee:	d816      	bhi.n	ab1e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    aaf0:	0102      	lsls	r2, r0, #4
    aaf2:	4b10      	ldr	r3, [pc, #64]	; (ab34 <digitalWrite+0x48>)
    aaf4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    aaf8:	589b      	ldr	r3, [r3, r2]
{
    aafa:	b410      	push	{r4}
	mask = p->mask;
    aafc:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    aafe:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    ab00:	4214      	tst	r4, r2
    ab02:	d005      	beq.n	ab10 <digitalWrite+0x24>
		if (val) {
    ab04:	b961      	cbnz	r1, ab20 <digitalWrite+0x34>
		}
	}
}
    ab06:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    ab0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    ab0e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ab10:	6883      	ldr	r3, [r0, #8]
		if (val) {
    ab12:	b151      	cbz	r1, ab2a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ab14:	4a08      	ldr	r2, [pc, #32]	; (ab38 <digitalWrite+0x4c>)
}
    ab16:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ab1a:	601a      	str	r2, [r3, #0]
}
    ab1c:	4770      	bx	lr
    ab1e:	4770      	bx	lr
    ab20:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    ab24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    ab28:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ab2a:	4a04      	ldr	r2, [pc, #16]	; (ab3c <digitalWrite+0x50>)
}
    ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ab30:	601a      	str	r2, [r3, #0]
}
    ab32:	4770      	bx	lr
    ab34:	20002e18 	.word	0x20002e18
    ab38:	0001f038 	.word	0x0001f038
    ab3c:	00013038 	.word	0x00013038

0000ab40 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    ab40:	2827      	cmp	r0, #39	; 0x27
    ab42:	d80b      	bhi.n	ab5c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    ab44:	4b06      	ldr	r3, [pc, #24]	; (ab60 <digitalRead+0x20>)
    ab46:	0102      	lsls	r2, r0, #4
    ab48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    ab4c:	589a      	ldr	r2, [r3, r2]
    ab4e:	68c3      	ldr	r3, [r0, #12]
    ab50:	6892      	ldr	r2, [r2, #8]
    ab52:	421a      	tst	r2, r3
    ab54:	bf14      	ite	ne
    ab56:	2001      	movne	r0, #1
    ab58:	2000      	moveq	r0, #0
    ab5a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    ab5c:	2000      	movs	r0, #0
}
    ab5e:	4770      	bx	lr
    ab60:	20002e18 	.word	0x20002e18

0000ab64 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ab64:	2827      	cmp	r0, #39	; 0x27
    ab66:	d829      	bhi.n	abbc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    ab68:	4b16      	ldr	r3, [pc, #88]	; (abc4 <pinMode+0x60>)
    ab6a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ab6c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    ab6e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ab72:	589a      	ldr	r2, [r3, r2]
{
    ab74:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ab76:	6853      	ldr	r3, [r2, #4]
    ab78:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ab7a:	d00e      	beq.n	ab9a <pinMode+0x36>
    ab7c:	2904      	cmp	r1, #4
    ab7e:	d00c      	beq.n	ab9a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ab80:	ea23 0304 	bic.w	r3, r3, r4
    ab84:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ab86:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    ab88:	b1a9      	cbz	r1, abb6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    ab8a:	2902      	cmp	r1, #2
    ab8c:	d017      	beq.n	abbe <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    ab8e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ab90:	bf0c      	ite	eq
    ab92:	4a0d      	ldreq	r2, [pc, #52]	; (abc8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    ab94:	4a0d      	ldrne	r2, [pc, #52]	; (abcc <pinMode+0x68>)
    ab96:	601a      	str	r2, [r3, #0]
    ab98:	e007      	b.n	abaa <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ab9a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    ab9c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ab9e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    aba0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    aba2:	d008      	beq.n	abb6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    aba4:	f640 0238 	movw	r2, #2104	; 0x838
    aba8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    abaa:	6843      	ldr	r3, [r0, #4]
    abac:	2215      	movs	r2, #21
}
    abae:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    abb2:	601a      	str	r2, [r3, #0]
}
    abb4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    abb6:	2238      	movs	r2, #56	; 0x38
    abb8:	601a      	str	r2, [r3, #0]
    abba:	e7f6      	b.n	abaa <pinMode+0x46>
    abbc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    abbe:	4a04      	ldr	r2, [pc, #16]	; (abd0 <pinMode+0x6c>)
    abc0:	601a      	str	r2, [r3, #0]
    abc2:	e7f2      	b.n	abaa <pinMode+0x46>
    abc4:	20002e18 	.word	0x20002e18
    abc8:	00013038 	.word	0x00013038
    abcc:	00010038 	.word	0x00010038
    abd0:	0001f038 	.word	0x0001f038

0000abd4 <eeprom_initialize>:
{
    abd4:	b570      	push	{r4, r5, r6, lr}
    abd6:	4c0e      	ldr	r4, [pc, #56]	; (ac10 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    abd8:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    abdc:	4e0d      	ldr	r6, [pc, #52]	; (ac14 <eeprom_initialize+0x40>)
    abde:	f104 051e 	add.w	r5, r4, #30
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    abe2:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    abe6:	2100      	movs	r1, #0
    abe8:	e002      	b.n	abf0 <eeprom_initialize+0x1c>
		} while (p < end);
    abea:	42b3      	cmp	r3, r6
			index++;
    abec:	b281      	uxth	r1, r0
		} while (p < end);
    abee:	d204      	bcs.n	abfa <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    abf0:	881a      	ldrh	r2, [r3, #0]
			index++;
    abf2:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    abf4:	3302      	adds	r3, #2
    abf6:	4572      	cmp	r2, lr
    abf8:	d1f7      	bne.n	abea <eeprom_initialize+0x16>
		sector_index[sector] = index;
    abfa:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    abfe:	42ac      	cmp	r4, r5
    ac00:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    ac04:	d1ed      	bne.n	abe2 <eeprom_initialize+0xe>
	initialized = 1;
    ac06:	4b04      	ldr	r3, [pc, #16]	; (ac18 <eeprom_initialize+0x44>)
    ac08:	2201      	movs	r2, #1
    ac0a:	701a      	strb	r2, [r3, #0]
}
    ac0c:	bd70      	pop	{r4, r5, r6, pc}
    ac0e:	bf00      	nop
    ac10:	20004b9a 	.word	0x20004b9a
    ac14:	601f1000 	.word	0x601f1000
    ac18:	20004bf1 	.word	0x20004bf1

0000ac1c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    ac1c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    ac1e:	f7f5 feb5 	bl	98c <setup>
	while (1) {
		loop();
    ac22:	f7f5 fde7 	bl	7f4 <loop>
		yield();
    ac26:	f001 fd0d 	bl	c644 <yield>
	while (1) {
    ac2a:	e7fa      	b.n	ac22 <main+0x6>

0000ac2c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    ac2c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    ac2e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    ac32:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    ac36:	d16d      	bne.n	ad14 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    ac38:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    ac3a:	d341      	bcc.n	acc0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    ac3c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac40:	f840 3b04 	str.w	r3, [r0], #4
    ac44:	f851 3b04 	ldr.w	r3, [r1], #4
    ac48:	f840 3b04 	str.w	r3, [r0], #4
    ac4c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac50:	f840 3b04 	str.w	r3, [r0], #4
    ac54:	f851 3b04 	ldr.w	r3, [r1], #4
    ac58:	f840 3b04 	str.w	r3, [r0], #4
    ac5c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac60:	f840 3b04 	str.w	r3, [r0], #4
    ac64:	f851 3b04 	ldr.w	r3, [r1], #4
    ac68:	f840 3b04 	str.w	r3, [r0], #4
    ac6c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac70:	f840 3b04 	str.w	r3, [r0], #4
    ac74:	f851 3b04 	ldr.w	r3, [r1], #4
    ac78:	f840 3b04 	str.w	r3, [r0], #4
    ac7c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac80:	f840 3b04 	str.w	r3, [r0], #4
    ac84:	f851 3b04 	ldr.w	r3, [r1], #4
    ac88:	f840 3b04 	str.w	r3, [r0], #4
    ac8c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac90:	f840 3b04 	str.w	r3, [r0], #4
    ac94:	f851 3b04 	ldr.w	r3, [r1], #4
    ac98:	f840 3b04 	str.w	r3, [r0], #4
    ac9c:	f851 3b04 	ldr.w	r3, [r1], #4
    aca0:	f840 3b04 	str.w	r3, [r0], #4
    aca4:	f851 3b04 	ldr.w	r3, [r1], #4
    aca8:	f840 3b04 	str.w	r3, [r0], #4
    acac:	f851 3b04 	ldr.w	r3, [r1], #4
    acb0:	f840 3b04 	str.w	r3, [r0], #4
    acb4:	f851 3b04 	ldr.w	r3, [r1], #4
    acb8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    acbc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    acbe:	d2bd      	bcs.n	ac3c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    acc0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    acc2:	d311      	bcc.n	ace8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    acc4:	f851 3b04 	ldr.w	r3, [r1], #4
    acc8:	f840 3b04 	str.w	r3, [r0], #4
    accc:	f851 3b04 	ldr.w	r3, [r1], #4
    acd0:	f840 3b04 	str.w	r3, [r0], #4
    acd4:	f851 3b04 	ldr.w	r3, [r1], #4
    acd8:	f840 3b04 	str.w	r3, [r0], #4
    acdc:	f851 3b04 	ldr.w	r3, [r1], #4
    ace0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    ace4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    ace6:	d2ed      	bcs.n	acc4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    ace8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    acea:	d305      	bcc.n	acf8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    acec:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    acf0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    acf4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    acf6:	d2f9      	bcs.n	acec <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    acf8:	3204      	adds	r2, #4
	beq	.Ldone
    acfa:	d008      	beq.n	ad0e <memcpy+0xe2>

	lsls	r2, r2, #31
    acfc:	07d2      	lsls	r2, r2, #31
	itt ne
    acfe:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    ad00:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    ad04:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    ad08:	d301      	bcc.n	ad0e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    ad0a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    ad0c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    ad0e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    ad10:	4770      	bx	lr
    ad12:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    ad14:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    ad16:	d313      	bcc.n	ad40 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    ad18:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    ad1a:	d08d      	beq.n	ac38 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    ad1c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    ad20:	d08a      	beq.n	ac38 <memcpy+0xc>

	rsb	r3, #4
    ad22:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    ad26:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    ad28:	07db      	lsls	r3, r3, #31
	itt ne
    ad2a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    ad2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    ad30:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    ad34:	d380      	bcc.n	ac38 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    ad36:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    ad3a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    ad3e:	e77b      	b.n	ac38 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    ad40:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    ad42:	d3d9      	bcc.n	acf8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    ad44:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    ad46:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    ad4a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    ad4e:	d2f9      	bcs.n	ad44 <memcpy+0x118>

	ldrb	r3, [r1]
    ad50:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    ad52:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    ad54:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    ad56:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    ad58:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    ad5a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    ad5c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    ad5e:	4770      	bx	lr

0000ad60 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    ad60:	f002 ba0c 	b.w	d17c <malloc>

0000ad64 <operator new[](unsigned int)>:
    ad64:	f002 ba0a 	b.w	d17c <malloc>

0000ad68 <operator delete[](void*)>:
    ad68:	f002 ba10 	b.w	d18c <free>

0000ad6c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    ad6c:	f002 ba0e 	b.w	d18c <free>

0000ad70 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    ad70:	f101 3cff 	add.w	ip, r1, #4294967295
{
    ad74:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    ad76:	4666      	mov	r6, ip
	int i=0, j;
    ad78:	2400      	movs	r4, #0
    ad7a:	e000      	b.n	ad7e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    ad7c:	3401      	adds	r4, #1
		digit = val % radix;
    ad7e:	fbb0 f5f2 	udiv	r5, r0, r2
    ad82:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ad86:	2b09      	cmp	r3, #9
    ad88:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    ad8c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    ad90:	fa5f fe8e 	uxtb.w	lr, lr
    ad94:	bf98      	it	ls
    ad96:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    ad9a:	4290      	cmp	r0, r2
		val /= radix;
    ad9c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ad9e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    ada2:	d2eb      	bcs.n	ad7c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    ada4:	1c63      	adds	r3, r4, #1
    ada6:	2200      	movs	r2, #0
    ada8:	18c8      	adds	r0, r1, r3
    adaa:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    adac:	b17c      	cbz	r4, adce <ultoa+0x5e>
		t = buf[j];
    adae:	4662      	mov	r2, ip
    adb0:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    adb4:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    adb8:	eba1 030c 	sub.w	r3, r1, ip
    adbc:	3202      	adds	r2, #2
		buf[j] = buf[i];
    adbe:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    adc2:	3b01      	subs	r3, #1
    adc4:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    adc6:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    adc8:	4423      	add	r3, r4
    adca:	429a      	cmp	r2, r3
    adcc:	dbef      	blt.n	adae <ultoa+0x3e>
	}
	return buf;
}
    adce:	4608      	mov	r0, r1
    add0:	bd70      	pop	{r4, r5, r6, pc}
    add2:	bf00      	nop

0000add4 <ulltoa>:
		return buf;
	}
}

char * ulltoa(unsigned long long val, char *buf, int radix)
{
    add4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add8:	1e54      	subs	r4, r2, #1
    adda:	4690      	mov	r8, r2
    addc:	4699      	mov	r9, r3
    adde:	4606      	mov	r6, r0
    ade0:	460d      	mov	r5, r1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    ade2:	ea4f 7be3 	mov.w	fp, r3, asr #31
	int i=0, j;
    ade6:	2700      	movs	r7, #0
		digit = val % radix;
    ade8:	46a2      	mov	sl, r4
    adea:	e000      	b.n	adee <ulltoa+0x1a>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    adec:	3701      	adds	r7, #1
		digit = val % radix;
    adee:	4629      	mov	r1, r5
    adf0:	4630      	mov	r0, r6
    adf2:	464a      	mov	r2, r9
    adf4:	465b      	mov	r3, fp
    adf6:	f002 f82d 	bl	ce54 <__aeabi_uldivmod>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    adfa:	2a09      	cmp	r2, #9
    adfc:	f102 0337 	add.w	r3, r2, #55	; 0x37
    ae00:	f102 0230 	add.w	r2, r2, #48	; 0x30
    ae04:	b2db      	uxtb	r3, r3
    ae06:	bf98      	it	ls
    ae08:	b2d3      	uxtbls	r3, r2
		if (val == 0) break;
    ae0a:	454e      	cmp	r6, r9
		val /= radix;
    ae0c:	4606      	mov	r6, r0
		if (val == 0) break;
    ae0e:	eb75 050b 	sbcs.w	r5, r5, fp
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ae12:	f80a 3f01 	strb.w	r3, [sl, #1]!
		val /= radix;
    ae16:	460d      	mov	r5, r1
		if (val == 0) break;
    ae18:	d2e8      	bcs.n	adec <ulltoa+0x18>
	}
	buf[i + 1] = 0;
    ae1a:	1c7b      	adds	r3, r7, #1
    ae1c:	2200      	movs	r2, #0
    ae1e:	eb08 0103 	add.w	r1, r8, r3
    ae22:	f808 2003 	strb.w	r2, [r8, r3]
	for (j=0; j < i; j++, i--) {
    ae26:	b17f      	cbz	r7, ae48 <ulltoa+0x74>
		t = buf[j];
    ae28:	4622      	mov	r2, r4
    ae2a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		buf[j] = buf[i];
    ae2e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (j=0; j < i; j++, i--) {
    ae32:	eba8 0304 	sub.w	r3, r8, r4
    ae36:	3202      	adds	r2, #2
		buf[j] = buf[i];
    ae38:	7025      	strb	r5, [r4, #0]
	for (j=0; j < i; j++, i--) {
    ae3a:	3b01      	subs	r3, #1
    ae3c:	eba2 0208 	sub.w	r2, r2, r8
		buf[i] = t;
    ae40:	7008      	strb	r0, [r1, #0]
	for (j=0; j < i; j++, i--) {
    ae42:	443b      	add	r3, r7
    ae44:	429a      	cmp	r2, r3
    ae46:	dbef      	blt.n	ae28 <ulltoa+0x54>
	}
	return buf;
}
    ae48:	4640      	mov	r0, r8
    ae4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae4e:	bf00      	nop

0000ae50 <lltoa>:

char * lltoa(long long val, char *buf, int radix)
{
    ae50:	b510      	push	{r4, lr}
	if (val >= 0) {
    ae52:	f1b1 0e00 	subs.w	lr, r1, #0
    ae56:	db03      	blt.n	ae60 <lltoa+0x10>
	} else {
		buf[0] = '-';
		ulltoa(-val, buf + 1, radix);
		return buf;
	}
}
    ae58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return ulltoa(val, buf, radix);
    ae5c:	f7ff bfba 	b.w	add4 <ulltoa>
		ulltoa(-val, buf + 1, radix);
    ae60:	4240      	negs	r0, r0
		buf[0] = '-';
    ae62:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    ae66:	4614      	mov	r4, r2
		ulltoa(-val, buf + 1, radix);
    ae68:	eb6e 014e 	sbc.w	r1, lr, lr, lsl #1
		buf[0] = '-';
    ae6c:	f802 cb01 	strb.w	ip, [r2], #1
		ulltoa(-val, buf + 1, radix);
    ae70:	f7ff ffb0 	bl	add4 <ulltoa>
}
    ae74:	4620      	mov	r0, r4
    ae76:	bd10      	pop	{r4, pc}

0000ae78 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    ae78:	eeb4 0a40 	vcmp.f32	s0, s0
{
    ae7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    ae84:	4616      	mov	r6, r2
	int awidth = abs(width);
    ae86:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    ae8a:	4607      	mov	r7, r0
    ae8c:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    ae90:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    ae94:	eeb0 8a40 	vmov.f32	s16, s0
    ae98:	b085      	sub	sp, #20
	if (isnanf(val)) {
    ae9a:	f180 8148 	bvs.w	b12e <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    ae9e:	eef0 7ac0 	vabs.f32	s15, s0
    aea2:	ed9f 7ac5 	vldr	s14, [pc, #788]	; b1b8 <dtostrf+0x340>
    aea6:	eef4 7a47 	vcmp.f32	s15, s14
    aeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aeae:	dd29      	ble.n	af04 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    aeb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aeb8:	f100 80ed 	bmi.w	b096 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    aebc:	2a03      	cmp	r2, #3
    aebe:	f340 8091 	ble.w	afe4 <dtostrf+0x16c>
    aec2:	2303      	movs	r3, #3
		if (width<0) {
    aec4:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    aec6:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    aeca:	f2c0 8085 	blt.w	afd8 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    aece:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aed6:	f100 816a 	bmi.w	b1ae <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    aeda:	2149      	movs	r1, #73	; 0x49
    aedc:	234e      	movs	r3, #78	; 0x4e
    aede:	2046      	movs	r0, #70	; 0x46
    aee0:	1cf4      	adds	r4, r6, #3
    aee2:	7031      	strb	r1, [r6, #0]
    aee4:	70b0      	strb	r0, [r6, #2]
    aee6:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    aee8:	b122      	cbz	r2, aef4 <dtostrf+0x7c>
			*buf++ = ' ';
    aeea:	4620      	mov	r0, r4
    aeec:	2120      	movs	r1, #32
    aeee:	4414      	add	r4, r2
    aef0:	f003 f838 	bl	df64 <memset>
			awidth--;
		}
		*buf = 0;
    aef4:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    aef6:	4620      	mov	r0, r4
		*buf = 0;
    aef8:	7023      	strb	r3, [r4, #0]
}
    aefa:	b005      	add	sp, #20
    aefc:	ecbd 8b02 	vpop	{d8}
    af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    af04:	4689      	mov	r9, r1
    af06:	460d      	mov	r5, r1
    af08:	aa02      	add	r2, sp, #8
    af0a:	a901      	add	r1, sp, #4
    af0c:	4648      	mov	r0, r9
    af0e:	f002 fe4d 	bl	dbac <fcvtf>
	if (precision == 0 && decpt == 0) {
    af12:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    af16:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    af18:	ea59 030a 	orrs.w	r3, r9, sl
    af1c:	d172      	bne.n	b004 <dtostrf+0x18c>
		decpt++;
    af1e:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    af20:	7802      	ldrb	r2, [r0, #0]
    af22:	4ca6      	ldr	r4, [pc, #664]	; (b1bc <dtostrf+0x344>)
		decpt++;
    af24:	469a      	mov	sl, r3
    af26:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    af28:	4ba5      	ldr	r3, [pc, #660]	; (b1c0 <dtostrf+0x348>)
		decpt++;
    af2a:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    af2c:	2a34      	cmp	r2, #52	; 0x34
    af2e:	bf88      	it	hi
    af30:	461c      	movhi	r4, r3
	if (sign) reqd++;
    af32:	9b02      	ldr	r3, [sp, #8]
    af34:	2b00      	cmp	r3, #0
    af36:	d07d      	beq.n	b034 <dtostrf+0x1bc>
    af38:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    af3c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    af40:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    af44:	f1bb 0f00 	cmp.w	fp, #0
    af48:	f340 80a1 	ble.w	b08e <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    af4c:	465a      	mov	r2, fp
    af4e:	2120      	movs	r1, #32
    af50:	4630      	mov	r0, r6
		e += pad;
    af52:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    af54:	f003 f806 	bl	df64 <memset>
    af58:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    af5c:	222d      	movs	r2, #45	; 0x2d
    af5e:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    af62:	f1ba 0f00 	cmp.w	sl, #0
    af66:	d177      	bne.n	b058 <dtostrf+0x1e0>
    af68:	f1b9 0f00 	cmp.w	r9, #0
    af6c:	d006      	beq.n	af7c <dtostrf+0x104>
		*p++ = '0';
    af6e:	461a      	mov	r2, r3
    af70:	2130      	movs	r1, #48	; 0x30
    af72:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    af76:	212e      	movs	r1, #46	; 0x2e
    af78:	7059      	strb	r1, [r3, #1]
    af7a:	4613      	mov	r3, r2
	while (p < e) {
    af7c:	42ab      	cmp	r3, r5
    af7e:	d21f      	bcs.n	afc0 <dtostrf+0x148>
		*p++ = *s++;
    af80:	46a4      	mov	ip, r4
    af82:	4619      	mov	r1, r3
    af84:	f81c 2b01 	ldrb.w	r2, [ip], #1
    af88:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    af8c:	42a9      	cmp	r1, r5
    af8e:	d018      	beq.n	afc2 <dtostrf+0x14a>
    af90:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    af92:	202e      	movs	r0, #46	; 0x2e
    af94:	3c01      	subs	r4, #1
    af96:	e00b      	b.n	afb0 <dtostrf+0x138>
    af98:	7058      	strb	r0, [r3, #1]
    af9a:	3302      	adds	r3, #2
		if (p == e) break;
    af9c:	3c01      	subs	r4, #1
	while (p < e) {
    af9e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    afa0:	4619      	mov	r1, r3
	while (p < e) {
    afa2:	d20d      	bcs.n	afc0 <dtostrf+0x148>
		*p++ = *s++;
    afa4:	f81c 2b01 	ldrb.w	r2, [ip], #1
    afa8:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    afac:	42a9      	cmp	r1, r5
    afae:	d008      	beq.n	afc2 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    afb0:	9401      	str	r4, [sp, #4]
    afb2:	2c00      	cmp	r4, #0
    afb4:	d0f0      	beq.n	af98 <dtostrf+0x120>
    afb6:	460b      	mov	r3, r1
		if (p == e) break;
    afb8:	3c01      	subs	r4, #1
	while (p < e) {
    afba:	42ab      	cmp	r3, r5
		*p++ = *s++;
    afbc:	4619      	mov	r1, r3
	while (p < e) {
    afbe:	d3f1      	bcc.n	afa4 <dtostrf+0x12c>
    afc0:	461d      	mov	r5, r3
	if (width < 0) {
    afc2:	2f00      	cmp	r7, #0
    afc4:	db6b      	blt.n	b09e <dtostrf+0x226>
	return buf;
    afc6:	4634      	mov	r4, r6
	*p = 0;
    afc8:	2300      	movs	r3, #0
}
    afca:	4620      	mov	r0, r4
	*p = 0;
    afcc:	702b      	strb	r3, [r5, #0]
}
    afce:	b005      	add	sp, #20
    afd0:	ecbd 8b02 	vpop	{d8}
    afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    afd8:	b122      	cbz	r2, afe4 <dtostrf+0x16c>
				*buf++ = ' ';
    afda:	4630      	mov	r0, r6
    afdc:	2120      	movs	r1, #32
    afde:	4416      	add	r6, r2
    afe0:	f002 ffc0 	bl	df64 <memset>
		if (val<0) *buf++ = '-';
    afe4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    afe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    afec:	f140 80bd 	bpl.w	b16a <dtostrf+0x2f2>
    aff0:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    aff2:	2249      	movs	r2, #73	; 0x49
    aff4:	234e      	movs	r3, #78	; 0x4e
    aff6:	2046      	movs	r0, #70	; 0x46
    aff8:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    affa:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    affc:	70f0      	strb	r0, [r6, #3]
    affe:	7072      	strb	r2, [r6, #1]
    b000:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    b002:	e777      	b.n	aef4 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    b004:	f1ca 0300 	rsb	r3, sl, #0
    b008:	4599      	cmp	r9, r3
    b00a:	da57      	bge.n	b0bc <dtostrf+0x244>
		decpt = -precision;
    b00c:	f04f 0801 	mov.w	r8, #1
    b010:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    b014:	4c69      	ldr	r4, [pc, #420]	; (b1bc <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    b016:	45c2      	cmp	sl, r8
		decpt = -precision;
    b018:	4640      	mov	r0, r8
    b01a:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    b01e:	bfb8      	it	lt
    b020:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    b024:	f1ba 0f00 	cmp.w	sl, #0
    b028:	d152      	bne.n	b0d0 <dtostrf+0x258>
	if (sign) reqd++;
    b02a:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    b02c:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    b030:	2b00      	cmp	r3, #0
    b032:	d181      	bne.n	af38 <dtostrf+0xc0>
	pad = width - reqd;
    b034:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    b038:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    b03c:	f1bb 0f00 	cmp.w	fp, #0
    b040:	dd27      	ble.n	b092 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    b042:	465a      	mov	r2, fp
    b044:	2120      	movs	r1, #32
    b046:	4630      	mov	r0, r6
		e += pad;
    b048:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    b04a:	f002 ff8b 	bl	df64 <memset>
    b04e:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    b052:	f1ba 0f00 	cmp.w	sl, #0
    b056:	d087      	beq.n	af68 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    b058:	f1ba 0f00 	cmp.w	sl, #0
    b05c:	da8e      	bge.n	af7c <dtostrf+0x104>
    b05e:	f1b9 0f00 	cmp.w	r9, #0
    b062:	d08b      	beq.n	af7c <dtostrf+0x104>
		*p++ = '0';
    b064:	4618      	mov	r0, r3
		*p++ = '.';
    b066:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    b068:	2130      	movs	r1, #48	; 0x30
    b06a:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    b06e:	705a      	strb	r2, [r3, #1]
    b070:	4602      	mov	r2, r0
    b072:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    b074:	3301      	adds	r3, #1
			*p++ = '0';
    b076:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    b07a:	d1fb      	bne.n	b074 <dtostrf+0x1fc>
			*p++ = '0';
    b07c:	f1ba 0f00 	cmp.w	sl, #0
    b080:	9301      	str	r3, [sp, #4]
    b082:	f1ca 0300 	rsb	r3, sl, #0
    b086:	bfa8      	it	ge
    b088:	2301      	movge	r3, #1
    b08a:	4403      	add	r3, r0
    b08c:	e776      	b.n	af7c <dtostrf+0x104>
	if (pad > 0) {
    b08e:	4633      	mov	r3, r6
    b090:	e764      	b.n	af5c <dtostrf+0xe4>
    b092:	4633      	mov	r3, r6
    b094:	e765      	b.n	af62 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b096:	2a04      	cmp	r2, #4
    b098:	ddaa      	ble.n	aff0 <dtostrf+0x178>
    b09a:	2304      	movs	r3, #4
    b09c:	e712      	b.n	aec4 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    b09e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    b0a0:	f1b8 0f00 	cmp.w	r8, #0
    b0a4:	ea6f 0208 	mvn.w	r2, r8
    b0a8:	da8d      	bge.n	afc6 <dtostrf+0x14e>
    b0aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    b0ae:	2120      	movs	r1, #32
    b0b0:	4628      	mov	r0, r5
    b0b2:	3201      	adds	r2, #1
    b0b4:	4415      	add	r5, r2
    b0b6:	f002 ff55 	bl	df64 <memset>
    b0ba:	e784      	b.n	afc6 <dtostrf+0x14e>
	reqd = strlen(s);
    b0bc:	f003 f8e0 	bl	e280 <strlen>
    b0c0:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    b0c2:	45c2      	cmp	sl, r8
    b0c4:	bfb8      	it	lt
    b0c6:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    b0ca:	f1ba 0f00 	cmp.w	sl, #0
    b0ce:	d0ac      	beq.n	b02a <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    b0d0:	f1ba 0f00 	cmp.w	sl, #0
    b0d4:	f6bf af2d 	bge.w	af32 <dtostrf+0xba>
    b0d8:	f1b9 0f00 	cmp.w	r9, #0
    b0dc:	f43f af29 	beq.w	af32 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    b0e0:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    b0e4:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    b0e8:	4283      	cmp	r3, r0
    b0ea:	f4bf af22 	bcs.w	af32 <dtostrf+0xba>
			while (newPrecision > 0) {
    b0ee:	f1b9 0f00 	cmp.w	r9, #0
    b0f2:	dd05      	ble.n	b100 <dtostrf+0x288>
				val *= 10.0f;
    b0f4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    b0f8:	3d01      	subs	r5, #1
				val *= 10.0f;
    b0fa:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    b0fe:	d1fb      	bne.n	b0f8 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b100:	aa02      	add	r2, sp, #8
    b102:	eeb0 0a48 	vmov.f32	s0, s16
    b106:	4628      	mov	r0, r5
    b108:	a903      	add	r1, sp, #12
    b10a:	f002 fd4f 	bl	dbac <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b10e:	f8dd a004 	ldr.w	sl, [sp, #4]
    b112:	9b03      	ldr	r3, [sp, #12]
    b114:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b118:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b11a:	eba3 030a 	sub.w	r3, r3, sl
    b11e:	4293      	cmp	r3, r2
    b120:	f47f af07 	bne.w	af32 <dtostrf+0xba>
    b124:	f10a 0a01 	add.w	sl, sl, #1
    b128:	f8cd a004 	str.w	sl, [sp, #4]
    b12c:	e701      	b.n	af32 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    b12e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b136:	bf4c      	ite	mi
    b138:	2304      	movmi	r3, #4
    b13a:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b13c:	4293      	cmp	r3, r2
    b13e:	da22      	bge.n	b186 <dtostrf+0x30e>
		if (width<0) {
    b140:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b142:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    b146:	db18      	blt.n	b17a <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b148:	ee10 3a10 	vmov	r3, s0
    b14c:	2b00      	cmp	r3, #0
    b14e:	da02      	bge.n	b156 <dtostrf+0x2de>
    b150:	232d      	movs	r3, #45	; 0x2d
    b152:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b156:	234e      	movs	r3, #78	; 0x4e
    b158:	2141      	movs	r1, #65	; 0x41
    b15a:	1cf4      	adds	r4, r6, #3
    b15c:	7033      	strb	r3, [r6, #0]
    b15e:	7071      	strb	r1, [r6, #1]
    b160:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    b162:	2a00      	cmp	r2, #0
    b164:	f47f aec1 	bne.w	aeea <dtostrf+0x72>
    b168:	e6c4      	b.n	aef4 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b16a:	2149      	movs	r1, #73	; 0x49
    b16c:	224e      	movs	r2, #78	; 0x4e
    b16e:	2346      	movs	r3, #70	; 0x46
    b170:	1cf4      	adds	r4, r6, #3
    b172:	7031      	strb	r1, [r6, #0]
    b174:	7072      	strb	r2, [r6, #1]
    b176:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    b178:	e6bc      	b.n	aef4 <dtostrf+0x7c>
			while (awidth) {
    b17a:	b122      	cbz	r2, b186 <dtostrf+0x30e>
				*buf++ = ' ';
    b17c:	4630      	mov	r0, r6
    b17e:	2120      	movs	r1, #32
    b180:	4416      	add	r6, r2
    b182:	f002 feef 	bl	df64 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b186:	ee18 3a10 	vmov	r3, s16
    b18a:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b18c:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b190:	db05      	blt.n	b19e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b192:	2241      	movs	r2, #65	; 0x41
    b194:	1cf4      	adds	r4, r6, #3
    b196:	7033      	strb	r3, [r6, #0]
    b198:	7072      	strb	r2, [r6, #1]
    b19a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    b19c:	e6aa      	b.n	aef4 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b19e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b1a0:	2241      	movs	r2, #65	; 0x41
    b1a2:	1d34      	adds	r4, r6, #4
    b1a4:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b1a6:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b1a8:	70b2      	strb	r2, [r6, #2]
    b1aa:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    b1ac:	e6a2      	b.n	aef4 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    b1ae:	232d      	movs	r3, #45	; 0x2d
    b1b0:	f806 3b01 	strb.w	r3, [r6], #1
    b1b4:	e691      	b.n	aeda <dtostrf+0x62>
    b1b6:	bf00      	nop
    b1b8:	7f7fffff 	.word	0x7f7fffff
    b1bc:	20003098 	.word	0x20003098
    b1c0:	2000309c 	.word	0x2000309c

0000b1c4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b1c4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    b1c6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b1c8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    b1cc:	4619      	mov	r1, r3
{
    b1ce:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1d0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b1d4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1d8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b1dc:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    b1e0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    b1e4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    b1e6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b1ea:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b1ee:	b29b      	uxth	r3, r3
    b1f0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    b1f4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b1f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    b1fc:	3101      	adds	r1, #1
    b1fe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    b202:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b204:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b206:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b20a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b20c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b20e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b210:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b212:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    b216:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b218:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b21a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b21c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    b21e:	d1eb      	bne.n	b1f8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b220:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b224:	b29b      	uxth	r3, r3
    b226:	f043 030f 	orr.w	r3, r3, #15
    b22a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b22e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b232:	b29b      	uxth	r3, r3
    b234:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    b238:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    b23c:	bd10      	pop	{r4, pc}
    b23e:	bf00      	nop

0000b240 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b240:	4b37      	ldr	r3, [pc, #220]	; (b320 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b242:	4a38      	ldr	r2, [pc, #224]	; (b324 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b244:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    b246:	4838      	ldr	r0, [pc, #224]	; (b328 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b248:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    b24c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b24e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b250:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b254:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b258:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b25c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b260:	430a      	orrs	r2, r1
    b262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    b266:	f7ff ffad 	bl	b1c4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    b26a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b26e:	f7ff ffa9 	bl	b1c4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    b272:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b276:	f7ff ffa5 	bl	b1c4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    b27a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b27e:	f7ff ffa1 	bl	b1c4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    b282:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b284:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b288:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    b28c:	4611      	mov	r1, r2
    b28e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b292:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b296:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b298:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b29a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b29c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b29e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2a2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2a4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b2a6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b2aa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b2ac:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    b2ae:	d1ee      	bne.n	b28e <pwm_init+0x4e>
    b2b0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b2b2:	481e      	ldr	r0, [pc, #120]	; (b32c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2b4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2b8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    b2bc:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2be:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b2c2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    b2c6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b2ca:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b2ce:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b2d0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b2d2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b2d4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2d6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2da:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2dc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b2de:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b2e2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b2e4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    b2e6:	d1ee      	bne.n	b2c6 <pwm_init+0x86>
    b2e8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b2ea:	4811      	ldr	r0, [pc, #68]	; (b330 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b2ec:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b2ee:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    b2f2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b2f4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b2f8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    b2fc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b300:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b304:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b306:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b308:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b30a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b30c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b30e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b310:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b312:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b316:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b318:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    b31c:	d1ee      	bne.n	b2fc <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b31e:	bd70      	pop	{r4, r5, r6, pc}
    b320:	400fc000 	.word	0x400fc000
    b324:	fc030000 	.word	0xfc030000
    b328:	403dc000 	.word	0x403dc000
    b32c:	401e0000 	.word	0x401e0000
    b330:	401e4000 	.word	0x401e4000

0000b334 <unused_interrupt_vector>:
	__disable_irq();
    b334:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b336:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    b33a:	4c52      	ldr	r4, [pc, #328]	; (b484 <unused_interrupt_vector+0x150>)
    b33c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b340:	f01e 0f04 	tst.w	lr, #4
    b344:	bf0c      	ite	eq
    b346:	f3ef 8208 	mrseq	r2, MSP
    b34a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b34e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b352:	4e4d      	ldr	r6, [pc, #308]	; (b488 <unused_interrupt_vector+0x154>)
	while (p < end) {
    b354:	4d4d      	ldr	r5, [pc, #308]	; (b48c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    b356:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b35a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    b35e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b362:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b366:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    b36a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b36e:	6993      	ldr	r3, [r2, #24]
    b370:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b374:	69d3      	ldr	r3, [r2, #28]
    b376:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b37a:	f000 f8d3 	bl	b524 <tempmonGetTemp>
    b37e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b382:	f001 f9cb 	bl	c71c <rtc_get>
	info->len = sizeof(*info) / 4;
    b386:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    b388:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    b38c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b390:	460b      	mov	r3, r1
    b392:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b396:	493e      	ldr	r1, [pc, #248]	; (b490 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    b398:	1d30      	adds	r0, r6, #4
    b39a:	405a      	eors	r2, r3
    b39c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b39e:	f002 0301 	and.w	r3, r2, #1
    b3a2:	3c01      	subs	r4, #1
    b3a4:	fb01 f303 	mul.w	r3, r1, r3
    b3a8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    b3ac:	d1f7      	bne.n	b39e <unused_interrupt_vector+0x6a>
	while (p < end) {
    b3ae:	42a8      	cmp	r0, r5
    b3b0:	d002      	beq.n	b3b8 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    b3b2:	6873      	ldr	r3, [r6, #4]
    b3b4:	4606      	mov	r6, r0
    b3b6:	e7ef      	b.n	b398 <unused_interrupt_vector+0x64>
	info->crc = crc;
    b3b8:	4b32      	ldr	r3, [pc, #200]	; (b484 <unused_interrupt_vector+0x150>)
    b3ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    b3be:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    b3c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b3c6:	4930      	ldr	r1, [pc, #192]	; (b488 <unused_interrupt_vector+0x154>)
    b3c8:	4a32      	ldr	r2, [pc, #200]	; (b494 <unused_interrupt_vector+0x160>)
    b3ca:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    b3ce:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    b3d2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b3d6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b3da:	4a2f      	ldr	r2, [pc, #188]	; (b498 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    b3dc:	2502      	movs	r5, #2
    b3de:	482f      	ldr	r0, [pc, #188]	; (b49c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b3e0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b3e2:	492f      	ldr	r1, [pc, #188]	; (b4a0 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b3e4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    b3e8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b3ea:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b3ec:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b3ee:	482d      	ldr	r0, [pc, #180]	; (b4a4 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b3f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b3f8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b3fa:	680b      	ldr	r3, [r1, #0]
    b3fc:	4283      	cmp	r3, r0
    b3fe:	d83d      	bhi.n	b47c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    b400:	4d26      	ldr	r5, [pc, #152]	; (b49c <unused_interrupt_vector+0x168>)
    b402:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    b404:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b408:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b40c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b40e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    b410:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b414:	4924      	ldr	r1, [pc, #144]	; (b4a8 <unused_interrupt_vector+0x174>)
    b416:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b41a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    b41e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b422:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b426:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b42a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b42e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    b432:	e001      	b.n	b438 <unused_interrupt_vector+0x104>
		usb_isr();
    b434:	f000 f968 	bl	b708 <usb_isr>
		if (PIT_TFLG0) {
    b438:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    b43c:	2b00      	cmp	r3, #0
    b43e:	d0f9      	beq.n	b434 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    b440:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    b442:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b446:	2c4f      	cmp	r4, #79	; 0x4f
    b448:	d9f4      	bls.n	b434 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b44a:	4b18      	ldr	r3, [pc, #96]	; (b4ac <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    b44c:	2002      	movs	r0, #2
    b44e:	4918      	ldr	r1, [pc, #96]	; (b4b0 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b450:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    b454:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b458:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b45a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    b45e:	b93b      	cbnz	r3, b470 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    b460:	4814      	ldr	r0, [pc, #80]	; (b4b4 <unused_interrupt_vector+0x180>)
    b462:	4915      	ldr	r1, [pc, #84]	; (b4b8 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b464:	4a0d      	ldr	r2, [pc, #52]	; (b49c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    b466:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b468:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    b46c:	2b00      	cmp	r3, #0
    b46e:	d0fa      	beq.n	b466 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    b470:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b474:	4a11      	ldr	r2, [pc, #68]	; (b4bc <unused_interrupt_vector+0x188>)
    b476:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b47a:	e7fe      	b.n	b47a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b47c:	f7ff f96a 	bl	a754 <set_arm_clock>
    b480:	e7be      	b.n	b400 <unused_interrupt_vector+0xcc>
    b482:	bf00      	nop
    b484:	2027ff00 	.word	0x2027ff00
    b488:	2027ff80 	.word	0x2027ff80
    b48c:	2027ffa8 	.word	0x2027ffa8
    b490:	edb88320 	.word	0xedb88320
    b494:	2027ffa0 	.word	0x2027ffa0
    b498:	400fc000 	.word	0x400fc000
    b49c:	40084000 	.word	0x40084000
    b4a0:	200032c4 	.word	0x200032c4
    b4a4:	0bcd3d80 	.word	0x0bcd3d80
    b4a8:	00249f00 	.word	0x00249f00
    b4ac:	400d9000 	.word	0x400d9000
    b4b0:	402e0000 	.word	0x402e0000
    b4b4:	400f8000 	.word	0x400f8000
    b4b8:	0bad00f1 	.word	0x0bad00f1
    b4bc:	05fa0004 	.word	0x05fa0004

0000b4c0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b4c0:	490a      	ldr	r1, [pc, #40]	; (b4ec <_sbrk+0x2c>)
    b4c2:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    b4c4:	b138      	cbz	r0, b4d6 <_sbrk+0x16>
{
    b4c6:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    b4c8:	1813      	adds	r3, r2, r0
    b4ca:	4809      	ldr	r0, [pc, #36]	; (b4f0 <_sbrk+0x30>)
    b4cc:	4283      	cmp	r3, r0
    b4ce:	d804      	bhi.n	b4da <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b4d0:	4610      	mov	r0, r2
                __brkval = prev + incr;
    b4d2:	600b      	str	r3, [r1, #0]
}
    b4d4:	bd08      	pop	{r3, pc}
    b4d6:	4610      	mov	r0, r2
    b4d8:	4770      	bx	lr
                        errno = ENOMEM;
    b4da:	f002 fe33 	bl	e144 <__errno>
    b4de:	230c      	movs	r3, #12
                        return (void *)-1;
    b4e0:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    b4e4:	6003      	str	r3, [r0, #0]
}
    b4e6:	4610      	mov	r0, r2
    b4e8:	bd08      	pop	{r3, pc}
    b4ea:	bf00      	nop
    b4ec:	20003750 	.word	0x20003750
    b4f0:	20280000 	.word	0x20280000

0000b4f4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b4f4:	2000      	movs	r0, #0
    b4f6:	4770      	bx	lr

0000b4f8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b4f8:	f04f 30ff 	mov.w	r0, #4294967295
    b4fc:	4770      	bx	lr
    b4fe:	bf00      	nop

0000b500 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b504:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    b506:	604b      	str	r3, [r1, #4]
}
    b508:	4770      	bx	lr
    b50a:	bf00      	nop

0000b50c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b50c:	2001      	movs	r0, #1
    b50e:	4770      	bx	lr

0000b510 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b510:	f04f 30ff 	mov.w	r0, #4294967295
    b514:	4770      	bx	lr
    b516:	bf00      	nop

0000b518 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    b518:	bf30      	wfi
    b51a:	e7fd      	b.n	b518 <__cxa_pure_virtual>

0000b51c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b51c:	bf30      	wfi
    b51e:	e7fd      	b.n	b51c <abort>

0000b520 <Panic_Temp_isr>:
  unused_interrupt_vector();
    b520:	f7ff bf08 	b.w	b334 <unused_interrupt_vector>

0000b524 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    b524:	4a12      	ldr	r2, [pc, #72]	; (b570 <tempmonGetTemp+0x4c>)
    b526:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    b52a:	075b      	lsls	r3, r3, #29
    b52c:	d5fb      	bpl.n	b526 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b52e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b532:	4810      	ldr	r0, [pc, #64]	; (b574 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b534:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b538:	490f      	ldr	r1, [pc, #60]	; (b578 <tempmonGetTemp+0x54>)
    b53a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b53e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b542:	ed91 6a00 	vldr	s12, [r1]
    b546:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    b54a:	4a0c      	ldr	r2, [pc, #48]	; (b57c <tempmonGetTemp+0x58>)
    b54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    b550:	4b0b      	ldr	r3, [pc, #44]	; (b580 <tempmonGetTemp+0x5c>)
    b552:	edd2 6a00 	vldr	s13, [r2]
    b556:	ee77 7ac7 	vsub.f32	s15, s15, s14
    b55a:	ed93 7a00 	vldr	s14, [r3]
    b55e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    b562:	ee67 7a86 	vmul.f32	s15, s15, s12
    b566:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    b56a:	ee37 0a40 	vsub.f32	s0, s14, s0
    b56e:	4770      	bx	lr
    b570:	400d8100 	.word	0x400d8100
    b574:	20004b88 	.word	0x20004b88
    b578:	20004b90 	.word	0x20004b90
    b57c:	20004b94 	.word	0x20004b94
    b580:	20004b8c 	.word	0x20004b8c

0000b584 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    b584:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    b586:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    b588:	b11b      	cbz	r3, b592 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    b58a:	6853      	ldr	r3, [r2, #4]
    b58c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b590:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    b592:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    b594:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    b596:	b33c      	cbz	r4, b5e8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    b598:	4b1a      	ldr	r3, [pc, #104]	; (b604 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    b59a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    b59c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    b5a0:	420c      	tst	r4, r1
    b5a2:	d11d      	bne.n	b5e0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    b5a4:	4e18      	ldr	r6, [pc, #96]	; (b608 <schedule_transfer+0x84>)
    b5a6:	6877      	ldr	r7, [r6, #4]
    b5a8:	e004      	b.n	b5b4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    b5aa:	6874      	ldr	r4, [r6, #4]
    b5ac:	1be4      	subs	r4, r4, r7
    b5ae:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    b5b2:	d20b      	bcs.n	b5cc <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    b5b4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    b5b8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    b5bc:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    b5c0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    b5c4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    b5c8:	0464      	lsls	r4, r4, #17
    b5ca:	d5ee      	bpl.n	b5aa <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    b5cc:	400d      	ands	r5, r1
    b5ce:	d107      	bne.n	b5e0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    b5d0:	4c0c      	ldr	r4, [pc, #48]	; (b604 <schedule_transfer+0x80>)
		endpoint->status = 0;
    b5d2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    b5d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    b5da:	430b      	orrs	r3, r1
    b5dc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    b5e0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b5e2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    b5e4:	bcf0      	pop	{r4, r5, r6, r7}
    b5e6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    b5e8:	4d06      	ldr	r5, [pc, #24]	; (b604 <schedule_transfer+0x80>)
	endpoint->status = 0;
    b5ea:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    b5ee:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    b5f2:	430b      	orrs	r3, r1
    b5f4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    b5f8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    b5fa:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b5fc:	b662      	cpsie	i
}
    b5fe:	bcf0      	pop	{r4, r5, r6, r7}
    b600:	4770      	bx	lr
    b602:	bf00      	nop
    b604:	402e0000 	.word	0x402e0000
    b608:	e0001000 	.word	0xe0001000

0000b60c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    b60c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    b60e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    b610:	b19d      	cbz	r5, b63a <run_callbacks+0x2e>
    b612:	4606      	mov	r6, r0
    b614:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    b616:	2400      	movs	r4, #0
    b618:	e003      	b.n	b622 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    b61a:	6812      	ldr	r2, [r2, #0]
		count++;
    b61c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    b61e:	2a01      	cmp	r2, #1
    b620:	d00c      	beq.n	b63c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    b622:	6853      	ldr	r3, [r2, #4]
    b624:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    b628:	d0f7      	beq.n	b61a <run_callbacks+0xe>
			ep->first_transfer = t;
    b62a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    b62c:	b12c      	cbz	r4, b63a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    b62e:	4628      	mov	r0, r5
		ep->callback_function(first);
    b630:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    b632:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    b634:	4798      	blx	r3
	while (count) {
    b636:	3c01      	subs	r4, #1
    b638:	d1f9      	bne.n	b62e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    b63a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    b63c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    b640:	e7f4      	b.n	b62c <run_callbacks+0x20>
    b642:	bf00      	nop

0000b644 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    b644:	b430      	push	{r4, r5}
	if (len > 0) {
    b646:	b9d9      	cbnz	r1, b680 <endpoint0_transmit.constprop.0+0x3c>
    b648:	4c1f      	ldr	r4, [pc, #124]	; (b6c8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    b64a:	4b20      	ldr	r3, [pc, #128]	; (b6cc <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    b64c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b64e:	4a20      	ldr	r2, [pc, #128]	; (b6d0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    b650:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b652:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    b656:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b658:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    b65a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b65e:	2480      	movs	r4, #128	; 0x80
    b660:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b662:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    b666:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b66a:	481a      	ldr	r0, [pc, #104]	; (b6d4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    b66c:	432b      	orrs	r3, r5
    b66e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b672:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    b674:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    b678:	2b00      	cmp	r3, #0
    b67a:	d1fb      	bne.n	b674 <endpoint0_transmit.constprop.0+0x30>
}
    b67c:	bc30      	pop	{r4, r5}
    b67e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b680:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    b682:	4b15      	ldr	r3, [pc, #84]	; (b6d8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b684:	4c10      	ldr	r4, [pc, #64]	; (b6c8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    b686:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b688:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b68c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    b68e:	4a10      	ldr	r2, [pc, #64]	; (b6d0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b690:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b692:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    b696:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b698:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b69a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b69e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b6a0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b6a2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b6a6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b6aa:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    b6ac:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b6ae:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    b6b0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    b6b2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    b6b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b6ba:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b6be:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	d1fb      	bne.n	b6be <endpoint0_transmit.constprop.0+0x7a>
    b6c6:	e7c0      	b.n	b64a <endpoint0_transmit.constprop.0+0x6>
    b6c8:	20000000 	.word	0x20000000
    b6cc:	200042c0 	.word	0x200042c0
    b6d0:	402e0000 	.word	0x402e0000
    b6d4:	20004b00 	.word	0x20004b00
    b6d8:	200042e0 	.word	0x200042e0

0000b6dc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    b6dc:	4908      	ldr	r1, [pc, #32]	; (b700 <usb_stop_sof_interrupts+0x24>)
    b6de:	2201      	movs	r2, #1
    b6e0:	780b      	ldrb	r3, [r1, #0]
    b6e2:	fa02 f000 	lsl.w	r0, r2, r0
    b6e6:	ea23 0000 	bic.w	r0, r3, r0
    b6ea:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    b6ec:	b930      	cbnz	r0, b6fc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    b6ee:	4a05      	ldr	r2, [pc, #20]	; (b704 <usb_stop_sof_interrupts+0x28>)
    b6f0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    b6f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b6f8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    b6fc:	4770      	bx	lr
    b6fe:	bf00      	nop
    b700:	20004bf4 	.word	0x20004bf4
    b704:	402e0000 	.word	0x402e0000

0000b708 <usb_isr>:
{
    b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    b70c:	4c97      	ldr	r4, [pc, #604]	; (b96c <usb_isr+0x264>)
{
    b70e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    b710:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b714:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    b716:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b71a:	d553      	bpl.n	b7c4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b71c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    b720:	2a00      	cmp	r2, #0
    b722:	d04a      	beq.n	b7ba <usb_isr+0xb2>
    b724:	4e92      	ldr	r6, [pc, #584]	; (b970 <usb_isr+0x268>)
    b726:	f8df a260 	ldr.w	sl, [pc, #608]	; b988 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    b72a:	f8df 9274 	ldr.w	r9, [pc, #628]	; b9a0 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    b72e:	f8df b274 	ldr.w	fp, [pc, #628]	; b9a4 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b732:	f8df 8274 	ldr.w	r8, [pc, #628]	; b9a8 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    b736:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    b73a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b73e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b746:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b74a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b74e:	049d      	lsls	r5, r3, #18
    b750:	d5f5      	bpl.n	b73e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b752:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b75a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b75e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    b762:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b766:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    b76a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    b76e:	d1fa      	bne.n	b766 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    b770:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    b772:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    b774:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    b778:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    b77c:	f000 81cf 	beq.w	bb1e <usb_isr+0x416>
    b780:	f200 80db 	bhi.w	b93a <usb_isr+0x232>
    b784:	f240 3102 	movw	r1, #770	; 0x302
    b788:	428b      	cmp	r3, r1
    b78a:	f000 81e7 	beq.w	bb5c <usb_isr+0x454>
    b78e:	f200 809a 	bhi.w	b8c6 <usb_isr+0x1be>
    b792:	2b82      	cmp	r3, #130	; 0x82
    b794:	f000 81cb 	beq.w	bb2e <usb_isr+0x426>
    b798:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b79c:	f040 808a 	bne.w	b8b4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    b7a0:	f010 0f78 	tst.w	r0, #120	; 0x78
    b7a4:	b283      	uxth	r3, r0
    b7a6:	f000 8203 	beq.w	bbb0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b7aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    b7ae:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b7b2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    b7b6:	2a00      	cmp	r2, #0
    b7b8:	d1bd      	bne.n	b736 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b7ba:	4a6c      	ldr	r2, [pc, #432]	; (b96c <usb_isr+0x264>)
    b7bc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    b7c0:	2b00      	cmp	r3, #0
    b7c2:	d142      	bne.n	b84a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    b7c4:	067e      	lsls	r6, r7, #25
    b7c6:	d516      	bpl.n	b7f6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b7c8:	4b68      	ldr	r3, [pc, #416]	; (b96c <usb_isr+0x264>)
    b7ca:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    b7ce:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b7d2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    b7d6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b7da:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    b7de:	2c00      	cmp	r4, #0
    b7e0:	d1fb      	bne.n	b7da <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b7e2:	f04f 32ff 	mov.w	r2, #4294967295
    b7e6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b7ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b7ee:	f000 fd2d 	bl	c24c <usb_serial_reset>
		endpointN_notify_mask = 0;
    b7f2:	4b60      	ldr	r3, [pc, #384]	; (b974 <usb_isr+0x26c>)
    b7f4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    b7f6:	01fc      	lsls	r4, r7, #7
    b7f8:	d503      	bpl.n	b802 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b7fa:	4b5f      	ldr	r3, [pc, #380]	; (b978 <usb_isr+0x270>)
    b7fc:	681b      	ldr	r3, [r3, #0]
    b7fe:	b103      	cbz	r3, b802 <usb_isr+0xfa>
    b800:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    b802:	01b8      	lsls	r0, r7, #6
    b804:	d503      	bpl.n	b80e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b806:	4b5d      	ldr	r3, [pc, #372]	; (b97c <usb_isr+0x274>)
    b808:	681b      	ldr	r3, [r3, #0]
    b80a:	b103      	cbz	r3, b80e <usb_isr+0x106>
    b80c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    b80e:	0779      	lsls	r1, r7, #29
    b810:	d508      	bpl.n	b824 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b812:	4b56      	ldr	r3, [pc, #344]	; (b96c <usb_isr+0x264>)
    b814:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    b818:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    b81c:	d047      	beq.n	b8ae <usb_isr+0x1a6>
			usb_high_speed = 1;
    b81e:	4b58      	ldr	r3, [pc, #352]	; (b980 <usb_isr+0x278>)
    b820:	2201      	movs	r2, #1
    b822:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b824:	4b51      	ldr	r3, [pc, #324]	; (b96c <usb_isr+0x264>)
    b826:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    b82a:	061a      	lsls	r2, r3, #24
    b82c:	d50a      	bpl.n	b844 <usb_isr+0x13c>
    b82e:	063b      	lsls	r3, r7, #24
    b830:	d508      	bpl.n	b844 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    b832:	4a54      	ldr	r2, [pc, #336]	; (b984 <usb_isr+0x27c>)
    b834:	7813      	ldrb	r3, [r2, #0]
    b836:	b12b      	cbz	r3, b844 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    b838:	3b01      	subs	r3, #1
    b83a:	b2db      	uxtb	r3, r3
    b83c:	7013      	strb	r3, [r2, #0]
    b83e:	2b00      	cmp	r3, #0
    b840:	f000 8272 	beq.w	bd28 <usb_isr+0x620>
}
    b844:	b003      	add	sp, #12
    b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    b84a:	494f      	ldr	r1, [pc, #316]	; (b988 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    b84c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    b850:	6808      	ldr	r0, [r1, #0]
    b852:	4203      	tst	r3, r0
    b854:	f040 81d1 	bne.w	bbfa <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    b858:	4a46      	ldr	r2, [pc, #280]	; (b974 <usb_isr+0x26c>)
    b85a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    b85c:	401c      	ands	r4, r3
    b85e:	d0b1      	beq.n	b7c4 <usb_isr+0xbc>
				while (tx) {
    b860:	ea5f 4814 	movs.w	r8, r4, lsr #16
    b864:	d010      	beq.n	b888 <usb_isr+0x180>
    b866:	4e42      	ldr	r6, [pc, #264]	; (b970 <usb_isr+0x268>)
					tx &= ~(1<<p);
    b868:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    b86c:	fa98 f5a8 	rbit	r5, r8
    b870:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b874:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    b878:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b87c:	3040      	adds	r0, #64	; 0x40
    b87e:	f7ff fec5 	bl	b60c <run_callbacks>
				while (tx) {
    b882:	ea38 0805 	bics.w	r8, r8, r5
    b886:	d1f1      	bne.n	b86c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    b888:	b2a4      	uxth	r4, r4
				while(rx) {
    b88a:	2c00      	cmp	r4, #0
    b88c:	d09a      	beq.n	b7c4 <usb_isr+0xbc>
    b88e:	4e38      	ldr	r6, [pc, #224]	; (b970 <usb_isr+0x268>)
					rx &= ~(1<<p);
    b890:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    b894:	fa94 f5a4 	rbit	r5, r4
    b898:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    b89c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    b8a0:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    b8a4:	f7ff feb2 	bl	b60c <run_callbacks>
				while(rx) {
    b8a8:	43ac      	bics	r4, r5
    b8aa:	d1f3      	bne.n	b894 <usb_isr+0x18c>
    b8ac:	e78a      	b.n	b7c4 <usb_isr+0xbc>
			usb_high_speed = 0;
    b8ae:	4a34      	ldr	r2, [pc, #208]	; (b980 <usb_isr+0x278>)
    b8b0:	7013      	strb	r3, [r2, #0]
    b8b2:	e7b7      	b.n	b824 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    b8b4:	2b80      	cmp	r3, #128	; 0x80
    b8b6:	f47f af78 	bne.w	b7aa <usb_isr+0xa2>
		reply_buffer[0] = 0;
    b8ba:	4834      	ldr	r0, [pc, #208]	; (b98c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b8bc:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    b8be:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b8c0:	f7ff fec0 	bl	b644 <endpoint0_transmit.constprop.0>
		return;
    b8c4:	e775      	b.n	b7b2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    b8c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    b8ca:	f000 810b 	beq.w	bae4 <usb_isr+0x3dc>
    b8ce:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    b8d2:	2b01      	cmp	r3, #1
    b8d4:	f63f af69 	bhi.w	b7aa <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b8d8:	4b2d      	ldr	r3, [pc, #180]	; (b990 <usb_isr+0x288>)
    b8da:	685d      	ldr	r5, [r3, #4]
    b8dc:	2d00      	cmp	r5, #0
    b8de:	f43f af64 	beq.w	b7aa <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b8e2:	fa1f fc8c 	uxth.w	ip, ip
    b8e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    b8ea:	e004      	b.n	b8f6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b8ec:	691d      	ldr	r5, [r3, #16]
    b8ee:	330c      	adds	r3, #12
    b8f0:	2d00      	cmp	r5, #0
    b8f2:	f43f af5a 	beq.w	b7aa <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b8f6:	881a      	ldrh	r2, [r3, #0]
    b8f8:	4572      	cmp	r2, lr
    b8fa:	d1f7      	bne.n	b8ec <usb_isr+0x1e4>
    b8fc:	885a      	ldrh	r2, [r3, #2]
    b8fe:	4562      	cmp	r2, ip
    b900:	d1f4      	bne.n	b8ec <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    b902:	ea4f 221e 	mov.w	r2, lr, lsr #8
    b906:	2a03      	cmp	r2, #3
    b908:	f000 81a5 	beq.w	bc56 <usb_isr+0x54e>
					datalen = list->length;
    b90c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b90e:	0c00      	lsrs	r0, r0, #16
    b910:	4282      	cmp	r2, r0
    b912:	bf28      	it	cs
    b914:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    b916:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    b91a:	f040 81a1 	bne.w	bc60 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b91e:	4b18      	ldr	r3, [pc, #96]	; (b980 <usb_isr+0x278>)
    b920:	491c      	ldr	r1, [pc, #112]	; (b994 <usb_isr+0x28c>)
    b922:	7818      	ldrb	r0, [r3, #0]
    b924:	4b1c      	ldr	r3, [pc, #112]	; (b998 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b926:	9201      	str	r2, [sp, #4]
    b928:	2800      	cmp	r0, #0
    b92a:	bf18      	it	ne
    b92c:	4619      	movne	r1, r3
    b92e:	481b      	ldr	r0, [pc, #108]	; (b99c <usb_isr+0x294>)
    b930:	f7ff f97c 	bl	ac2c <memcpy>
    b934:	4d19      	ldr	r5, [pc, #100]	; (b99c <usb_isr+0x294>)
    b936:	9a01      	ldr	r2, [sp, #4]
    b938:	e1e1      	b.n	bcfe <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    b93a:	f242 2121 	movw	r1, #8737	; 0x2221
    b93e:	428b      	cmp	r3, r1
    b940:	d07c      	beq.n	ba3c <usb_isr+0x334>
    b942:	d933      	bls.n	b9ac <usb_isr+0x2a4>
    b944:	f242 3121 	movw	r1, #8993	; 0x2321
    b948:	428b      	cmp	r3, r1
    b94a:	f000 8081 	beq.w	ba50 <usb_isr+0x348>
    b94e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    b952:	428b      	cmp	r3, r1
    b954:	f47f af29 	bne.w	b7aa <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    b958:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    b95c:	b283      	uxth	r3, r0
    b95e:	f47f af24 	bne.w	b7aa <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    b962:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    b966:	f363 0c0f 	bfi	ip, r3, #0, #16
    b96a:	e7b5      	b.n	b8d8 <usb_isr+0x1d0>
    b96c:	402e0000 	.word	0x402e0000
    b970:	20000000 	.word	0x20000000
    b974:	20004b04 	.word	0x20004b04
    b978:	20004bd8 	.word	0x20004bd8
    b97c:	20004bdc 	.word	0x20004bdc
    b980:	20004bfb 	.word	0x20004bfb
    b984:	20004bfc 	.word	0x20004bfc
    b988:	20004b00 	.word	0x20004b00
    b98c:	20004b50 	.word	0x20004b50
    b990:	20003108 	.word	0x20003108
    b994:	60001da0 	.word	0x60001da0
    b998:	60001e04 	.word	0x60001e04
    b99c:	20200000 	.word	0x20200000
    b9a0:	20004af8 	.word	0x20004af8
    b9a4:	b8c6cf5d 	.word	0xb8c6cf5d
    b9a8:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    b9ac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    b9b0:	d066      	beq.n	ba80 <usb_isr+0x378>
    b9b2:	f242 0121 	movw	r1, #8225	; 0x2021
    b9b6:	428b      	cmp	r3, r1
    b9b8:	f47f aef7 	bne.w	b7aa <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    b9bc:	0c03      	lsrs	r3, r0, #16
    b9be:	2b07      	cmp	r3, #7
    b9c0:	f47f aef3 	bne.w	b7aa <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    b9c4:	4bb2      	ldr	r3, [pc, #712]	; (bc90 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b9c6:	49b3      	ldr	r1, [pc, #716]	; (bc94 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    b9c8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b9ca:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    b9cc:	49b2      	ldr	r1, [pc, #712]	; (bc98 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    b9ce:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b9d0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    b9d4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    b9d8:	2201      	movs	r2, #1
    b9da:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b9dc:	4aaf      	ldr	r2, [pc, #700]	; (bc9c <usb_isr+0x594>)
    b9de:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b9e0:	4aaf      	ldr	r2, [pc, #700]	; (bca0 <usb_isr+0x598>)
    b9e2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    b9e4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    b9e8:	f041 0101 	orr.w	r1, r1, #1
    b9ec:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b9f0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b9f4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b9f8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b9fa:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    b9fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ba00:	2b00      	cmp	r3, #0
    ba02:	d1fb      	bne.n	b9fc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    ba04:	4aa7      	ldr	r2, [pc, #668]	; (bca4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    ba06:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    ba08:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    ba0a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ba0c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ba0e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ba10:	f248 0380 	movw	r3, #32896	; 0x8080
    ba14:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ba16:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ba1a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ba1e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ba22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ba26:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ba2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ba2e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    ba32:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ba36:	2b00      	cmp	r3, #0
    ba38:	d1fb      	bne.n	ba32 <usb_isr+0x32a>
    ba3a:	e6ba      	b.n	b7b2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    ba3c:	b280      	uxth	r0, r0
    ba3e:	b938      	cbnz	r0, ba50 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ba40:	4b99      	ldr	r3, [pc, #612]	; (bca8 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    ba42:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ba46:	6819      	ldr	r1, [r3, #0]
    ba48:	4b98      	ldr	r3, [pc, #608]	; (bcac <usb_isr+0x5a4>)
    ba4a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ba4c:	4b98      	ldr	r3, [pc, #608]	; (bcb0 <usb_isr+0x5a8>)
    ba4e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    ba50:	4b94      	ldr	r3, [pc, #592]	; (bca4 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    ba52:	2200      	movs	r2, #0
    ba54:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    ba56:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    ba58:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ba5a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ba5c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ba5e:	2280      	movs	r2, #128	; 0x80
    ba60:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ba62:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ba66:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ba6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ba6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ba72:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    ba76:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ba7a:	2b00      	cmp	r3, #0
    ba7c:	d1fb      	bne.n	ba76 <usb_isr+0x36e>
    ba7e:	e698      	b.n	b7b2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    ba80:	f3c2 4207 	ubfx	r2, r2, #16, #8
    ba84:	4b8b      	ldr	r3, [pc, #556]	; (bcb4 <usb_isr+0x5ac>)
    ba86:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ba88:	4b8b      	ldr	r3, [pc, #556]	; (bcb8 <usb_isr+0x5b0>)
    ba8a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ba8e:	4b8b      	ldr	r3, [pc, #556]	; (bcbc <usb_isr+0x5b4>)
    ba90:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ba94:	4b8a      	ldr	r3, [pc, #552]	; (bcc0 <usb_isr+0x5b8>)
    ba96:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    ba9a:	f000 fbd9 	bl	c250 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    ba9e:	2280      	movs	r2, #128	; 0x80
    baa0:	4629      	mov	r1, r5
    baa2:	4888      	ldr	r0, [pc, #544]	; (bcc4 <usb_isr+0x5bc>)
    baa4:	f002 fa5e 	bl	df64 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    baa8:	4b87      	ldr	r3, [pc, #540]	; (bcc8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    baaa:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    baac:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    bab0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    bab4:	4b7b      	ldr	r3, [pc, #492]	; (bca4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    bab6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    bab8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    baba:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    babc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    babe:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    bac0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bac2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    bac6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    baca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bad2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    bad6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    bada:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bade:	2b00      	cmp	r3, #0
    bae0:	d1fb      	bne.n	bada <usb_isr+0x3d2>
    bae2:	e666      	b.n	b7b2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    bae4:	4b6f      	ldr	r3, [pc, #444]	; (bca4 <usb_isr+0x59c>)
    bae6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    bae8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    baea:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    baec:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    baee:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    baf0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    baf2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    baf4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    baf8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    bafc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bb00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bb04:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    bb08:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bb0c:	2b00      	cmp	r3, #0
    bb0e:	d1fb      	bne.n	bb08 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    bb10:	0c13      	lsrs	r3, r2, #16
    bb12:	065b      	lsls	r3, r3, #25
    bb14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    bb18:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    bb1c:	e649      	b.n	b7b2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    bb1e:	4b65      	ldr	r3, [pc, #404]	; (bcb4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    bb20:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    bb22:	486a      	ldr	r0, [pc, #424]	; (bccc <usb_isr+0x5c4>)
    bb24:	781b      	ldrb	r3, [r3, #0]
    bb26:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    bb28:	f7ff fd8c 	bl	b644 <endpoint0_transmit.constprop.0>
		return;
    bb2c:	e641      	b.n	b7b2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    bb2e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    bb30:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    bb34:	f47f ae39 	bne.w	b7aa <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    bb38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    bb3c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    bb40:	4a62      	ldr	r2, [pc, #392]	; (bccc <usb_isr+0x5c4>)
    bb42:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    bb44:	0618      	lsls	r0, r3, #24
    bb46:	f100 809e 	bmi.w	bc86 <usb_isr+0x57e>
    bb4a:	07cb      	lsls	r3, r1, #31
    bb4c:	d501      	bpl.n	bb52 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    bb4e:	2301      	movs	r3, #1
    bb50:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    bb52:	2102      	movs	r1, #2
    bb54:	485d      	ldr	r0, [pc, #372]	; (bccc <usb_isr+0x5c4>)
    bb56:	f7ff fd75 	bl	b644 <endpoint0_transmit.constprop.0>
		return;
    bb5a:	e62a      	b.n	b7b2 <usb_isr+0xaa>
		if (endpoint > 7) break;
    bb5c:	f010 0f78 	tst.w	r0, #120	; 0x78
    bb60:	b283      	uxth	r3, r0
    bb62:	f47f ae22 	bne.w	b7aa <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    bb66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    bb6a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    bb6e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    bb72:	bf14      	ite	ne
    bb74:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    bb78:	f043 0301 	orreq.w	r3, r3, #1
    bb7c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    bb80:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    bb82:	4b48      	ldr	r3, [pc, #288]	; (bca4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    bb84:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    bb86:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    bb88:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    bb8a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    bb8c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    bb8e:	2280      	movs	r2, #128	; 0x80
    bb90:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bb92:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    bb96:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    bb9a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bb9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bba2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    bba6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bbaa:	2b00      	cmp	r3, #0
    bbac:	d1fb      	bne.n	bba6 <usb_isr+0x49e>
    bbae:	e600      	b.n	b7b2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    bbb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    bbb4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    bbb8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    bbbc:	bf14      	ite	ne
    bbbe:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    bbc2:	f023 0301 	biceq.w	r3, r3, #1
    bbc6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    bbca:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    bbcc:	4b35      	ldr	r3, [pc, #212]	; (bca4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    bbce:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    bbd0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    bbd2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    bbd4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    bbd6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    bbd8:	2280      	movs	r2, #128	; 0x80
    bbda:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    bbdc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    bbe0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    bbe4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bbe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bbec:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    bbf0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    bbf4:	2b00      	cmp	r3, #0
    bbf6:	d1fb      	bne.n	bbf0 <usb_isr+0x4e8>
    bbf8:	e5db      	b.n	b7b2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    bbfa:	2000      	movs	r0, #0
    bbfc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    bbfe:	4926      	ldr	r1, [pc, #152]	; (bc98 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    bc00:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    bc02:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    bc04:	f242 0121 	movw	r1, #8225	; 0x2021
    bc08:	428c      	cmp	r4, r1
    bc0a:	f47f ae25 	bne.w	b858 <usb_isr+0x150>
    bc0e:	b280      	uxth	r0, r0
    bc10:	2800      	cmp	r0, #0
    bc12:	f47f ae21 	bne.w	b858 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    bc16:	492e      	ldr	r1, [pc, #184]	; (bcd0 <usb_isr+0x5c8>)
    bc18:	4c2e      	ldr	r4, [pc, #184]	; (bcd4 <usb_isr+0x5cc>)
    bc1a:	c903      	ldmia	r1, {r0, r1}
    bc1c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    bc1e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    bc20:	ea4f 4111 	mov.w	r1, r1, lsr #16
    bc24:	6020      	str	r0, [r4, #0]
    bc26:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    bc28:	f47f ae16 	bne.w	b858 <usb_isr+0x150>
	__disable_irq();
    bc2c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    bc2e:	482a      	ldr	r0, [pc, #168]	; (bcd8 <usb_isr+0x5d0>)
    bc30:	7801      	ldrb	r1, [r0, #0]
    bc32:	f041 0108 	orr.w	r1, r1, #8
    bc36:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    bc38:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    bc3c:	060d      	lsls	r5, r1, #24
    bc3e:	d405      	bmi.n	bc4c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    bc40:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    bc42:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    bc44:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    bc48:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    bc4c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    bc4e:	4a23      	ldr	r2, [pc, #140]	; (bcdc <usb_isr+0x5d4>)
    bc50:	2150      	movs	r1, #80	; 0x50
    bc52:	7011      	strb	r1, [r2, #0]
    bc54:	e600      	b.n	b858 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    bc56:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    bc58:	782a      	ldrb	r2, [r5, #0]
    bc5a:	4282      	cmp	r2, r0
    bc5c:	bf28      	it	cs
    bc5e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    bc60:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    bc64:	d144      	bne.n	bcf0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    bc66:	4b1e      	ldr	r3, [pc, #120]	; (bce0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    bc68:	4d1e      	ldr	r5, [pc, #120]	; (bce4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    bc6a:	7818      	ldrb	r0, [r3, #0]
    bc6c:	491e      	ldr	r1, [pc, #120]	; (bce8 <usb_isr+0x5e0>)
    bc6e:	4b1f      	ldr	r3, [pc, #124]	; (bcec <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    bc70:	9201      	str	r2, [sp, #4]
    bc72:	2800      	cmp	r0, #0
    bc74:	bf18      	it	ne
    bc76:	4619      	movne	r1, r3
    bc78:	4628      	mov	r0, r5
    bc7a:	f7fe ffd7 	bl	ac2c <memcpy>
					usb_descriptor_buffer[1] = 7;
    bc7e:	2307      	movs	r3, #7
    bc80:	706b      	strb	r3, [r5, #1]
    bc82:	9a01      	ldr	r2, [sp, #4]
    bc84:	e03b      	b.n	bcfe <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    bc86:	03c9      	lsls	r1, r1, #15
    bc88:	f53f af61 	bmi.w	bb4e <usb_isr+0x446>
    bc8c:	e761      	b.n	bb52 <usb_isr+0x44a>
    bc8e:	bf00      	nop
    bc90:	200042e0 	.word	0x200042e0
    bc94:	20005af8 	.word	0x20005af8
    bc98:	200044d8 	.word	0x200044d8
    bc9c:	00070080 	.word	0x00070080
    bca0:	20006af8 	.word	0x20006af8
    bca4:	200042c0 	.word	0x200042c0
    bca8:	20004bc4 	.word	0x20004bc4
    bcac:	20004bd4 	.word	0x20004bd4
    bcb0:	20004bf9 	.word	0x20004bf9
    bcb4:	20004bfa 	.word	0x20004bfa
    bcb8:	00cc0002 	.word	0x00cc0002
    bcbc:	000200c8 	.word	0x000200c8
    bcc0:	00c80002 	.word	0x00c80002
    bcc4:	20000080 	.word	0x20000080
    bcc8:	74d59319 	.word	0x74d59319
    bccc:	20004b50 	.word	0x20004b50
    bcd0:	20004af8 	.word	0x20004af8
    bcd4:	20004bcc 	.word	0x20004bcc
    bcd8:	20004bf4 	.word	0x20004bf4
    bcdc:	20004bfc 	.word	0x20004bfc
    bce0:	20004bfb 	.word	0x20004bfb
    bce4:	20200000 	.word	0x20200000
    bce8:	60001e04 	.word	0x60001e04
    bcec:	60001da0 	.word	0x60001da0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    bcf0:	4629      	mov	r1, r5
    bcf2:	4d10      	ldr	r5, [pc, #64]	; (bd34 <usb_isr+0x62c>)
    bcf4:	9201      	str	r2, [sp, #4]
    bcf6:	4628      	mov	r0, r5
    bcf8:	f7fe ff98 	bl	ac2c <memcpy>
    bcfc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bcfe:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    bd02:	4415      	add	r5, r2
	asm("dsb");
    bd04:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    bd08:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd0c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    bd10:	3320      	adds	r3, #32
	} while (location < end_addr);
    bd12:	429d      	cmp	r5, r3
    bd14:	d8fa      	bhi.n	bd0c <usb_isr+0x604>
	asm("dsb");
    bd16:	f3bf 8f4f 	dsb	sy
	asm("isb");
    bd1a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    bd1e:	4805      	ldr	r0, [pc, #20]	; (bd34 <usb_isr+0x62c>)
    bd20:	4611      	mov	r1, r2
    bd22:	f7ff fc8f 	bl	b644 <endpoint0_transmit.constprop.0>
				return;
    bd26:	e544      	b.n	b7b2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    bd28:	2003      	movs	r0, #3
    bd2a:	f7ff fcd7 	bl	b6dc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    bd2e:	f005 fe43 	bl	119b8 <___reboot_Teensyduino__veneer>
    bd32:	bf00      	nop
    bd34:	20200000 	.word	0x20200000

0000bd38 <usb_config_rx>:
{
    bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd3c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    bd3e:	1e83      	subs	r3, r0, #2
    bd40:	2b02      	cmp	r3, #2
    bd42:	d901      	bls.n	bd48 <usb_config_rx+0x10>
}
    bd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    bd48:	f8df 904c 	ldr.w	r9, [pc, #76]	; bd98 <usb_config_rx+0x60>
    bd4c:	4615      	mov	r5, r2
    bd4e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    bd50:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    bd52:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    bd56:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    bd58:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    bd5c:	2100      	movs	r1, #0
    bd5e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bd62:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    bd64:	f002 f8fe 	bl	df64 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bd68:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    bd6c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bd6e:	0952      	lsrs	r2, r2, #5
    bd70:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    bd74:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    bd78:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    bd7c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    bd80:	2f00      	cmp	r7, #0
    bd82:	d0df      	beq.n	bd44 <usb_config_rx+0xc>
    bd84:	4a03      	ldr	r2, [pc, #12]	; (bd94 <usb_config_rx+0x5c>)
    bd86:	40b3      	lsls	r3, r6
    bd88:	6811      	ldr	r1, [r2, #0]
    bd8a:	430b      	orrs	r3, r1
    bd8c:	6013      	str	r3, [r2, #0]
}
    bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd92:	bf00      	nop
    bd94:	20004b04 	.word	0x20004b04
    bd98:	20000000 	.word	0x20000000

0000bd9c <usb_config_tx>:
{
    bd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    bda2:	1e81      	subs	r1, r0, #2
    bda4:	2902      	cmp	r1, #2
    bda6:	d901      	bls.n	bdac <usb_config_tx+0x10>
}
    bda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    bdac:	01c7      	lsls	r7, r0, #7
    bdae:	f8df 904c 	ldr.w	r9, [pc, #76]	; bdfc <usb_config_tx+0x60>
    bdb2:	4692      	mov	sl, r2
    bdb4:	4604      	mov	r4, r0
    bdb6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    bdb8:	223c      	movs	r2, #60	; 0x3c
    bdba:	2100      	movs	r1, #0
    bdbc:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    bdbe:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bdc2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    bdc4:	f108 0004 	add.w	r0, r8, #4
    bdc8:	f002 f8cc 	bl	df64 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bdcc:	faba f28a 	clz	r2, sl
    bdd0:	0952      	lsrs	r2, r2, #5
    bdd2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    bdd6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    bdda:	2201      	movs	r2, #1
	qh->callback_function = callback;
    bddc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    bde0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    bde4:	2e00      	cmp	r6, #0
    bde6:	d0df      	beq.n	bda8 <usb_config_tx+0xc>
    bde8:	4b03      	ldr	r3, [pc, #12]	; (bdf8 <usb_config_tx+0x5c>)
    bdea:	3410      	adds	r4, #16
    bdec:	6819      	ldr	r1, [r3, #0]
    bdee:	40a2      	lsls	r2, r4
    bdf0:	430a      	orrs	r2, r1
    bdf2:	601a      	str	r2, [r3, #0]
}
    bdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdf8:	20004b04 	.word	0x20004b04
    bdfc:	20000000 	.word	0x20000000

0000be00 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    be00:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    be02:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    be04:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    be06:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    be0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    be0e:	b410      	push	{r4}
	transfer->next = 1;
    be10:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    be12:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    be14:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    be18:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    be1a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    be1e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    be22:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    be24:	6181      	str	r1, [r0, #24]
}
    be26:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    be2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    be2e:	4770      	bx	lr

0000be30 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    be30:	1e83      	subs	r3, r0, #2
{
    be32:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    be34:	2b02      	cmp	r3, #2
    be36:	d900      	bls.n	be3a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    be38:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    be3a:	4b06      	ldr	r3, [pc, #24]	; (be54 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    be3c:	f100 0110 	add.w	r1, r0, #16
    be40:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    be44:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    be48:	fa0c f101 	lsl.w	r1, ip, r1
    be4c:	3040      	adds	r0, #64	; 0x40
    be4e:	f7ff bb99 	b.w	b584 <schedule_transfer>
    be52:	bf00      	nop
    be54:	20000000 	.word	0x20000000

0000be58 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    be58:	1e83      	subs	r3, r0, #2
{
    be5a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    be5c:	2b02      	cmp	r3, #2
    be5e:	d900      	bls.n	be62 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    be60:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    be62:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    be64:	4b02      	ldr	r3, [pc, #8]	; (be70 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    be66:	4081      	lsls	r1, r0
    be68:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    be6c:	f7ff bb8a 	b.w	b584 <schedule_transfer>
    be70:	20000000 	.word	0x20000000

0000be74 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    be74:	6840      	ldr	r0, [r0, #4]
#endif
}
    be76:	4770      	bx	lr

0000be78 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    be78:	4a12      	ldr	r2, [pc, #72]	; (bec4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    be7a:	4b13      	ldr	r3, [pc, #76]	; (bec8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    be7c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    be80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    be84:	4298      	cmp	r0, r3
{
    be86:	b510      	push	{r4, lr}
    be88:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    be8a:	d202      	bcs.n	be92 <usb_init_serialnumber+0x1a>
    be8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    be90:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    be92:	4c0e      	ldr	r4, [pc, #56]	; (becc <usb_init_serialnumber+0x54>)
    be94:	a901      	add	r1, sp, #4
    be96:	220a      	movs	r2, #10
    be98:	f7fe ff6a 	bl	ad70 <ultoa>
	for (i=0; i<10; i++) {
    be9c:	a901      	add	r1, sp, #4
    be9e:	2300      	movs	r3, #0
    bea0:	4620      	mov	r0, r4
		char c = buf[i];
    bea2:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    bea6:	3301      	adds	r3, #1
		if (!c) break;
    bea8:	b13a      	cbz	r2, beba <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    beaa:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    beac:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    beb0:	d1f7      	bne.n	bea2 <usb_init_serialnumber+0x2a>
    beb2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    beb4:	7023      	strb	r3, [r4, #0]
}
    beb6:	b004      	add	sp, #16
    beb8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    beba:	005b      	lsls	r3, r3, #1
    bebc:	b2db      	uxtb	r3, r3
    bebe:	7023      	strb	r3, [r4, #0]
}
    bec0:	b004      	add	sp, #16
    bec2:	bd10      	pop	{r4, pc}
    bec4:	401f4400 	.word	0x401f4400
    bec8:	00989680 	.word	0x00989680
    becc:	20003d38 	.word	0x20003d38

0000bed0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    bed0:	f000 badc 	b.w	c48c <usb_serial_flush_input>

0000bed4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    bed4:	f000 baac 	b.w	c430 <usb_serial_peekchar>

0000bed8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    bed8:	f000 bb10 	b.w	c4fc <usb_serial_getchar>

0000bedc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    bedc:	f000 baca 	b.w	c474 <usb_serial_available>

0000bee0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    bee0:	f000 bb66 	b.w	c5b0 <usb_serial_flush_output>

0000bee4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    bee4:	f000 bb3c 	b.w	c560 <usb_serial_write_buffer_free>

0000bee8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bee8:	4608      	mov	r0, r1
    beea:	4611      	mov	r1, r2
    beec:	f000 bb2c 	b.w	c548 <usb_serial_write>

0000bef0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    bef2:	4c14      	ldr	r4, [pc, #80]	; (bf44 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bef4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bef8:	4e13      	ldr	r6, [pc, #76]	; (bf48 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    befa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    befe:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bf02:	4f12      	ldr	r7, [pc, #72]	; (bf4c <rx_queue_transfer+0x5c>)
    bf04:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    bf08:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bf0a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bf0e:	4621      	mov	r1, r4
    bf10:	883a      	ldrh	r2, [r7, #0]
    bf12:	4630      	mov	r0, r6
    bf14:	f7ff ff74 	bl	be00 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    bf18:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    bf1a:	4423      	add	r3, r4
	asm("dsb");
    bf1c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bf20:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    bf24:	3420      	adds	r4, #32
	} while (location < end_addr);
    bf26:	42a3      	cmp	r3, r4
    bf28:	d8fa      	bhi.n	bf20 <rx_queue_transfer+0x30>
	asm("dsb");
    bf2a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    bf2e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    bf32:	2003      	movs	r0, #3
    bf34:	4631      	mov	r1, r6
    bf36:	f7ff ff8f 	bl	be58 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bf3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    bf3e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    bf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf44:	20200080 	.word	0x20200080
    bf48:	20004300 	.word	0x20004300
    bf4c:	20004be6 	.word	0x20004be6

0000bf50 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bf50:	4b24      	ldr	r3, [pc, #144]	; (bfe4 <rx_event+0x94>)
{
    bf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bf56:	881c      	ldrh	r4, [r3, #0]
    bf58:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    bf5a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bf5c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    bf60:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    bf62:	2c00      	cmp	r4, #0
    bf64:	dd24      	ble.n	bfb0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    bf66:	4920      	ldr	r1, [pc, #128]	; (bfe8 <rx_event+0x98>)
		if (head != rx_tail) {
    bf68:	4820      	ldr	r0, [pc, #128]	; (bfec <rx_event+0x9c>)
		uint32_t head = rx_head;
    bf6a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    bf6c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    bf6e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    bf70:	4e1f      	ldr	r6, [pc, #124]	; (bff0 <rx_event+0xa0>)
		if (head != rx_tail) {
    bf72:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    bf74:	481f      	ldr	r0, [pc, #124]	; (bff4 <rx_event+0xa4>)
		if (head != rx_tail) {
    bf76:	d007      	beq.n	bf88 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    bf78:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    bf7c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    bf80:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    bf84:	4294      	cmp	r4, r2
    bf86:	d918      	bls.n	bfba <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    bf88:	3301      	adds	r3, #1
		rx_index[i] = 0;
    bf8a:	2200      	movs	r2, #0
		rx_count[i] = len;
    bf8c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    bf90:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    bf92:	4e19      	ldr	r6, [pc, #100]	; (bff8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    bf94:	bf88      	it	hi
    bf96:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    bf98:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    bf9c:	bf98      	it	ls
    bf9e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    bfa0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    bfa2:	4b16      	ldr	r3, [pc, #88]	; (bffc <rx_event+0xac>)
		rx_head = head;
    bfa4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    bfa6:	681a      	ldr	r2, [r3, #0]
    bfa8:	4414      	add	r4, r2
    bfaa:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    bfb0:	4628      	mov	r0, r5
}
    bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    bfb6:	f7ff bf9b 	b.w	bef0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    bfba:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    bfbe:	4910      	ldr	r1, [pc, #64]	; (c000 <rx_event+0xb0>)
    bfc0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    bfc2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    bfc4:	4408      	add	r0, r1
    bfc6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    bfca:	f7fe fe2f 	bl	ac2c <memcpy>
				rx_available += len;
    bfce:	4a0b      	ldr	r2, [pc, #44]	; (bffc <rx_event+0xac>)
				rx_queue_transfer(i);
    bfd0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    bfd2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    bfd6:	6813      	ldr	r3, [r2, #0]
    bfd8:	4423      	add	r3, r4
}
    bfda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    bfde:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    bfe0:	f7ff bf86 	b.w	bef0 <rx_queue_transfer>
    bfe4:	20004be6 	.word	0x20004be6
    bfe8:	20004bf2 	.word	0x20004bf2
    bfec:	20004bf3 	.word	0x20004bf3
    bff0:	20004b5c 	.word	0x20004b5c
    bff4:	20004b7c 	.word	0x20004b7c
    bff8:	20004b6c 	.word	0x20004b6c
    bffc:	20004b58 	.word	0x20004b58
    c000:	20200080 	.word	0x20200080

0000c004 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    c004:	4b1d      	ldr	r3, [pc, #116]	; (c07c <usb_serial_flush_callback+0x78>)
    c006:	781a      	ldrb	r2, [r3, #0]
    c008:	2a00      	cmp	r2, #0
    c00a:	d136      	bne.n	c07a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    c00c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    c010:	4a1b      	ldr	r2, [pc, #108]	; (c080 <usb_serial_flush_callback+0x7c>)
    c012:	7812      	ldrb	r2, [r2, #0]
    c014:	b38a      	cbz	r2, c07a <usb_serial_flush_callback+0x76>
{
    c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    c01a:	4d1a      	ldr	r5, [pc, #104]	; (c084 <usb_serial_flush_callback+0x80>)
    c01c:	882a      	ldrh	r2, [r5, #0]
    c01e:	b352      	cbz	r2, c076 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    c020:	4e19      	ldr	r6, [pc, #100]	; (c088 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    c022:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    c026:	4f19      	ldr	r7, [pc, #100]	; (c08c <usb_serial_flush_callback+0x88>)
    c028:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c02a:	4c19      	ldr	r4, [pc, #100]	; (c090 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    c02c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c030:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    c034:	4642      	mov	r2, r8
    c036:	4638      	mov	r0, r7
    c038:	4621      	mov	r1, r4
    c03a:	f7ff fee1 	bl	be00 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    c03e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    c042:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c046:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c04a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    c04e:	3420      	adds	r4, #32
	} while (location < end_addr);
    c050:	42a2      	cmp	r2, r4
    c052:	d8fa      	bhi.n	c04a <usb_serial_flush_callback+0x46>
	asm("dsb");
    c054:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c058:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    c05c:	2004      	movs	r0, #4
    c05e:	4639      	mov	r1, r7
    c060:	f7ff fee6 	bl	be30 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c064:	7833      	ldrb	r3, [r6, #0]
    c066:	3301      	adds	r3, #1
    c068:	b2db      	uxtb	r3, r3
    c06a:	2b03      	cmp	r3, #3
    c06c:	bf88      	it	hi
    c06e:	2300      	movhi	r3, #0
    c070:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    c072:	2300      	movs	r3, #0
    c074:	802b      	strh	r3, [r5, #0]
}
    c076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c07a:	4770      	bx	lr
    c07c:	20004bf8 	.word	0x20004bf8
    c080:	20004bfa 	.word	0x20004bfa
    c084:	20004be8 	.word	0x20004be8
    c088:	20004bf7 	.word	0x20004bf7
    c08c:	20004400 	.word	0x20004400
    c090:	20201080 	.word	0x20201080

0000c094 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    c094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c098:	b085      	sub	sp, #20
	while (size > 0) {
    c09a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    c09e:	2900      	cmp	r1, #0
    c0a0:	f000 80bf 	beq.w	c222 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    c0a4:	2300      	movs	r3, #0
    c0a6:	4c60      	ldr	r4, [pc, #384]	; (c228 <usb_serial_write.part.0+0x194>)
    c0a8:	f8df 8198 	ldr.w	r8, [pc, #408]	; c244 <usb_serial_write.part.0+0x1b0>
    c0ac:	f8df a198 	ldr.w	sl, [pc, #408]	; c248 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    c0b0:	4f5e      	ldr	r7, [pc, #376]	; (c22c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    c0b2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    c0b4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    c0b6:	4a5e      	ldr	r2, [pc, #376]	; (c230 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    c0b8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    c0ba:	4b5e      	ldr	r3, [pc, #376]	; (c234 <usb_serial_write.part.0+0x1a0>)
    c0bc:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    c0be:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    c0c2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    c0c6:	2b00      	cmp	r3, #0
    c0c8:	f040 80a7 	bne.w	c21a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    c0cc:	461e      	mov	r6, r3
		int waiting=0;
    c0ce:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    c0d0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    c0d2:	4648      	mov	r0, r9
    c0d4:	f7ff fece 	bl	be74 <usb_transfer_status>
			if (!(status & 0x80)) {
    c0d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    c0dc:	f000 808c 	beq.w	c1f8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    c0e0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    c0e4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    c0e8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    c0ec:	b905      	cbnz	r5, c0f0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    c0ee:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d17d      	bne.n	c1f0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    c0f4:	683b      	ldr	r3, [r7, #0]
    c0f6:	1b9b      	subs	r3, r3, r6
    c0f8:	2b78      	cmp	r3, #120	; 0x78
    c0fa:	f200 8087 	bhi.w	c20c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    c0fe:	4b4e      	ldr	r3, [pc, #312]	; (c238 <usb_serial_write.part.0+0x1a4>)
    c100:	781b      	ldrb	r3, [r3, #0]
    c102:	2b00      	cmp	r3, #0
    c104:	d074      	beq.n	c1f0 <usb_serial_write.part.0+0x15c>
			yield();
    c106:	f000 fa9d 	bl	c644 <yield>
			tx_noautoflush = 1;
    c10a:	2201      	movs	r2, #1
		while (!tx_available) {
    c10c:	f8b8 3000 	ldrh.w	r3, [r8]
    c110:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    c112:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    c114:	2b00      	cmp	r3, #0
    c116:	d0dc      	beq.n	c0d2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c118:	4a46      	ldr	r2, [pc, #280]	; (c234 <usb_serial_write.part.0+0x1a0>)
    c11a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    c11e:	7811      	ldrb	r1, [r2, #0]
    c120:	461a      	mov	r2, r3
    c122:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    c126:	4d45      	ldr	r5, [pc, #276]	; (c23c <usb_serial_write.part.0+0x1a8>)
    c128:	02c9      	lsls	r1, r1, #11
    c12a:	4428      	add	r0, r5
		if (size >= tx_available) {
    c12c:	9d01      	ldr	r5, [sp, #4]
    c12e:	4295      	cmp	r5, r2
    c130:	d217      	bcs.n	c162 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    c132:	9303      	str	r3, [sp, #12]
    c134:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    c138:	462a      	mov	r2, r5
    c13a:	f7fe fd77 	bl	ac2c <memcpy>
			tx_available -= size;
    c13e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    c140:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    c144:	1b5b      	subs	r3, r3, r5
    c146:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    c14a:	4b3d      	ldr	r3, [pc, #244]	; (c240 <usb_serial_write.part.0+0x1ac>)
    c14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    c150:	f3bf 8f4f 	dsb	sy
			sent += size;
    c154:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    c156:	2300      	movs	r3, #0
			sent += size;
    c158:	4428      	add	r0, r5
		tx_noautoflush = 0;
    c15a:	7023      	strb	r3, [r4, #0]
}
    c15c:	b005      	add	sp, #20
    c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c162:	4b36      	ldr	r3, [pc, #216]	; (c23c <usb_serial_write.part.0+0x1a8>)
    c164:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    c166:	9902      	ldr	r1, [sp, #8]
    c168:	f7fe fd60 	bl	ac2c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    c16c:	2300      	movs	r3, #0
    c16e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c172:	4629      	mov	r1, r5
    c174:	4648      	mov	r0, r9
    c176:	f7ff fe43 	bl	be00 <usb_prepare_transfer>
	asm("dsb");
    c17a:	f3bf 8f4f 	dsb	sy
    c17e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c182:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    c186:	4293      	cmp	r3, r2
    c188:	bf34      	ite	cc
    c18a:	2301      	movcc	r3, #1
    c18c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    c18e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c192:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    c196:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    c19a:	3520      	adds	r5, #32
	} while (location < end_addr);
    c19c:	42ab      	cmp	r3, r5
    c19e:	d1fa      	bne.n	c196 <usb_serial_write.part.0+0x102>
	asm("dsb");
    c1a0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c1a4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    c1a8:	2004      	movs	r0, #4
    c1aa:	4649      	mov	r1, r9
    c1ac:	f7ff fe40 	bl	be30 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    c1b0:	4a20      	ldr	r2, [pc, #128]	; (c234 <usb_serial_write.part.0+0x1a0>)
    c1b2:	7813      	ldrb	r3, [r2, #0]
    c1b4:	3301      	adds	r3, #1
    c1b6:	b2db      	uxtb	r3, r3
    c1b8:	2b03      	cmp	r3, #3
    c1ba:	bf84      	itt	hi
    c1bc:	2300      	movhi	r3, #0
    c1be:	4a1d      	ldrhi	r2, [pc, #116]	; (c234 <usb_serial_write.part.0+0x1a0>)
    c1c0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    c1c2:	f8b8 3000 	ldrh.w	r3, [r8]
    c1c6:	9a01      	ldr	r2, [sp, #4]
    c1c8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    c1ca:	9a00      	ldr	r2, [sp, #0]
    c1cc:	441a      	add	r2, r3
			size -= tx_available;
    c1ce:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    c1d0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    c1d2:	9a02      	ldr	r2, [sp, #8]
    c1d4:	441a      	add	r2, r3
			tx_available = 0;
    c1d6:	2300      	movs	r3, #0
			data += tx_available;
    c1d8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    c1da:	4a19      	ldr	r2, [pc, #100]	; (c240 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    c1dc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    c1e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    c1e4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    c1e8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    c1ea:	2900      	cmp	r1, #0
    c1ec:	f47f af62 	bne.w	c0b4 <usb_serial_write.part.0+0x20>
	return sent;
    c1f0:	9800      	ldr	r0, [sp, #0]
}
    c1f2:	b005      	add	sp, #20
    c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    c1f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c1fc:	4b0d      	ldr	r3, [pc, #52]	; (c234 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    c1fe:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c202:	7819      	ldrb	r1, [r3, #0]
				break;
    c204:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    c206:	f8a8 2000 	strh.w	r2, [r8]
				break;
    c20a:	e78a      	b.n	c122 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    c20c:	2301      	movs	r3, #1
				return sent;
    c20e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    c210:	f88a 3000 	strb.w	r3, [sl]
}
    c214:	b005      	add	sp, #20
    c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    c21a:	461a      	mov	r2, r3
    c21c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    c220:	e77f      	b.n	c122 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    c222:	9801      	ldr	r0, [sp, #4]
	return sent;
    c224:	e7e5      	b.n	c1f2 <usb_serial_write.part.0+0x15e>
    c226:	bf00      	nop
    c228:	20004bf8 	.word	0x20004bf8
    c22c:	20004bc4 	.word	0x20004bc4
    c230:	20004400 	.word	0x20004400
    c234:	20004bf7 	.word	0x20004bf7
    c238:	20004bfa 	.word	0x20004bfa
    c23c:	20201080 	.word	0x20201080
    c240:	402e0000 	.word	0x402e0000
    c244:	20004be8 	.word	0x20004be8
    c248:	20004bf6 	.word	0x20004bf6

0000c24c <usb_serial_reset>:
}
    c24c:	4770      	bx	lr
    c24e:	bf00      	nop

0000c250 <usb_serial_configure>:
	if (usb_high_speed) {
    c250:	4b2d      	ldr	r3, [pc, #180]	; (c308 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c252:	2100      	movs	r1, #0
    c254:	2280      	movs	r2, #128	; 0x80
    c256:	482d      	ldr	r0, [pc, #180]	; (c30c <usb_serial_configure+0xbc>)
{
    c258:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c25a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    c25c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    c25e:	4d2c      	ldr	r5, [pc, #176]	; (c310 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    c260:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    c262:	4e2c      	ldr	r6, [pc, #176]	; (c314 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    c264:	bf0c      	ite	eq
    c266:	2340      	moveq	r3, #64	; 0x40
    c268:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    c26c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    c26e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c270:	f001 fe78 	bl	df64 <memset>
	tx_head = 0;
    c274:	4a28      	ldr	r2, [pc, #160]	; (c318 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c276:	4621      	mov	r1, r4
	tx_available = 0;
    c278:	4b28      	ldr	r3, [pc, #160]	; (c31c <usb_serial_configure+0xcc>)
	tx_head = 0;
    c27a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c27c:	f44f 7280 	mov.w	r2, #256	; 0x100
    c280:	4827      	ldr	r0, [pc, #156]	; (c320 <usb_serial_configure+0xd0>)
	tx_available = 0;
    c282:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c284:	f001 fe6e 	bl	df64 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    c288:	4a26      	ldr	r2, [pc, #152]	; (c324 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c28a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    c28c:	4b26      	ldr	r3, [pc, #152]	; (c328 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c28e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    c290:	e9c2 4400 	strd	r4, r4, [r2]
    c294:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    c298:	4a24      	ldr	r2, [pc, #144]	; (c32c <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    c29a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    c29e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    c2a0:	4a23      	ldr	r2, [pc, #140]	; (c330 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    c2a2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    c2a6:	4b23      	ldr	r3, [pc, #140]	; (c334 <usb_serial_configure+0xe4>)
    c2a8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c2aa:	4623      	mov	r3, r4
	rx_available = 0;
    c2ac:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    c2ae:	4622      	mov	r2, r4
    c2b0:	f7ff fd74 	bl	bd9c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c2b4:	4622      	mov	r2, r4
    c2b6:	8831      	ldrh	r1, [r6, #0]
    c2b8:	2003      	movs	r0, #3
    c2ba:	4b1f      	ldr	r3, [pc, #124]	; (c338 <usb_serial_configure+0xe8>)
    c2bc:	f7ff fd3c 	bl	bd38 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    c2c0:	4623      	mov	r3, r4
    c2c2:	2201      	movs	r2, #1
    c2c4:	8829      	ldrh	r1, [r5, #0]
    c2c6:	2004      	movs	r0, #4
    c2c8:	f7ff fd68 	bl	bd9c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c2cc:	4620      	mov	r0, r4
    c2ce:	3401      	adds	r4, #1
    c2d0:	f7ff fe0e 	bl	bef0 <rx_queue_transfer>
    c2d4:	2c08      	cmp	r4, #8
    c2d6:	d1f9      	bne.n	c2cc <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    c2d8:	4b18      	ldr	r3, [pc, #96]	; (c33c <usb_serial_configure+0xec>)
    c2da:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    c2dc:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    c2de:	4818      	ldr	r0, [pc, #96]	; (c340 <usb_serial_configure+0xf0>)
    c2e0:	4c18      	ldr	r4, [pc, #96]	; (c344 <usb_serial_configure+0xf4>)
    c2e2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    c2e4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    c2e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    c2ec:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    c2f0:	4915      	ldr	r1, [pc, #84]	; (c348 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    c2f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    c2f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    c2fa:	b121      	cbz	r1, c306 <usb_serial_configure+0xb6>
    c2fc:	4a13      	ldr	r2, [pc, #76]	; (c34c <usb_serial_configure+0xfc>)
    c2fe:	7813      	ldrb	r3, [r2, #0]
    c300:	f043 0301 	orr.w	r3, r3, #1
    c304:	7013      	strb	r3, [r2, #0]
}
    c306:	bd70      	pop	{r4, r5, r6, pc}
    c308:	20004bfb 	.word	0x20004bfb
    c30c:	20004400 	.word	0x20004400
    c310:	20004bea 	.word	0x20004bea
    c314:	20004be6 	.word	0x20004be6
    c318:	20004bf7 	.word	0x20004bf7
    c31c:	20004be8 	.word	0x20004be8
    c320:	20004300 	.word	0x20004300
    c324:	20004b5c 	.word	0x20004b5c
    c328:	20004b6c 	.word	0x20004b6c
    c32c:	20004bf2 	.word	0x20004bf2
    c330:	20004b58 	.word	0x20004b58
    c334:	20004bf3 	.word	0x20004bf3
    c338:	0000bf51 	.word	0x0000bf51
    c33c:	402e0000 	.word	0x402e0000
    c340:	20004bd8 	.word	0x20004bd8
    c344:	0000c005 	.word	0x0000c005
    c348:	00000000 	.word	0x00000000
    c34c:	20004bfd 	.word	0x20004bfd

0000c350 <usb_serial_read>:
{
    c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    c35c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c428 <usb_serial_read+0xd8>
{
    c360:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c362:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    c366:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    c368:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    c36c:	2900      	cmp	r1, #0
    c36e:	d04f      	beq.n	c410 <usb_serial_read+0xc0>
    c370:	4680      	mov	r8, r0
    c372:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    c374:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    c376:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c42c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    c37a:	4b26      	ldr	r3, [pc, #152]	; (c414 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    c37c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c380:	4925      	ldr	r1, [pc, #148]	; (c418 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    c386:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    c38a:	d03f      	beq.n	c40c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    c38c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    c38e:	4b23      	ldr	r3, [pc, #140]	; (c41c <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c390:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    c392:	bf28      	it	cs
    c394:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    c396:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    c398:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c39c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    c3a0:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    c3a2:	4b1f      	ldr	r3, [pc, #124]	; (c420 <usb_serial_read+0xd0>)
    c3a4:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    c3a8:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    c3ac:	42aa      	cmp	r2, r5
    c3ae:	d21c      	bcs.n	c3ea <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    c3b0:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    c3b4:	4918      	ldr	r1, [pc, #96]	; (c418 <usb_serial_read+0xc8>)
			rx_available -= len;
    c3b6:	4c1b      	ldr	r4, [pc, #108]	; (c424 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    c3b8:	4461      	add	r1, ip
    c3ba:	9201      	str	r2, [sp, #4]
    c3bc:	f7fe fc36 	bl	ac2c <memcpy>
			rx_available -= len;
    c3c0:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    c3c2:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    c3c6:	4658      	mov	r0, fp
			rx_index[i] += len;
    c3c8:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    c3ca:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    c3ce:	442a      	add	r2, r5
			rx_available -= len;
    c3d0:	4439      	add	r1, r7
			rx_index[i] += len;
    c3d2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    c3d6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c3d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c3dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c3e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    c3e4:	b003      	add	sp, #12
    c3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c3ea:	462a      	mov	r2, r5
			count += avail;
    c3ec:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    c3ee:	f7fe fc1d 	bl	ac2c <memcpy>
			rx_available -= avail;
    c3f2:	490c      	ldr	r1, [pc, #48]	; (c424 <usb_serial_read+0xd4>)
			rx_tail = tail;
    c3f4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    c3f6:	4630      	mov	r0, r6
			rx_available -= avail;
    c3f8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    c3fa:	44a8      	add	r8, r5
			rx_available -= avail;
    c3fc:	1b52      	subs	r2, r2, r5
    c3fe:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    c400:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    c404:	f7ff fd74 	bl	bef0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    c408:	45bb      	cmp	fp, r7
    c40a:	d8b6      	bhi.n	c37a <usb_serial_read+0x2a>
	return count;
    c40c:	4638      	mov	r0, r7
    c40e:	e7e3      	b.n	c3d8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    c410:	4608      	mov	r0, r1
    c412:	e7e1      	b.n	c3d8 <usb_serial_read+0x88>
    c414:	20004bf2 	.word	0x20004bf2
    c418:	20200080 	.word	0x20200080
    c41c:	20004b7c 	.word	0x20004b7c
    c420:	20004b5c 	.word	0x20004b5c
    c424:	20004b58 	.word	0x20004b58
    c428:	20004bf3 	.word	0x20004bf3
    c42c:	20004b6c 	.word	0x20004b6c

0000c430 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    c430:	4b0b      	ldr	r3, [pc, #44]	; (c460 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    c432:	4a0c      	ldr	r2, [pc, #48]	; (c464 <usb_serial_peekchar+0x34>)
    c434:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    c436:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    c438:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    c43a:	428a      	cmp	r2, r1
    c43c:	d00d      	beq.n	c45a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    c43e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    c440:	4809      	ldr	r0, [pc, #36]	; (c468 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    c442:	4a0a      	ldr	r2, [pc, #40]	; (c46c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    c444:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    c446:	490a      	ldr	r1, [pc, #40]	; (c470 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    c448:	bf28      	it	cs
    c44a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c44c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    c44e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    c452:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    c456:	5c58      	ldrb	r0, [r3, r1]
    c458:	4770      	bx	lr
	if (tail == rx_head) return -1;
    c45a:	f04f 30ff 	mov.w	r0, #4294967295
}
    c45e:	4770      	bx	lr
    c460:	20004bf2 	.word	0x20004bf2
    c464:	20004bf3 	.word	0x20004bf3
    c468:	20004b7c 	.word	0x20004b7c
    c46c:	20200080 	.word	0x20200080
    c470:	20004b6c 	.word	0x20004b6c

0000c474 <usb_serial_available>:
	uint32_t n = rx_available;
    c474:	4b04      	ldr	r3, [pc, #16]	; (c488 <usb_serial_available+0x14>)
{
    c476:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    c478:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    c47a:	b10c      	cbz	r4, c480 <usb_serial_available+0xc>
}
    c47c:	4620      	mov	r0, r4
    c47e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    c480:	f000 f8e0 	bl	c644 <yield>
}
    c484:	4620      	mov	r0, r4
    c486:	bd10      	pop	{r4, pc}
    c488:	20004b58 	.word	0x20004b58

0000c48c <usb_serial_flush_input>:
{
    c48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    c490:	4e14      	ldr	r6, [pc, #80]	; (c4e4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    c492:	4d15      	ldr	r5, [pc, #84]	; (c4e8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    c494:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    c496:	782a      	ldrb	r2, [r5, #0]
    c498:	4293      	cmp	r3, r2
    c49a:	d021      	beq.n	c4e0 <usb_serial_flush_input+0x54>
    c49c:	b2dc      	uxtb	r4, r3
    c49e:	f8df 9050 	ldr.w	r9, [pc, #80]	; c4f0 <usb_serial_flush_input+0x64>
    c4a2:	f8df b050 	ldr.w	fp, [pc, #80]	; c4f4 <usb_serial_flush_input+0x68>
    c4a6:	f8df 8050 	ldr.w	r8, [pc, #80]	; c4f8 <usb_serial_flush_input+0x6c>
    c4aa:	4f10      	ldr	r7, [pc, #64]	; (c4ec <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    c4ac:	3401      	adds	r4, #1
    c4ae:	2c08      	cmp	r4, #8
		rx_tail = tail;
    c4b0:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    c4b4:	d901      	bls.n	c4ba <usb_serial_flush_input+0x2e>
    c4b6:	2400      	movs	r4, #0
    c4b8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    c4ba:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    c4be:	f8db 3000 	ldr.w	r3, [fp]
    c4c2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    c4c6:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    c4ca:	1a52      	subs	r2, r2, r1
    c4cc:	1a9b      	subs	r3, r3, r2
    c4ce:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    c4d2:	f7ff fd0d 	bl	bef0 <rx_queue_transfer>
		rx_tail = tail;
    c4d6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    c4da:	782b      	ldrb	r3, [r5, #0]
    c4dc:	42a3      	cmp	r3, r4
    c4de:	d1e5      	bne.n	c4ac <usb_serial_flush_input+0x20>
}
    c4e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4e4:	20004bf3 	.word	0x20004bf3
    c4e8:	20004bf2 	.word	0x20004bf2
    c4ec:	20004b6c 	.word	0x20004b6c
    c4f0:	20004b7c 	.word	0x20004b7c
    c4f4:	20004b58 	.word	0x20004b58
    c4f8:	20004b5c 	.word	0x20004b5c

0000c4fc <usb_serial_getchar>:
{
    c4fc:	b500      	push	{lr}
    c4fe:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    c500:	2101      	movs	r1, #1
    c502:	f10d 0007 	add.w	r0, sp, #7
    c506:	f7ff ff23 	bl	c350 <usb_serial_read>
    c50a:	b120      	cbz	r0, c516 <usb_serial_getchar+0x1a>
    c50c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    c510:	b003      	add	sp, #12
    c512:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    c516:	f04f 30ff 	mov.w	r0, #4294967295
    c51a:	e7f9      	b.n	c510 <usb_serial_getchar+0x14>

0000c51c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    c51c:	4b09      	ldr	r3, [pc, #36]	; (c544 <usb_serial_putchar+0x28>)
{
    c51e:	b500      	push	{lr}
    c520:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    c522:	781b      	ldrb	r3, [r3, #0]
{
    c524:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    c528:	b13b      	cbz	r3, c53a <usb_serial_putchar+0x1e>
    c52a:	2101      	movs	r1, #1
    c52c:	f10d 0007 	add.w	r0, sp, #7
    c530:	f7ff fdb0 	bl	c094 <usb_serial_write.part.0>
}
    c534:	b003      	add	sp, #12
    c536:	f85d fb04 	ldr.w	pc, [sp], #4
    c53a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    c53e:	b003      	add	sp, #12
    c540:	f85d fb04 	ldr.w	pc, [sp], #4
    c544:	20004bfa 	.word	0x20004bfa

0000c548 <usb_serial_write>:
	if (!usb_configuration) return 0;
    c548:	4b04      	ldr	r3, [pc, #16]	; (c55c <usb_serial_write+0x14>)
    c54a:	781b      	ldrb	r3, [r3, #0]
    c54c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    c550:	b10b      	cbz	r3, c556 <usb_serial_write+0xe>
    c552:	f7ff bd9f 	b.w	c094 <usb_serial_write.part.0>
}
    c556:	4610      	mov	r0, r2
    c558:	4770      	bx	lr
    c55a:	bf00      	nop
    c55c:	20004bfa 	.word	0x20004bfa

0000c560 <usb_serial_write_buffer_free>:
{
    c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    c564:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    c566:	f8df 8044 	ldr.w	r8, [pc, #68]	; c5ac <usb_serial_write_buffer_free+0x4c>
    c56a:	2301      	movs	r3, #1
    c56c:	4d0d      	ldr	r5, [pc, #52]	; (c5a4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    c56e:	4627      	mov	r7, r4
    c570:	4e0d      	ldr	r6, [pc, #52]	; (c5a8 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    c572:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    c576:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    c578:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    c57a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    c57c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    c57e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    c582:	d005      	beq.n	c590 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    c584:	f7ff fc76 	bl	be74 <usb_transfer_status>
    c588:	0603      	lsls	r3, r0, #24
    c58a:	bf58      	it	pl
    c58c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    c590:	2c04      	cmp	r4, #4
    c592:	d1f0      	bne.n	c576 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    c594:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    c598:	2300      	movs	r3, #0
}
    c59a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    c59c:	f888 3000 	strb.w	r3, [r8]
}
    c5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5a4:	20004400 	.word	0x20004400
    c5a8:	20004bf7 	.word	0x20004bf7
    c5ac:	20004bf8 	.word	0x20004bf8

0000c5b0 <usb_serial_flush_output>:
{
    c5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    c5b4:	4b1d      	ldr	r3, [pc, #116]	; (c62c <usb_serial_flush_output+0x7c>)
    c5b6:	781b      	ldrb	r3, [r3, #0]
    c5b8:	b113      	cbz	r3, c5c0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    c5ba:	4d1d      	ldr	r5, [pc, #116]	; (c630 <usb_serial_flush_output+0x80>)
    c5bc:	882a      	ldrh	r2, [r5, #0]
    c5be:	b90a      	cbnz	r2, c5c4 <usb_serial_flush_output+0x14>
}
    c5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    c5c4:	4e1b      	ldr	r6, [pc, #108]	; (c634 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    c5c6:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    c5ca:	491b      	ldr	r1, [pc, #108]	; (c638 <usb_serial_flush_output+0x88>)
    c5cc:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    c5ce:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c5d0:	4c1a      	ldr	r4, [pc, #104]	; (c63c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    c5d2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    c5d6:	4f1a      	ldr	r7, [pc, #104]	; (c640 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    c5d8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    c5dc:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    c5de:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    c5e0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    c5e2:	4621      	mov	r1, r4
    c5e4:	2300      	movs	r3, #0
    c5e6:	f7ff fc0b 	bl	be00 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    c5ea:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    c5ee:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c5f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c5f6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    c5fa:	3420      	adds	r4, #32
	} while (location < end_addr);
    c5fc:	42a2      	cmp	r2, r4
    c5fe:	d8fa      	bhi.n	c5f6 <usb_serial_flush_output+0x46>
	asm("dsb");
    c600:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c604:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    c608:	2004      	movs	r0, #4
    c60a:	4641      	mov	r1, r8
    c60c:	f7ff fc10 	bl	be30 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c610:	7833      	ldrb	r3, [r6, #0]
    c612:	3301      	adds	r3, #1
    c614:	b2db      	uxtb	r3, r3
    c616:	2b03      	cmp	r3, #3
    c618:	bf88      	it	hi
    c61a:	2300      	movhi	r3, #0
    c61c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    c61e:	2300      	movs	r3, #0
    c620:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    c622:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    c626:	703b      	strb	r3, [r7, #0]
}
    c628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c62c:	20004bfa 	.word	0x20004bfa
    c630:	20004be8 	.word	0x20004be8
    c634:	20004bf7 	.word	0x20004bf7
    c638:	20004400 	.word	0x20004400
    c63c:	20201080 	.word	0x20201080
    c640:	20004bf8 	.word	0x20004bf8

0000c644 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c648:	4b2d      	ldr	r3, [pc, #180]	; (c700 <yield+0xbc>)
    c64a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c64c:	b166      	cbz	r6, c668 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c64e:	4f2d      	ldr	r7, [pc, #180]	; (c704 <yield+0xc0>)
    c650:	783b      	ldrb	r3, [r7, #0]
    c652:	b94b      	cbnz	r3, c668 <yield+0x24>
	running = 1;
    c654:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c656:	07f1      	lsls	r1, r6, #31
	running = 1;
    c658:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c65a:	d443      	bmi.n	c6e4 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c65c:	07b2      	lsls	r2, r6, #30
    c65e:	d426      	bmi.n	c6ae <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c660:	2300      	movs	r3, #0
    c662:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c664:	0773      	lsls	r3, r6, #29
    c666:	d401      	bmi.n	c66c <yield+0x28>
		EventResponder::runFromYield();
	}
};
    c668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    c66c:	4b26      	ldr	r3, [pc, #152]	; (c708 <yield+0xc4>)
    c66e:	681a      	ldr	r2, [r3, #0]
    c670:	2a00      	cmp	r2, #0
    c672:	d0f9      	beq.n	c668 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c674:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c678:	2a00      	cmp	r2, #0
    c67a:	d1f5      	bne.n	c668 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c67c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    c680:	b672      	cpsid	i
		EventResponder *first = firstYield;
    c682:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c684:	2800      	cmp	r0, #0
    c686:	d034      	beq.n	c6f2 <yield+0xae>
		if (runningFromYield) {
    c688:	4c20      	ldr	r4, [pc, #128]	; (c70c <yield+0xc8>)
    c68a:	7821      	ldrb	r1, [r4, #0]
    c68c:	2900      	cmp	r1, #0
    c68e:	d130      	bne.n	c6f2 <yield+0xae>
		runningFromYield = true;
    c690:	2201      	movs	r2, #1
    c692:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    c694:	6942      	ldr	r2, [r0, #20]
    c696:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    c698:	2a00      	cmp	r2, #0
    c69a:	d02e      	beq.n	c6fa <yield+0xb6>
			firstYield->_prev = nullptr;
    c69c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    c69e:	b905      	cbnz	r5, c6a2 <yield+0x5e>
    c6a0:	b662      	cpsie	i
		first->_triggered = false;
    c6a2:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c6a4:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    c6a6:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c6a8:	4798      	blx	r3
		runningFromYield = false;
    c6aa:	7025      	strb	r5, [r4, #0]
    c6ac:	e7dc      	b.n	c668 <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c6ae:	f8df 8064 	ldr.w	r8, [pc, #100]	; c714 <yield+0xd0>
    c6b2:	f898 3000 	ldrb.w	r3, [r8]
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	d0d2      	beq.n	c660 <yield+0x1c>
    c6ba:	2500      	movs	r5, #0
    c6bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; c718 <yield+0xd4>
    c6c0:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c6c2:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c6c6:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c6c8:	6823      	ldr	r3, [r4, #0]
    c6ca:	4620      	mov	r0, r4
    c6cc:	691b      	ldr	r3, [r3, #16]
    c6ce:	4798      	blx	r3
    c6d0:	b110      	cbz	r0, c6d8 <yield+0x94>
    c6d2:	6963      	ldr	r3, [r4, #20]
    c6d4:	689b      	ldr	r3, [r3, #8]
    c6d6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c6d8:	f898 2000 	ldrb.w	r2, [r8]
    c6dc:	b2eb      	uxtb	r3, r5
    c6de:	429a      	cmp	r2, r3
    c6e0:	d8ef      	bhi.n	c6c2 <yield+0x7e>
    c6e2:	e7bd      	b.n	c660 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    c6e4:	f7ff fec6 	bl	c474 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c6e8:	2800      	cmp	r0, #0
    c6ea:	d0b7      	beq.n	c65c <yield+0x18>
    c6ec:	f3af 8000 	nop.w
    c6f0:	e7b4      	b.n	c65c <yield+0x18>
		if (doit) __enable_irq();
    c6f2:	2d00      	cmp	r5, #0
    c6f4:	d1b8      	bne.n	c668 <yield+0x24>
    c6f6:	b662      	cpsie	i
    c6f8:	e7b6      	b.n	c668 <yield+0x24>
			lastYield = nullptr;
    c6fa:	4b05      	ldr	r3, [pc, #20]	; (c710 <yield+0xcc>)
    c6fc:	601a      	str	r2, [r3, #0]
    c6fe:	e7ce      	b.n	c69e <yield+0x5a>
    c700:	20004bfd 	.word	0x20004bfd
    c704:	20004bef 	.word	0x20004bef
    c708:	20004754 	.word	0x20004754
    c70c:	20004bed 	.word	0x20004bed
    c710:	20004760 	.word	0x20004760
    c714:	20004bee 	.word	0x20004bee
    c718:	20004764 	.word	0x20004764

0000c71c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    c71c:	4a07      	ldr	r2, [pc, #28]	; (c73c <rtc_get+0x20>)
    c71e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    c720:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    c722:	4619      	mov	r1, r3
    c724:	4684      	mov	ip, r0
    c726:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    c728:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    c72a:	4299      	cmp	r1, r3
    c72c:	d1f9      	bne.n	c722 <rtc_get+0x6>
    c72e:	4584      	cmp	ip, r0
    c730:	d1f7      	bne.n	c722 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    c732:	0bdb      	lsrs	r3, r3, #15
}
    c734:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    c738:	4770      	bx	lr
    c73a:	bf00      	nop
    c73c:	400d4000 	.word	0x400d4000

0000c740 <pow>:
    c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c744:	ec5b ab10 	vmov	sl, fp, d0
    c748:	ed2d 8b0a 	vpush	{d8-d12}
    c74c:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    c750:	ee11 ea90 	vmov	lr, s3
    c754:	f10c 36ff 	add.w	r6, ip, #4294967295
    c758:	f240 70fd 	movw	r0, #2045	; 0x7fd
    c75c:	4286      	cmp	r6, r0
    c75e:	ee10 1a10 	vmov	r1, s0
    c762:	ee11 3a10 	vmov	r3, s2
    c766:	b089      	sub	sp, #36	; 0x24
    c768:	465a      	mov	r2, fp
    c76a:	4665      	mov	r5, ip
    c76c:	ea4f 541e 	mov.w	r4, lr, lsr #20
    c770:	f200 80c6 	bhi.w	c900 <pow+0x1c0>
    c774:	f3c4 060a 	ubfx	r6, r4, #0, #11
    c778:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    c77c:	2e7f      	cmp	r6, #127	; 0x7f
    c77e:	bf98      	it	ls
    c780:	2000      	movls	r0, #0
    c782:	f200 80bd 	bhi.w	c900 <pow+0x1c0>
    c786:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    c78a:	4ce1      	ldr	r4, [pc, #900]	; (cb10 <pow+0x3d0>)
    c78c:	4be1      	ldr	r3, [pc, #900]	; (cb14 <pow+0x3d4>)
    c78e:	4414      	add	r4, r2
    c790:	f3c4 3546 	ubfx	r5, r4, #13, #7
    c794:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    c798:	ed93 6b00 	vldr	d6, [r3]
    c79c:	ed93 7b02 	vldr	d7, [r3, #8]
    c7a0:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    c7a4:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    c7a8:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    c7ac:	0d26      	lsrs	r6, r4, #20
    c7ae:	1524      	asrs	r4, r4, #20
    c7b0:	ee05 4a90 	vmov	s11, r4
    c7b4:	0536      	lsls	r6, r6, #20
    c7b6:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    c7ba:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    c7be:	1b95      	subs	r5, r2, r6
    c7c0:	eea5 2b06 	vfma.f64	d2, d5, d6
    c7c4:	eea5 9b07 	vfma.f64	d9, d5, d7
    c7c8:	ed93 ab04 	vldr	d10, [r3, #16]
    c7cc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    c7d0:	ed93 bb08 	vldr	d11, [r3, #32]
    c7d4:	ed93 7b06 	vldr	d7, [r3, #24]
    c7d8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    c7dc:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    c7e0:	1e0c      	subs	r4, r1, #0
    c7e2:	ec45 4b1c 	vmov	d12, r4, r5
    c7e6:	eeac 0b08 	vfma.f64	d0, d12, d8
    c7ea:	eea0 3b05 	vfma.f64	d3, d0, d5
    c7ee:	eea0 6b04 	vfma.f64	d6, d0, d4
    c7f2:	ee20 5b0a 	vmul.f64	d5, d0, d10
    c7f6:	ee30 4b02 	vadd.f64	d4, d0, d2
    c7fa:	ee20 8b05 	vmul.f64	d8, d0, d5
    c7fe:	eea0 7b0b 	vfma.f64	d7, d0, d11
    c802:	eea8 6b03 	vfma.f64	d6, d8, d3
    c806:	ee32 2b44 	vsub.f64	d2, d2, d4
    c80a:	eea8 7b06 	vfma.f64	d7, d8, d6
    c80e:	ee32 2b00 	vadd.f64	d2, d2, d0
    c812:	eeb0 3b48 	vmov.f64	d3, d8
    c816:	ee39 2b02 	vadd.f64	d2, d9, d2
    c81a:	ee95 3b00 	vfnms.f64	d3, d5, d0
    c81e:	ee34 5b08 	vadd.f64	d5, d4, d8
    c822:	ee20 0b08 	vmul.f64	d0, d0, d8
    c826:	ee34 4b45 	vsub.f64	d4, d4, d5
    c82a:	ee32 6b03 	vadd.f64	d6, d2, d3
    c82e:	ee34 4b08 	vadd.f64	d4, d4, d8
    c832:	ee36 6b04 	vadd.f64	d6, d6, d4
    c836:	eea0 6b07 	vfma.f64	d6, d0, d7
    c83a:	ee35 4b06 	vadd.f64	d4, d5, d6
    c83e:	ee21 8b04 	vmul.f64	d8, d1, d4
    c842:	ee18 2a90 	vmov	r2, s17
    c846:	eeb0 7b48 	vmov.f64	d7, d8
    c84a:	f3c2 550a 	ubfx	r5, r2, #20, #11
    c84e:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    c852:	18eb      	adds	r3, r5, r3
    c854:	2b3e      	cmp	r3, #62	; 0x3e
    c856:	ee91 7b04 	vfnms.f64	d7, d1, d4
    c85a:	ee35 5b44 	vsub.f64	d5, d5, d4
    c85e:	ee35 5b06 	vadd.f64	d5, d5, d6
    c862:	eea1 7b05 	vfma.f64	d7, d1, d5
    c866:	f200 8093 	bhi.w	c990 <pow+0x250>
    c86a:	4bab      	ldr	r3, [pc, #684]	; (cb18 <pow+0x3d8>)
    c86c:	ed93 4b02 	vldr	d4, [r3, #8]
    c870:	ed93 5b00 	vldr	d5, [r3]
    c874:	eeb0 1b44 	vmov.f64	d1, d4
    c878:	ed93 2b04 	vldr	d2, [r3, #16]
    c87c:	eea8 1b05 	vfma.f64	d1, d8, d5
    c880:	ed93 6b06 	vldr	d6, [r3, #24]
    c884:	ee11 1a10 	vmov	r1, s2
    c888:	ee31 1b44 	vsub.f64	d1, d1, d4
    c88c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    c890:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    c894:	eea1 8b02 	vfma.f64	d8, d1, d2
    c898:	eea1 8b06 	vfma.f64	d8, d1, d6
    c89c:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    c8a0:	ee37 7b08 	vadd.f64	d7, d7, d8
    c8a4:	ee27 2b07 	vmul.f64	d2, d7, d7
    c8a8:	1892      	adds	r2, r2, r2
    c8aa:	f102 040f 	add.w	r4, r2, #15
    c8ae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    c8b2:	eea7 6b04 	vfma.f64	d6, d7, d4
    c8b6:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    c8ba:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    c8be:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    c8c2:	ed93 5b08 	vldr	d5, [r3, #32]
    c8c6:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    c8ca:	6857      	ldr	r7, [r2, #4]
    c8cc:	eea7 5b03 	vfma.f64	d5, d7, d3
    c8d0:	1840      	adds	r0, r0, r1
    c8d2:	2400      	movs	r4, #0
    c8d4:	ee22 3b02 	vmul.f64	d3, d2, d2
    c8d8:	ee37 7b04 	vadd.f64	d7, d7, d4
    c8dc:	19a2      	adds	r2, r4, r6
    c8de:	eea2 7b05 	vfma.f64	d7, d2, d5
    c8e2:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    c8e6:	eea3 7b06 	vfma.f64	d7, d3, d6
    c8ea:	2d00      	cmp	r5, #0
    c8ec:	d05f      	beq.n	c9ae <pow+0x26e>
    c8ee:	ec43 2b10 	vmov	d0, r2, r3
    c8f2:	eea7 0b00 	vfma.f64	d0, d7, d0
    c8f6:	b009      	add	sp, #36	; 0x24
    c8f8:	ecbd 8b0a 	vpop	{d8-d12}
    c8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c900:	18d8      	adds	r0, r3, r3
    c902:	eb4e 090e 	adc.w	r9, lr, lr
    c906:	1e46      	subs	r6, r0, #1
    c908:	4637      	mov	r7, r6
    c90a:	f06f 0801 	mvn.w	r8, #1
    c90e:	f149 36ff 	adc.w	r6, r9, #4294967295
    c912:	45b8      	cmp	r8, r7
    c914:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    c918:	eb77 0606 	sbcs.w	r6, r7, r6
    c91c:	f0c0 8120 	bcc.w	cb60 <pow+0x420>
    c920:	1848      	adds	r0, r1, r1
    c922:	eb42 0902 	adc.w	r9, r2, r2
    c926:	1e46      	subs	r6, r0, #1
    c928:	4637      	mov	r7, r6
    c92a:	f169 0600 	sbc.w	r6, r9, #0
    c92e:	45b8      	cmp	r8, r7
    c930:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    c934:	eb77 0606 	sbcs.w	r6, r7, r6
    c938:	f0c0 8139 	bcc.w	cbae <pow+0x46e>
    c93c:	2a00      	cmp	r2, #0
    c93e:	db6a      	blt.n	ca16 <pow+0x2d6>
    c940:	2000      	movs	r0, #0
    c942:	f3c4 060a 	ubfx	r6, r4, #0, #11
    c946:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    c94a:	2b7f      	cmp	r3, #127	; 0x7f
    c94c:	f240 77ff 	movw	r7, #2047	; 0x7ff
    c950:	d94f      	bls.n	c9f2 <pow+0x2b2>
    c952:	4b72      	ldr	r3, [pc, #456]	; (cb1c <pow+0x3dc>)
    c954:	2000      	movs	r0, #0
    c956:	429a      	cmp	r2, r3
    c958:	bf08      	it	eq
    c95a:	4281      	cmpeq	r1, r0
    c95c:	f000 80fd 	beq.w	cb5a <pow+0x41a>
    c960:	f240 35bd 	movw	r5, #957	; 0x3bd
    c964:	42ae      	cmp	r6, r5
    c966:	f240 8091 	bls.w	ca8c <pow+0x34c>
    c96a:	2901      	cmp	r1, #1
    c96c:	eb72 0303 	sbcs.w	r3, r2, r3
    c970:	bf34      	ite	cc
    c972:	2301      	movcc	r3, #1
    c974:	2300      	movcs	r3, #0
    c976:	42bc      	cmp	r4, r7
    c978:	bf8c      	ite	hi
    c97a:	2400      	movhi	r4, #0
    c97c:	2401      	movls	r4, #1
    c97e:	42a3      	cmp	r3, r4
    c980:	d10e      	bne.n	c9a0 <pow+0x260>
    c982:	b009      	add	sp, #36	; 0x24
    c984:	ecbd 8b0a 	vpop	{d8-d12}
    c988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c98c:	f000 b9b4 	b.w	ccf8 <__math_uflow>
    c990:	2b00      	cmp	r3, #0
    c992:	f2c0 80ce 	blt.w	cb32 <pow+0x3f2>
    c996:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    c99a:	d975      	bls.n	ca88 <pow+0x348>
    c99c:	2a00      	cmp	r2, #0
    c99e:	dbf0      	blt.n	c982 <pow+0x242>
    c9a0:	b009      	add	sp, #36	; 0x24
    c9a2:	ecbd 8b0a 	vpop	{d8-d12}
    c9a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9aa:	f000 b9ad 	b.w	cd08 <__math_oflow>
    c9ae:	42a1      	cmp	r1, r4
    c9b0:	f280 8113 	bge.w	cbda <pow+0x49a>
    c9b4:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    c9b8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    c9bc:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    c9c0:	4610      	mov	r0, r2
    c9c2:	ec41 0b15 	vmov	d5, r0, r1
    c9c6:	ee27 7b05 	vmul.f64	d7, d7, d5
    c9ca:	ee35 6b07 	vadd.f64	d6, d5, d7
    c9ce:	eeb0 4bc6 	vabs.f64	d4, d6
    c9d2:	eeb4 4bc3 	vcmpe.f64	d4, d3
    c9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9da:	d461      	bmi.n	caa0 <pow+0x360>
    c9dc:	ed9f 0b48 	vldr	d0, [pc, #288]	; cb00 <pow+0x3c0>
    c9e0:	ee26 0b00 	vmul.f64	d0, d6, d0
    c9e4:	b009      	add	sp, #36	; 0x24
    c9e6:	ecbd 8b0a 	vpop	{d8-d12}
    c9ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9ee:	f000 b9bb 	b.w	cd68 <__math_check_uflow>
    c9f2:	2d00      	cmp	r5, #0
    c9f4:	f47f aec7 	bne.w	c786 <pow+0x46>
    c9f8:	ed9f 7b43 	vldr	d7, [pc, #268]	; cb08 <pow+0x3c8>
    c9fc:	ec4b ab16 	vmov	d6, sl, fp
    ca00:	ee26 7b07 	vmul.f64	d7, d6, d7
    ca04:	ec53 2b17 	vmov	r2, r3, d7
    ca08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ca0c:	ee17 1a10 	vmov	r1, s14
    ca10:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    ca14:	e6b7      	b.n	c786 <pow+0x46>
    ca16:	f3c4 060a 	ubfx	r6, r4, #0, #11
    ca1a:	f240 30fe 	movw	r0, #1022	; 0x3fe
    ca1e:	4286      	cmp	r6, r0
    ca20:	dd7e      	ble.n	cb20 <pow+0x3e0>
    ca22:	f240 4033 	movw	r0, #1075	; 0x433
    ca26:	4286      	cmp	r6, r0
    ca28:	f300 80fa 	bgt.w	cc20 <pow+0x4e0>
    ca2c:	1b80      	subs	r0, r0, r6
    ca2e:	f1a0 0520 	sub.w	r5, r0, #32
    ca32:	f04f 37ff 	mov.w	r7, #4294967295
    ca36:	f04f 39ff 	mov.w	r9, #4294967295
    ca3a:	4087      	lsls	r7, r0
    ca3c:	fa09 f905 	lsl.w	r9, r9, r5
    ca40:	f1c0 0820 	rsb	r8, r0, #32
    ca44:	9501      	str	r5, [sp, #4]
    ca46:	ea47 0509 	orr.w	r5, r7, r9
    ca4a:	f04f 37ff 	mov.w	r7, #4294967295
    ca4e:	fa27 f908 	lsr.w	r9, r7, r8
    ca52:	ea45 0509 	orr.w	r5, r5, r9
    ca56:	4087      	lsls	r7, r0
    ca58:	ea23 0707 	bic.w	r7, r3, r7
    ca5c:	ea2e 0505 	bic.w	r5, lr, r5
    ca60:	433d      	orrs	r5, r7
    ca62:	d15d      	bne.n	cb20 <pow+0x3e0>
    ca64:	9d01      	ldr	r5, [sp, #4]
    ca66:	40c3      	lsrs	r3, r0
    ca68:	fa0e f808 	lsl.w	r8, lr, r8
    ca6c:	ea43 0308 	orr.w	r3, r3, r8
    ca70:	fa2e fe05 	lsr.w	lr, lr, r5
    ca74:	ea43 030e 	orr.w	r3, r3, lr
    ca78:	f003 0301 	and.w	r3, r3, #1
    ca7c:	0498      	lsls	r0, r3, #18
    ca7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    ca82:	f3cc 050a 	ubfx	r5, ip, #0, #11
    ca86:	e75e      	b.n	c946 <pow+0x206>
    ca88:	2500      	movs	r5, #0
    ca8a:	e6ee      	b.n	c86a <pow+0x12a>
    ca8c:	4288      	cmp	r0, r1
    ca8e:	4193      	sbcs	r3, r2
    ca90:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    ca94:	bf34      	ite	cc
    ca96:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    ca9a:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    ca9e:	e72a      	b.n	c8f6 <pow+0x1b6>
    caa0:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    caa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    caa8:	ee35 5b46 	vsub.f64	d5, d5, d6
    caac:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    cab0:	ee35 5b07 	vadd.f64	d5, d5, d7
    cab4:	bf58      	it	pl
    cab6:	eeb0 4b43 	vmovpl.f64	d4, d3
    caba:	ee36 3b04 	vadd.f64	d3, d6, d4
    cabe:	ee34 7b43 	vsub.f64	d7, d4, d3
    cac2:	ee37 7b06 	vadd.f64	d7, d7, d6
    cac6:	ee37 7b05 	vadd.f64	d7, d7, d5
    caca:	ee37 7b03 	vadd.f64	d7, d7, d3
    cace:	ee37 6b44 	vsub.f64	d6, d7, d4
    cad2:	eeb5 6b40 	vcmp.f64	d6, #0.0
    cad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cada:	d104      	bne.n	cae6 <pow+0x3a6>
    cadc:	462a      	mov	r2, r5
    cade:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    cae2:	ec43 2b16 	vmov	d6, r2, r3
    cae6:	ed9f 5b06 	vldr	d5, [pc, #24]	; cb00 <pow+0x3c0>
    caea:	ed8d 5b04 	vstr	d5, [sp, #16]
    caee:	ed9d 7b04 	vldr	d7, [sp, #16]
    caf2:	ee27 7b05 	vmul.f64	d7, d7, d5
    caf6:	ed8d 7b06 	vstr	d7, [sp, #24]
    cafa:	e76f      	b.n	c9dc <pow+0x29c>
    cafc:	f3af 8000 	nop.w
    cb00:	00000000 	.word	0x00000000
    cb04:	00100000 	.word	0x00100000
    cb08:	00000000 	.word	0x00000000
    cb0c:	43300000 	.word	0x43300000
    cb10:	c0196aab 	.word	0xc0196aab
    cb14:	20000be0 	.word	0x20000be0
    cb18:	20000280 	.word	0x20000280
    cb1c:	3ff00000 	.word	0x3ff00000
    cb20:	ec4b ab10 	vmov	d0, sl, fp
    cb24:	b009      	add	sp, #36	; 0x24
    cb26:	ecbd 8b0a 	vpop	{d8-d12}
    cb2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb2e:	f000 b90b 	b.w	cd48 <__math_invalid>
    cb32:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    cb36:	ee38 0b00 	vadd.f64	d0, d8, d0
    cb3a:	2800      	cmp	r0, #0
    cb3c:	f43f aedb 	beq.w	c8f6 <pow+0x1b6>
    cb40:	eeb1 0b40 	vneg.f64	d0, d0
    cb44:	e6d7      	b.n	c8f6 <pow+0x1b6>
    cb46:	1849      	adds	r1, r1, r1
    cb48:	4b59      	ldr	r3, [pc, #356]	; (ccb0 <pow+0x570>)
    cb4a:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    cb4e:	f04f 0000 	mov.w	r0, #0
    cb52:	4152      	adcs	r2, r2
    cb54:	4288      	cmp	r0, r1
    cb56:	4193      	sbcs	r3, r2
    cb58:	d35d      	bcc.n	cc16 <pow+0x4d6>
    cb5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    cb5e:	e6ca      	b.n	c8f6 <pow+0x1b6>
    cb60:	ea50 0409 	orrs.w	r4, r0, r9
    cb64:	d0ef      	beq.n	cb46 <pow+0x406>
    cb66:	4c53      	ldr	r4, [pc, #332]	; (ccb4 <pow+0x574>)
    cb68:	2500      	movs	r5, #0
    cb6a:	42a2      	cmp	r2, r4
    cb6c:	bf08      	it	eq
    cb6e:	42a9      	cmpeq	r1, r5
    cb70:	d047      	beq.n	cc02 <pow+0x4c2>
    cb72:	1849      	adds	r1, r1, r1
    cb74:	4b50      	ldr	r3, [pc, #320]	; (ccb8 <pow+0x578>)
    cb76:	4152      	adcs	r2, r2
    cb78:	428d      	cmp	r5, r1
    cb7a:	eb73 0402 	sbcs.w	r4, r3, r2
    cb7e:	d34a      	bcc.n	cc16 <pow+0x4d6>
    cb80:	4599      	cmp	r9, r3
    cb82:	bf08      	it	eq
    cb84:	42a8      	cmpeq	r0, r5
    cb86:	d146      	bne.n	cc16 <pow+0x4d6>
    cb88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    cb8c:	429a      	cmp	r2, r3
    cb8e:	bf08      	it	eq
    cb90:	42a9      	cmpeq	r1, r5
    cb92:	d0e2      	beq.n	cb5a <pow+0x41a>
    cb94:	429a      	cmp	r2, r3
    cb96:	ea6f 0e0e 	mvn.w	lr, lr
    cb9a:	bf34      	ite	cc
    cb9c:	2200      	movcc	r2, #0
    cb9e:	2201      	movcs	r2, #1
    cba0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    cba4:	4572      	cmp	r2, lr
    cba6:	d077      	beq.n	cc98 <pow+0x558>
    cba8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; cca0 <pow+0x560>
    cbac:	e6a3      	b.n	c8f6 <pow+0x1b6>
    cbae:	ec4b ab17 	vmov	d7, sl, fp
    cbb2:	2a00      	cmp	r2, #0
    cbb4:	ee27 0b07 	vmul.f64	d0, d7, d7
    cbb8:	db34      	blt.n	cc24 <pow+0x4e4>
    cbba:	2200      	movs	r2, #0
    cbbc:	ea50 0909 	orrs.w	r9, r0, r9
    cbc0:	d15d      	bne.n	cc7e <pow+0x53e>
    cbc2:	f1be 0f00 	cmp.w	lr, #0
    cbc6:	f6bf ae96 	bge.w	c8f6 <pow+0x1b6>
    cbca:	4610      	mov	r0, r2
    cbcc:	b009      	add	sp, #36	; 0x24
    cbce:	ecbd 8b0a 	vpop	{d8-d12}
    cbd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbd6:	f000 b89f 	b.w	cd18 <__math_divzero>
    cbda:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    cbde:	ed9f 6b32 	vldr	d6, [pc, #200]	; cca8 <pow+0x568>
    cbe2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    cbe6:	4610      	mov	r0, r2
    cbe8:	ec41 0b10 	vmov	d0, r0, r1
    cbec:	eea7 0b00 	vfma.f64	d0, d7, d0
    cbf0:	ee20 0b06 	vmul.f64	d0, d0, d6
    cbf4:	b009      	add	sp, #36	; 0x24
    cbf6:	ecbd 8b0a 	vpop	{d8-d12}
    cbfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbfe:	f000 b8bf 	b.w	cd80 <__math_check_oflow>
    cc02:	18db      	adds	r3, r3, r3
    cc04:	4a2a      	ldr	r2, [pc, #168]	; (ccb0 <pow+0x570>)
    cc06:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    cc0a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cc0e:	429d      	cmp	r5, r3
    cc10:	eb72 020e 	sbcs.w	r2, r2, lr
    cc14:	d2a1      	bcs.n	cb5a <pow+0x41a>
    cc16:	ec4b ab17 	vmov	d7, sl, fp
    cc1a:	ee37 0b01 	vadd.f64	d0, d7, d1
    cc1e:	e66a      	b.n	c8f6 <pow+0x1b6>
    cc20:	2000      	movs	r0, #0
    cc22:	e72c      	b.n	ca7e <pow+0x33e>
    cc24:	f3c4 020a 	ubfx	r2, r4, #0, #11
    cc28:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    cc2c:	2934      	cmp	r1, #52	; 0x34
    cc2e:	d8c4      	bhi.n	cbba <pow+0x47a>
    cc30:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    cc34:	f04f 31ff 	mov.w	r1, #4294967295
    cc38:	f1a2 051d 	sub.w	r5, r2, #29
    cc3c:	3203      	adds	r2, #3
    cc3e:	fa01 f705 	lsl.w	r7, r1, r5
    cc42:	fa01 f402 	lsl.w	r4, r1, r2
    cc46:	f1c2 0620 	rsb	r6, r2, #32
    cc4a:	433c      	orrs	r4, r7
    cc4c:	fa21 f706 	lsr.w	r7, r1, r6
    cc50:	433c      	orrs	r4, r7
    cc52:	4091      	lsls	r1, r2
    cc54:	ea23 0101 	bic.w	r1, r3, r1
    cc58:	ea2e 0404 	bic.w	r4, lr, r4
    cc5c:	4321      	orrs	r1, r4
    cc5e:	d1ac      	bne.n	cbba <pow+0x47a>
    cc60:	fa23 f202 	lsr.w	r2, r3, r2
    cc64:	fa0e f606 	lsl.w	r6, lr, r6
    cc68:	4332      	orrs	r2, r6
    cc6a:	fa2e f505 	lsr.w	r5, lr, r5
    cc6e:	432a      	orrs	r2, r5
    cc70:	f012 0201 	ands.w	r2, r2, #1
    cc74:	d0a2      	beq.n	cbbc <pow+0x47c>
    cc76:	eeb1 0b40 	vneg.f64	d0, d0
    cc7a:	2201      	movs	r2, #1
    cc7c:	e79e      	b.n	cbbc <pow+0x47c>
    cc7e:	f1be 0f00 	cmp.w	lr, #0
    cc82:	f6bf ae38 	bge.w	c8f6 <pow+0x1b6>
    cc86:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    cc8a:	ee86 7b00 	vdiv.f64	d7, d6, d0
    cc8e:	ed8d 7b02 	vstr	d7, [sp, #8]
    cc92:	ed9d 0b02 	vldr	d0, [sp, #8]
    cc96:	e62e      	b.n	c8f6 <pow+0x1b6>
    cc98:	ee21 0b01 	vmul.f64	d0, d1, d1
    cc9c:	e62b      	b.n	c8f6 <pow+0x1b6>
    cc9e:	bf00      	nop
	...
    ccac:	7f000000 	.word	0x7f000000
    ccb0:	fff00000 	.word	0xfff00000
    ccb4:	3ff00000 	.word	0x3ff00000
    ccb8:	ffe00000 	.word	0xffe00000

0000ccbc <with_errno>:
    ccbc:	b510      	push	{r4, lr}
    ccbe:	b082      	sub	sp, #8
    ccc0:	ed8d 0b00 	vstr	d0, [sp]
    ccc4:	4604      	mov	r4, r0
    ccc6:	f001 fa3d 	bl	e144 <__errno>
    ccca:	ed9d 0b00 	vldr	d0, [sp]
    ccce:	6004      	str	r4, [r0, #0]
    ccd0:	b002      	add	sp, #8
    ccd2:	bd10      	pop	{r4, pc}

0000ccd4 <xflow>:
    ccd4:	b082      	sub	sp, #8
    ccd6:	b158      	cbz	r0, ccf0 <xflow+0x1c>
    ccd8:	eeb1 7b40 	vneg.f64	d7, d0
    ccdc:	ed8d 7b00 	vstr	d7, [sp]
    cce0:	ed9d 7b00 	vldr	d7, [sp]
    cce4:	2022      	movs	r0, #34	; 0x22
    cce6:	ee20 0b07 	vmul.f64	d0, d0, d7
    ccea:	b002      	add	sp, #8
    ccec:	f7ff bfe6 	b.w	ccbc <with_errno>
    ccf0:	eeb0 7b40 	vmov.f64	d7, d0
    ccf4:	e7f2      	b.n	ccdc <xflow+0x8>
    ccf6:	bf00      	nop

0000ccf8 <__math_uflow>:
    ccf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; cd00 <__math_uflow+0x8>
    ccfc:	f7ff bfea 	b.w	ccd4 <xflow>
    cd00:	00000000 	.word	0x00000000
    cd04:	10000000 	.word	0x10000000

0000cd08 <__math_oflow>:
    cd08:	ed9f 0b01 	vldr	d0, [pc, #4]	; cd10 <__math_oflow+0x8>
    cd0c:	f7ff bfe2 	b.w	ccd4 <xflow>
    cd10:	00000000 	.word	0x00000000
    cd14:	70000000 	.word	0x70000000

0000cd18 <__math_divzero>:
    cd18:	b082      	sub	sp, #8
    cd1a:	2800      	cmp	r0, #0
    cd1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    cd20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    cd24:	fe06 7b07 	vseleq.f64	d7, d6, d7
    cd28:	ed8d 7b00 	vstr	d7, [sp]
    cd2c:	ed9d 0b00 	vldr	d0, [sp]
    cd30:	ed9f 7b03 	vldr	d7, [pc, #12]	; cd40 <__math_divzero+0x28>
    cd34:	2022      	movs	r0, #34	; 0x22
    cd36:	ee80 0b07 	vdiv.f64	d0, d0, d7
    cd3a:	b002      	add	sp, #8
    cd3c:	f7ff bfbe 	b.w	ccbc <with_errno>
	...

0000cd48 <__math_invalid>:
    cd48:	eeb4 0b40 	vcmp.f64	d0, d0
    cd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd50:	ee30 7b40 	vsub.f64	d7, d0, d0
    cd54:	ee87 6b07 	vdiv.f64	d6, d7, d7
    cd58:	eeb0 0b46 	vmov.f64	d0, d6
    cd5c:	d602      	bvs.n	cd64 <__math_invalid+0x1c>
    cd5e:	2021      	movs	r0, #33	; 0x21
    cd60:	f7ff bfac 	b.w	ccbc <with_errno>
    cd64:	4770      	bx	lr
    cd66:	bf00      	nop

0000cd68 <__math_check_uflow>:
    cd68:	eeb5 0b40 	vcmp.f64	d0, #0.0
    cd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd70:	d000      	beq.n	cd74 <__math_check_uflow+0xc>
    cd72:	4770      	bx	lr
    cd74:	2022      	movs	r0, #34	; 0x22
    cd76:	f7ff bfa1 	b.w	ccbc <with_errno>
    cd7a:	bf00      	nop
    cd7c:	0000      	movs	r0, r0
	...

0000cd80 <__math_check_oflow>:
    cd80:	ed9f 6b07 	vldr	d6, [pc, #28]	; cda0 <__math_check_oflow+0x20>
    cd84:	eeb0 7bc0 	vabs.f64	d7, d0
    cd88:	eeb4 7b46 	vcmp.f64	d7, d6
    cd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd90:	dc00      	bgt.n	cd94 <__math_check_oflow+0x14>
    cd92:	4770      	bx	lr
    cd94:	2022      	movs	r0, #34	; 0x22
    cd96:	f7ff bf91 	b.w	ccbc <with_errno>
    cd9a:	bf00      	nop
    cd9c:	f3af 8000 	nop.w
    cda0:	ffffffff 	.word	0xffffffff
    cda4:	7fefffff 	.word	0x7fefffff

0000cda8 <__aeabi_atexit>:
    cda8:	4603      	mov	r3, r0
    cdaa:	4608      	mov	r0, r1
    cdac:	4619      	mov	r1, r3
    cdae:	f000 bef7 	b.w	dba0 <__cxa_atexit>
    cdb2:	bf00      	nop

0000cdb4 <__aeabi_ldivmod>:
    cdb4:	b97b      	cbnz	r3, cdd6 <__aeabi_ldivmod+0x22>
    cdb6:	b972      	cbnz	r2, cdd6 <__aeabi_ldivmod+0x22>
    cdb8:	2900      	cmp	r1, #0
    cdba:	bfbe      	ittt	lt
    cdbc:	2000      	movlt	r0, #0
    cdbe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    cdc2:	e006      	blt.n	cdd2 <__aeabi_ldivmod+0x1e>
    cdc4:	bf08      	it	eq
    cdc6:	2800      	cmpeq	r0, #0
    cdc8:	bf1c      	itt	ne
    cdca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    cdce:	f04f 30ff 	movne.w	r0, #4294967295
    cdd2:	f000 b9bb 	b.w	d14c <__aeabi_idiv0>
    cdd6:	f1ad 0c08 	sub.w	ip, sp, #8
    cdda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cdde:	2900      	cmp	r1, #0
    cde0:	db09      	blt.n	cdf6 <__aeabi_ldivmod+0x42>
    cde2:	2b00      	cmp	r3, #0
    cde4:	db1a      	blt.n	ce1c <__aeabi_ldivmod+0x68>
    cde6:	f000 f84d 	bl	ce84 <__udivmoddi4>
    cdea:	f8dd e004 	ldr.w	lr, [sp, #4]
    cdee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cdf2:	b004      	add	sp, #16
    cdf4:	4770      	bx	lr
    cdf6:	4240      	negs	r0, r0
    cdf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	db1b      	blt.n	ce38 <__aeabi_ldivmod+0x84>
    ce00:	f000 f840 	bl	ce84 <__udivmoddi4>
    ce04:	f8dd e004 	ldr.w	lr, [sp, #4]
    ce08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce0c:	b004      	add	sp, #16
    ce0e:	4240      	negs	r0, r0
    ce10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ce14:	4252      	negs	r2, r2
    ce16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ce1a:	4770      	bx	lr
    ce1c:	4252      	negs	r2, r2
    ce1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ce22:	f000 f82f 	bl	ce84 <__udivmoddi4>
    ce26:	f8dd e004 	ldr.w	lr, [sp, #4]
    ce2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce2e:	b004      	add	sp, #16
    ce30:	4240      	negs	r0, r0
    ce32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ce36:	4770      	bx	lr
    ce38:	4252      	negs	r2, r2
    ce3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ce3e:	f000 f821 	bl	ce84 <__udivmoddi4>
    ce42:	f8dd e004 	ldr.w	lr, [sp, #4]
    ce46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce4a:	b004      	add	sp, #16
    ce4c:	4252      	negs	r2, r2
    ce4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ce52:	4770      	bx	lr

0000ce54 <__aeabi_uldivmod>:
    ce54:	b953      	cbnz	r3, ce6c <__aeabi_uldivmod+0x18>
    ce56:	b94a      	cbnz	r2, ce6c <__aeabi_uldivmod+0x18>
    ce58:	2900      	cmp	r1, #0
    ce5a:	bf08      	it	eq
    ce5c:	2800      	cmpeq	r0, #0
    ce5e:	bf1c      	itt	ne
    ce60:	f04f 31ff 	movne.w	r1, #4294967295
    ce64:	f04f 30ff 	movne.w	r0, #4294967295
    ce68:	f000 b970 	b.w	d14c <__aeabi_idiv0>
    ce6c:	f1ad 0c08 	sub.w	ip, sp, #8
    ce70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ce74:	f000 f806 	bl	ce84 <__udivmoddi4>
    ce78:	f8dd e004 	ldr.w	lr, [sp, #4]
    ce7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce80:	b004      	add	sp, #16
    ce82:	4770      	bx	lr

0000ce84 <__udivmoddi4>:
    ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce88:	9e08      	ldr	r6, [sp, #32]
    ce8a:	460d      	mov	r5, r1
    ce8c:	4604      	mov	r4, r0
    ce8e:	460f      	mov	r7, r1
    ce90:	2b00      	cmp	r3, #0
    ce92:	d14a      	bne.n	cf2a <__udivmoddi4+0xa6>
    ce94:	428a      	cmp	r2, r1
    ce96:	4694      	mov	ip, r2
    ce98:	d965      	bls.n	cf66 <__udivmoddi4+0xe2>
    ce9a:	fab2 f382 	clz	r3, r2
    ce9e:	b143      	cbz	r3, ceb2 <__udivmoddi4+0x2e>
    cea0:	fa02 fc03 	lsl.w	ip, r2, r3
    cea4:	f1c3 0220 	rsb	r2, r3, #32
    cea8:	409f      	lsls	r7, r3
    ceaa:	fa20 f202 	lsr.w	r2, r0, r2
    ceae:	4317      	orrs	r7, r2
    ceb0:	409c      	lsls	r4, r3
    ceb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    ceb6:	fa1f f58c 	uxth.w	r5, ip
    ceba:	fbb7 f1fe 	udiv	r1, r7, lr
    cebe:	0c22      	lsrs	r2, r4, #16
    cec0:	fb0e 7711 	mls	r7, lr, r1, r7
    cec4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    cec8:	fb01 f005 	mul.w	r0, r1, r5
    cecc:	4290      	cmp	r0, r2
    cece:	d90a      	bls.n	cee6 <__udivmoddi4+0x62>
    ced0:	eb1c 0202 	adds.w	r2, ip, r2
    ced4:	f101 37ff 	add.w	r7, r1, #4294967295
    ced8:	f080 811c 	bcs.w	d114 <__udivmoddi4+0x290>
    cedc:	4290      	cmp	r0, r2
    cede:	f240 8119 	bls.w	d114 <__udivmoddi4+0x290>
    cee2:	3902      	subs	r1, #2
    cee4:	4462      	add	r2, ip
    cee6:	1a12      	subs	r2, r2, r0
    cee8:	b2a4      	uxth	r4, r4
    ceea:	fbb2 f0fe 	udiv	r0, r2, lr
    ceee:	fb0e 2210 	mls	r2, lr, r0, r2
    cef2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    cef6:	fb00 f505 	mul.w	r5, r0, r5
    cefa:	42a5      	cmp	r5, r4
    cefc:	d90a      	bls.n	cf14 <__udivmoddi4+0x90>
    cefe:	eb1c 0404 	adds.w	r4, ip, r4
    cf02:	f100 32ff 	add.w	r2, r0, #4294967295
    cf06:	f080 8107 	bcs.w	d118 <__udivmoddi4+0x294>
    cf0a:	42a5      	cmp	r5, r4
    cf0c:	f240 8104 	bls.w	d118 <__udivmoddi4+0x294>
    cf10:	4464      	add	r4, ip
    cf12:	3802      	subs	r0, #2
    cf14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    cf18:	1b64      	subs	r4, r4, r5
    cf1a:	2100      	movs	r1, #0
    cf1c:	b11e      	cbz	r6, cf26 <__udivmoddi4+0xa2>
    cf1e:	40dc      	lsrs	r4, r3
    cf20:	2300      	movs	r3, #0
    cf22:	e9c6 4300 	strd	r4, r3, [r6]
    cf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf2a:	428b      	cmp	r3, r1
    cf2c:	d908      	bls.n	cf40 <__udivmoddi4+0xbc>
    cf2e:	2e00      	cmp	r6, #0
    cf30:	f000 80ed 	beq.w	d10e <__udivmoddi4+0x28a>
    cf34:	2100      	movs	r1, #0
    cf36:	e9c6 0500 	strd	r0, r5, [r6]
    cf3a:	4608      	mov	r0, r1
    cf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf40:	fab3 f183 	clz	r1, r3
    cf44:	2900      	cmp	r1, #0
    cf46:	d149      	bne.n	cfdc <__udivmoddi4+0x158>
    cf48:	42ab      	cmp	r3, r5
    cf4a:	d302      	bcc.n	cf52 <__udivmoddi4+0xce>
    cf4c:	4282      	cmp	r2, r0
    cf4e:	f200 80f8 	bhi.w	d142 <__udivmoddi4+0x2be>
    cf52:	1a84      	subs	r4, r0, r2
    cf54:	eb65 0203 	sbc.w	r2, r5, r3
    cf58:	2001      	movs	r0, #1
    cf5a:	4617      	mov	r7, r2
    cf5c:	2e00      	cmp	r6, #0
    cf5e:	d0e2      	beq.n	cf26 <__udivmoddi4+0xa2>
    cf60:	e9c6 4700 	strd	r4, r7, [r6]
    cf64:	e7df      	b.n	cf26 <__udivmoddi4+0xa2>
    cf66:	b902      	cbnz	r2, cf6a <__udivmoddi4+0xe6>
    cf68:	deff      	udf	#255	; 0xff
    cf6a:	fab2 f382 	clz	r3, r2
    cf6e:	2b00      	cmp	r3, #0
    cf70:	f040 8090 	bne.w	d094 <__udivmoddi4+0x210>
    cf74:	1a8a      	subs	r2, r1, r2
    cf76:	ea4f 471c 	mov.w	r7, ip, lsr #16
    cf7a:	fa1f fe8c 	uxth.w	lr, ip
    cf7e:	2101      	movs	r1, #1
    cf80:	fbb2 f5f7 	udiv	r5, r2, r7
    cf84:	fb07 2015 	mls	r0, r7, r5, r2
    cf88:	0c22      	lsrs	r2, r4, #16
    cf8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    cf8e:	fb0e f005 	mul.w	r0, lr, r5
    cf92:	4290      	cmp	r0, r2
    cf94:	d908      	bls.n	cfa8 <__udivmoddi4+0x124>
    cf96:	eb1c 0202 	adds.w	r2, ip, r2
    cf9a:	f105 38ff 	add.w	r8, r5, #4294967295
    cf9e:	d202      	bcs.n	cfa6 <__udivmoddi4+0x122>
    cfa0:	4290      	cmp	r0, r2
    cfa2:	f200 80cb 	bhi.w	d13c <__udivmoddi4+0x2b8>
    cfa6:	4645      	mov	r5, r8
    cfa8:	1a12      	subs	r2, r2, r0
    cfaa:	b2a4      	uxth	r4, r4
    cfac:	fbb2 f0f7 	udiv	r0, r2, r7
    cfb0:	fb07 2210 	mls	r2, r7, r0, r2
    cfb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    cfb8:	fb0e fe00 	mul.w	lr, lr, r0
    cfbc:	45a6      	cmp	lr, r4
    cfbe:	d908      	bls.n	cfd2 <__udivmoddi4+0x14e>
    cfc0:	eb1c 0404 	adds.w	r4, ip, r4
    cfc4:	f100 32ff 	add.w	r2, r0, #4294967295
    cfc8:	d202      	bcs.n	cfd0 <__udivmoddi4+0x14c>
    cfca:	45a6      	cmp	lr, r4
    cfcc:	f200 80bb 	bhi.w	d146 <__udivmoddi4+0x2c2>
    cfd0:	4610      	mov	r0, r2
    cfd2:	eba4 040e 	sub.w	r4, r4, lr
    cfd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    cfda:	e79f      	b.n	cf1c <__udivmoddi4+0x98>
    cfdc:	f1c1 0720 	rsb	r7, r1, #32
    cfe0:	408b      	lsls	r3, r1
    cfe2:	fa22 fc07 	lsr.w	ip, r2, r7
    cfe6:	ea4c 0c03 	orr.w	ip, ip, r3
    cfea:	fa05 f401 	lsl.w	r4, r5, r1
    cfee:	fa20 f307 	lsr.w	r3, r0, r7
    cff2:	40fd      	lsrs	r5, r7
    cff4:	ea4f 491c 	mov.w	r9, ip, lsr #16
    cff8:	4323      	orrs	r3, r4
    cffa:	fbb5 f8f9 	udiv	r8, r5, r9
    cffe:	fa1f fe8c 	uxth.w	lr, ip
    d002:	fb09 5518 	mls	r5, r9, r8, r5
    d006:	0c1c      	lsrs	r4, r3, #16
    d008:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    d00c:	fb08 f50e 	mul.w	r5, r8, lr
    d010:	42a5      	cmp	r5, r4
    d012:	fa02 f201 	lsl.w	r2, r2, r1
    d016:	fa00 f001 	lsl.w	r0, r0, r1
    d01a:	d90b      	bls.n	d034 <__udivmoddi4+0x1b0>
    d01c:	eb1c 0404 	adds.w	r4, ip, r4
    d020:	f108 3aff 	add.w	sl, r8, #4294967295
    d024:	f080 8088 	bcs.w	d138 <__udivmoddi4+0x2b4>
    d028:	42a5      	cmp	r5, r4
    d02a:	f240 8085 	bls.w	d138 <__udivmoddi4+0x2b4>
    d02e:	f1a8 0802 	sub.w	r8, r8, #2
    d032:	4464      	add	r4, ip
    d034:	1b64      	subs	r4, r4, r5
    d036:	b29d      	uxth	r5, r3
    d038:	fbb4 f3f9 	udiv	r3, r4, r9
    d03c:	fb09 4413 	mls	r4, r9, r3, r4
    d040:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    d044:	fb03 fe0e 	mul.w	lr, r3, lr
    d048:	45a6      	cmp	lr, r4
    d04a:	d908      	bls.n	d05e <__udivmoddi4+0x1da>
    d04c:	eb1c 0404 	adds.w	r4, ip, r4
    d050:	f103 35ff 	add.w	r5, r3, #4294967295
    d054:	d26c      	bcs.n	d130 <__udivmoddi4+0x2ac>
    d056:	45a6      	cmp	lr, r4
    d058:	d96a      	bls.n	d130 <__udivmoddi4+0x2ac>
    d05a:	3b02      	subs	r3, #2
    d05c:	4464      	add	r4, ip
    d05e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    d062:	fba3 9502 	umull	r9, r5, r3, r2
    d066:	eba4 040e 	sub.w	r4, r4, lr
    d06a:	42ac      	cmp	r4, r5
    d06c:	46c8      	mov	r8, r9
    d06e:	46ae      	mov	lr, r5
    d070:	d356      	bcc.n	d120 <__udivmoddi4+0x29c>
    d072:	d053      	beq.n	d11c <__udivmoddi4+0x298>
    d074:	b156      	cbz	r6, d08c <__udivmoddi4+0x208>
    d076:	ebb0 0208 	subs.w	r2, r0, r8
    d07a:	eb64 040e 	sbc.w	r4, r4, lr
    d07e:	fa04 f707 	lsl.w	r7, r4, r7
    d082:	40ca      	lsrs	r2, r1
    d084:	40cc      	lsrs	r4, r1
    d086:	4317      	orrs	r7, r2
    d088:	e9c6 7400 	strd	r7, r4, [r6]
    d08c:	4618      	mov	r0, r3
    d08e:	2100      	movs	r1, #0
    d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d094:	f1c3 0120 	rsb	r1, r3, #32
    d098:	fa02 fc03 	lsl.w	ip, r2, r3
    d09c:	fa20 f201 	lsr.w	r2, r0, r1
    d0a0:	fa25 f101 	lsr.w	r1, r5, r1
    d0a4:	409d      	lsls	r5, r3
    d0a6:	432a      	orrs	r2, r5
    d0a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
    d0ac:	fa1f fe8c 	uxth.w	lr, ip
    d0b0:	fbb1 f0f7 	udiv	r0, r1, r7
    d0b4:	fb07 1510 	mls	r5, r7, r0, r1
    d0b8:	0c11      	lsrs	r1, r2, #16
    d0ba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    d0be:	fb00 f50e 	mul.w	r5, r0, lr
    d0c2:	428d      	cmp	r5, r1
    d0c4:	fa04 f403 	lsl.w	r4, r4, r3
    d0c8:	d908      	bls.n	d0dc <__udivmoddi4+0x258>
    d0ca:	eb1c 0101 	adds.w	r1, ip, r1
    d0ce:	f100 38ff 	add.w	r8, r0, #4294967295
    d0d2:	d22f      	bcs.n	d134 <__udivmoddi4+0x2b0>
    d0d4:	428d      	cmp	r5, r1
    d0d6:	d92d      	bls.n	d134 <__udivmoddi4+0x2b0>
    d0d8:	3802      	subs	r0, #2
    d0da:	4461      	add	r1, ip
    d0dc:	1b49      	subs	r1, r1, r5
    d0de:	b292      	uxth	r2, r2
    d0e0:	fbb1 f5f7 	udiv	r5, r1, r7
    d0e4:	fb07 1115 	mls	r1, r7, r5, r1
    d0e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    d0ec:	fb05 f10e 	mul.w	r1, r5, lr
    d0f0:	4291      	cmp	r1, r2
    d0f2:	d908      	bls.n	d106 <__udivmoddi4+0x282>
    d0f4:	eb1c 0202 	adds.w	r2, ip, r2
    d0f8:	f105 38ff 	add.w	r8, r5, #4294967295
    d0fc:	d216      	bcs.n	d12c <__udivmoddi4+0x2a8>
    d0fe:	4291      	cmp	r1, r2
    d100:	d914      	bls.n	d12c <__udivmoddi4+0x2a8>
    d102:	3d02      	subs	r5, #2
    d104:	4462      	add	r2, ip
    d106:	1a52      	subs	r2, r2, r1
    d108:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    d10c:	e738      	b.n	cf80 <__udivmoddi4+0xfc>
    d10e:	4631      	mov	r1, r6
    d110:	4630      	mov	r0, r6
    d112:	e708      	b.n	cf26 <__udivmoddi4+0xa2>
    d114:	4639      	mov	r1, r7
    d116:	e6e6      	b.n	cee6 <__udivmoddi4+0x62>
    d118:	4610      	mov	r0, r2
    d11a:	e6fb      	b.n	cf14 <__udivmoddi4+0x90>
    d11c:	4548      	cmp	r0, r9
    d11e:	d2a9      	bcs.n	d074 <__udivmoddi4+0x1f0>
    d120:	ebb9 0802 	subs.w	r8, r9, r2
    d124:	eb65 0e0c 	sbc.w	lr, r5, ip
    d128:	3b01      	subs	r3, #1
    d12a:	e7a3      	b.n	d074 <__udivmoddi4+0x1f0>
    d12c:	4645      	mov	r5, r8
    d12e:	e7ea      	b.n	d106 <__udivmoddi4+0x282>
    d130:	462b      	mov	r3, r5
    d132:	e794      	b.n	d05e <__udivmoddi4+0x1da>
    d134:	4640      	mov	r0, r8
    d136:	e7d1      	b.n	d0dc <__udivmoddi4+0x258>
    d138:	46d0      	mov	r8, sl
    d13a:	e77b      	b.n	d034 <__udivmoddi4+0x1b0>
    d13c:	3d02      	subs	r5, #2
    d13e:	4462      	add	r2, ip
    d140:	e732      	b.n	cfa8 <__udivmoddi4+0x124>
    d142:	4608      	mov	r0, r1
    d144:	e70a      	b.n	cf5c <__udivmoddi4+0xd8>
    d146:	4464      	add	r4, ip
    d148:	3802      	subs	r0, #2
    d14a:	e742      	b.n	cfd2 <__udivmoddi4+0x14e>

0000d14c <__aeabi_idiv0>:
    d14c:	4770      	bx	lr
    d14e:	bf00      	nop

0000d150 <itoa>:
    d150:	1e93      	subs	r3, r2, #2
    d152:	2b22      	cmp	r3, #34	; 0x22
    d154:	b510      	push	{r4, lr}
    d156:	460c      	mov	r4, r1
    d158:	d80c      	bhi.n	d174 <itoa+0x24>
    d15a:	2a0a      	cmp	r2, #10
    d15c:	d003      	beq.n	d166 <itoa+0x16>
    d15e:	f000 fcd1 	bl	db04 <__utoa>
    d162:	4620      	mov	r0, r4
    d164:	bd10      	pop	{r4, pc}
    d166:	2800      	cmp	r0, #0
    d168:	daf9      	bge.n	d15e <itoa+0xe>
    d16a:	232d      	movs	r3, #45	; 0x2d
    d16c:	f801 3b01 	strb.w	r3, [r1], #1
    d170:	4240      	negs	r0, r0
    d172:	e7f4      	b.n	d15e <itoa+0xe>
    d174:	2300      	movs	r3, #0
    d176:	700b      	strb	r3, [r1, #0]
    d178:	4618      	mov	r0, r3
    d17a:	bd10      	pop	{r4, pc}

0000d17c <malloc>:
    d17c:	4b02      	ldr	r3, [pc, #8]	; (d188 <malloc+0xc>)
    d17e:	4601      	mov	r1, r0
    d180:	6818      	ldr	r0, [r3, #0]
    d182:	f000 b80b 	b.w	d19c <_malloc_r>
    d186:	bf00      	nop
    d188:	20003ce0 	.word	0x20003ce0

0000d18c <free>:
    d18c:	4b02      	ldr	r3, [pc, #8]	; (d198 <free+0xc>)
    d18e:	4601      	mov	r1, r0
    d190:	6818      	ldr	r0, [r3, #0]
    d192:	f001 b977 	b.w	e484 <_free_r>
    d196:	bf00      	nop
    d198:	20003ce0 	.word	0x20003ce0

0000d19c <_malloc_r>:
    d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1a0:	f101 060b 	add.w	r6, r1, #11
    d1a4:	2e16      	cmp	r6, #22
    d1a6:	b083      	sub	sp, #12
    d1a8:	4604      	mov	r4, r0
    d1aa:	d824      	bhi.n	d1f6 <_malloc_r+0x5a>
    d1ac:	2910      	cmp	r1, #16
    d1ae:	f200 80ba 	bhi.w	d326 <_malloc_r+0x18a>
    d1b2:	f000 faa3 	bl	d6fc <__malloc_lock>
    d1b6:	2610      	movs	r6, #16
    d1b8:	2218      	movs	r2, #24
    d1ba:	2002      	movs	r0, #2
    d1bc:	4fb5      	ldr	r7, [pc, #724]	; (d494 <_malloc_r+0x2f8>)
    d1be:	443a      	add	r2, r7
    d1c0:	f1a2 0108 	sub.w	r1, r2, #8
    d1c4:	6853      	ldr	r3, [r2, #4]
    d1c6:	428b      	cmp	r3, r1
    d1c8:	f000 80ba 	beq.w	d340 <_malloc_r+0x1a4>
    d1cc:	685a      	ldr	r2, [r3, #4]
    d1ce:	68d9      	ldr	r1, [r3, #12]
    d1d0:	f022 0203 	bic.w	r2, r2, #3
    d1d4:	441a      	add	r2, r3
    d1d6:	689d      	ldr	r5, [r3, #8]
    d1d8:	60e9      	str	r1, [r5, #12]
    d1da:	608d      	str	r5, [r1, #8]
    d1dc:	6851      	ldr	r1, [r2, #4]
    d1de:	f041 0101 	orr.w	r1, r1, #1
    d1e2:	4620      	mov	r0, r4
    d1e4:	6051      	str	r1, [r2, #4]
    d1e6:	f103 0508 	add.w	r5, r3, #8
    d1ea:	f000 fa8d 	bl	d708 <__malloc_unlock>
    d1ee:	4628      	mov	r0, r5
    d1f0:	b003      	add	sp, #12
    d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1f6:	f036 0607 	bics.w	r6, r6, #7
    d1fa:	f100 8094 	bmi.w	d326 <_malloc_r+0x18a>
    d1fe:	42b1      	cmp	r1, r6
    d200:	f200 8091 	bhi.w	d326 <_malloc_r+0x18a>
    d204:	f000 fa7a 	bl	d6fc <__malloc_lock>
    d208:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d20c:	f0c0 819a 	bcc.w	d544 <_malloc_r+0x3a8>
    d210:	0a73      	lsrs	r3, r6, #9
    d212:	f000 808f 	beq.w	d334 <_malloc_r+0x198>
    d216:	2b04      	cmp	r3, #4
    d218:	f200 816f 	bhi.w	d4fa <_malloc_r+0x35e>
    d21c:	09b3      	lsrs	r3, r6, #6
    d21e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d222:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d226:	00c3      	lsls	r3, r0, #3
    d228:	4f9a      	ldr	r7, [pc, #616]	; (d494 <_malloc_r+0x2f8>)
    d22a:	443b      	add	r3, r7
    d22c:	f1a3 0508 	sub.w	r5, r3, #8
    d230:	685b      	ldr	r3, [r3, #4]
    d232:	429d      	cmp	r5, r3
    d234:	d106      	bne.n	d244 <_malloc_r+0xa8>
    d236:	e00c      	b.n	d252 <_malloc_r+0xb6>
    d238:	2900      	cmp	r1, #0
    d23a:	f280 8127 	bge.w	d48c <_malloc_r+0x2f0>
    d23e:	68db      	ldr	r3, [r3, #12]
    d240:	429d      	cmp	r5, r3
    d242:	d006      	beq.n	d252 <_malloc_r+0xb6>
    d244:	685a      	ldr	r2, [r3, #4]
    d246:	f022 0203 	bic.w	r2, r2, #3
    d24a:	1b91      	subs	r1, r2, r6
    d24c:	290f      	cmp	r1, #15
    d24e:	ddf3      	ble.n	d238 <_malloc_r+0x9c>
    d250:	4660      	mov	r0, ip
    d252:	693d      	ldr	r5, [r7, #16]
    d254:	f8df c250 	ldr.w	ip, [pc, #592]	; d4a8 <_malloc_r+0x30c>
    d258:	4565      	cmp	r5, ip
    d25a:	d07c      	beq.n	d356 <_malloc_r+0x1ba>
    d25c:	686a      	ldr	r2, [r5, #4]
    d25e:	f022 0203 	bic.w	r2, r2, #3
    d262:	1b93      	subs	r3, r2, r6
    d264:	2b0f      	cmp	r3, #15
    d266:	f300 817b 	bgt.w	d560 <_malloc_r+0x3c4>
    d26a:	2b00      	cmp	r3, #0
    d26c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d270:	f280 816c 	bge.w	d54c <_malloc_r+0x3b0>
    d274:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d278:	f080 811a 	bcs.w	d4b0 <_malloc_r+0x314>
    d27c:	08d3      	lsrs	r3, r2, #3
    d27e:	6879      	ldr	r1, [r7, #4]
    d280:	3301      	adds	r3, #1
    d282:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d286:	2201      	movs	r2, #1
    d288:	fa02 f20e 	lsl.w	r2, r2, lr
    d28c:	430a      	orrs	r2, r1
    d28e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d292:	f8c5 e008 	str.w	lr, [r5, #8]
    d296:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d29a:	3908      	subs	r1, #8
    d29c:	60e9      	str	r1, [r5, #12]
    d29e:	607a      	str	r2, [r7, #4]
    d2a0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d2a4:	f8ce 500c 	str.w	r5, [lr, #12]
    d2a8:	1083      	asrs	r3, r0, #2
    d2aa:	2101      	movs	r1, #1
    d2ac:	4099      	lsls	r1, r3
    d2ae:	4291      	cmp	r1, r2
    d2b0:	d857      	bhi.n	d362 <_malloc_r+0x1c6>
    d2b2:	4211      	tst	r1, r2
    d2b4:	d106      	bne.n	d2c4 <_malloc_r+0x128>
    d2b6:	f020 0003 	bic.w	r0, r0, #3
    d2ba:	0049      	lsls	r1, r1, #1
    d2bc:	4211      	tst	r1, r2
    d2be:	f100 0004 	add.w	r0, r0, #4
    d2c2:	d0fa      	beq.n	d2ba <_malloc_r+0x11e>
    d2c4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d2c8:	464d      	mov	r5, r9
    d2ca:	4686      	mov	lr, r0
    d2cc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d2d0:	4545      	cmp	r5, r8
    d2d2:	d108      	bne.n	d2e6 <_malloc_r+0x14a>
    d2d4:	e11d      	b.n	d512 <_malloc_r+0x376>
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	f280 8124 	bge.w	d524 <_malloc_r+0x388>
    d2dc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    d2e0:	4545      	cmp	r5, r8
    d2e2:	f000 8116 	beq.w	d512 <_malloc_r+0x376>
    d2e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d2ea:	f022 0203 	bic.w	r2, r2, #3
    d2ee:	1b93      	subs	r3, r2, r6
    d2f0:	2b0f      	cmp	r3, #15
    d2f2:	ddf0      	ble.n	d2d6 <_malloc_r+0x13a>
    d2f4:	4620      	mov	r0, r4
    d2f6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    d2fa:	eb08 0106 	add.w	r1, r8, r6
    d2fe:	f046 0601 	orr.w	r6, r6, #1
    d302:	f8c8 6004 	str.w	r6, [r8, #4]
    d306:	60ec      	str	r4, [r5, #12]
    d308:	60a5      	str	r5, [r4, #8]
    d30a:	f043 0401 	orr.w	r4, r3, #1
    d30e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d312:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d316:	604c      	str	r4, [r1, #4]
    d318:	f848 3002 	str.w	r3, [r8, r2]
    d31c:	f000 f9f4 	bl	d708 <__malloc_unlock>
    d320:	f108 0508 	add.w	r5, r8, #8
    d324:	e002      	b.n	d32c <_malloc_r+0x190>
    d326:	230c      	movs	r3, #12
    d328:	6023      	str	r3, [r4, #0]
    d32a:	2500      	movs	r5, #0
    d32c:	4628      	mov	r0, r5
    d32e:	b003      	add	sp, #12
    d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d334:	f44f 7300 	mov.w	r3, #512	; 0x200
    d338:	2040      	movs	r0, #64	; 0x40
    d33a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    d33e:	e773      	b.n	d228 <_malloc_r+0x8c>
    d340:	68d3      	ldr	r3, [r2, #12]
    d342:	429a      	cmp	r2, r3
    d344:	bf08      	it	eq
    d346:	3002      	addeq	r0, #2
    d348:	f47f af40 	bne.w	d1cc <_malloc_r+0x30>
    d34c:	693d      	ldr	r5, [r7, #16]
    d34e:	f8df c158 	ldr.w	ip, [pc, #344]	; d4a8 <_malloc_r+0x30c>
    d352:	4565      	cmp	r5, ip
    d354:	d182      	bne.n	d25c <_malloc_r+0xc0>
    d356:	687a      	ldr	r2, [r7, #4]
    d358:	1083      	asrs	r3, r0, #2
    d35a:	2101      	movs	r1, #1
    d35c:	4099      	lsls	r1, r3
    d35e:	4291      	cmp	r1, r2
    d360:	d9a7      	bls.n	d2b2 <_malloc_r+0x116>
    d362:	68bd      	ldr	r5, [r7, #8]
    d364:	686b      	ldr	r3, [r5, #4]
    d366:	f023 0903 	bic.w	r9, r3, #3
    d36a:	454e      	cmp	r6, r9
    d36c:	d803      	bhi.n	d376 <_malloc_r+0x1da>
    d36e:	eba9 0306 	sub.w	r3, r9, r6
    d372:	2b0f      	cmp	r3, #15
    d374:	dc7a      	bgt.n	d46c <_malloc_r+0x2d0>
    d376:	f8df b134 	ldr.w	fp, [pc, #308]	; d4ac <_malloc_r+0x310>
    d37a:	4b47      	ldr	r3, [pc, #284]	; (d498 <_malloc_r+0x2fc>)
    d37c:	f8db 2000 	ldr.w	r2, [fp]
    d380:	681b      	ldr	r3, [r3, #0]
    d382:	3201      	adds	r2, #1
    d384:	4433      	add	r3, r6
    d386:	eb05 0a09 	add.w	sl, r5, r9
    d38a:	f000 8133 	beq.w	d5f4 <_malloc_r+0x458>
    d38e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d392:	330f      	adds	r3, #15
    d394:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d398:	f028 080f 	bic.w	r8, r8, #15
    d39c:	4641      	mov	r1, r8
    d39e:	4620      	mov	r0, r4
    d3a0:	f000 fea8 	bl	e0f4 <_sbrk_r>
    d3a4:	1c41      	adds	r1, r0, #1
    d3a6:	4602      	mov	r2, r0
    d3a8:	f000 80f3 	beq.w	d592 <_malloc_r+0x3f6>
    d3ac:	4582      	cmp	sl, r0
    d3ae:	f200 80ee 	bhi.w	d58e <_malloc_r+0x3f2>
    d3b2:	4b3a      	ldr	r3, [pc, #232]	; (d49c <_malloc_r+0x300>)
    d3b4:	6819      	ldr	r1, [r3, #0]
    d3b6:	4441      	add	r1, r8
    d3b8:	6019      	str	r1, [r3, #0]
    d3ba:	4608      	mov	r0, r1
    d3bc:	f000 814e 	beq.w	d65c <_malloc_r+0x4c0>
    d3c0:	f8db 1000 	ldr.w	r1, [fp]
    d3c4:	9301      	str	r3, [sp, #4]
    d3c6:	3101      	adds	r1, #1
    d3c8:	bf1b      	ittet	ne
    d3ca:	eba2 010a 	subne.w	r1, r2, sl
    d3ce:	1809      	addne	r1, r1, r0
    d3d0:	f8cb 2000 	streq.w	r2, [fp]
    d3d4:	6019      	strne	r1, [r3, #0]
    d3d6:	f012 0b07 	ands.w	fp, r2, #7
    d3da:	f000 8117 	beq.w	d60c <_malloc_r+0x470>
    d3de:	f1cb 0108 	rsb	r1, fp, #8
    d3e2:	440a      	add	r2, r1
    d3e4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d3e8:	4490      	add	r8, r2
    d3ea:	3108      	adds	r1, #8
    d3ec:	eba1 0108 	sub.w	r1, r1, r8
    d3f0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d3f4:	4651      	mov	r1, sl
    d3f6:	4620      	mov	r0, r4
    d3f8:	9200      	str	r2, [sp, #0]
    d3fa:	f000 fe7b 	bl	e0f4 <_sbrk_r>
    d3fe:	1c42      	adds	r2, r0, #1
    d400:	e9dd 2300 	ldrd	r2, r3, [sp]
    d404:	f000 814f 	beq.w	d6a6 <_malloc_r+0x50a>
    d408:	1a80      	subs	r0, r0, r2
    d40a:	eb00 080a 	add.w	r8, r0, sl
    d40e:	6819      	ldr	r1, [r3, #0]
    d410:	60ba      	str	r2, [r7, #8]
    d412:	f048 0001 	orr.w	r0, r8, #1
    d416:	4451      	add	r1, sl
    d418:	42bd      	cmp	r5, r7
    d41a:	6050      	str	r0, [r2, #4]
    d41c:	6019      	str	r1, [r3, #0]
    d41e:	f000 8129 	beq.w	d674 <_malloc_r+0x4d8>
    d422:	f1b9 0f0f 	cmp.w	r9, #15
    d426:	f240 8127 	bls.w	d678 <_malloc_r+0x4dc>
    d42a:	6868      	ldr	r0, [r5, #4]
    d42c:	f1a9 0c0c 	sub.w	ip, r9, #12
    d430:	f02c 0c07 	bic.w	ip, ip, #7
    d434:	f000 0001 	and.w	r0, r0, #1
    d438:	ea40 000c 	orr.w	r0, r0, ip
    d43c:	6068      	str	r0, [r5, #4]
    d43e:	f04f 0e05 	mov.w	lr, #5
    d442:	eb05 000c 	add.w	r0, r5, ip
    d446:	f1bc 0f0f 	cmp.w	ip, #15
    d44a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d44e:	f200 8132 	bhi.w	d6b6 <_malloc_r+0x51a>
    d452:	6850      	ldr	r0, [r2, #4]
    d454:	4615      	mov	r5, r2
    d456:	4b12      	ldr	r3, [pc, #72]	; (d4a0 <_malloc_r+0x304>)
    d458:	681a      	ldr	r2, [r3, #0]
    d45a:	428a      	cmp	r2, r1
    d45c:	bf38      	it	cc
    d45e:	6019      	strcc	r1, [r3, #0]
    d460:	4b10      	ldr	r3, [pc, #64]	; (d4a4 <_malloc_r+0x308>)
    d462:	681a      	ldr	r2, [r3, #0]
    d464:	428a      	cmp	r2, r1
    d466:	bf38      	it	cc
    d468:	6019      	strcc	r1, [r3, #0]
    d46a:	e094      	b.n	d596 <_malloc_r+0x3fa>
    d46c:	19aa      	adds	r2, r5, r6
    d46e:	f043 0301 	orr.w	r3, r3, #1
    d472:	f046 0601 	orr.w	r6, r6, #1
    d476:	606e      	str	r6, [r5, #4]
    d478:	4620      	mov	r0, r4
    d47a:	60ba      	str	r2, [r7, #8]
    d47c:	6053      	str	r3, [r2, #4]
    d47e:	f000 f943 	bl	d708 <__malloc_unlock>
    d482:	3508      	adds	r5, #8
    d484:	4628      	mov	r0, r5
    d486:	b003      	add	sp, #12
    d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d48c:	68d9      	ldr	r1, [r3, #12]
    d48e:	441a      	add	r2, r3
    d490:	e6a1      	b.n	d1d6 <_malloc_r+0x3a>
    d492:	bf00      	nop
    d494:	200038c4 	.word	0x200038c4
    d498:	20004950 	.word	0x20004950
    d49c:	20004920 	.word	0x20004920
    d4a0:	20004948 	.word	0x20004948
    d4a4:	2000494c 	.word	0x2000494c
    d4a8:	200038cc 	.word	0x200038cc
    d4ac:	20003ccc 	.word	0x20003ccc
    d4b0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d4b4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d4b8:	d363      	bcc.n	d582 <_malloc_r+0x3e6>
    d4ba:	2b14      	cmp	r3, #20
    d4bc:	f200 80b7 	bhi.w	d62e <_malloc_r+0x492>
    d4c0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d4c4:	00c9      	lsls	r1, r1, #3
    d4c6:	335b      	adds	r3, #91	; 0x5b
    d4c8:	eb07 0e01 	add.w	lr, r7, r1
    d4cc:	5879      	ldr	r1, [r7, r1]
    d4ce:	f1ae 0e08 	sub.w	lr, lr, #8
    d4d2:	458e      	cmp	lr, r1
    d4d4:	f000 8091 	beq.w	d5fa <_malloc_r+0x45e>
    d4d8:	684b      	ldr	r3, [r1, #4]
    d4da:	f023 0303 	bic.w	r3, r3, #3
    d4de:	4293      	cmp	r3, r2
    d4e0:	d902      	bls.n	d4e8 <_malloc_r+0x34c>
    d4e2:	6889      	ldr	r1, [r1, #8]
    d4e4:	458e      	cmp	lr, r1
    d4e6:	d1f7      	bne.n	d4d8 <_malloc_r+0x33c>
    d4e8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d4ec:	687a      	ldr	r2, [r7, #4]
    d4ee:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d4f2:	f8ce 5008 	str.w	r5, [lr, #8]
    d4f6:	60cd      	str	r5, [r1, #12]
    d4f8:	e6d6      	b.n	d2a8 <_malloc_r+0x10c>
    d4fa:	2b14      	cmp	r3, #20
    d4fc:	d959      	bls.n	d5b2 <_malloc_r+0x416>
    d4fe:	2b54      	cmp	r3, #84	; 0x54
    d500:	f200 809d 	bhi.w	d63e <_malloc_r+0x4a2>
    d504:	0b33      	lsrs	r3, r6, #12
    d506:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d50a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d50e:	00c3      	lsls	r3, r0, #3
    d510:	e68a      	b.n	d228 <_malloc_r+0x8c>
    d512:	f10e 0e01 	add.w	lr, lr, #1
    d516:	f01e 0f03 	tst.w	lr, #3
    d51a:	f105 0508 	add.w	r5, r5, #8
    d51e:	f47f aed5 	bne.w	d2cc <_malloc_r+0x130>
    d522:	e051      	b.n	d5c8 <_malloc_r+0x42c>
    d524:	4442      	add	r2, r8
    d526:	4645      	mov	r5, r8
    d528:	6853      	ldr	r3, [r2, #4]
    d52a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d52e:	f043 0301 	orr.w	r3, r3, #1
    d532:	6053      	str	r3, [r2, #4]
    d534:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d538:	4620      	mov	r0, r4
    d53a:	60d9      	str	r1, [r3, #12]
    d53c:	608b      	str	r3, [r1, #8]
    d53e:	f000 f8e3 	bl	d708 <__malloc_unlock>
    d542:	e6f3      	b.n	d32c <_malloc_r+0x190>
    d544:	08f0      	lsrs	r0, r6, #3
    d546:	f106 0208 	add.w	r2, r6, #8
    d54a:	e637      	b.n	d1bc <_malloc_r+0x20>
    d54c:	442a      	add	r2, r5
    d54e:	4620      	mov	r0, r4
    d550:	6853      	ldr	r3, [r2, #4]
    d552:	f043 0301 	orr.w	r3, r3, #1
    d556:	6053      	str	r3, [r2, #4]
    d558:	3508      	adds	r5, #8
    d55a:	f000 f8d5 	bl	d708 <__malloc_unlock>
    d55e:	e6e5      	b.n	d32c <_malloc_r+0x190>
    d560:	19a9      	adds	r1, r5, r6
    d562:	4620      	mov	r0, r4
    d564:	f046 0601 	orr.w	r6, r6, #1
    d568:	f043 0401 	orr.w	r4, r3, #1
    d56c:	606e      	str	r6, [r5, #4]
    d56e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d572:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d576:	604c      	str	r4, [r1, #4]
    d578:	50ab      	str	r3, [r5, r2]
    d57a:	f000 f8c5 	bl	d708 <__malloc_unlock>
    d57e:	3508      	adds	r5, #8
    d580:	e6d4      	b.n	d32c <_malloc_r+0x190>
    d582:	0993      	lsrs	r3, r2, #6
    d584:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d588:	00c9      	lsls	r1, r1, #3
    d58a:	3338      	adds	r3, #56	; 0x38
    d58c:	e79c      	b.n	d4c8 <_malloc_r+0x32c>
    d58e:	42bd      	cmp	r5, r7
    d590:	d05f      	beq.n	d652 <_malloc_r+0x4b6>
    d592:	68bd      	ldr	r5, [r7, #8]
    d594:	6868      	ldr	r0, [r5, #4]
    d596:	f020 0803 	bic.w	r8, r0, #3
    d59a:	4546      	cmp	r6, r8
    d59c:	eba8 0306 	sub.w	r3, r8, r6
    d5a0:	d802      	bhi.n	d5a8 <_malloc_r+0x40c>
    d5a2:	2b0f      	cmp	r3, #15
    d5a4:	f73f af62 	bgt.w	d46c <_malloc_r+0x2d0>
    d5a8:	4620      	mov	r0, r4
    d5aa:	f000 f8ad 	bl	d708 <__malloc_unlock>
    d5ae:	2500      	movs	r5, #0
    d5b0:	e6bc      	b.n	d32c <_malloc_r+0x190>
    d5b2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d5b6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d5ba:	00c3      	lsls	r3, r0, #3
    d5bc:	e634      	b.n	d228 <_malloc_r+0x8c>
    d5be:	f859 3908 	ldr.w	r3, [r9], #-8
    d5c2:	454b      	cmp	r3, r9
    d5c4:	f040 8096 	bne.w	d6f4 <_malloc_r+0x558>
    d5c8:	f010 0f03 	tst.w	r0, #3
    d5cc:	f100 30ff 	add.w	r0, r0, #4294967295
    d5d0:	d1f5      	bne.n	d5be <_malloc_r+0x422>
    d5d2:	687b      	ldr	r3, [r7, #4]
    d5d4:	ea23 0301 	bic.w	r3, r3, r1
    d5d8:	607b      	str	r3, [r7, #4]
    d5da:	0049      	lsls	r1, r1, #1
    d5dc:	4299      	cmp	r1, r3
    d5de:	f63f aec0 	bhi.w	d362 <_malloc_r+0x1c6>
    d5e2:	b919      	cbnz	r1, d5ec <_malloc_r+0x450>
    d5e4:	e6bd      	b.n	d362 <_malloc_r+0x1c6>
    d5e6:	0049      	lsls	r1, r1, #1
    d5e8:	f10e 0e04 	add.w	lr, lr, #4
    d5ec:	4219      	tst	r1, r3
    d5ee:	d0fa      	beq.n	d5e6 <_malloc_r+0x44a>
    d5f0:	4670      	mov	r0, lr
    d5f2:	e667      	b.n	d2c4 <_malloc_r+0x128>
    d5f4:	f103 0810 	add.w	r8, r3, #16
    d5f8:	e6d0      	b.n	d39c <_malloc_r+0x200>
    d5fa:	109a      	asrs	r2, r3, #2
    d5fc:	f04f 0801 	mov.w	r8, #1
    d600:	687b      	ldr	r3, [r7, #4]
    d602:	fa08 f202 	lsl.w	r2, r8, r2
    d606:	431a      	orrs	r2, r3
    d608:	607a      	str	r2, [r7, #4]
    d60a:	e770      	b.n	d4ee <_malloc_r+0x352>
    d60c:	eb02 0108 	add.w	r1, r2, r8
    d610:	4249      	negs	r1, r1
    d612:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d616:	4651      	mov	r1, sl
    d618:	4620      	mov	r0, r4
    d61a:	9200      	str	r2, [sp, #0]
    d61c:	f000 fd6a 	bl	e0f4 <_sbrk_r>
    d620:	1c43      	adds	r3, r0, #1
    d622:	e9dd 2300 	ldrd	r2, r3, [sp]
    d626:	f47f aeef 	bne.w	d408 <_malloc_r+0x26c>
    d62a:	46da      	mov	sl, fp
    d62c:	e6ef      	b.n	d40e <_malloc_r+0x272>
    d62e:	2b54      	cmp	r3, #84	; 0x54
    d630:	d825      	bhi.n	d67e <_malloc_r+0x4e2>
    d632:	0b13      	lsrs	r3, r2, #12
    d634:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d638:	00c9      	lsls	r1, r1, #3
    d63a:	336e      	adds	r3, #110	; 0x6e
    d63c:	e744      	b.n	d4c8 <_malloc_r+0x32c>
    d63e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d642:	d825      	bhi.n	d690 <_malloc_r+0x4f4>
    d644:	0bf3      	lsrs	r3, r6, #15
    d646:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d64a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d64e:	00c3      	lsls	r3, r0, #3
    d650:	e5ea      	b.n	d228 <_malloc_r+0x8c>
    d652:	4b29      	ldr	r3, [pc, #164]	; (d6f8 <_malloc_r+0x55c>)
    d654:	6818      	ldr	r0, [r3, #0]
    d656:	4440      	add	r0, r8
    d658:	6018      	str	r0, [r3, #0]
    d65a:	e6b1      	b.n	d3c0 <_malloc_r+0x224>
    d65c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d660:	f1bc 0f00 	cmp.w	ip, #0
    d664:	f47f aeac 	bne.w	d3c0 <_malloc_r+0x224>
    d668:	68bd      	ldr	r5, [r7, #8]
    d66a:	44c8      	add	r8, r9
    d66c:	f048 0001 	orr.w	r0, r8, #1
    d670:	6068      	str	r0, [r5, #4]
    d672:	e6f0      	b.n	d456 <_malloc_r+0x2ba>
    d674:	4615      	mov	r5, r2
    d676:	e6ee      	b.n	d456 <_malloc_r+0x2ba>
    d678:	2301      	movs	r3, #1
    d67a:	6053      	str	r3, [r2, #4]
    d67c:	e794      	b.n	d5a8 <_malloc_r+0x40c>
    d67e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d682:	d823      	bhi.n	d6cc <_malloc_r+0x530>
    d684:	0bd3      	lsrs	r3, r2, #15
    d686:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d68a:	00c9      	lsls	r1, r1, #3
    d68c:	3377      	adds	r3, #119	; 0x77
    d68e:	e71b      	b.n	d4c8 <_malloc_r+0x32c>
    d690:	f240 5254 	movw	r2, #1364	; 0x554
    d694:	4293      	cmp	r3, r2
    d696:	d823      	bhi.n	d6e0 <_malloc_r+0x544>
    d698:	0cb3      	lsrs	r3, r6, #18
    d69a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d69e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d6a2:	00c3      	lsls	r3, r0, #3
    d6a4:	e5c0      	b.n	d228 <_malloc_r+0x8c>
    d6a6:	f1ab 0b08 	sub.w	fp, fp, #8
    d6aa:	44d8      	add	r8, fp
    d6ac:	eba8 0802 	sub.w	r8, r8, r2
    d6b0:	f04f 0a00 	mov.w	sl, #0
    d6b4:	e6ab      	b.n	d40e <_malloc_r+0x272>
    d6b6:	f105 0108 	add.w	r1, r5, #8
    d6ba:	4620      	mov	r0, r4
    d6bc:	9300      	str	r3, [sp, #0]
    d6be:	f000 fee1 	bl	e484 <_free_r>
    d6c2:	68bd      	ldr	r5, [r7, #8]
    d6c4:	9b00      	ldr	r3, [sp, #0]
    d6c6:	6868      	ldr	r0, [r5, #4]
    d6c8:	6819      	ldr	r1, [r3, #0]
    d6ca:	e6c4      	b.n	d456 <_malloc_r+0x2ba>
    d6cc:	f240 5154 	movw	r1, #1364	; 0x554
    d6d0:	428b      	cmp	r3, r1
    d6d2:	d80b      	bhi.n	d6ec <_malloc_r+0x550>
    d6d4:	0c93      	lsrs	r3, r2, #18
    d6d6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d6da:	00c9      	lsls	r1, r1, #3
    d6dc:	337c      	adds	r3, #124	; 0x7c
    d6de:	e6f3      	b.n	d4c8 <_malloc_r+0x32c>
    d6e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d6e4:	207f      	movs	r0, #127	; 0x7f
    d6e6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d6ea:	e59d      	b.n	d228 <_malloc_r+0x8c>
    d6ec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d6f0:	237e      	movs	r3, #126	; 0x7e
    d6f2:	e6e9      	b.n	d4c8 <_malloc_r+0x32c>
    d6f4:	687b      	ldr	r3, [r7, #4]
    d6f6:	e770      	b.n	d5da <_malloc_r+0x43e>
    d6f8:	20004920 	.word	0x20004920

0000d6fc <__malloc_lock>:
    d6fc:	4801      	ldr	r0, [pc, #4]	; (d704 <__malloc_lock+0x8>)
    d6fe:	f000 bd4f 	b.w	e1a0 <__retarget_lock_acquire_recursive>
    d702:	bf00      	nop
    d704:	20004918 	.word	0x20004918

0000d708 <__malloc_unlock>:
    d708:	4801      	ldr	r0, [pc, #4]	; (d710 <__malloc_unlock+0x8>)
    d70a:	f000 bd4b 	b.w	e1a4 <__retarget_lock_release_recursive>
    d70e:	bf00      	nop
    d710:	20004918 	.word	0x20004918

0000d714 <realloc>:
    d714:	b410      	push	{r4}
    d716:	4c04      	ldr	r4, [pc, #16]	; (d728 <realloc+0x14>)
    d718:	4603      	mov	r3, r0
    d71a:	460a      	mov	r2, r1
    d71c:	6820      	ldr	r0, [r4, #0]
    d71e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d722:	4619      	mov	r1, r3
    d724:	f000 b802 	b.w	d72c <_realloc_r>
    d728:	20003ce0 	.word	0x20003ce0

0000d72c <_realloc_r>:
    d72c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d730:	4617      	mov	r7, r2
    d732:	2900      	cmp	r1, #0
    d734:	f000 8098 	beq.w	d868 <_realloc_r+0x13c>
    d738:	460c      	mov	r4, r1
    d73a:	f107 050b 	add.w	r5, r7, #11
    d73e:	4680      	mov	r8, r0
    d740:	f7ff ffdc 	bl	d6fc <__malloc_lock>
    d744:	2d16      	cmp	r5, #22
    d746:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d74a:	d85b      	bhi.n	d804 <_realloc_r+0xd8>
    d74c:	2510      	movs	r5, #16
    d74e:	462a      	mov	r2, r5
    d750:	42af      	cmp	r7, r5
    d752:	d85c      	bhi.n	d80e <_realloc_r+0xe2>
    d754:	f021 0603 	bic.w	r6, r1, #3
    d758:	4296      	cmp	r6, r2
    d75a:	f1a4 0908 	sub.w	r9, r4, #8
    d75e:	da62      	bge.n	d826 <_realloc_r+0xfa>
    d760:	4bbc      	ldr	r3, [pc, #752]	; (da54 <_realloc_r+0x328>)
    d762:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d766:	eb09 0006 	add.w	r0, r9, r6
    d76a:	4584      	cmp	ip, r0
    d76c:	f000 8097 	beq.w	d89e <_realloc_r+0x172>
    d770:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d774:	f02c 0301 	bic.w	r3, ip, #1
    d778:	4403      	add	r3, r0
    d77a:	685b      	ldr	r3, [r3, #4]
    d77c:	07db      	lsls	r3, r3, #31
    d77e:	d468      	bmi.n	d852 <_realloc_r+0x126>
    d780:	f02c 0c03 	bic.w	ip, ip, #3
    d784:	eb06 030c 	add.w	r3, r6, ip
    d788:	4293      	cmp	r3, r2
    d78a:	da47      	bge.n	d81c <_realloc_r+0xf0>
    d78c:	07cb      	lsls	r3, r1, #31
    d78e:	d410      	bmi.n	d7b2 <_realloc_r+0x86>
    d790:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d794:	eba9 0a03 	sub.w	sl, r9, r3
    d798:	f8da 3004 	ldr.w	r3, [sl, #4]
    d79c:	f023 0103 	bic.w	r1, r3, #3
    d7a0:	448c      	add	ip, r1
    d7a2:	44b4      	add	ip, r6
    d7a4:	4594      	cmp	ip, r2
    d7a6:	f280 8111 	bge.w	d9cc <_realloc_r+0x2a0>
    d7aa:	1873      	adds	r3, r6, r1
    d7ac:	4293      	cmp	r3, r2
    d7ae:	f280 80e8 	bge.w	d982 <_realloc_r+0x256>
    d7b2:	4639      	mov	r1, r7
    d7b4:	4640      	mov	r0, r8
    d7b6:	f7ff fcf1 	bl	d19c <_malloc_r>
    d7ba:	4607      	mov	r7, r0
    d7bc:	b1e0      	cbz	r0, d7f8 <_realloc_r+0xcc>
    d7be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d7c2:	f023 0301 	bic.w	r3, r3, #1
    d7c6:	444b      	add	r3, r9
    d7c8:	f1a0 0208 	sub.w	r2, r0, #8
    d7cc:	4293      	cmp	r3, r2
    d7ce:	f000 80d2 	beq.w	d976 <_realloc_r+0x24a>
    d7d2:	1f32      	subs	r2, r6, #4
    d7d4:	2a24      	cmp	r2, #36	; 0x24
    d7d6:	f200 80f5 	bhi.w	d9c4 <_realloc_r+0x298>
    d7da:	2a13      	cmp	r2, #19
    d7dc:	f200 80ac 	bhi.w	d938 <_realloc_r+0x20c>
    d7e0:	4603      	mov	r3, r0
    d7e2:	4622      	mov	r2, r4
    d7e4:	6811      	ldr	r1, [r2, #0]
    d7e6:	6019      	str	r1, [r3, #0]
    d7e8:	6851      	ldr	r1, [r2, #4]
    d7ea:	6059      	str	r1, [r3, #4]
    d7ec:	6892      	ldr	r2, [r2, #8]
    d7ee:	609a      	str	r2, [r3, #8]
    d7f0:	4621      	mov	r1, r4
    d7f2:	4640      	mov	r0, r8
    d7f4:	f000 fe46 	bl	e484 <_free_r>
    d7f8:	4640      	mov	r0, r8
    d7fa:	f7ff ff85 	bl	d708 <__malloc_unlock>
    d7fe:	4638      	mov	r0, r7
    d800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d804:	f025 0507 	bic.w	r5, r5, #7
    d808:	2d00      	cmp	r5, #0
    d80a:	462a      	mov	r2, r5
    d80c:	daa0      	bge.n	d750 <_realloc_r+0x24>
    d80e:	230c      	movs	r3, #12
    d810:	f8c8 3000 	str.w	r3, [r8]
    d814:	2700      	movs	r7, #0
    d816:	4638      	mov	r0, r7
    d818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d81c:	461e      	mov	r6, r3
    d81e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    d822:	60d3      	str	r3, [r2, #12]
    d824:	609a      	str	r2, [r3, #8]
    d826:	1b73      	subs	r3, r6, r5
    d828:	2b0f      	cmp	r3, #15
    d82a:	d822      	bhi.n	d872 <_realloc_r+0x146>
    d82c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d830:	f003 0301 	and.w	r3, r3, #1
    d834:	4333      	orrs	r3, r6
    d836:	444e      	add	r6, r9
    d838:	f8c9 3004 	str.w	r3, [r9, #4]
    d83c:	6873      	ldr	r3, [r6, #4]
    d83e:	f043 0301 	orr.w	r3, r3, #1
    d842:	6073      	str	r3, [r6, #4]
    d844:	4640      	mov	r0, r8
    d846:	4627      	mov	r7, r4
    d848:	f7ff ff5e 	bl	d708 <__malloc_unlock>
    d84c:	4638      	mov	r0, r7
    d84e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d852:	07c9      	lsls	r1, r1, #31
    d854:	d4ad      	bmi.n	d7b2 <_realloc_r+0x86>
    d856:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d85a:	eba9 0a03 	sub.w	sl, r9, r3
    d85e:	f8da 1004 	ldr.w	r1, [sl, #4]
    d862:	f021 0103 	bic.w	r1, r1, #3
    d866:	e7a0      	b.n	d7aa <_realloc_r+0x7e>
    d868:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d86c:	4611      	mov	r1, r2
    d86e:	f7ff bc95 	b.w	d19c <_malloc_r>
    d872:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d876:	eb09 0105 	add.w	r1, r9, r5
    d87a:	f002 0201 	and.w	r2, r2, #1
    d87e:	444e      	add	r6, r9
    d880:	f043 0301 	orr.w	r3, r3, #1
    d884:	432a      	orrs	r2, r5
    d886:	f8c9 2004 	str.w	r2, [r9, #4]
    d88a:	604b      	str	r3, [r1, #4]
    d88c:	6873      	ldr	r3, [r6, #4]
    d88e:	f043 0301 	orr.w	r3, r3, #1
    d892:	3108      	adds	r1, #8
    d894:	6073      	str	r3, [r6, #4]
    d896:	4640      	mov	r0, r8
    d898:	f000 fdf4 	bl	e484 <_free_r>
    d89c:	e7d2      	b.n	d844 <_realloc_r+0x118>
    d89e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    d8a2:	f020 0b03 	bic.w	fp, r0, #3
    d8a6:	eb06 0c0b 	add.w	ip, r6, fp
    d8aa:	f105 0010 	add.w	r0, r5, #16
    d8ae:	4584      	cmp	ip, r0
    d8b0:	da4d      	bge.n	d94e <_realloc_r+0x222>
    d8b2:	07c9      	lsls	r1, r1, #31
    d8b4:	f53f af7d 	bmi.w	d7b2 <_realloc_r+0x86>
    d8b8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d8bc:	eba9 0a01 	sub.w	sl, r9, r1
    d8c0:	f8da 1004 	ldr.w	r1, [sl, #4]
    d8c4:	f021 0103 	bic.w	r1, r1, #3
    d8c8:	448b      	add	fp, r1
    d8ca:	44b3      	add	fp, r6
    d8cc:	4558      	cmp	r0, fp
    d8ce:	f73f af6c 	bgt.w	d7aa <_realloc_r+0x7e>
    d8d2:	4657      	mov	r7, sl
    d8d4:	f8da 100c 	ldr.w	r1, [sl, #12]
    d8d8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d8dc:	1f32      	subs	r2, r6, #4
    d8de:	2a24      	cmp	r2, #36	; 0x24
    d8e0:	60c1      	str	r1, [r0, #12]
    d8e2:	6088      	str	r0, [r1, #8]
    d8e4:	f200 80db 	bhi.w	da9e <_realloc_r+0x372>
    d8e8:	2a13      	cmp	r2, #19
    d8ea:	f240 80d6 	bls.w	da9a <_realloc_r+0x36e>
    d8ee:	6821      	ldr	r1, [r4, #0]
    d8f0:	f8ca 1008 	str.w	r1, [sl, #8]
    d8f4:	6861      	ldr	r1, [r4, #4]
    d8f6:	f8ca 100c 	str.w	r1, [sl, #12]
    d8fa:	2a1b      	cmp	r2, #27
    d8fc:	f200 80df 	bhi.w	dabe <_realloc_r+0x392>
    d900:	3408      	adds	r4, #8
    d902:	f10a 0210 	add.w	r2, sl, #16
    d906:	6821      	ldr	r1, [r4, #0]
    d908:	6011      	str	r1, [r2, #0]
    d90a:	6861      	ldr	r1, [r4, #4]
    d90c:	6051      	str	r1, [r2, #4]
    d90e:	68a1      	ldr	r1, [r4, #8]
    d910:	6091      	str	r1, [r2, #8]
    d912:	eb0a 0105 	add.w	r1, sl, r5
    d916:	ebab 0205 	sub.w	r2, fp, r5
    d91a:	f042 0201 	orr.w	r2, r2, #1
    d91e:	6099      	str	r1, [r3, #8]
    d920:	604a      	str	r2, [r1, #4]
    d922:	f8da 3004 	ldr.w	r3, [sl, #4]
    d926:	f003 0301 	and.w	r3, r3, #1
    d92a:	432b      	orrs	r3, r5
    d92c:	4640      	mov	r0, r8
    d92e:	f8ca 3004 	str.w	r3, [sl, #4]
    d932:	f7ff fee9 	bl	d708 <__malloc_unlock>
    d936:	e76e      	b.n	d816 <_realloc_r+0xea>
    d938:	6823      	ldr	r3, [r4, #0]
    d93a:	6003      	str	r3, [r0, #0]
    d93c:	6863      	ldr	r3, [r4, #4]
    d93e:	6043      	str	r3, [r0, #4]
    d940:	2a1b      	cmp	r2, #27
    d942:	d868      	bhi.n	da16 <_realloc_r+0x2ea>
    d944:	f104 0208 	add.w	r2, r4, #8
    d948:	f100 0308 	add.w	r3, r0, #8
    d94c:	e74a      	b.n	d7e4 <_realloc_r+0xb8>
    d94e:	eb09 0205 	add.w	r2, r9, r5
    d952:	609a      	str	r2, [r3, #8]
    d954:	ebac 0305 	sub.w	r3, ip, r5
    d958:	f043 0301 	orr.w	r3, r3, #1
    d95c:	6053      	str	r3, [r2, #4]
    d95e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d962:	f003 0301 	and.w	r3, r3, #1
    d966:	432b      	orrs	r3, r5
    d968:	4640      	mov	r0, r8
    d96a:	f844 3c04 	str.w	r3, [r4, #-4]
    d96e:	f7ff fecb 	bl	d708 <__malloc_unlock>
    d972:	4627      	mov	r7, r4
    d974:	e74f      	b.n	d816 <_realloc_r+0xea>
    d976:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d97a:	f023 0303 	bic.w	r3, r3, #3
    d97e:	441e      	add	r6, r3
    d980:	e751      	b.n	d826 <_realloc_r+0xfa>
    d982:	4657      	mov	r7, sl
    d984:	f8da 100c 	ldr.w	r1, [sl, #12]
    d988:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d98c:	1f32      	subs	r2, r6, #4
    d98e:	2a24      	cmp	r2, #36	; 0x24
    d990:	60c1      	str	r1, [r0, #12]
    d992:	6088      	str	r0, [r1, #8]
    d994:	d84c      	bhi.n	da30 <_realloc_r+0x304>
    d996:	2a13      	cmp	r2, #19
    d998:	d948      	bls.n	da2c <_realloc_r+0x300>
    d99a:	6821      	ldr	r1, [r4, #0]
    d99c:	f8ca 1008 	str.w	r1, [sl, #8]
    d9a0:	6861      	ldr	r1, [r4, #4]
    d9a2:	f8ca 100c 	str.w	r1, [sl, #12]
    d9a6:	2a1b      	cmp	r2, #27
    d9a8:	d856      	bhi.n	da58 <_realloc_r+0x32c>
    d9aa:	3408      	adds	r4, #8
    d9ac:	f10a 0210 	add.w	r2, sl, #16
    d9b0:	461e      	mov	r6, r3
    d9b2:	6823      	ldr	r3, [r4, #0]
    d9b4:	6013      	str	r3, [r2, #0]
    d9b6:	6863      	ldr	r3, [r4, #4]
    d9b8:	6053      	str	r3, [r2, #4]
    d9ba:	68a3      	ldr	r3, [r4, #8]
    d9bc:	6093      	str	r3, [r2, #8]
    d9be:	46d1      	mov	r9, sl
    d9c0:	463c      	mov	r4, r7
    d9c2:	e730      	b.n	d826 <_realloc_r+0xfa>
    d9c4:	4621      	mov	r1, r4
    d9c6:	f000 fa51 	bl	de6c <memmove>
    d9ca:	e711      	b.n	d7f0 <_realloc_r+0xc4>
    d9cc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    d9d0:	4657      	mov	r7, sl
    d9d2:	60cb      	str	r3, [r1, #12]
    d9d4:	6099      	str	r1, [r3, #8]
    d9d6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    d9da:	f8da 300c 	ldr.w	r3, [sl, #12]
    d9de:	60cb      	str	r3, [r1, #12]
    d9e0:	1f32      	subs	r2, r6, #4
    d9e2:	2a24      	cmp	r2, #36	; 0x24
    d9e4:	6099      	str	r1, [r3, #8]
    d9e6:	d82d      	bhi.n	da44 <_realloc_r+0x318>
    d9e8:	2a13      	cmp	r2, #19
    d9ea:	d929      	bls.n	da40 <_realloc_r+0x314>
    d9ec:	6823      	ldr	r3, [r4, #0]
    d9ee:	f8ca 3008 	str.w	r3, [sl, #8]
    d9f2:	6863      	ldr	r3, [r4, #4]
    d9f4:	f8ca 300c 	str.w	r3, [sl, #12]
    d9f8:	2a1b      	cmp	r2, #27
    d9fa:	d842      	bhi.n	da82 <_realloc_r+0x356>
    d9fc:	3408      	adds	r4, #8
    d9fe:	f10a 0310 	add.w	r3, sl, #16
    da02:	6822      	ldr	r2, [r4, #0]
    da04:	601a      	str	r2, [r3, #0]
    da06:	6862      	ldr	r2, [r4, #4]
    da08:	605a      	str	r2, [r3, #4]
    da0a:	68a2      	ldr	r2, [r4, #8]
    da0c:	609a      	str	r2, [r3, #8]
    da0e:	4666      	mov	r6, ip
    da10:	46d1      	mov	r9, sl
    da12:	463c      	mov	r4, r7
    da14:	e707      	b.n	d826 <_realloc_r+0xfa>
    da16:	68a3      	ldr	r3, [r4, #8]
    da18:	6083      	str	r3, [r0, #8]
    da1a:	68e3      	ldr	r3, [r4, #12]
    da1c:	60c3      	str	r3, [r0, #12]
    da1e:	2a24      	cmp	r2, #36	; 0x24
    da20:	d026      	beq.n	da70 <_realloc_r+0x344>
    da22:	f104 0210 	add.w	r2, r4, #16
    da26:	f100 0310 	add.w	r3, r0, #16
    da2a:	e6db      	b.n	d7e4 <_realloc_r+0xb8>
    da2c:	463a      	mov	r2, r7
    da2e:	e7bf      	b.n	d9b0 <_realloc_r+0x284>
    da30:	4621      	mov	r1, r4
    da32:	4638      	mov	r0, r7
    da34:	461e      	mov	r6, r3
    da36:	46d1      	mov	r9, sl
    da38:	f000 fa18 	bl	de6c <memmove>
    da3c:	463c      	mov	r4, r7
    da3e:	e6f2      	b.n	d826 <_realloc_r+0xfa>
    da40:	463b      	mov	r3, r7
    da42:	e7de      	b.n	da02 <_realloc_r+0x2d6>
    da44:	4621      	mov	r1, r4
    da46:	4638      	mov	r0, r7
    da48:	4666      	mov	r6, ip
    da4a:	46d1      	mov	r9, sl
    da4c:	f000 fa0e 	bl	de6c <memmove>
    da50:	463c      	mov	r4, r7
    da52:	e6e8      	b.n	d826 <_realloc_r+0xfa>
    da54:	200038c4 	.word	0x200038c4
    da58:	68a1      	ldr	r1, [r4, #8]
    da5a:	f8ca 1010 	str.w	r1, [sl, #16]
    da5e:	68e1      	ldr	r1, [r4, #12]
    da60:	f8ca 1014 	str.w	r1, [sl, #20]
    da64:	2a24      	cmp	r2, #36	; 0x24
    da66:	d020      	beq.n	daaa <_realloc_r+0x37e>
    da68:	3410      	adds	r4, #16
    da6a:	f10a 0218 	add.w	r2, sl, #24
    da6e:	e79f      	b.n	d9b0 <_realloc_r+0x284>
    da70:	6923      	ldr	r3, [r4, #16]
    da72:	6103      	str	r3, [r0, #16]
    da74:	6961      	ldr	r1, [r4, #20]
    da76:	6141      	str	r1, [r0, #20]
    da78:	f104 0218 	add.w	r2, r4, #24
    da7c:	f100 0318 	add.w	r3, r0, #24
    da80:	e6b0      	b.n	d7e4 <_realloc_r+0xb8>
    da82:	68a3      	ldr	r3, [r4, #8]
    da84:	f8ca 3010 	str.w	r3, [sl, #16]
    da88:	68e3      	ldr	r3, [r4, #12]
    da8a:	f8ca 3014 	str.w	r3, [sl, #20]
    da8e:	2a24      	cmp	r2, #36	; 0x24
    da90:	d021      	beq.n	dad6 <_realloc_r+0x3aa>
    da92:	3410      	adds	r4, #16
    da94:	f10a 0318 	add.w	r3, sl, #24
    da98:	e7b3      	b.n	da02 <_realloc_r+0x2d6>
    da9a:	463a      	mov	r2, r7
    da9c:	e733      	b.n	d906 <_realloc_r+0x1da>
    da9e:	4621      	mov	r1, r4
    daa0:	4638      	mov	r0, r7
    daa2:	f000 f9e3 	bl	de6c <memmove>
    daa6:	4b16      	ldr	r3, [pc, #88]	; (db00 <_realloc_r+0x3d4>)
    daa8:	e733      	b.n	d912 <_realloc_r+0x1e6>
    daaa:	6922      	ldr	r2, [r4, #16]
    daac:	f8ca 2018 	str.w	r2, [sl, #24]
    dab0:	6962      	ldr	r2, [r4, #20]
    dab2:	f8ca 201c 	str.w	r2, [sl, #28]
    dab6:	3418      	adds	r4, #24
    dab8:	f10a 0220 	add.w	r2, sl, #32
    dabc:	e778      	b.n	d9b0 <_realloc_r+0x284>
    dabe:	68a1      	ldr	r1, [r4, #8]
    dac0:	f8ca 1010 	str.w	r1, [sl, #16]
    dac4:	68e1      	ldr	r1, [r4, #12]
    dac6:	f8ca 1014 	str.w	r1, [sl, #20]
    daca:	2a24      	cmp	r2, #36	; 0x24
    dacc:	d00d      	beq.n	daea <_realloc_r+0x3be>
    dace:	3410      	adds	r4, #16
    dad0:	f10a 0218 	add.w	r2, sl, #24
    dad4:	e717      	b.n	d906 <_realloc_r+0x1da>
    dad6:	6923      	ldr	r3, [r4, #16]
    dad8:	f8ca 3018 	str.w	r3, [sl, #24]
    dadc:	6963      	ldr	r3, [r4, #20]
    dade:	f8ca 301c 	str.w	r3, [sl, #28]
    dae2:	3418      	adds	r4, #24
    dae4:	f10a 0320 	add.w	r3, sl, #32
    dae8:	e78b      	b.n	da02 <_realloc_r+0x2d6>
    daea:	6922      	ldr	r2, [r4, #16]
    daec:	f8ca 2018 	str.w	r2, [sl, #24]
    daf0:	6962      	ldr	r2, [r4, #20]
    daf2:	f8ca 201c 	str.w	r2, [sl, #28]
    daf6:	3418      	adds	r4, #24
    daf8:	f10a 0220 	add.w	r2, sl, #32
    dafc:	e703      	b.n	d906 <_realloc_r+0x1da>
    dafe:	bf00      	nop
    db00:	200038c4 	.word	0x200038c4

0000db04 <__utoa>:
    db04:	b5f0      	push	{r4, r5, r6, r7, lr}
    db06:	4f25      	ldr	r7, [pc, #148]	; (db9c <__utoa+0x98>)
    db08:	f1a2 0e02 	sub.w	lr, r2, #2
    db0c:	4616      	mov	r6, r2
    db0e:	4605      	mov	r5, r0
    db10:	460c      	mov	r4, r1
    db12:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    db14:	b08b      	sub	sp, #44	; 0x2c
    db16:	46ec      	mov	ip, sp
    db18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    db1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    db1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    db22:	e897 0003 	ldmia.w	r7, {r0, r1}
    db26:	f84c 0b04 	str.w	r0, [ip], #4
    db2a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    db2e:	f88c 1000 	strb.w	r1, [ip]
    db32:	d82e      	bhi.n	db92 <__utoa+0x8e>
    db34:	f104 3eff 	add.w	lr, r4, #4294967295
    db38:	4670      	mov	r0, lr
    db3a:	f04f 0c00 	mov.w	ip, #0
    db3e:	fbb5 f2f6 	udiv	r2, r5, r6
    db42:	fb06 5312 	mls	r3, r6, r2, r5
    db46:	3328      	adds	r3, #40	; 0x28
    db48:	446b      	add	r3, sp
    db4a:	4661      	mov	r1, ip
    db4c:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    db50:	f800 cf01 	strb.w	ip, [r0, #1]!
    db54:	462b      	mov	r3, r5
    db56:	429e      	cmp	r6, r3
    db58:	f101 0c01 	add.w	ip, r1, #1
    db5c:	4615      	mov	r5, r2
    db5e:	d9ee      	bls.n	db3e <__utoa+0x3a>
    db60:	2300      	movs	r3, #0
    db62:	f804 300c 	strb.w	r3, [r4, ip]
    db66:	b189      	cbz	r1, db8c <__utoa+0x88>
    db68:	44a4      	add	ip, r4
    db6a:	4672      	mov	r2, lr
    db6c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    db70:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    db74:	f88e 5000 	strb.w	r5, [lr]
    db78:	eba4 030e 	sub.w	r3, r4, lr
    db7c:	3202      	adds	r2, #2
    db7e:	3b01      	subs	r3, #1
    db80:	1b12      	subs	r2, r2, r4
    db82:	440b      	add	r3, r1
    db84:	429a      	cmp	r2, r3
    db86:	f88c 0000 	strb.w	r0, [ip]
    db8a:	dbee      	blt.n	db6a <__utoa+0x66>
    db8c:	4620      	mov	r0, r4
    db8e:	b00b      	add	sp, #44	; 0x2c
    db90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db92:	2300      	movs	r3, #0
    db94:	4618      	mov	r0, r3
    db96:	7023      	strb	r3, [r4, #0]
    db98:	b00b      	add	sp, #44	; 0x2c
    db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db9c:	20002c40 	.word	0x20002c40

0000dba0 <__cxa_atexit>:
    dba0:	4613      	mov	r3, r2
    dba2:	460a      	mov	r2, r1
    dba4:	4601      	mov	r1, r0
    dba6:	2002      	movs	r0, #2
    dba8:	f000 bbd8 	b.w	e35c <__register_exitproc>

0000dbac <fcvtf>:
    dbac:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    dbb0:	2300      	movs	r3, #0
    dbb2:	f001 b94d 	b.w	ee50 <fcvtbuf>
    dbb6:	bf00      	nop

0000dbb8 <stdio_exit_handler>:
    dbb8:	4a02      	ldr	r2, [pc, #8]	; (dbc4 <stdio_exit_handler+0xc>)
    dbba:	4903      	ldr	r1, [pc, #12]	; (dbc8 <stdio_exit_handler+0x10>)
    dbbc:	4803      	ldr	r0, [pc, #12]	; (dbcc <stdio_exit_handler+0x14>)
    dbbe:	f000 b8bb 	b.w	dd38 <_fwalk_sglue>
    dbc2:	bf00      	nop
    dbc4:	20003cd4 	.word	0x20003cd4
    dbc8:	0000eef5 	.word	0x0000eef5
    dbcc:	200031a0 	.word	0x200031a0

0000dbd0 <cleanup_stdio>:
    dbd0:	4b0c      	ldr	r3, [pc, #48]	; (dc04 <cleanup_stdio+0x34>)
    dbd2:	6841      	ldr	r1, [r0, #4]
    dbd4:	4299      	cmp	r1, r3
    dbd6:	b510      	push	{r4, lr}
    dbd8:	4604      	mov	r4, r0
    dbda:	d001      	beq.n	dbe0 <cleanup_stdio+0x10>
    dbdc:	f001 f98a 	bl	eef4 <_fclose_r>
    dbe0:	68a1      	ldr	r1, [r4, #8]
    dbe2:	4b09      	ldr	r3, [pc, #36]	; (dc08 <cleanup_stdio+0x38>)
    dbe4:	4299      	cmp	r1, r3
    dbe6:	d002      	beq.n	dbee <cleanup_stdio+0x1e>
    dbe8:	4620      	mov	r0, r4
    dbea:	f001 f983 	bl	eef4 <_fclose_r>
    dbee:	68e1      	ldr	r1, [r4, #12]
    dbf0:	4b06      	ldr	r3, [pc, #24]	; (dc0c <cleanup_stdio+0x3c>)
    dbf2:	4299      	cmp	r1, r3
    dbf4:	d004      	beq.n	dc00 <cleanup_stdio+0x30>
    dbf6:	4620      	mov	r0, r4
    dbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbfc:	f001 b97a 	b.w	eef4 <_fclose_r>
    dc00:	bd10      	pop	{r4, pc}
    dc02:	bf00      	nop
    dc04:	20004954 	.word	0x20004954
    dc08:	200049bc 	.word	0x200049bc
    dc0c:	20004a24 	.word	0x20004a24

0000dc10 <global_stdio_init.part.0>:
    dc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc14:	4c2a      	ldr	r4, [pc, #168]	; (dcc0 <global_stdio_init.part.0+0xb0>)
    dc16:	4b2b      	ldr	r3, [pc, #172]	; (dcc4 <global_stdio_init.part.0+0xb4>)
    dc18:	482b      	ldr	r0, [pc, #172]	; (dcc8 <global_stdio_init.part.0+0xb8>)
    dc1a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; dcdc <global_stdio_init.part.0+0xcc>
    dc1e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; dce0 <global_stdio_init.part.0+0xd0>
    dc22:	4f2a      	ldr	r7, [pc, #168]	; (dccc <global_stdio_init.part.0+0xbc>)
    dc24:	6018      	str	r0, [r3, #0]
    dc26:	2500      	movs	r5, #0
    dc28:	2304      	movs	r3, #4
    dc2a:	2208      	movs	r2, #8
    dc2c:	4629      	mov	r1, r5
    dc2e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    dc32:	4e27      	ldr	r6, [pc, #156]	; (dcd0 <global_stdio_init.part.0+0xc0>)
    dc34:	6665      	str	r5, [r4, #100]	; 0x64
    dc36:	e9c4 5302 	strd	r5, r3, [r4, #8]
    dc3a:	e9c4 5500 	strd	r5, r5, [r4]
    dc3e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    dc42:	61a5      	str	r5, [r4, #24]
    dc44:	f000 f98e 	bl	df64 <memset>
    dc48:	4b22      	ldr	r3, [pc, #136]	; (dcd4 <global_stdio_init.part.0+0xc4>)
    dc4a:	6763      	str	r3, [r4, #116]	; 0x74
    dc4c:	2208      	movs	r2, #8
    dc4e:	4629      	mov	r1, r5
    dc50:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    dc54:	e9c4 4907 	strd	r4, r9, [r4, #28]
    dc58:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    dc5c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    dc60:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    dc64:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    dc68:	6725      	str	r5, [r4, #112]	; 0x70
    dc6a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    dc6e:	62e6      	str	r6, [r4, #44]	; 0x2c
    dc70:	f000 f978 	bl	df64 <memset>
    dc74:	4b18      	ldr	r3, [pc, #96]	; (dcd8 <global_stdio_init.part.0+0xc8>)
    dc76:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    dc7a:	4629      	mov	r1, r5
    dc7c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    dc80:	2208      	movs	r2, #8
    dc82:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    dc86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    dc8a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    dc8e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    dc92:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    dc96:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    dc9a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    dc9e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    dca2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    dca6:	f000 f95d 	bl	df64 <memset>
    dcaa:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    dcae:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    dcb2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    dcb6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcbe:	bf00      	nop
    dcc0:	20004954 	.word	0x20004954
    dcc4:	20004a8c 	.word	0x20004a8c
    dcc8:	0000dbb9 	.word	0x0000dbb9
    dccc:	0000dde5 	.word	0x0000dde5
    dcd0:	0000de05 	.word	0x0000de05
    dcd4:	00010009 	.word	0x00010009
    dcd8:	00020012 	.word	0x00020012
    dcdc:	0000dd81 	.word	0x0000dd81
    dce0:	0000dda5 	.word	0x0000dda5

0000dce4 <__sinit>:
    dce4:	b510      	push	{r4, lr}
    dce6:	4604      	mov	r4, r0
    dce8:	480a      	ldr	r0, [pc, #40]	; (dd14 <__sinit+0x30>)
    dcea:	f000 fa59 	bl	e1a0 <__retarget_lock_acquire_recursive>
    dcee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dcf0:	b923      	cbnz	r3, dcfc <__sinit+0x18>
    dcf2:	4b09      	ldr	r3, [pc, #36]	; (dd18 <__sinit+0x34>)
    dcf4:	4a09      	ldr	r2, [pc, #36]	; (dd1c <__sinit+0x38>)
    dcf6:	681b      	ldr	r3, [r3, #0]
    dcf8:	6362      	str	r2, [r4, #52]	; 0x34
    dcfa:	b123      	cbz	r3, dd06 <__sinit+0x22>
    dcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd00:	4804      	ldr	r0, [pc, #16]	; (dd14 <__sinit+0x30>)
    dd02:	f000 ba4f 	b.w	e1a4 <__retarget_lock_release_recursive>
    dd06:	f7ff ff83 	bl	dc10 <global_stdio_init.part.0>
    dd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd0e:	4801      	ldr	r0, [pc, #4]	; (dd14 <__sinit+0x30>)
    dd10:	f000 ba48 	b.w	e1a4 <__retarget_lock_release_recursive>
    dd14:	2000491c 	.word	0x2000491c
    dd18:	20004a8c 	.word	0x20004a8c
    dd1c:	0000dbd1 	.word	0x0000dbd1

0000dd20 <__sfp_lock_acquire>:
    dd20:	4801      	ldr	r0, [pc, #4]	; (dd28 <__sfp_lock_acquire+0x8>)
    dd22:	f000 ba3d 	b.w	e1a0 <__retarget_lock_acquire_recursive>
    dd26:	bf00      	nop
    dd28:	2000491c 	.word	0x2000491c

0000dd2c <__sfp_lock_release>:
    dd2c:	4801      	ldr	r0, [pc, #4]	; (dd34 <__sfp_lock_release+0x8>)
    dd2e:	f000 ba39 	b.w	e1a4 <__retarget_lock_release_recursive>
    dd32:	bf00      	nop
    dd34:	2000491c 	.word	0x2000491c

0000dd38 <_fwalk_sglue>:
    dd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd3c:	4680      	mov	r8, r0
    dd3e:	460f      	mov	r7, r1
    dd40:	4616      	mov	r6, r2
    dd42:	f04f 0900 	mov.w	r9, #0
    dd46:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    dd4a:	3d01      	subs	r5, #1
    dd4c:	d411      	bmi.n	dd72 <_fwalk_sglue+0x3a>
    dd4e:	89a3      	ldrh	r3, [r4, #12]
    dd50:	2b01      	cmp	r3, #1
    dd52:	f105 35ff 	add.w	r5, r5, #4294967295
    dd56:	d908      	bls.n	dd6a <_fwalk_sglue+0x32>
    dd58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    dd5c:	3301      	adds	r3, #1
    dd5e:	4621      	mov	r1, r4
    dd60:	d003      	beq.n	dd6a <_fwalk_sglue+0x32>
    dd62:	4640      	mov	r0, r8
    dd64:	47b8      	blx	r7
    dd66:	ea49 0900 	orr.w	r9, r9, r0
    dd6a:	1c6b      	adds	r3, r5, #1
    dd6c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    dd70:	d1ed      	bne.n	dd4e <_fwalk_sglue+0x16>
    dd72:	6836      	ldr	r6, [r6, #0]
    dd74:	2e00      	cmp	r6, #0
    dd76:	d1e6      	bne.n	dd46 <_fwalk_sglue+0xe>
    dd78:	4648      	mov	r0, r9
    dd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd7e:	bf00      	nop

0000dd80 <__sread>:
    dd80:	b510      	push	{r4, lr}
    dd82:	460c      	mov	r4, r1
    dd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dd88:	f000 f99e 	bl	e0c8 <_read_r>
    dd8c:	2800      	cmp	r0, #0
    dd8e:	db03      	blt.n	dd98 <__sread+0x18>
    dd90:	6d23      	ldr	r3, [r4, #80]	; 0x50
    dd92:	4403      	add	r3, r0
    dd94:	6523      	str	r3, [r4, #80]	; 0x50
    dd96:	bd10      	pop	{r4, pc}
    dd98:	89a3      	ldrh	r3, [r4, #12]
    dd9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    dd9e:	81a3      	strh	r3, [r4, #12]
    dda0:	bd10      	pop	{r4, pc}
    dda2:	bf00      	nop

0000dda4 <__swrite>:
    dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dda8:	460c      	mov	r4, r1
    ddaa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    ddae:	461f      	mov	r7, r3
    ddb0:	05cb      	lsls	r3, r1, #23
    ddb2:	4605      	mov	r5, r0
    ddb4:	4616      	mov	r6, r2
    ddb6:	d40b      	bmi.n	ddd0 <__swrite+0x2c>
    ddb8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    ddbc:	81a1      	strh	r1, [r4, #12]
    ddbe:	463b      	mov	r3, r7
    ddc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ddc4:	4632      	mov	r2, r6
    ddc6:	4628      	mov	r0, r5
    ddc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ddcc:	f000 b9a4 	b.w	e118 <_write_r>
    ddd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ddd4:	2302      	movs	r3, #2
    ddd6:	2200      	movs	r2, #0
    ddd8:	f000 f960 	bl	e09c <_lseek_r>
    dddc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    dde0:	e7ea      	b.n	ddb8 <__swrite+0x14>
    dde2:	bf00      	nop

0000dde4 <__sseek>:
    dde4:	b510      	push	{r4, lr}
    dde6:	460c      	mov	r4, r1
    dde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ddec:	f000 f956 	bl	e09c <_lseek_r>
    ddf0:	89a3      	ldrh	r3, [r4, #12]
    ddf2:	1c42      	adds	r2, r0, #1
    ddf4:	bf0e      	itee	eq
    ddf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    ddfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    ddfe:	6520      	strne	r0, [r4, #80]	; 0x50
    de00:	81a3      	strh	r3, [r4, #12]
    de02:	bd10      	pop	{r4, pc}

0000de04 <__sclose>:
    de04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    de08:	f000 b936 	b.w	e078 <_close_r>

0000de0c <memcmp>:
    de0c:	2a03      	cmp	r2, #3
    de0e:	b570      	push	{r4, r5, r6, lr}
    de10:	d914      	bls.n	de3c <memcmp+0x30>
    de12:	ea40 0301 	orr.w	r3, r0, r1
    de16:	079b      	lsls	r3, r3, #30
    de18:	d122      	bne.n	de60 <memcmp+0x54>
    de1a:	4604      	mov	r4, r0
    de1c:	460b      	mov	r3, r1
    de1e:	4619      	mov	r1, r3
    de20:	4620      	mov	r0, r4
    de22:	680e      	ldr	r6, [r1, #0]
    de24:	6805      	ldr	r5, [r0, #0]
    de26:	42b5      	cmp	r5, r6
    de28:	f104 0404 	add.w	r4, r4, #4
    de2c:	f103 0304 	add.w	r3, r3, #4
    de30:	d116      	bne.n	de60 <memcmp+0x54>
    de32:	3a04      	subs	r2, #4
    de34:	2a03      	cmp	r2, #3
    de36:	4620      	mov	r0, r4
    de38:	4619      	mov	r1, r3
    de3a:	d8f0      	bhi.n	de1e <memcmp+0x12>
    de3c:	1e54      	subs	r4, r2, #1
    de3e:	b19a      	cbz	r2, de68 <memcmp+0x5c>
    de40:	1e42      	subs	r2, r0, #1
    de42:	3901      	subs	r1, #1
    de44:	e001      	b.n	de4a <memcmp+0x3e>
    de46:	18c3      	adds	r3, r0, r3
    de48:	d00c      	beq.n	de64 <memcmp+0x58>
    de4a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    de4e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    de52:	45e6      	cmp	lr, ip
    de54:	eba4 0302 	sub.w	r3, r4, r2
    de58:	d0f5      	beq.n	de46 <memcmp+0x3a>
    de5a:	ebae 000c 	sub.w	r0, lr, ip
    de5e:	bd70      	pop	{r4, r5, r6, pc}
    de60:	1e54      	subs	r4, r2, #1
    de62:	e7ed      	b.n	de40 <memcmp+0x34>
    de64:	4618      	mov	r0, r3
    de66:	bd70      	pop	{r4, r5, r6, pc}
    de68:	4610      	mov	r0, r2
    de6a:	bd70      	pop	{r4, r5, r6, pc}

0000de6c <memmove>:
    de6c:	4288      	cmp	r0, r1
    de6e:	d90d      	bls.n	de8c <memmove+0x20>
    de70:	188b      	adds	r3, r1, r2
    de72:	4283      	cmp	r3, r0
    de74:	d90a      	bls.n	de8c <memmove+0x20>
    de76:	eb00 0c02 	add.w	ip, r0, r2
    de7a:	b1ba      	cbz	r2, deac <memmove+0x40>
    de7c:	4662      	mov	r2, ip
    de7e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    de82:	f802 cd01 	strb.w	ip, [r2, #-1]!
    de86:	4299      	cmp	r1, r3
    de88:	d1f9      	bne.n	de7e <memmove+0x12>
    de8a:	4770      	bx	lr
    de8c:	2a0f      	cmp	r2, #15
    de8e:	d80e      	bhi.n	deae <memmove+0x42>
    de90:	4603      	mov	r3, r0
    de92:	f102 3cff 	add.w	ip, r2, #4294967295
    de96:	b14a      	cbz	r2, deac <memmove+0x40>
    de98:	f10c 0c01 	add.w	ip, ip, #1
    de9c:	3b01      	subs	r3, #1
    de9e:	448c      	add	ip, r1
    dea0:	f811 2b01 	ldrb.w	r2, [r1], #1
    dea4:	f803 2f01 	strb.w	r2, [r3, #1]!
    dea8:	4561      	cmp	r1, ip
    deaa:	d1f9      	bne.n	dea0 <memmove+0x34>
    deac:	4770      	bx	lr
    deae:	ea40 0301 	orr.w	r3, r0, r1
    deb2:	079b      	lsls	r3, r3, #30
    deb4:	d150      	bne.n	df58 <memmove+0xec>
    deb6:	f1a2 0310 	sub.w	r3, r2, #16
    deba:	b570      	push	{r4, r5, r6, lr}
    debc:	f101 0c20 	add.w	ip, r1, #32
    dec0:	f023 050f 	bic.w	r5, r3, #15
    dec4:	f101 0e10 	add.w	lr, r1, #16
    dec8:	f100 0410 	add.w	r4, r0, #16
    decc:	44ac      	add	ip, r5
    dece:	091b      	lsrs	r3, r3, #4
    ded0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    ded4:	f844 5c10 	str.w	r5, [r4, #-16]
    ded8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    dedc:	f844 5c0c 	str.w	r5, [r4, #-12]
    dee0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    dee4:	f844 5c08 	str.w	r5, [r4, #-8]
    dee8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    deec:	f844 5c04 	str.w	r5, [r4, #-4]
    def0:	f10e 0e10 	add.w	lr, lr, #16
    def4:	45e6      	cmp	lr, ip
    def6:	f104 0410 	add.w	r4, r4, #16
    defa:	d1e9      	bne.n	ded0 <memmove+0x64>
    defc:	3301      	adds	r3, #1
    defe:	f012 0f0c 	tst.w	r2, #12
    df02:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    df06:	f002 040f 	and.w	r4, r2, #15
    df0a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    df0e:	d027      	beq.n	df60 <memmove+0xf4>
    df10:	3c04      	subs	r4, #4
    df12:	f024 0603 	bic.w	r6, r4, #3
    df16:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    df1a:	441e      	add	r6, r3
    df1c:	1f1c      	subs	r4, r3, #4
    df1e:	468e      	mov	lr, r1
    df20:	f85e 5b04 	ldr.w	r5, [lr], #4
    df24:	f844 5f04 	str.w	r5, [r4, #4]!
    df28:	42b4      	cmp	r4, r6
    df2a:	d1f9      	bne.n	df20 <memmove+0xb4>
    df2c:	f10c 0401 	add.w	r4, ip, #1
    df30:	f002 0203 	and.w	r2, r2, #3
    df34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    df38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    df3c:	f102 3cff 	add.w	ip, r2, #4294967295
    df40:	b14a      	cbz	r2, df56 <memmove+0xea>
    df42:	f10c 0c01 	add.w	ip, ip, #1
    df46:	3b01      	subs	r3, #1
    df48:	448c      	add	ip, r1
    df4a:	f811 2b01 	ldrb.w	r2, [r1], #1
    df4e:	f803 2f01 	strb.w	r2, [r3, #1]!
    df52:	4561      	cmp	r1, ip
    df54:	d1f9      	bne.n	df4a <memmove+0xde>
    df56:	bd70      	pop	{r4, r5, r6, pc}
    df58:	f102 3cff 	add.w	ip, r2, #4294967295
    df5c:	4603      	mov	r3, r0
    df5e:	e79b      	b.n	de98 <memmove+0x2c>
    df60:	4622      	mov	r2, r4
    df62:	e7eb      	b.n	df3c <memmove+0xd0>

0000df64 <memset>:
    df64:	0783      	lsls	r3, r0, #30
    df66:	b530      	push	{r4, r5, lr}
    df68:	d048      	beq.n	dffc <memset+0x98>
    df6a:	1e54      	subs	r4, r2, #1
    df6c:	2a00      	cmp	r2, #0
    df6e:	d03f      	beq.n	dff0 <memset+0x8c>
    df70:	b2ca      	uxtb	r2, r1
    df72:	4603      	mov	r3, r0
    df74:	e001      	b.n	df7a <memset+0x16>
    df76:	3c01      	subs	r4, #1
    df78:	d33a      	bcc.n	dff0 <memset+0x8c>
    df7a:	f803 2b01 	strb.w	r2, [r3], #1
    df7e:	079d      	lsls	r5, r3, #30
    df80:	d1f9      	bne.n	df76 <memset+0x12>
    df82:	2c03      	cmp	r4, #3
    df84:	d92d      	bls.n	dfe2 <memset+0x7e>
    df86:	b2cd      	uxtb	r5, r1
    df88:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    df8c:	2c0f      	cmp	r4, #15
    df8e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    df92:	d936      	bls.n	e002 <memset+0x9e>
    df94:	f1a4 0210 	sub.w	r2, r4, #16
    df98:	f022 0c0f 	bic.w	ip, r2, #15
    df9c:	f103 0e20 	add.w	lr, r3, #32
    dfa0:	44e6      	add	lr, ip
    dfa2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    dfa6:	f103 0210 	add.w	r2, r3, #16
    dfaa:	e942 5504 	strd	r5, r5, [r2, #-16]
    dfae:	e942 5502 	strd	r5, r5, [r2, #-8]
    dfb2:	3210      	adds	r2, #16
    dfb4:	4572      	cmp	r2, lr
    dfb6:	d1f8      	bne.n	dfaa <memset+0x46>
    dfb8:	f10c 0201 	add.w	r2, ip, #1
    dfbc:	f014 0f0c 	tst.w	r4, #12
    dfc0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    dfc4:	f004 0c0f 	and.w	ip, r4, #15
    dfc8:	d013      	beq.n	dff2 <memset+0x8e>
    dfca:	f1ac 0304 	sub.w	r3, ip, #4
    dfce:	f023 0303 	bic.w	r3, r3, #3
    dfd2:	3304      	adds	r3, #4
    dfd4:	4413      	add	r3, r2
    dfd6:	f842 5b04 	str.w	r5, [r2], #4
    dfda:	4293      	cmp	r3, r2
    dfdc:	d1fb      	bne.n	dfd6 <memset+0x72>
    dfde:	f00c 0403 	and.w	r4, ip, #3
    dfe2:	b12c      	cbz	r4, dff0 <memset+0x8c>
    dfe4:	b2c9      	uxtb	r1, r1
    dfe6:	441c      	add	r4, r3
    dfe8:	f803 1b01 	strb.w	r1, [r3], #1
    dfec:	429c      	cmp	r4, r3
    dfee:	d1fb      	bne.n	dfe8 <memset+0x84>
    dff0:	bd30      	pop	{r4, r5, pc}
    dff2:	4664      	mov	r4, ip
    dff4:	4613      	mov	r3, r2
    dff6:	2c00      	cmp	r4, #0
    dff8:	d1f4      	bne.n	dfe4 <memset+0x80>
    dffa:	e7f9      	b.n	dff0 <memset+0x8c>
    dffc:	4603      	mov	r3, r0
    dffe:	4614      	mov	r4, r2
    e000:	e7bf      	b.n	df82 <memset+0x1e>
    e002:	461a      	mov	r2, r3
    e004:	46a4      	mov	ip, r4
    e006:	e7e0      	b.n	dfca <memset+0x66>

0000e008 <strncpy>:
    e008:	ea40 0301 	orr.w	r3, r0, r1
    e00c:	079b      	lsls	r3, r3, #30
    e00e:	b530      	push	{r4, r5, lr}
    e010:	d101      	bne.n	e016 <strncpy+0xe>
    e012:	2a03      	cmp	r2, #3
    e014:	d80f      	bhi.n	e036 <strncpy+0x2e>
    e016:	4684      	mov	ip, r0
    e018:	f101 3eff 	add.w	lr, r1, #4294967295
    e01c:	e007      	b.n	e02e <strncpy+0x26>
    e01e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e022:	f803 1b01 	strb.w	r1, [r3], #1
    e026:	1e54      	subs	r4, r2, #1
    e028:	b1c1      	cbz	r1, e05c <strncpy+0x54>
    e02a:	469c      	mov	ip, r3
    e02c:	4622      	mov	r2, r4
    e02e:	4663      	mov	r3, ip
    e030:	2a00      	cmp	r2, #0
    e032:	d1f4      	bne.n	e01e <strncpy+0x16>
    e034:	bd30      	pop	{r4, r5, pc}
    e036:	460b      	mov	r3, r1
    e038:	4684      	mov	ip, r0
    e03a:	4619      	mov	r1, r3
    e03c:	f853 5b04 	ldr.w	r5, [r3], #4
    e040:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e044:	ea24 0405 	bic.w	r4, r4, r5
    e048:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e04c:	d1e4      	bne.n	e018 <strncpy+0x10>
    e04e:	3a04      	subs	r2, #4
    e050:	2a03      	cmp	r2, #3
    e052:	f84c 5b04 	str.w	r5, [ip], #4
    e056:	4619      	mov	r1, r3
    e058:	d8ef      	bhi.n	e03a <strncpy+0x32>
    e05a:	e7dd      	b.n	e018 <strncpy+0x10>
    e05c:	4494      	add	ip, r2
    e05e:	2c00      	cmp	r4, #0
    e060:	d0e8      	beq.n	e034 <strncpy+0x2c>
    e062:	f803 1b01 	strb.w	r1, [r3], #1
    e066:	4563      	cmp	r3, ip
    e068:	d1fb      	bne.n	e062 <strncpy+0x5a>
    e06a:	bd30      	pop	{r4, r5, pc}

0000e06c <__locale_mb_cur_max>:
    e06c:	4b01      	ldr	r3, [pc, #4]	; (e074 <__locale_mb_cur_max+0x8>)
    e06e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e072:	4770      	bx	lr
    e074:	20003758 	.word	0x20003758

0000e078 <_close_r>:
    e078:	b538      	push	{r3, r4, r5, lr}
    e07a:	4d07      	ldr	r5, [pc, #28]	; (e098 <_close_r+0x20>)
    e07c:	2200      	movs	r2, #0
    e07e:	4604      	mov	r4, r0
    e080:	4608      	mov	r0, r1
    e082:	602a      	str	r2, [r5, #0]
    e084:	f7fd fa38 	bl	b4f8 <_close>
    e088:	1c43      	adds	r3, r0, #1
    e08a:	d000      	beq.n	e08e <_close_r+0x16>
    e08c:	bd38      	pop	{r3, r4, r5, pc}
    e08e:	682b      	ldr	r3, [r5, #0]
    e090:	2b00      	cmp	r3, #0
    e092:	d0fb      	beq.n	e08c <_close_r+0x14>
    e094:	6023      	str	r3, [r4, #0]
    e096:	bd38      	pop	{r3, r4, r5, pc}
    e098:	20004b08 	.word	0x20004b08

0000e09c <_lseek_r>:
    e09c:	b538      	push	{r3, r4, r5, lr}
    e09e:	460c      	mov	r4, r1
    e0a0:	4d08      	ldr	r5, [pc, #32]	; (e0c4 <_lseek_r+0x28>)
    e0a2:	4684      	mov	ip, r0
    e0a4:	4611      	mov	r1, r2
    e0a6:	4620      	mov	r0, r4
    e0a8:	461a      	mov	r2, r3
    e0aa:	2300      	movs	r3, #0
    e0ac:	602b      	str	r3, [r5, #0]
    e0ae:	4664      	mov	r4, ip
    e0b0:	f7fd fa2e 	bl	b510 <_lseek>
    e0b4:	1c43      	adds	r3, r0, #1
    e0b6:	d000      	beq.n	e0ba <_lseek_r+0x1e>
    e0b8:	bd38      	pop	{r3, r4, r5, pc}
    e0ba:	682b      	ldr	r3, [r5, #0]
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d0fb      	beq.n	e0b8 <_lseek_r+0x1c>
    e0c0:	6023      	str	r3, [r4, #0]
    e0c2:	bd38      	pop	{r3, r4, r5, pc}
    e0c4:	20004b08 	.word	0x20004b08

0000e0c8 <_read_r>:
    e0c8:	b538      	push	{r3, r4, r5, lr}
    e0ca:	460c      	mov	r4, r1
    e0cc:	4d08      	ldr	r5, [pc, #32]	; (e0f0 <_read_r+0x28>)
    e0ce:	4684      	mov	ip, r0
    e0d0:	4611      	mov	r1, r2
    e0d2:	4620      	mov	r0, r4
    e0d4:	461a      	mov	r2, r3
    e0d6:	2300      	movs	r3, #0
    e0d8:	602b      	str	r3, [r5, #0]
    e0da:	4664      	mov	r4, ip
    e0dc:	f7fd fa0a 	bl	b4f4 <_read>
    e0e0:	1c43      	adds	r3, r0, #1
    e0e2:	d000      	beq.n	e0e6 <_read_r+0x1e>
    e0e4:	bd38      	pop	{r3, r4, r5, pc}
    e0e6:	682b      	ldr	r3, [r5, #0]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d0fb      	beq.n	e0e4 <_read_r+0x1c>
    e0ec:	6023      	str	r3, [r4, #0]
    e0ee:	bd38      	pop	{r3, r4, r5, pc}
    e0f0:	20004b08 	.word	0x20004b08

0000e0f4 <_sbrk_r>:
    e0f4:	b538      	push	{r3, r4, r5, lr}
    e0f6:	4d07      	ldr	r5, [pc, #28]	; (e114 <_sbrk_r+0x20>)
    e0f8:	2200      	movs	r2, #0
    e0fa:	4604      	mov	r4, r0
    e0fc:	4608      	mov	r0, r1
    e0fe:	602a      	str	r2, [r5, #0]
    e100:	f7fd f9de 	bl	b4c0 <_sbrk>
    e104:	1c43      	adds	r3, r0, #1
    e106:	d000      	beq.n	e10a <_sbrk_r+0x16>
    e108:	bd38      	pop	{r3, r4, r5, pc}
    e10a:	682b      	ldr	r3, [r5, #0]
    e10c:	2b00      	cmp	r3, #0
    e10e:	d0fb      	beq.n	e108 <_sbrk_r+0x14>
    e110:	6023      	str	r3, [r4, #0]
    e112:	bd38      	pop	{r3, r4, r5, pc}
    e114:	20004b08 	.word	0x20004b08

0000e118 <_write_r>:
    e118:	b538      	push	{r3, r4, r5, lr}
    e11a:	460c      	mov	r4, r1
    e11c:	4d08      	ldr	r5, [pc, #32]	; (e140 <_write_r+0x28>)
    e11e:	4684      	mov	ip, r0
    e120:	4611      	mov	r1, r2
    e122:	4620      	mov	r0, r4
    e124:	461a      	mov	r2, r3
    e126:	2300      	movs	r3, #0
    e128:	602b      	str	r3, [r5, #0]
    e12a:	4664      	mov	r4, ip
    e12c:	f7fc f9ca 	bl	a4c4 <_write>
    e130:	1c43      	adds	r3, r0, #1
    e132:	d000      	beq.n	e136 <_write_r+0x1e>
    e134:	bd38      	pop	{r3, r4, r5, pc}
    e136:	682b      	ldr	r3, [r5, #0]
    e138:	2b00      	cmp	r3, #0
    e13a:	d0fb      	beq.n	e134 <_write_r+0x1c>
    e13c:	6023      	str	r3, [r4, #0]
    e13e:	bd38      	pop	{r3, r4, r5, pc}
    e140:	20004b08 	.word	0x20004b08

0000e144 <__errno>:
    e144:	4b01      	ldr	r3, [pc, #4]	; (e14c <__errno+0x8>)
    e146:	6818      	ldr	r0, [r3, #0]
    e148:	4770      	bx	lr
    e14a:	bf00      	nop
    e14c:	20003ce0 	.word	0x20003ce0

0000e150 <__libc_init_array>:
    e150:	b570      	push	{r4, r5, r6, lr}
    e152:	4e0d      	ldr	r6, [pc, #52]	; (e188 <__libc_init_array+0x38>)
    e154:	4d0d      	ldr	r5, [pc, #52]	; (e18c <__libc_init_array+0x3c>)
    e156:	1b76      	subs	r6, r6, r5
    e158:	10b6      	asrs	r6, r6, #2
    e15a:	d006      	beq.n	e16a <__libc_init_array+0x1a>
    e15c:	2400      	movs	r4, #0
    e15e:	f855 3b04 	ldr.w	r3, [r5], #4
    e162:	3401      	adds	r4, #1
    e164:	4798      	blx	r3
    e166:	42a6      	cmp	r6, r4
    e168:	d1f9      	bne.n	e15e <__libc_init_array+0xe>
    e16a:	4e09      	ldr	r6, [pc, #36]	; (e190 <__libc_init_array+0x40>)
    e16c:	4d09      	ldr	r5, [pc, #36]	; (e194 <__libc_init_array+0x44>)
    e16e:	1b76      	subs	r6, r6, r5
    e170:	f003 fc1a 	bl	119a8 <___init_veneer>
    e174:	10b6      	asrs	r6, r6, #2
    e176:	d006      	beq.n	e186 <__libc_init_array+0x36>
    e178:	2400      	movs	r4, #0
    e17a:	f855 3b04 	ldr.w	r3, [r5], #4
    e17e:	3401      	adds	r4, #1
    e180:	4798      	blx	r3
    e182:	42a6      	cmp	r6, r4
    e184:	d1f9      	bne.n	e17a <__libc_init_array+0x2a>
    e186:	bd70      	pop	{r4, r5, r6, pc}
    e188:	60001c70 	.word	0x60001c70
    e18c:	60001c70 	.word	0x60001c70
    e190:	60001c7c 	.word	0x60001c7c
    e194:	60001c70 	.word	0x60001c70

0000e198 <__retarget_lock_init_recursive>:
    e198:	4770      	bx	lr
    e19a:	bf00      	nop

0000e19c <__retarget_lock_close_recursive>:
    e19c:	4770      	bx	lr
    e19e:	bf00      	nop

0000e1a0 <__retarget_lock_acquire_recursive>:
    e1a0:	4770      	bx	lr
    e1a2:	bf00      	nop

0000e1a4 <__retarget_lock_release_recursive>:
    e1a4:	4770      	bx	lr
    e1a6:	bf00      	nop

0000e1a8 <strcpy>:
    e1a8:	ea80 0201 	eor.w	r2, r0, r1
    e1ac:	4684      	mov	ip, r0
    e1ae:	f012 0f03 	tst.w	r2, #3
    e1b2:	d14f      	bne.n	e254 <strcpy+0xac>
    e1b4:	f011 0f03 	tst.w	r1, #3
    e1b8:	d132      	bne.n	e220 <strcpy+0x78>
    e1ba:	f84d 4d04 	str.w	r4, [sp, #-4]!
    e1be:	f011 0f04 	tst.w	r1, #4
    e1c2:	f851 3b04 	ldr.w	r3, [r1], #4
    e1c6:	d00b      	beq.n	e1e0 <strcpy+0x38>
    e1c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    e1cc:	439a      	bics	r2, r3
    e1ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    e1d2:	bf04      	itt	eq
    e1d4:	f84c 3b04 	streq.w	r3, [ip], #4
    e1d8:	f851 3b04 	ldreq.w	r3, [r1], #4
    e1dc:	d116      	bne.n	e20c <strcpy+0x64>
    e1de:	bf00      	nop
    e1e0:	f851 4b04 	ldr.w	r4, [r1], #4
    e1e4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    e1e8:	439a      	bics	r2, r3
    e1ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    e1ee:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    e1f2:	d10b      	bne.n	e20c <strcpy+0x64>
    e1f4:	f84c 3b04 	str.w	r3, [ip], #4
    e1f8:	43a2      	bics	r2, r4
    e1fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    e1fe:	bf04      	itt	eq
    e200:	f851 3b04 	ldreq.w	r3, [r1], #4
    e204:	f84c 4b04 	streq.w	r4, [ip], #4
    e208:	d0ea      	beq.n	e1e0 <strcpy+0x38>
    e20a:	4623      	mov	r3, r4
    e20c:	f80c 3b01 	strb.w	r3, [ip], #1
    e210:	f013 0fff 	tst.w	r3, #255	; 0xff
    e214:	ea4f 2333 	mov.w	r3, r3, ror #8
    e218:	d1f8      	bne.n	e20c <strcpy+0x64>
    e21a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e21e:	4770      	bx	lr
    e220:	f011 0f01 	tst.w	r1, #1
    e224:	d006      	beq.n	e234 <strcpy+0x8c>
    e226:	f811 2b01 	ldrb.w	r2, [r1], #1
    e22a:	f80c 2b01 	strb.w	r2, [ip], #1
    e22e:	2a00      	cmp	r2, #0
    e230:	bf08      	it	eq
    e232:	4770      	bxeq	lr
    e234:	f011 0f02 	tst.w	r1, #2
    e238:	d0bf      	beq.n	e1ba <strcpy+0x12>
    e23a:	f831 2b02 	ldrh.w	r2, [r1], #2
    e23e:	f012 0fff 	tst.w	r2, #255	; 0xff
    e242:	bf16      	itet	ne
    e244:	f82c 2b02 	strhne.w	r2, [ip], #2
    e248:	f88c 2000 	strbeq.w	r2, [ip]
    e24c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    e250:	d1b3      	bne.n	e1ba <strcpy+0x12>
    e252:	4770      	bx	lr
    e254:	f811 2b01 	ldrb.w	r2, [r1], #1
    e258:	f80c 2b01 	strb.w	r2, [ip], #1
    e25c:	2a00      	cmp	r2, #0
    e25e:	d1f9      	bne.n	e254 <strcpy+0xac>
    e260:	4770      	bx	lr
    e262:	bf00      	nop
	...

0000e280 <strlen>:
    e280:	f890 f000 	pld	[r0]
    e284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e288:	f020 0107 	bic.w	r1, r0, #7
    e28c:	f06f 0c00 	mvn.w	ip, #0
    e290:	f010 0407 	ands.w	r4, r0, #7
    e294:	f891 f020 	pld	[r1, #32]
    e298:	f040 8049 	bne.w	e32e <strlen+0xae>
    e29c:	f04f 0400 	mov.w	r4, #0
    e2a0:	f06f 0007 	mvn.w	r0, #7
    e2a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    e2a8:	f891 f040 	pld	[r1, #64]	; 0x40
    e2ac:	f100 0008 	add.w	r0, r0, #8
    e2b0:	fa82 f24c 	uadd8	r2, r2, ip
    e2b4:	faa4 f28c 	sel	r2, r4, ip
    e2b8:	fa83 f34c 	uadd8	r3, r3, ip
    e2bc:	faa2 f38c 	sel	r3, r2, ip
    e2c0:	bb4b      	cbnz	r3, e316 <strlen+0x96>
    e2c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e2c6:	fa82 f24c 	uadd8	r2, r2, ip
    e2ca:	f100 0008 	add.w	r0, r0, #8
    e2ce:	faa4 f28c 	sel	r2, r4, ip
    e2d2:	fa83 f34c 	uadd8	r3, r3, ip
    e2d6:	faa2 f38c 	sel	r3, r2, ip
    e2da:	b9e3      	cbnz	r3, e316 <strlen+0x96>
    e2dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e2e0:	fa82 f24c 	uadd8	r2, r2, ip
    e2e4:	f100 0008 	add.w	r0, r0, #8
    e2e8:	faa4 f28c 	sel	r2, r4, ip
    e2ec:	fa83 f34c 	uadd8	r3, r3, ip
    e2f0:	faa2 f38c 	sel	r3, r2, ip
    e2f4:	b97b      	cbnz	r3, e316 <strlen+0x96>
    e2f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e2fa:	f101 0120 	add.w	r1, r1, #32
    e2fe:	fa82 f24c 	uadd8	r2, r2, ip
    e302:	f100 0008 	add.w	r0, r0, #8
    e306:	faa4 f28c 	sel	r2, r4, ip
    e30a:	fa83 f34c 	uadd8	r3, r3, ip
    e30e:	faa2 f38c 	sel	r3, r2, ip
    e312:	2b00      	cmp	r3, #0
    e314:	d0c6      	beq.n	e2a4 <strlen+0x24>
    e316:	2a00      	cmp	r2, #0
    e318:	bf04      	itt	eq
    e31a:	3004      	addeq	r0, #4
    e31c:	461a      	moveq	r2, r3
    e31e:	ba12      	rev	r2, r2
    e320:	fab2 f282 	clz	r2, r2
    e324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e32c:	4770      	bx	lr
    e32e:	e9d1 2300 	ldrd	r2, r3, [r1]
    e332:	f004 0503 	and.w	r5, r4, #3
    e336:	f1c4 0000 	rsb	r0, r4, #0
    e33a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e33e:	f014 0f04 	tst.w	r4, #4
    e342:	f891 f040 	pld	[r1, #64]	; 0x40
    e346:	fa0c f505 	lsl.w	r5, ip, r5
    e34a:	ea62 0205 	orn	r2, r2, r5
    e34e:	bf1c      	itt	ne
    e350:	ea63 0305 	ornne	r3, r3, r5
    e354:	4662      	movne	r2, ip
    e356:	f04f 0400 	mov.w	r4, #0
    e35a:	e7a9      	b.n	e2b0 <strlen+0x30>

0000e35c <__register_exitproc>:
    e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e360:	f8df a07c 	ldr.w	sl, [pc, #124]	; e3e0 <__register_exitproc+0x84>
    e364:	4606      	mov	r6, r0
    e366:	f8da 0000 	ldr.w	r0, [sl]
    e36a:	4698      	mov	r8, r3
    e36c:	460f      	mov	r7, r1
    e36e:	4691      	mov	r9, r2
    e370:	f7ff ff16 	bl	e1a0 <__retarget_lock_acquire_recursive>
    e374:	4b18      	ldr	r3, [pc, #96]	; (e3d8 <__register_exitproc+0x7c>)
    e376:	681c      	ldr	r4, [r3, #0]
    e378:	b324      	cbz	r4, e3c4 <__register_exitproc+0x68>
    e37a:	6865      	ldr	r5, [r4, #4]
    e37c:	2d1f      	cmp	r5, #31
    e37e:	dc24      	bgt.n	e3ca <__register_exitproc+0x6e>
    e380:	b95e      	cbnz	r6, e39a <__register_exitproc+0x3e>
    e382:	1c6b      	adds	r3, r5, #1
    e384:	3502      	adds	r5, #2
    e386:	f8da 0000 	ldr.w	r0, [sl]
    e38a:	6063      	str	r3, [r4, #4]
    e38c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    e390:	f7ff ff08 	bl	e1a4 <__retarget_lock_release_recursive>
    e394:	2000      	movs	r0, #0
    e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e39a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    e39e:	2301      	movs	r3, #1
    e3a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    e3a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    e3a8:	40ab      	lsls	r3, r5
    e3aa:	431a      	orrs	r2, r3
    e3ac:	2e02      	cmp	r6, #2
    e3ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    e3b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    e3b6:	d1e4      	bne.n	e382 <__register_exitproc+0x26>
    e3b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    e3bc:	431a      	orrs	r2, r3
    e3be:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    e3c2:	e7de      	b.n	e382 <__register_exitproc+0x26>
    e3c4:	4c05      	ldr	r4, [pc, #20]	; (e3dc <__register_exitproc+0x80>)
    e3c6:	601c      	str	r4, [r3, #0]
    e3c8:	e7d7      	b.n	e37a <__register_exitproc+0x1e>
    e3ca:	f8da 0000 	ldr.w	r0, [sl]
    e3ce:	f7ff fee9 	bl	e1a4 <__retarget_lock_release_recursive>
    e3d2:	f04f 30ff 	mov.w	r0, #4294967295
    e3d6:	e7de      	b.n	e396 <__register_exitproc+0x3a>
    e3d8:	20004780 	.word	0x20004780
    e3dc:	20004784 	.word	0x20004784
    e3e0:	2000374c 	.word	0x2000374c

0000e3e4 <_malloc_trim_r>:
    e3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3e6:	4f24      	ldr	r7, [pc, #144]	; (e478 <_malloc_trim_r+0x94>)
    e3e8:	460c      	mov	r4, r1
    e3ea:	4606      	mov	r6, r0
    e3ec:	f7ff f986 	bl	d6fc <__malloc_lock>
    e3f0:	68bb      	ldr	r3, [r7, #8]
    e3f2:	685d      	ldr	r5, [r3, #4]
    e3f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e3f8:	310f      	adds	r1, #15
    e3fa:	f025 0503 	bic.w	r5, r5, #3
    e3fe:	194b      	adds	r3, r1, r5
    e400:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e404:	f023 030f 	bic.w	r3, r3, #15
    e408:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e40c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e410:	db07      	blt.n	e422 <_malloc_trim_r+0x3e>
    e412:	2100      	movs	r1, #0
    e414:	4630      	mov	r0, r6
    e416:	f7ff fe6d 	bl	e0f4 <_sbrk_r>
    e41a:	68bb      	ldr	r3, [r7, #8]
    e41c:	442b      	add	r3, r5
    e41e:	4298      	cmp	r0, r3
    e420:	d004      	beq.n	e42c <_malloc_trim_r+0x48>
    e422:	4630      	mov	r0, r6
    e424:	f7ff f970 	bl	d708 <__malloc_unlock>
    e428:	2000      	movs	r0, #0
    e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e42c:	4261      	negs	r1, r4
    e42e:	4630      	mov	r0, r6
    e430:	f7ff fe60 	bl	e0f4 <_sbrk_r>
    e434:	3001      	adds	r0, #1
    e436:	d00d      	beq.n	e454 <_malloc_trim_r+0x70>
    e438:	4a10      	ldr	r2, [pc, #64]	; (e47c <_malloc_trim_r+0x98>)
    e43a:	68bb      	ldr	r3, [r7, #8]
    e43c:	1b2d      	subs	r5, r5, r4
    e43e:	f045 0501 	orr.w	r5, r5, #1
    e442:	605d      	str	r5, [r3, #4]
    e444:	6813      	ldr	r3, [r2, #0]
    e446:	4630      	mov	r0, r6
    e448:	1b1b      	subs	r3, r3, r4
    e44a:	6013      	str	r3, [r2, #0]
    e44c:	f7ff f95c 	bl	d708 <__malloc_unlock>
    e450:	2001      	movs	r0, #1
    e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e454:	2100      	movs	r1, #0
    e456:	4630      	mov	r0, r6
    e458:	f7ff fe4c 	bl	e0f4 <_sbrk_r>
    e45c:	68ba      	ldr	r2, [r7, #8]
    e45e:	1a83      	subs	r3, r0, r2
    e460:	2b0f      	cmp	r3, #15
    e462:	ddde      	ble.n	e422 <_malloc_trim_r+0x3e>
    e464:	f043 0301 	orr.w	r3, r3, #1
    e468:	6053      	str	r3, [r2, #4]
    e46a:	4b05      	ldr	r3, [pc, #20]	; (e480 <_malloc_trim_r+0x9c>)
    e46c:	4903      	ldr	r1, [pc, #12]	; (e47c <_malloc_trim_r+0x98>)
    e46e:	681b      	ldr	r3, [r3, #0]
    e470:	1ac0      	subs	r0, r0, r3
    e472:	6008      	str	r0, [r1, #0]
    e474:	e7d5      	b.n	e422 <_malloc_trim_r+0x3e>
    e476:	bf00      	nop
    e478:	200038c4 	.word	0x200038c4
    e47c:	20004920 	.word	0x20004920
    e480:	20003ccc 	.word	0x20003ccc

0000e484 <_free_r>:
    e484:	2900      	cmp	r1, #0
    e486:	d061      	beq.n	e54c <_free_r+0xc8>
    e488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e48a:	460c      	mov	r4, r1
    e48c:	4606      	mov	r6, r0
    e48e:	f7ff f935 	bl	d6fc <__malloc_lock>
    e492:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e496:	4f7b      	ldr	r7, [pc, #492]	; (e684 <_free_r+0x200>)
    e498:	f1a4 0508 	sub.w	r5, r4, #8
    e49c:	f022 0101 	bic.w	r1, r2, #1
    e4a0:	eb05 0c01 	add.w	ip, r5, r1
    e4a4:	68b8      	ldr	r0, [r7, #8]
    e4a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e4aa:	4560      	cmp	r0, ip
    e4ac:	f023 0303 	bic.w	r3, r3, #3
    e4b0:	f000 808b 	beq.w	e5ca <_free_r+0x146>
    e4b4:	07d2      	lsls	r2, r2, #31
    e4b6:	f8cc 3004 	str.w	r3, [ip, #4]
    e4ba:	d432      	bmi.n	e522 <_free_r+0x9e>
    e4bc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e4c0:	1aad      	subs	r5, r5, r2
    e4c2:	4411      	add	r1, r2
    e4c4:	68aa      	ldr	r2, [r5, #8]
    e4c6:	f107 0008 	add.w	r0, r7, #8
    e4ca:	4282      	cmp	r2, r0
    e4cc:	d06a      	beq.n	e5a4 <_free_r+0x120>
    e4ce:	eb0c 0403 	add.w	r4, ip, r3
    e4d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    e4d6:	68ec      	ldr	r4, [r5, #12]
    e4d8:	60d4      	str	r4, [r2, #12]
    e4da:	f01e 0f01 	tst.w	lr, #1
    e4de:	60a2      	str	r2, [r4, #8]
    e4e0:	f000 8097 	beq.w	e612 <_free_r+0x18e>
    e4e4:	f041 0301 	orr.w	r3, r1, #1
    e4e8:	606b      	str	r3, [r5, #4]
    e4ea:	f8cc 1000 	str.w	r1, [ip]
    e4ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e4f2:	d235      	bcs.n	e560 <_free_r+0xdc>
    e4f4:	6878      	ldr	r0, [r7, #4]
    e4f6:	08cb      	lsrs	r3, r1, #3
    e4f8:	2201      	movs	r2, #1
    e4fa:	0949      	lsrs	r1, r1, #5
    e4fc:	3301      	adds	r3, #1
    e4fe:	408a      	lsls	r2, r1
    e500:	4302      	orrs	r2, r0
    e502:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    e506:	607a      	str	r2, [r7, #4]
    e508:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e50c:	3a08      	subs	r2, #8
    e50e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    e512:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    e516:	60cd      	str	r5, [r1, #12]
    e518:	4630      	mov	r0, r6
    e51a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e51e:	f7ff b8f3 	b.w	d708 <__malloc_unlock>
    e522:	eb0c 0203 	add.w	r2, ip, r3
    e526:	6852      	ldr	r2, [r2, #4]
    e528:	07d0      	lsls	r0, r2, #31
    e52a:	d410      	bmi.n	e54e <_free_r+0xca>
    e52c:	4419      	add	r1, r3
    e52e:	f107 0008 	add.w	r0, r7, #8
    e532:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e536:	4283      	cmp	r3, r0
    e538:	d073      	beq.n	e622 <_free_r+0x19e>
    e53a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e53e:	60da      	str	r2, [r3, #12]
    e540:	6093      	str	r3, [r2, #8]
    e542:	f041 0301 	orr.w	r3, r1, #1
    e546:	606b      	str	r3, [r5, #4]
    e548:	5069      	str	r1, [r5, r1]
    e54a:	e7d0      	b.n	e4ee <_free_r+0x6a>
    e54c:	4770      	bx	lr
    e54e:	f041 0301 	orr.w	r3, r1, #1
    e552:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e556:	f844 3c04 	str.w	r3, [r4, #-4]
    e55a:	f8cc 1000 	str.w	r1, [ip]
    e55e:	d3c9      	bcc.n	e4f4 <_free_r+0x70>
    e560:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    e564:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e568:	d248      	bcs.n	e5fc <_free_r+0x178>
    e56a:	098b      	lsrs	r3, r1, #6
    e56c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e570:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e574:	00c3      	lsls	r3, r0, #3
    e576:	18f8      	adds	r0, r7, r3
    e578:	58fb      	ldr	r3, [r7, r3]
    e57a:	3808      	subs	r0, #8
    e57c:	4298      	cmp	r0, r3
    e57e:	d059      	beq.n	e634 <_free_r+0x1b0>
    e580:	685a      	ldr	r2, [r3, #4]
    e582:	f022 0203 	bic.w	r2, r2, #3
    e586:	428a      	cmp	r2, r1
    e588:	d902      	bls.n	e590 <_free_r+0x10c>
    e58a:	689b      	ldr	r3, [r3, #8]
    e58c:	4298      	cmp	r0, r3
    e58e:	d1f7      	bne.n	e580 <_free_r+0xfc>
    e590:	68d8      	ldr	r0, [r3, #12]
    e592:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e596:	6085      	str	r5, [r0, #8]
    e598:	60dd      	str	r5, [r3, #12]
    e59a:	4630      	mov	r0, r6
    e59c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e5a0:	f7ff b8b2 	b.w	d708 <__malloc_unlock>
    e5a4:	eb0c 0203 	add.w	r2, ip, r3
    e5a8:	6852      	ldr	r2, [r2, #4]
    e5aa:	07d2      	lsls	r2, r2, #31
    e5ac:	d463      	bmi.n	e676 <_free_r+0x1f2>
    e5ae:	440b      	add	r3, r1
    e5b0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e5b4:	60ca      	str	r2, [r1, #12]
    e5b6:	6091      	str	r1, [r2, #8]
    e5b8:	f043 0201 	orr.w	r2, r3, #1
    e5bc:	606a      	str	r2, [r5, #4]
    e5be:	4630      	mov	r0, r6
    e5c0:	50eb      	str	r3, [r5, r3]
    e5c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e5c6:	f7ff b89f 	b.w	d708 <__malloc_unlock>
    e5ca:	440b      	add	r3, r1
    e5cc:	07d1      	lsls	r1, r2, #31
    e5ce:	d407      	bmi.n	e5e0 <_free_r+0x15c>
    e5d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e5d4:	1aad      	subs	r5, r5, r2
    e5d6:	4413      	add	r3, r2
    e5d8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e5dc:	60ca      	str	r2, [r1, #12]
    e5de:	6091      	str	r1, [r2, #8]
    e5e0:	f043 0201 	orr.w	r2, r3, #1
    e5e4:	606a      	str	r2, [r5, #4]
    e5e6:	4a28      	ldr	r2, [pc, #160]	; (e688 <_free_r+0x204>)
    e5e8:	60bd      	str	r5, [r7, #8]
    e5ea:	6812      	ldr	r2, [r2, #0]
    e5ec:	429a      	cmp	r2, r3
    e5ee:	d893      	bhi.n	e518 <_free_r+0x94>
    e5f0:	4b26      	ldr	r3, [pc, #152]	; (e68c <_free_r+0x208>)
    e5f2:	4630      	mov	r0, r6
    e5f4:	6819      	ldr	r1, [r3, #0]
    e5f6:	f7ff fef5 	bl	e3e4 <_malloc_trim_r>
    e5fa:	e78d      	b.n	e518 <_free_r+0x94>
    e5fc:	2b14      	cmp	r3, #20
    e5fe:	d90a      	bls.n	e616 <_free_r+0x192>
    e600:	2b54      	cmp	r3, #84	; 0x54
    e602:	d81f      	bhi.n	e644 <_free_r+0x1c0>
    e604:	0b0b      	lsrs	r3, r1, #12
    e606:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e60a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e60e:	00c3      	lsls	r3, r0, #3
    e610:	e7b1      	b.n	e576 <_free_r+0xf2>
    e612:	4419      	add	r1, r3
    e614:	e78d      	b.n	e532 <_free_r+0xae>
    e616:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e61a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e61e:	00c3      	lsls	r3, r0, #3
    e620:	e7a9      	b.n	e576 <_free_r+0xf2>
    e622:	f041 0301 	orr.w	r3, r1, #1
    e626:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e62a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e62e:	606b      	str	r3, [r5, #4]
    e630:	5069      	str	r1, [r5, r1]
    e632:	e771      	b.n	e518 <_free_r+0x94>
    e634:	6879      	ldr	r1, [r7, #4]
    e636:	1092      	asrs	r2, r2, #2
    e638:	2401      	movs	r4, #1
    e63a:	fa04 f202 	lsl.w	r2, r4, r2
    e63e:	430a      	orrs	r2, r1
    e640:	607a      	str	r2, [r7, #4]
    e642:	e7a6      	b.n	e592 <_free_r+0x10e>
    e644:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e648:	d806      	bhi.n	e658 <_free_r+0x1d4>
    e64a:	0bcb      	lsrs	r3, r1, #15
    e64c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    e650:	f103 0277 	add.w	r2, r3, #119	; 0x77
    e654:	00c3      	lsls	r3, r0, #3
    e656:	e78e      	b.n	e576 <_free_r+0xf2>
    e658:	f240 5254 	movw	r2, #1364	; 0x554
    e65c:	4293      	cmp	r3, r2
    e65e:	d806      	bhi.n	e66e <_free_r+0x1ea>
    e660:	0c8b      	lsrs	r3, r1, #18
    e662:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    e666:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    e66a:	00c3      	lsls	r3, r0, #3
    e66c:	e783      	b.n	e576 <_free_r+0xf2>
    e66e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    e672:	227e      	movs	r2, #126	; 0x7e
    e674:	e77f      	b.n	e576 <_free_r+0xf2>
    e676:	f041 0301 	orr.w	r3, r1, #1
    e67a:	606b      	str	r3, [r5, #4]
    e67c:	f8cc 1000 	str.w	r1, [ip]
    e680:	e74a      	b.n	e518 <_free_r+0x94>
    e682:	bf00      	nop
    e684:	200038c4 	.word	0x200038c4
    e688:	20003cd0 	.word	0x20003cd0
    e68c:	20004950 	.word	0x20004950

0000e690 <__ascii_mbtowc>:
    e690:	b082      	sub	sp, #8
    e692:	b149      	cbz	r1, e6a8 <__ascii_mbtowc+0x18>
    e694:	b15a      	cbz	r2, e6ae <__ascii_mbtowc+0x1e>
    e696:	b16b      	cbz	r3, e6b4 <__ascii_mbtowc+0x24>
    e698:	7813      	ldrb	r3, [r2, #0]
    e69a:	600b      	str	r3, [r1, #0]
    e69c:	7812      	ldrb	r2, [r2, #0]
    e69e:	1e10      	subs	r0, r2, #0
    e6a0:	bf18      	it	ne
    e6a2:	2001      	movne	r0, #1
    e6a4:	b002      	add	sp, #8
    e6a6:	4770      	bx	lr
    e6a8:	a901      	add	r1, sp, #4
    e6aa:	2a00      	cmp	r2, #0
    e6ac:	d1f3      	bne.n	e696 <__ascii_mbtowc+0x6>
    e6ae:	4610      	mov	r0, r2
    e6b0:	b002      	add	sp, #8
    e6b2:	4770      	bx	lr
    e6b4:	f06f 0001 	mvn.w	r0, #1
    e6b8:	e7f4      	b.n	e6a4 <__ascii_mbtowc+0x14>
    e6ba:	bf00      	nop

0000e6bc <_Balloc>:
    e6bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e6be:	b570      	push	{r4, r5, r6, lr}
    e6c0:	4605      	mov	r5, r0
    e6c2:	460c      	mov	r4, r1
    e6c4:	b14b      	cbz	r3, e6da <_Balloc+0x1e>
    e6c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e6ca:	b180      	cbz	r0, e6ee <_Balloc+0x32>
    e6cc:	6802      	ldr	r2, [r0, #0]
    e6ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e6d2:	2300      	movs	r3, #0
    e6d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    e6d8:	bd70      	pop	{r4, r5, r6, pc}
    e6da:	2221      	movs	r2, #33	; 0x21
    e6dc:	2104      	movs	r1, #4
    e6de:	f000 fda7 	bl	f230 <_calloc_r>
    e6e2:	4603      	mov	r3, r0
    e6e4:	6468      	str	r0, [r5, #68]	; 0x44
    e6e6:	2800      	cmp	r0, #0
    e6e8:	d1ed      	bne.n	e6c6 <_Balloc+0xa>
    e6ea:	2000      	movs	r0, #0
    e6ec:	bd70      	pop	{r4, r5, r6, pc}
    e6ee:	2101      	movs	r1, #1
    e6f0:	fa01 f604 	lsl.w	r6, r1, r4
    e6f4:	1d72      	adds	r2, r6, #5
    e6f6:	0092      	lsls	r2, r2, #2
    e6f8:	4628      	mov	r0, r5
    e6fa:	f000 fd99 	bl	f230 <_calloc_r>
    e6fe:	2800      	cmp	r0, #0
    e700:	d0f3      	beq.n	e6ea <_Balloc+0x2e>
    e702:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e706:	e7e4      	b.n	e6d2 <_Balloc+0x16>

0000e708 <_Bfree>:
    e708:	b131      	cbz	r1, e718 <_Bfree+0x10>
    e70a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e70c:	684a      	ldr	r2, [r1, #4]
    e70e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e712:	6008      	str	r0, [r1, #0]
    e714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e718:	4770      	bx	lr
    e71a:	bf00      	nop

0000e71c <__multadd>:
    e71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e720:	690e      	ldr	r6, [r1, #16]
    e722:	4680      	mov	r8, r0
    e724:	460f      	mov	r7, r1
    e726:	461d      	mov	r5, r3
    e728:	f101 0e14 	add.w	lr, r1, #20
    e72c:	2000      	movs	r0, #0
    e72e:	f8de 1000 	ldr.w	r1, [lr]
    e732:	b28c      	uxth	r4, r1
    e734:	fb02 5304 	mla	r3, r2, r4, r5
    e738:	0c09      	lsrs	r1, r1, #16
    e73a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e73e:	fb02 cc01 	mla	ip, r2, r1, ip
    e742:	3001      	adds	r0, #1
    e744:	b29c      	uxth	r4, r3
    e746:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    e74a:	4286      	cmp	r6, r0
    e74c:	f84e 4b04 	str.w	r4, [lr], #4
    e750:	ea4f 451c 	mov.w	r5, ip, lsr #16
    e754:	dceb      	bgt.n	e72e <__multadd+0x12>
    e756:	b13d      	cbz	r5, e768 <__multadd+0x4c>
    e758:	68bb      	ldr	r3, [r7, #8]
    e75a:	42b3      	cmp	r3, r6
    e75c:	dd07      	ble.n	e76e <__multadd+0x52>
    e75e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    e762:	3601      	adds	r6, #1
    e764:	615d      	str	r5, [r3, #20]
    e766:	613e      	str	r6, [r7, #16]
    e768:	4638      	mov	r0, r7
    e76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e76e:	6879      	ldr	r1, [r7, #4]
    e770:	4640      	mov	r0, r8
    e772:	3101      	adds	r1, #1
    e774:	f7ff ffa2 	bl	e6bc <_Balloc>
    e778:	4604      	mov	r4, r0
    e77a:	b1b0      	cbz	r0, e7aa <__multadd+0x8e>
    e77c:	693a      	ldr	r2, [r7, #16]
    e77e:	3202      	adds	r2, #2
    e780:	f107 010c 	add.w	r1, r7, #12
    e784:	0092      	lsls	r2, r2, #2
    e786:	300c      	adds	r0, #12
    e788:	f7fc fa50 	bl	ac2c <memcpy>
    e78c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    e790:	687a      	ldr	r2, [r7, #4]
    e792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e796:	6039      	str	r1, [r7, #0]
    e798:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    e79c:	4627      	mov	r7, r4
    e79e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    e7a2:	3601      	adds	r6, #1
    e7a4:	615d      	str	r5, [r3, #20]
    e7a6:	613e      	str	r6, [r7, #16]
    e7a8:	e7de      	b.n	e768 <__multadd+0x4c>
    e7aa:	4b03      	ldr	r3, [pc, #12]	; (e7b8 <__multadd+0x9c>)
    e7ac:	4803      	ldr	r0, [pc, #12]	; (e7bc <__multadd+0xa0>)
    e7ae:	4622      	mov	r2, r4
    e7b0:	21ba      	movs	r1, #186	; 0xba
    e7b2:	f000 fd1d 	bl	f1f0 <__assert_func>
    e7b6:	bf00      	nop
    e7b8:	20002bd0 	.word	0x20002bd0
    e7bc:	20002be4 	.word	0x20002be4

0000e7c0 <__hi0bits>:
    e7c0:	0c03      	lsrs	r3, r0, #16
    e7c2:	041b      	lsls	r3, r3, #16
    e7c4:	b9d3      	cbnz	r3, e7fc <__hi0bits+0x3c>
    e7c6:	0400      	lsls	r0, r0, #16
    e7c8:	2310      	movs	r3, #16
    e7ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    e7ce:	bf04      	itt	eq
    e7d0:	0200      	lsleq	r0, r0, #8
    e7d2:	3308      	addeq	r3, #8
    e7d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    e7d8:	bf04      	itt	eq
    e7da:	0100      	lsleq	r0, r0, #4
    e7dc:	3304      	addeq	r3, #4
    e7de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    e7e2:	bf04      	itt	eq
    e7e4:	0080      	lsleq	r0, r0, #2
    e7e6:	3302      	addeq	r3, #2
    e7e8:	2800      	cmp	r0, #0
    e7ea:	db05      	blt.n	e7f8 <__hi0bits+0x38>
    e7ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    e7f0:	f103 0301 	add.w	r3, r3, #1
    e7f4:	bf08      	it	eq
    e7f6:	2320      	moveq	r3, #32
    e7f8:	4618      	mov	r0, r3
    e7fa:	4770      	bx	lr
    e7fc:	2300      	movs	r3, #0
    e7fe:	e7e4      	b.n	e7ca <__hi0bits+0xa>

0000e800 <__lo0bits>:
    e800:	6803      	ldr	r3, [r0, #0]
    e802:	f013 0207 	ands.w	r2, r3, #7
    e806:	d008      	beq.n	e81a <__lo0bits+0x1a>
    e808:	07d9      	lsls	r1, r3, #31
    e80a:	d41f      	bmi.n	e84c <__lo0bits+0x4c>
    e80c:	079a      	lsls	r2, r3, #30
    e80e:	d522      	bpl.n	e856 <__lo0bits+0x56>
    e810:	085b      	lsrs	r3, r3, #1
    e812:	6003      	str	r3, [r0, #0]
    e814:	2201      	movs	r2, #1
    e816:	4610      	mov	r0, r2
    e818:	4770      	bx	lr
    e81a:	b299      	uxth	r1, r3
    e81c:	b909      	cbnz	r1, e822 <__lo0bits+0x22>
    e81e:	0c1b      	lsrs	r3, r3, #16
    e820:	2210      	movs	r2, #16
    e822:	b2d9      	uxtb	r1, r3
    e824:	b909      	cbnz	r1, e82a <__lo0bits+0x2a>
    e826:	3208      	adds	r2, #8
    e828:	0a1b      	lsrs	r3, r3, #8
    e82a:	0719      	lsls	r1, r3, #28
    e82c:	bf04      	itt	eq
    e82e:	091b      	lsreq	r3, r3, #4
    e830:	3204      	addeq	r2, #4
    e832:	0799      	lsls	r1, r3, #30
    e834:	bf04      	itt	eq
    e836:	089b      	lsreq	r3, r3, #2
    e838:	3202      	addeq	r2, #2
    e83a:	07d9      	lsls	r1, r3, #31
    e83c:	d403      	bmi.n	e846 <__lo0bits+0x46>
    e83e:	085b      	lsrs	r3, r3, #1
    e840:	f102 0201 	add.w	r2, r2, #1
    e844:	d005      	beq.n	e852 <__lo0bits+0x52>
    e846:	6003      	str	r3, [r0, #0]
    e848:	4610      	mov	r0, r2
    e84a:	4770      	bx	lr
    e84c:	2200      	movs	r2, #0
    e84e:	4610      	mov	r0, r2
    e850:	4770      	bx	lr
    e852:	2220      	movs	r2, #32
    e854:	e7df      	b.n	e816 <__lo0bits+0x16>
    e856:	089b      	lsrs	r3, r3, #2
    e858:	2202      	movs	r2, #2
    e85a:	6003      	str	r3, [r0, #0]
    e85c:	4610      	mov	r0, r2
    e85e:	4770      	bx	lr

0000e860 <__i2b>:
    e860:	b538      	push	{r3, r4, r5, lr}
    e862:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e864:	4604      	mov	r4, r0
    e866:	460d      	mov	r5, r1
    e868:	b14b      	cbz	r3, e87e <__i2b+0x1e>
    e86a:	6858      	ldr	r0, [r3, #4]
    e86c:	b1b0      	cbz	r0, e89c <__i2b+0x3c>
    e86e:	6802      	ldr	r2, [r0, #0]
    e870:	605a      	str	r2, [r3, #4]
    e872:	2200      	movs	r2, #0
    e874:	2301      	movs	r3, #1
    e876:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e87a:	60c2      	str	r2, [r0, #12]
    e87c:	bd38      	pop	{r3, r4, r5, pc}
    e87e:	2221      	movs	r2, #33	; 0x21
    e880:	2104      	movs	r1, #4
    e882:	f000 fcd5 	bl	f230 <_calloc_r>
    e886:	4603      	mov	r3, r0
    e888:	6460      	str	r0, [r4, #68]	; 0x44
    e88a:	2800      	cmp	r0, #0
    e88c:	d1ed      	bne.n	e86a <__i2b+0xa>
    e88e:	4b09      	ldr	r3, [pc, #36]	; (e8b4 <__i2b+0x54>)
    e890:	4809      	ldr	r0, [pc, #36]	; (e8b8 <__i2b+0x58>)
    e892:	2200      	movs	r2, #0
    e894:	f240 1145 	movw	r1, #325	; 0x145
    e898:	f000 fcaa 	bl	f1f0 <__assert_func>
    e89c:	221c      	movs	r2, #28
    e89e:	2101      	movs	r1, #1
    e8a0:	4620      	mov	r0, r4
    e8a2:	f000 fcc5 	bl	f230 <_calloc_r>
    e8a6:	2800      	cmp	r0, #0
    e8a8:	d0f1      	beq.n	e88e <__i2b+0x2e>
    e8aa:	2201      	movs	r2, #1
    e8ac:	2302      	movs	r3, #2
    e8ae:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e8b2:	e7de      	b.n	e872 <__i2b+0x12>
    e8b4:	20002bd0 	.word	0x20002bd0
    e8b8:	20002be4 	.word	0x20002be4

0000e8bc <__multiply>:
    e8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8c0:	690e      	ldr	r6, [r1, #16]
    e8c2:	6915      	ldr	r5, [r2, #16]
    e8c4:	42ae      	cmp	r6, r5
    e8c6:	b085      	sub	sp, #20
    e8c8:	4688      	mov	r8, r1
    e8ca:	4614      	mov	r4, r2
    e8cc:	db05      	blt.n	e8da <__multiply+0x1e>
    e8ce:	462a      	mov	r2, r5
    e8d0:	4623      	mov	r3, r4
    e8d2:	4635      	mov	r5, r6
    e8d4:	460c      	mov	r4, r1
    e8d6:	4616      	mov	r6, r2
    e8d8:	4698      	mov	r8, r3
    e8da:	68a3      	ldr	r3, [r4, #8]
    e8dc:	6861      	ldr	r1, [r4, #4]
    e8de:	19af      	adds	r7, r5, r6
    e8e0:	42bb      	cmp	r3, r7
    e8e2:	bfb8      	it	lt
    e8e4:	3101      	addlt	r1, #1
    e8e6:	f7ff fee9 	bl	e6bc <_Balloc>
    e8ea:	9001      	str	r0, [sp, #4]
    e8ec:	2800      	cmp	r0, #0
    e8ee:	f000 8087 	beq.w	ea00 <__multiply+0x144>
    e8f2:	9b01      	ldr	r3, [sp, #4]
    e8f4:	f103 0914 	add.w	r9, r3, #20
    e8f8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e8fc:	45d1      	cmp	r9, sl
    e8fe:	d205      	bcs.n	e90c <__multiply+0x50>
    e900:	464b      	mov	r3, r9
    e902:	2200      	movs	r2, #0
    e904:	f843 2b04 	str.w	r2, [r3], #4
    e908:	459a      	cmp	sl, r3
    e90a:	d8fb      	bhi.n	e904 <__multiply+0x48>
    e90c:	f108 0814 	add.w	r8, r8, #20
    e910:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e914:	f104 0314 	add.w	r3, r4, #20
    e918:	45d8      	cmp	r8, fp
    e91a:	461a      	mov	r2, r3
    e91c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e920:	d25f      	bcs.n	e9e2 <__multiply+0x126>
    e922:	1b2b      	subs	r3, r5, r4
    e924:	3b15      	subs	r3, #21
    e926:	f023 0303 	bic.w	r3, r3, #3
    e92a:	3304      	adds	r3, #4
    e92c:	3415      	adds	r4, #21
    e92e:	42a5      	cmp	r5, r4
    e930:	bf38      	it	cc
    e932:	2304      	movcc	r3, #4
    e934:	e9cd a702 	strd	sl, r7, [sp, #8]
    e938:	46ac      	mov	ip, r5
    e93a:	461f      	mov	r7, r3
    e93c:	4692      	mov	sl, r2
    e93e:	e005      	b.n	e94c <__multiply+0x90>
    e940:	0c09      	lsrs	r1, r1, #16
    e942:	d129      	bne.n	e998 <__multiply+0xdc>
    e944:	45c3      	cmp	fp, r8
    e946:	f109 0904 	add.w	r9, r9, #4
    e94a:	d948      	bls.n	e9de <__multiply+0x122>
    e94c:	f858 1b04 	ldr.w	r1, [r8], #4
    e950:	b28d      	uxth	r5, r1
    e952:	2d00      	cmp	r5, #0
    e954:	d0f4      	beq.n	e940 <__multiply+0x84>
    e956:	4656      	mov	r6, sl
    e958:	464c      	mov	r4, r9
    e95a:	2300      	movs	r3, #0
    e95c:	f856 1b04 	ldr.w	r1, [r6], #4
    e960:	6822      	ldr	r2, [r4, #0]
    e962:	fa1f fe81 	uxth.w	lr, r1
    e966:	b290      	uxth	r0, r2
    e968:	0c09      	lsrs	r1, r1, #16
    e96a:	fb05 000e 	mla	r0, r5, lr, r0
    e96e:	0c12      	lsrs	r2, r2, #16
    e970:	4403      	add	r3, r0
    e972:	fb05 2201 	mla	r2, r5, r1, r2
    e976:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e97a:	b29b      	uxth	r3, r3
    e97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e980:	45b4      	cmp	ip, r6
    e982:	f844 3b04 	str.w	r3, [r4], #4
    e986:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e98a:	d8e7      	bhi.n	e95c <__multiply+0xa0>
    e98c:	f849 3007 	str.w	r3, [r9, r7]
    e990:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e994:	0c09      	lsrs	r1, r1, #16
    e996:	d0d5      	beq.n	e944 <__multiply+0x88>
    e998:	f8d9 3000 	ldr.w	r3, [r9]
    e99c:	4650      	mov	r0, sl
    e99e:	461a      	mov	r2, r3
    e9a0:	464c      	mov	r4, r9
    e9a2:	2600      	movs	r6, #0
    e9a4:	8805      	ldrh	r5, [r0, #0]
    e9a6:	0c12      	lsrs	r2, r2, #16
    e9a8:	fb01 2205 	mla	r2, r1, r5, r2
    e9ac:	4416      	add	r6, r2
    e9ae:	b29b      	uxth	r3, r3
    e9b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e9b4:	f844 3b04 	str.w	r3, [r4], #4
    e9b8:	f850 5b04 	ldr.w	r5, [r0], #4
    e9bc:	6822      	ldr	r2, [r4, #0]
    e9be:	0c2d      	lsrs	r5, r5, #16
    e9c0:	b293      	uxth	r3, r2
    e9c2:	fb01 3305 	mla	r3, r1, r5, r3
    e9c6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e9ca:	4584      	cmp	ip, r0
    e9cc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e9d0:	d8e8      	bhi.n	e9a4 <__multiply+0xe8>
    e9d2:	45c3      	cmp	fp, r8
    e9d4:	f849 3007 	str.w	r3, [r9, r7]
    e9d8:	f109 0904 	add.w	r9, r9, #4
    e9dc:	d8b6      	bhi.n	e94c <__multiply+0x90>
    e9de:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e9e2:	2f00      	cmp	r7, #0
    e9e4:	dc02      	bgt.n	e9ec <__multiply+0x130>
    e9e6:	e005      	b.n	e9f4 <__multiply+0x138>
    e9e8:	3f01      	subs	r7, #1
    e9ea:	d003      	beq.n	e9f4 <__multiply+0x138>
    e9ec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d0f9      	beq.n	e9e8 <__multiply+0x12c>
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	4618      	mov	r0, r3
    e9f8:	611f      	str	r7, [r3, #16]
    e9fa:	b005      	add	sp, #20
    e9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea00:	4b03      	ldr	r3, [pc, #12]	; (ea10 <__multiply+0x154>)
    ea02:	4804      	ldr	r0, [pc, #16]	; (ea14 <__multiply+0x158>)
    ea04:	9a01      	ldr	r2, [sp, #4]
    ea06:	f44f 71b1 	mov.w	r1, #354	; 0x162
    ea0a:	f000 fbf1 	bl	f1f0 <__assert_func>
    ea0e:	bf00      	nop
    ea10:	20002bd0 	.word	0x20002bd0
    ea14:	20002be4 	.word	0x20002be4

0000ea18 <__pow5mult>:
    ea18:	f012 0303 	ands.w	r3, r2, #3
    ea1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea20:	4614      	mov	r4, r2
    ea22:	4606      	mov	r6, r0
    ea24:	d132      	bne.n	ea8c <__pow5mult+0x74>
    ea26:	460d      	mov	r5, r1
    ea28:	10a4      	asrs	r4, r4, #2
    ea2a:	d020      	beq.n	ea6e <__pow5mult+0x56>
    ea2c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    ea30:	f1b8 0f00 	cmp.w	r8, #0
    ea34:	d033      	beq.n	ea9e <__pow5mult+0x86>
    ea36:	07e3      	lsls	r3, r4, #31
    ea38:	f04f 0700 	mov.w	r7, #0
    ea3c:	d407      	bmi.n	ea4e <__pow5mult+0x36>
    ea3e:	1064      	asrs	r4, r4, #1
    ea40:	d015      	beq.n	ea6e <__pow5mult+0x56>
    ea42:	f8d8 0000 	ldr.w	r0, [r8]
    ea46:	b1a8      	cbz	r0, ea74 <__pow5mult+0x5c>
    ea48:	4680      	mov	r8, r0
    ea4a:	07e3      	lsls	r3, r4, #31
    ea4c:	d5f7      	bpl.n	ea3e <__pow5mult+0x26>
    ea4e:	4642      	mov	r2, r8
    ea50:	4629      	mov	r1, r5
    ea52:	4630      	mov	r0, r6
    ea54:	f7ff ff32 	bl	e8bc <__multiply>
    ea58:	b1b5      	cbz	r5, ea88 <__pow5mult+0x70>
    ea5a:	6869      	ldr	r1, [r5, #4]
    ea5c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    ea5e:	1064      	asrs	r4, r4, #1
    ea60:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    ea64:	602a      	str	r2, [r5, #0]
    ea66:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    ea6a:	4605      	mov	r5, r0
    ea6c:	d1e9      	bne.n	ea42 <__pow5mult+0x2a>
    ea6e:	4628      	mov	r0, r5
    ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea74:	4642      	mov	r2, r8
    ea76:	4641      	mov	r1, r8
    ea78:	4630      	mov	r0, r6
    ea7a:	f7ff ff1f 	bl	e8bc <__multiply>
    ea7e:	f8c8 0000 	str.w	r0, [r8]
    ea82:	6007      	str	r7, [r0, #0]
    ea84:	4680      	mov	r8, r0
    ea86:	e7e0      	b.n	ea4a <__pow5mult+0x32>
    ea88:	4605      	mov	r5, r0
    ea8a:	e7d8      	b.n	ea3e <__pow5mult+0x26>
    ea8c:	3b01      	subs	r3, #1
    ea8e:	4a0f      	ldr	r2, [pc, #60]	; (eacc <__pow5mult+0xb4>)
    ea90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ea94:	2300      	movs	r3, #0
    ea96:	f7ff fe41 	bl	e71c <__multadd>
    ea9a:	4605      	mov	r5, r0
    ea9c:	e7c4      	b.n	ea28 <__pow5mult+0x10>
    ea9e:	2101      	movs	r1, #1
    eaa0:	4630      	mov	r0, r6
    eaa2:	f7ff fe0b 	bl	e6bc <_Balloc>
    eaa6:	4680      	mov	r8, r0
    eaa8:	b140      	cbz	r0, eabc <__pow5mult+0xa4>
    eaaa:	2301      	movs	r3, #1
    eaac:	f240 2271 	movw	r2, #625	; 0x271
    eab0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    eab4:	2300      	movs	r3, #0
    eab6:	6430      	str	r0, [r6, #64]	; 0x40
    eab8:	6003      	str	r3, [r0, #0]
    eaba:	e7bc      	b.n	ea36 <__pow5mult+0x1e>
    eabc:	4b04      	ldr	r3, [pc, #16]	; (ead0 <__pow5mult+0xb8>)
    eabe:	4805      	ldr	r0, [pc, #20]	; (ead4 <__pow5mult+0xbc>)
    eac0:	4642      	mov	r2, r8
    eac2:	f240 1145 	movw	r1, #325	; 0x145
    eac6:	f000 fb93 	bl	f1f0 <__assert_func>
    eaca:	bf00      	nop
    eacc:	200030a0 	.word	0x200030a0
    ead0:	20002bd0 	.word	0x20002bd0
    ead4:	20002be4 	.word	0x20002be4

0000ead8 <__lshift>:
    ead8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eadc:	460d      	mov	r5, r1
    eade:	4614      	mov	r4, r2
    eae0:	692f      	ldr	r7, [r5, #16]
    eae2:	68ab      	ldr	r3, [r5, #8]
    eae4:	6849      	ldr	r1, [r1, #4]
    eae6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    eaea:	1c7e      	adds	r6, r7, #1
    eaec:	429e      	cmp	r6, r3
    eaee:	4680      	mov	r8, r0
    eaf0:	ea4f 1962 	mov.w	r9, r2, asr #5
    eaf4:	dd04      	ble.n	eb00 <__lshift+0x28>
    eaf6:	005b      	lsls	r3, r3, #1
    eaf8:	429e      	cmp	r6, r3
    eafa:	f101 0101 	add.w	r1, r1, #1
    eafe:	dcfa      	bgt.n	eaf6 <__lshift+0x1e>
    eb00:	4640      	mov	r0, r8
    eb02:	f7ff fddb 	bl	e6bc <_Balloc>
    eb06:	4684      	mov	ip, r0
    eb08:	2800      	cmp	r0, #0
    eb0a:	d052      	beq.n	ebb2 <__lshift+0xda>
    eb0c:	f1b9 0f00 	cmp.w	r9, #0
    eb10:	f100 0214 	add.w	r2, r0, #20
    eb14:	dd0e      	ble.n	eb34 <__lshift+0x5c>
    eb16:	f109 0105 	add.w	r1, r9, #5
    eb1a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    eb1e:	4613      	mov	r3, r2
    eb20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    eb24:	2000      	movs	r0, #0
    eb26:	f843 0b04 	str.w	r0, [r3], #4
    eb2a:	428b      	cmp	r3, r1
    eb2c:	d1fb      	bne.n	eb26 <__lshift+0x4e>
    eb2e:	f1ae 0314 	sub.w	r3, lr, #20
    eb32:	441a      	add	r2, r3
    eb34:	6929      	ldr	r1, [r5, #16]
    eb36:	f105 0314 	add.w	r3, r5, #20
    eb3a:	f014 0e1f 	ands.w	lr, r4, #31
    eb3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    eb42:	d02e      	beq.n	eba2 <__lshift+0xca>
    eb44:	f1ce 0920 	rsb	r9, lr, #32
    eb48:	4610      	mov	r0, r2
    eb4a:	f04f 0a00 	mov.w	sl, #0
    eb4e:	681c      	ldr	r4, [r3, #0]
    eb50:	fa04 f40e 	lsl.w	r4, r4, lr
    eb54:	ea44 040a 	orr.w	r4, r4, sl
    eb58:	f840 4b04 	str.w	r4, [r0], #4
    eb5c:	f853 4b04 	ldr.w	r4, [r3], #4
    eb60:	4299      	cmp	r1, r3
    eb62:	fa24 fa09 	lsr.w	sl, r4, r9
    eb66:	d8f2      	bhi.n	eb4e <__lshift+0x76>
    eb68:	1b4b      	subs	r3, r1, r5
    eb6a:	3b15      	subs	r3, #21
    eb6c:	f023 0303 	bic.w	r3, r3, #3
    eb70:	3304      	adds	r3, #4
    eb72:	f105 0015 	add.w	r0, r5, #21
    eb76:	4281      	cmp	r1, r0
    eb78:	bf38      	it	cc
    eb7a:	2304      	movcc	r3, #4
    eb7c:	f1ba 0f00 	cmp.w	sl, #0
    eb80:	bf18      	it	ne
    eb82:	4637      	movne	r7, r6
    eb84:	f842 a003 	str.w	sl, [r2, r3]
    eb88:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    eb8c:	686a      	ldr	r2, [r5, #4]
    eb8e:	f8cc 7010 	str.w	r7, [ip, #16]
    eb92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    eb96:	6029      	str	r1, [r5, #0]
    eb98:	4660      	mov	r0, ip
    eb9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    eb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eba2:	3a04      	subs	r2, #4
    eba4:	f853 0b04 	ldr.w	r0, [r3], #4
    eba8:	f842 0f04 	str.w	r0, [r2, #4]!
    ebac:	4299      	cmp	r1, r3
    ebae:	d8f9      	bhi.n	eba4 <__lshift+0xcc>
    ebb0:	e7ea      	b.n	eb88 <__lshift+0xb0>
    ebb2:	4b03      	ldr	r3, [pc, #12]	; (ebc0 <__lshift+0xe8>)
    ebb4:	4803      	ldr	r0, [pc, #12]	; (ebc4 <__lshift+0xec>)
    ebb6:	4662      	mov	r2, ip
    ebb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    ebbc:	f000 fb18 	bl	f1f0 <__assert_func>
    ebc0:	20002bd0 	.word	0x20002bd0
    ebc4:	20002be4 	.word	0x20002be4

0000ebc8 <__mcmp>:
    ebc8:	690b      	ldr	r3, [r1, #16]
    ebca:	4684      	mov	ip, r0
    ebcc:	6900      	ldr	r0, [r0, #16]
    ebce:	1ac0      	subs	r0, r0, r3
    ebd0:	d116      	bne.n	ec00 <__mcmp+0x38>
    ebd2:	f10c 0c14 	add.w	ip, ip, #20
    ebd6:	3114      	adds	r1, #20
    ebd8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    ebdc:	b410      	push	{r4}
    ebde:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ebe2:	e001      	b.n	ebe8 <__mcmp+0x20>
    ebe4:	4594      	cmp	ip, r2
    ebe6:	d208      	bcs.n	ebfa <__mcmp+0x32>
    ebe8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ebec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ebf0:	428c      	cmp	r4, r1
    ebf2:	d0f7      	beq.n	ebe4 <__mcmp+0x1c>
    ebf4:	d205      	bcs.n	ec02 <__mcmp+0x3a>
    ebf6:	f04f 30ff 	mov.w	r0, #4294967295
    ebfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    ebfe:	4770      	bx	lr
    ec00:	4770      	bx	lr
    ec02:	2001      	movs	r0, #1
    ec04:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec08:	4770      	bx	lr
    ec0a:	bf00      	nop

0000ec0c <__mdiff>:
    ec0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec10:	690f      	ldr	r7, [r1, #16]
    ec12:	6913      	ldr	r3, [r2, #16]
    ec14:	1aff      	subs	r7, r7, r3
    ec16:	2f00      	cmp	r7, #0
    ec18:	460e      	mov	r6, r1
    ec1a:	4690      	mov	r8, r2
    ec1c:	d17f      	bne.n	ed1e <__mdiff+0x112>
    ec1e:	f101 0514 	add.w	r5, r1, #20
    ec22:	3214      	adds	r2, #20
    ec24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ec28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ec2c:	e001      	b.n	ec32 <__mdiff+0x26>
    ec2e:	429d      	cmp	r5, r3
    ec30:	d278      	bcs.n	ed24 <__mdiff+0x118>
    ec32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ec36:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ec3a:	42a1      	cmp	r1, r4
    ec3c:	d0f7      	beq.n	ec2e <__mdiff+0x22>
    ec3e:	d369      	bcc.n	ed14 <__mdiff+0x108>
    ec40:	6871      	ldr	r1, [r6, #4]
    ec42:	f7ff fd3b 	bl	e6bc <_Balloc>
    ec46:	4681      	mov	r9, r0
    ec48:	2800      	cmp	r0, #0
    ec4a:	d077      	beq.n	ed3c <__mdiff+0x130>
    ec4c:	6935      	ldr	r5, [r6, #16]
    ec4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    ec52:	60c7      	str	r7, [r0, #12]
    ec54:	f108 0e14 	add.w	lr, r8, #20
    ec58:	f106 0014 	add.w	r0, r6, #20
    ec5c:	f109 0a14 	add.w	sl, r9, #20
    ec60:	f106 0110 	add.w	r1, r6, #16
    ec64:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    ec68:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    ec6c:	4656      	mov	r6, sl
    ec6e:	f04f 0c00 	mov.w	ip, #0
    ec72:	f85e 4b04 	ldr.w	r4, [lr], #4
    ec76:	f851 bf04 	ldr.w	fp, [r1, #4]!
    ec7a:	b2a3      	uxth	r3, r4
    ec7c:	fa1c fc8b 	uxtah	ip, ip, fp
    ec80:	ebac 0303 	sub.w	r3, ip, r3
    ec84:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    ec88:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    ec8c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    ec90:	b29b      	uxth	r3, r3
    ec92:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ec96:	4572      	cmp	r2, lr
    ec98:	f846 3b04 	str.w	r3, [r6], #4
    ec9c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    eca0:	d8e7      	bhi.n	ec72 <__mdiff+0x66>
    eca2:	eba2 0108 	sub.w	r1, r2, r8
    eca6:	3915      	subs	r1, #21
    eca8:	f108 0815 	add.w	r8, r8, #21
    ecac:	4542      	cmp	r2, r8
    ecae:	f021 0403 	bic.w	r4, r1, #3
    ecb2:	f104 0404 	add.w	r4, r4, #4
    ecb6:	bf38      	it	cc
    ecb8:	2404      	movcc	r4, #4
    ecba:	4420      	add	r0, r4
    ecbc:	f021 0203 	bic.w	r2, r1, #3
    ecc0:	bf38      	it	cc
    ecc2:	2200      	movcc	r2, #0
    ecc4:	4287      	cmp	r7, r0
    ecc6:	4452      	add	r2, sl
    ecc8:	4454      	add	r4, sl
    ecca:	d918      	bls.n	ecfe <__mdiff+0xf2>
    eccc:	4626      	mov	r6, r4
    ecce:	4601      	mov	r1, r0
    ecd0:	f851 3b04 	ldr.w	r3, [r1], #4
    ecd4:	fa1c fc83 	uxtah	ip, ip, r3
    ecd8:	ea4f 422c 	mov.w	r2, ip, asr #16
    ecdc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ece0:	fa1f fc8c 	uxth.w	ip, ip
    ece4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    ece8:	428f      	cmp	r7, r1
    ecea:	f846 3b04 	str.w	r3, [r6], #4
    ecee:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ecf2:	d8ed      	bhi.n	ecd0 <__mdiff+0xc4>
    ecf4:	3f01      	subs	r7, #1
    ecf6:	1a3f      	subs	r7, r7, r0
    ecf8:	f027 0703 	bic.w	r7, r7, #3
    ecfc:	19e2      	adds	r2, r4, r7
    ecfe:	b923      	cbnz	r3, ed0a <__mdiff+0xfe>
    ed00:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    ed04:	3d01      	subs	r5, #1
    ed06:	2b00      	cmp	r3, #0
    ed08:	d0fa      	beq.n	ed00 <__mdiff+0xf4>
    ed0a:	f8c9 5010 	str.w	r5, [r9, #16]
    ed0e:	4648      	mov	r0, r9
    ed10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed14:	4633      	mov	r3, r6
    ed16:	2701      	movs	r7, #1
    ed18:	4646      	mov	r6, r8
    ed1a:	4698      	mov	r8, r3
    ed1c:	e790      	b.n	ec40 <__mdiff+0x34>
    ed1e:	dbf9      	blt.n	ed14 <__mdiff+0x108>
    ed20:	2700      	movs	r7, #0
    ed22:	e78d      	b.n	ec40 <__mdiff+0x34>
    ed24:	2100      	movs	r1, #0
    ed26:	f7ff fcc9 	bl	e6bc <_Balloc>
    ed2a:	4681      	mov	r9, r0
    ed2c:	b168      	cbz	r0, ed4a <__mdiff+0x13e>
    ed2e:	2201      	movs	r2, #1
    ed30:	2300      	movs	r3, #0
    ed32:	e9c9 2304 	strd	r2, r3, [r9, #16]
    ed36:	4648      	mov	r0, r9
    ed38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed3c:	4b06      	ldr	r3, [pc, #24]	; (ed58 <__mdiff+0x14c>)
    ed3e:	4807      	ldr	r0, [pc, #28]	; (ed5c <__mdiff+0x150>)
    ed40:	464a      	mov	r2, r9
    ed42:	f240 2145 	movw	r1, #581	; 0x245
    ed46:	f000 fa53 	bl	f1f0 <__assert_func>
    ed4a:	4b03      	ldr	r3, [pc, #12]	; (ed58 <__mdiff+0x14c>)
    ed4c:	4803      	ldr	r0, [pc, #12]	; (ed5c <__mdiff+0x150>)
    ed4e:	464a      	mov	r2, r9
    ed50:	f240 2137 	movw	r1, #567	; 0x237
    ed54:	f000 fa4c 	bl	f1f0 <__assert_func>
    ed58:	20002bd0 	.word	0x20002bd0
    ed5c:	20002be4 	.word	0x20002be4

0000ed60 <__d2b>:
    ed60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ed64:	4688      	mov	r8, r1
    ed66:	b083      	sub	sp, #12
    ed68:	2101      	movs	r1, #1
    ed6a:	ec57 6b10 	vmov	r6, r7, d0
    ed6e:	4615      	mov	r5, r2
    ed70:	f7ff fca4 	bl	e6bc <_Balloc>
    ed74:	4604      	mov	r4, r0
    ed76:	2800      	cmp	r0, #0
    ed78:	d051      	beq.n	ee1e <__d2b+0xbe>
    ed7a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    ed7e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    ed82:	f1b9 0f00 	cmp.w	r9, #0
    ed86:	d001      	beq.n	ed8c <__d2b+0x2c>
    ed88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ed8c:	2e00      	cmp	r6, #0
    ed8e:	9301      	str	r3, [sp, #4]
    ed90:	d118      	bne.n	edc4 <__d2b+0x64>
    ed92:	a801      	add	r0, sp, #4
    ed94:	f7ff fd34 	bl	e800 <__lo0bits>
    ed98:	9a01      	ldr	r2, [sp, #4]
    ed9a:	6162      	str	r2, [r4, #20]
    ed9c:	2201      	movs	r2, #1
    ed9e:	f100 0320 	add.w	r3, r0, #32
    eda2:	6122      	str	r2, [r4, #16]
    eda4:	f1b9 0f00 	cmp.w	r9, #0
    eda8:	d025      	beq.n	edf6 <__d2b+0x96>
    edaa:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    edae:	eb09 0203 	add.w	r2, r9, r3
    edb2:	4620      	mov	r0, r4
    edb4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    edb8:	f8c8 2000 	str.w	r2, [r8]
    edbc:	602b      	str	r3, [r5, #0]
    edbe:	b003      	add	sp, #12
    edc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    edc4:	4668      	mov	r0, sp
    edc6:	9600      	str	r6, [sp, #0]
    edc8:	f7ff fd1a 	bl	e800 <__lo0bits>
    edcc:	4603      	mov	r3, r0
    edce:	b310      	cbz	r0, ee16 <__d2b+0xb6>
    edd0:	e9dd 0200 	ldrd	r0, r2, [sp]
    edd4:	f1c3 0120 	rsb	r1, r3, #32
    edd8:	fa02 f101 	lsl.w	r1, r2, r1
    eddc:	4301      	orrs	r1, r0
    edde:	40da      	lsrs	r2, r3
    ede0:	6161      	str	r1, [r4, #20]
    ede2:	9201      	str	r2, [sp, #4]
    ede4:	2a00      	cmp	r2, #0
    ede6:	61a2      	str	r2, [r4, #24]
    ede8:	bf14      	ite	ne
    edea:	2202      	movne	r2, #2
    edec:	2201      	moveq	r2, #1
    edee:	6122      	str	r2, [r4, #16]
    edf0:	f1b9 0f00 	cmp.w	r9, #0
    edf4:	d1d9      	bne.n	edaa <__d2b+0x4a>
    edf6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    edfa:	f8c8 3000 	str.w	r3, [r8]
    edfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    ee02:	6918      	ldr	r0, [r3, #16]
    ee04:	f7ff fcdc 	bl	e7c0 <__hi0bits>
    ee08:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    ee0c:	4620      	mov	r0, r4
    ee0e:	602b      	str	r3, [r5, #0]
    ee10:	b003      	add	sp, #12
    ee12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ee16:	9a00      	ldr	r2, [sp, #0]
    ee18:	6162      	str	r2, [r4, #20]
    ee1a:	9a01      	ldr	r2, [sp, #4]
    ee1c:	e7e2      	b.n	ede4 <__d2b+0x84>
    ee1e:	4b03      	ldr	r3, [pc, #12]	; (ee2c <__d2b+0xcc>)
    ee20:	4803      	ldr	r0, [pc, #12]	; (ee30 <__d2b+0xd0>)
    ee22:	4622      	mov	r2, r4
    ee24:	f240 310f 	movw	r1, #783	; 0x30f
    ee28:	f000 f9e2 	bl	f1f0 <__assert_func>
    ee2c:	20002bd0 	.word	0x20002bd0
    ee30:	20002be4 	.word	0x20002be4

0000ee34 <__ascii_wctomb>:
    ee34:	b149      	cbz	r1, ee4a <__ascii_wctomb+0x16>
    ee36:	2aff      	cmp	r2, #255	; 0xff
    ee38:	d802      	bhi.n	ee40 <__ascii_wctomb+0xc>
    ee3a:	700a      	strb	r2, [r1, #0]
    ee3c:	2001      	movs	r0, #1
    ee3e:	4770      	bx	lr
    ee40:	238a      	movs	r3, #138	; 0x8a
    ee42:	6003      	str	r3, [r0, #0]
    ee44:	f04f 30ff 	mov.w	r0, #4294967295
    ee48:	4770      	bx	lr
    ee4a:	4608      	mov	r0, r1
    ee4c:	4770      	bx	lr
    ee4e:	bf00      	nop

0000ee50 <fcvtbuf>:
    ee50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee54:	460e      	mov	r6, r1
    ee56:	4926      	ldr	r1, [pc, #152]	; (eef0 <fcvtbuf+0xa0>)
    ee58:	b087      	sub	sp, #28
    ee5a:	680f      	ldr	r7, [r1, #0]
    ee5c:	4604      	mov	r4, r0
    ee5e:	4690      	mov	r8, r2
    ee60:	461d      	mov	r5, r3
    ee62:	b353      	cbz	r3, eeba <fcvtbuf+0x6a>
    ee64:	aa05      	add	r2, sp, #20
    ee66:	4633      	mov	r3, r6
    ee68:	9201      	str	r2, [sp, #4]
    ee6a:	2103      	movs	r1, #3
    ee6c:	4622      	mov	r2, r4
    ee6e:	f8cd 8000 	str.w	r8, [sp]
    ee72:	4638      	mov	r0, r7
    ee74:	f000 faac 	bl	f3d0 <_dtoa_r>
    ee78:	9b05      	ldr	r3, [sp, #20]
    ee7a:	6832      	ldr	r2, [r6, #0]
    ee7c:	4298      	cmp	r0, r3
    ee7e:	4684      	mov	ip, r0
    ee80:	f1c2 0200 	rsb	r2, r2, #0
    ee84:	4629      	mov	r1, r5
    ee86:	d209      	bcs.n	ee9c <fcvtbuf+0x4c>
    ee88:	1a10      	subs	r0, r2, r0
    ee8a:	f81c 3b01 	ldrb.w	r3, [ip], #1
    ee8e:	f801 3b01 	strb.w	r3, [r1], #1
    ee92:	9b05      	ldr	r3, [sp, #20]
    ee94:	4563      	cmp	r3, ip
    ee96:	eb00 020c 	add.w	r2, r0, ip
    ee9a:	d8f6      	bhi.n	ee8a <fcvtbuf+0x3a>
    ee9c:	4294      	cmp	r4, r2
    ee9e:	dd24      	ble.n	eeea <fcvtbuf+0x9a>
    eea0:	1aa2      	subs	r2, r4, r2
    eea2:	440a      	add	r2, r1
    eea4:	2330      	movs	r3, #48	; 0x30
    eea6:	f801 3b01 	strb.w	r3, [r1], #1
    eeaa:	4291      	cmp	r1, r2
    eeac:	d1fb      	bne.n	eea6 <fcvtbuf+0x56>
    eeae:	2300      	movs	r3, #0
    eeb0:	7013      	strb	r3, [r2, #0]
    eeb2:	4628      	mov	r0, r5
    eeb4:	b007      	add	sp, #28
    eeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eeba:	6cba      	ldr	r2, [r7, #72]	; 0x48
    eebc:	f100 0323 	add.w	r3, r0, #35	; 0x23
    eec0:	429a      	cmp	r2, r3
    eec2:	dd01      	ble.n	eec8 <fcvtbuf+0x78>
    eec4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    eec6:	e7cd      	b.n	ee64 <fcvtbuf+0x14>
    eec8:	f100 0924 	add.w	r9, r0, #36	; 0x24
    eecc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    eece:	464a      	mov	r2, r9
    eed0:	4638      	mov	r0, r7
    eed2:	ed8d 0b02 	vstr	d0, [sp, #8]
    eed6:	f7fe fc29 	bl	d72c <_realloc_r>
    eeda:	4605      	mov	r5, r0
    eedc:	2800      	cmp	r0, #0
    eede:	d0e8      	beq.n	eeb2 <fcvtbuf+0x62>
    eee0:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    eee4:	ed9d 0b02 	vldr	d0, [sp, #8]
    eee8:	e7bc      	b.n	ee64 <fcvtbuf+0x14>
    eeea:	460a      	mov	r2, r1
    eeec:	e7df      	b.n	eeae <fcvtbuf+0x5e>
    eeee:	bf00      	nop
    eef0:	20003ce0 	.word	0x20003ce0

0000eef4 <_fclose_r>:
    eef4:	b570      	push	{r4, r5, r6, lr}
    eef6:	2900      	cmp	r1, #0
    eef8:	d04b      	beq.n	ef92 <_fclose_r+0x9e>
    eefa:	4606      	mov	r6, r0
    eefc:	460c      	mov	r4, r1
    eefe:	b110      	cbz	r0, ef06 <_fclose_r+0x12>
    ef00:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ef02:	2b00      	cmp	r3, #0
    ef04:	d048      	beq.n	ef98 <_fclose_r+0xa4>
    ef06:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ef08:	07d8      	lsls	r0, r3, #31
    ef0a:	d534      	bpl.n	ef76 <_fclose_r+0x82>
    ef0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ef10:	2b00      	cmp	r3, #0
    ef12:	d03e      	beq.n	ef92 <_fclose_r+0x9e>
    ef14:	4621      	mov	r1, r4
    ef16:	4630      	mov	r0, r6
    ef18:	f000 f850 	bl	efbc <__sflush_r>
    ef1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ef1e:	4605      	mov	r5, r0
    ef20:	b133      	cbz	r3, ef30 <_fclose_r+0x3c>
    ef22:	69e1      	ldr	r1, [r4, #28]
    ef24:	4630      	mov	r0, r6
    ef26:	4798      	blx	r3
    ef28:	2800      	cmp	r0, #0
    ef2a:	bfb8      	it	lt
    ef2c:	f04f 35ff 	movlt.w	r5, #4294967295
    ef30:	89a3      	ldrh	r3, [r4, #12]
    ef32:	061a      	lsls	r2, r3, #24
    ef34:	d43c      	bmi.n	efb0 <_fclose_r+0xbc>
    ef36:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ef38:	b141      	cbz	r1, ef4c <_fclose_r+0x58>
    ef3a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ef3e:	4299      	cmp	r1, r3
    ef40:	d002      	beq.n	ef48 <_fclose_r+0x54>
    ef42:	4630      	mov	r0, r6
    ef44:	f7ff fa9e 	bl	e484 <_free_r>
    ef48:	2300      	movs	r3, #0
    ef4a:	6323      	str	r3, [r4, #48]	; 0x30
    ef4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ef4e:	b121      	cbz	r1, ef5a <_fclose_r+0x66>
    ef50:	4630      	mov	r0, r6
    ef52:	f7ff fa97 	bl	e484 <_free_r>
    ef56:	2300      	movs	r3, #0
    ef58:	6463      	str	r3, [r4, #68]	; 0x44
    ef5a:	f7fe fee1 	bl	dd20 <__sfp_lock_acquire>
    ef5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ef60:	2200      	movs	r2, #0
    ef62:	07db      	lsls	r3, r3, #31
    ef64:	81a2      	strh	r2, [r4, #12]
    ef66:	d51f      	bpl.n	efa8 <_fclose_r+0xb4>
    ef68:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ef6a:	f7ff f917 	bl	e19c <__retarget_lock_close_recursive>
    ef6e:	f7fe fedd 	bl	dd2c <__sfp_lock_release>
    ef72:	4628      	mov	r0, r5
    ef74:	bd70      	pop	{r4, r5, r6, pc}
    ef76:	89a3      	ldrh	r3, [r4, #12]
    ef78:	0599      	lsls	r1, r3, #22
    ef7a:	d4cb      	bmi.n	ef14 <_fclose_r+0x20>
    ef7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ef7e:	f7ff f90f 	bl	e1a0 <__retarget_lock_acquire_recursive>
    ef82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ef86:	2b00      	cmp	r3, #0
    ef88:	d1c4      	bne.n	ef14 <_fclose_r+0x20>
    ef8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    ef8c:	f015 0501 	ands.w	r5, r5, #1
    ef90:	d005      	beq.n	ef9e <_fclose_r+0xaa>
    ef92:	2500      	movs	r5, #0
    ef94:	4628      	mov	r0, r5
    ef96:	bd70      	pop	{r4, r5, r6, pc}
    ef98:	f7fe fea4 	bl	dce4 <__sinit>
    ef9c:	e7b3      	b.n	ef06 <_fclose_r+0x12>
    ef9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    efa0:	f7ff f900 	bl	e1a4 <__retarget_lock_release_recursive>
    efa4:	4628      	mov	r0, r5
    efa6:	bd70      	pop	{r4, r5, r6, pc}
    efa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    efaa:	f7ff f8fb 	bl	e1a4 <__retarget_lock_release_recursive>
    efae:	e7db      	b.n	ef68 <_fclose_r+0x74>
    efb0:	6921      	ldr	r1, [r4, #16]
    efb2:	4630      	mov	r0, r6
    efb4:	f7ff fa66 	bl	e484 <_free_r>
    efb8:	e7bd      	b.n	ef36 <_fclose_r+0x42>
    efba:	bf00      	nop

0000efbc <__sflush_r>:
    efbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    efc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efc4:	460c      	mov	r4, r1
    efc6:	0711      	lsls	r1, r2, #28
    efc8:	4680      	mov	r8, r0
    efca:	d447      	bmi.n	f05c <__sflush_r+0xa0>
    efcc:	6863      	ldr	r3, [r4, #4]
    efce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    efd2:	2b00      	cmp	r3, #0
    efd4:	81a2      	strh	r2, [r4, #12]
    efd6:	dd5e      	ble.n	f096 <__sflush_r+0xda>
    efd8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    efda:	2d00      	cmp	r5, #0
    efdc:	d058      	beq.n	f090 <__sflush_r+0xd4>
    efde:	2300      	movs	r3, #0
    efe0:	f8d8 6000 	ldr.w	r6, [r8]
    efe4:	f8c8 3000 	str.w	r3, [r8]
    efe8:	b293      	uxth	r3, r2
    efea:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    efee:	d156      	bne.n	f09e <__sflush_r+0xe2>
    eff0:	2301      	movs	r3, #1
    eff2:	69e1      	ldr	r1, [r4, #28]
    eff4:	4640      	mov	r0, r8
    eff6:	47a8      	blx	r5
    eff8:	1c43      	adds	r3, r0, #1
    effa:	d067      	beq.n	f0cc <__sflush_r+0x110>
    effc:	89a3      	ldrh	r3, [r4, #12]
    effe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    f000:	075f      	lsls	r7, r3, #29
    f002:	d505      	bpl.n	f010 <__sflush_r+0x54>
    f004:	6863      	ldr	r3, [r4, #4]
    f006:	1ac0      	subs	r0, r0, r3
    f008:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f00a:	b10b      	cbz	r3, f010 <__sflush_r+0x54>
    f00c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f00e:	1ac0      	subs	r0, r0, r3
    f010:	69e1      	ldr	r1, [r4, #28]
    f012:	4602      	mov	r2, r0
    f014:	2300      	movs	r3, #0
    f016:	4640      	mov	r0, r8
    f018:	47a8      	blx	r5
    f01a:	1c41      	adds	r1, r0, #1
    f01c:	d141      	bne.n	f0a2 <__sflush_r+0xe6>
    f01e:	f8d8 3000 	ldr.w	r3, [r8]
    f022:	2b00      	cmp	r3, #0
    f024:	d03d      	beq.n	f0a2 <__sflush_r+0xe6>
    f026:	2b1d      	cmp	r3, #29
    f028:	d001      	beq.n	f02e <__sflush_r+0x72>
    f02a:	2b16      	cmp	r3, #22
    f02c:	d156      	bne.n	f0dc <__sflush_r+0x120>
    f02e:	89a3      	ldrh	r3, [r4, #12]
    f030:	6922      	ldr	r2, [r4, #16]
    f032:	6022      	str	r2, [r4, #0]
    f034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f038:	2100      	movs	r1, #0
    f03a:	6061      	str	r1, [r4, #4]
    f03c:	81a3      	strh	r3, [r4, #12]
    f03e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f040:	f8c8 6000 	str.w	r6, [r8]
    f044:	b321      	cbz	r1, f090 <__sflush_r+0xd4>
    f046:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f04a:	4299      	cmp	r1, r3
    f04c:	d002      	beq.n	f054 <__sflush_r+0x98>
    f04e:	4640      	mov	r0, r8
    f050:	f7ff fa18 	bl	e484 <_free_r>
    f054:	2000      	movs	r0, #0
    f056:	6320      	str	r0, [r4, #48]	; 0x30
    f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f05c:	6926      	ldr	r6, [r4, #16]
    f05e:	b1be      	cbz	r6, f090 <__sflush_r+0xd4>
    f060:	b293      	uxth	r3, r2
    f062:	6825      	ldr	r5, [r4, #0]
    f064:	6026      	str	r6, [r4, #0]
    f066:	079a      	lsls	r2, r3, #30
    f068:	bf0c      	ite	eq
    f06a:	6963      	ldreq	r3, [r4, #20]
    f06c:	2300      	movne	r3, #0
    f06e:	1bad      	subs	r5, r5, r6
    f070:	60a3      	str	r3, [r4, #8]
    f072:	e00b      	b.n	f08c <__sflush_r+0xd0>
    f074:	462b      	mov	r3, r5
    f076:	4632      	mov	r2, r6
    f078:	69e1      	ldr	r1, [r4, #28]
    f07a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    f07c:	4640      	mov	r0, r8
    f07e:	47b8      	blx	r7
    f080:	f1b0 0c00 	subs.w	ip, r0, #0
    f084:	eba5 050c 	sub.w	r5, r5, ip
    f088:	4466      	add	r6, ip
    f08a:	dd17      	ble.n	f0bc <__sflush_r+0x100>
    f08c:	2d00      	cmp	r5, #0
    f08e:	dcf1      	bgt.n	f074 <__sflush_r+0xb8>
    f090:	2000      	movs	r0, #0
    f092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f096:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f098:	2b00      	cmp	r3, #0
    f09a:	dc9d      	bgt.n	efd8 <__sflush_r+0x1c>
    f09c:	e7f8      	b.n	f090 <__sflush_r+0xd4>
    f09e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    f0a0:	e7ae      	b.n	f000 <__sflush_r+0x44>
    f0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f0a6:	6922      	ldr	r2, [r4, #16]
    f0a8:	6022      	str	r2, [r4, #0]
    f0aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f0ae:	81a3      	strh	r3, [r4, #12]
    f0b0:	2200      	movs	r2, #0
    f0b2:	04db      	lsls	r3, r3, #19
    f0b4:	6062      	str	r2, [r4, #4]
    f0b6:	d5c2      	bpl.n	f03e <__sflush_r+0x82>
    f0b8:	6520      	str	r0, [r4, #80]	; 0x50
    f0ba:	e7c0      	b.n	f03e <__sflush_r+0x82>
    f0bc:	89a3      	ldrh	r3, [r4, #12]
    f0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0c2:	f04f 30ff 	mov.w	r0, #4294967295
    f0c6:	81a3      	strh	r3, [r4, #12]
    f0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0cc:	f8d8 3000 	ldr.w	r3, [r8]
    f0d0:	2b00      	cmp	r3, #0
    f0d2:	d093      	beq.n	effc <__sflush_r+0x40>
    f0d4:	2b1d      	cmp	r3, #29
    f0d6:	d006      	beq.n	f0e6 <__sflush_r+0x12a>
    f0d8:	2b16      	cmp	r3, #22
    f0da:	d004      	beq.n	f0e6 <__sflush_r+0x12a>
    f0dc:	89a3      	ldrh	r3, [r4, #12]
    f0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0e2:	81a3      	strh	r3, [r4, #12]
    f0e4:	e7d5      	b.n	f092 <__sflush_r+0xd6>
    f0e6:	f8c8 6000 	str.w	r6, [r8]
    f0ea:	e7d1      	b.n	f090 <__sflush_r+0xd4>

0000f0ec <_fflush_r>:
    f0ec:	b538      	push	{r3, r4, r5, lr}
    f0ee:	460c      	mov	r4, r1
    f0f0:	4605      	mov	r5, r0
    f0f2:	b108      	cbz	r0, f0f8 <_fflush_r+0xc>
    f0f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f0f6:	b303      	cbz	r3, f13a <_fflush_r+0x4e>
    f0f8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    f0fc:	b188      	cbz	r0, f122 <_fflush_r+0x36>
    f0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f100:	07db      	lsls	r3, r3, #31
    f102:	d401      	bmi.n	f108 <_fflush_r+0x1c>
    f104:	0581      	lsls	r1, r0, #22
    f106:	d50f      	bpl.n	f128 <_fflush_r+0x3c>
    f108:	4628      	mov	r0, r5
    f10a:	4621      	mov	r1, r4
    f10c:	f7ff ff56 	bl	efbc <__sflush_r>
    f110:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f112:	07da      	lsls	r2, r3, #31
    f114:	4605      	mov	r5, r0
    f116:	d402      	bmi.n	f11e <_fflush_r+0x32>
    f118:	89a3      	ldrh	r3, [r4, #12]
    f11a:	059b      	lsls	r3, r3, #22
    f11c:	d508      	bpl.n	f130 <_fflush_r+0x44>
    f11e:	4628      	mov	r0, r5
    f120:	bd38      	pop	{r3, r4, r5, pc}
    f122:	4605      	mov	r5, r0
    f124:	4628      	mov	r0, r5
    f126:	bd38      	pop	{r3, r4, r5, pc}
    f128:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f12a:	f7ff f839 	bl	e1a0 <__retarget_lock_acquire_recursive>
    f12e:	e7eb      	b.n	f108 <_fflush_r+0x1c>
    f130:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f132:	f7ff f837 	bl	e1a4 <__retarget_lock_release_recursive>
    f136:	4628      	mov	r0, r5
    f138:	bd38      	pop	{r3, r4, r5, pc}
    f13a:	f7fe fdd3 	bl	dce4 <__sinit>
    f13e:	e7db      	b.n	f0f8 <_fflush_r+0xc>

0000f140 <_localeconv_r>:
    f140:	4800      	ldr	r0, [pc, #0]	; (f144 <_localeconv_r+0x4>)
    f142:	4770      	bx	lr
    f144:	20003848 	.word	0x20003848
	...

0000f150 <memchr>:
    f150:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    f154:	2a10      	cmp	r2, #16
    f156:	db2b      	blt.n	f1b0 <memchr+0x60>
    f158:	f010 0f07 	tst.w	r0, #7
    f15c:	d008      	beq.n	f170 <memchr+0x20>
    f15e:	f810 3b01 	ldrb.w	r3, [r0], #1
    f162:	3a01      	subs	r2, #1
    f164:	428b      	cmp	r3, r1
    f166:	d02d      	beq.n	f1c4 <memchr+0x74>
    f168:	f010 0f07 	tst.w	r0, #7
    f16c:	b342      	cbz	r2, f1c0 <memchr+0x70>
    f16e:	d1f6      	bne.n	f15e <memchr+0xe>
    f170:	b4f0      	push	{r4, r5, r6, r7}
    f172:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    f176:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    f17a:	f022 0407 	bic.w	r4, r2, #7
    f17e:	f07f 0700 	mvns.w	r7, #0
    f182:	2300      	movs	r3, #0
    f184:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    f188:	3c08      	subs	r4, #8
    f18a:	ea85 0501 	eor.w	r5, r5, r1
    f18e:	ea86 0601 	eor.w	r6, r6, r1
    f192:	fa85 f547 	uadd8	r5, r5, r7
    f196:	faa3 f587 	sel	r5, r3, r7
    f19a:	fa86 f647 	uadd8	r6, r6, r7
    f19e:	faa5 f687 	sel	r6, r5, r7
    f1a2:	b98e      	cbnz	r6, f1c8 <memchr+0x78>
    f1a4:	d1ee      	bne.n	f184 <memchr+0x34>
    f1a6:	bcf0      	pop	{r4, r5, r6, r7}
    f1a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    f1ac:	f002 0207 	and.w	r2, r2, #7
    f1b0:	b132      	cbz	r2, f1c0 <memchr+0x70>
    f1b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    f1b6:	3a01      	subs	r2, #1
    f1b8:	ea83 0301 	eor.w	r3, r3, r1
    f1bc:	b113      	cbz	r3, f1c4 <memchr+0x74>
    f1be:	d1f8      	bne.n	f1b2 <memchr+0x62>
    f1c0:	2000      	movs	r0, #0
    f1c2:	4770      	bx	lr
    f1c4:	3801      	subs	r0, #1
    f1c6:	4770      	bx	lr
    f1c8:	2d00      	cmp	r5, #0
    f1ca:	bf06      	itte	eq
    f1cc:	4635      	moveq	r5, r6
    f1ce:	3803      	subeq	r0, #3
    f1d0:	3807      	subne	r0, #7
    f1d2:	f015 0f01 	tst.w	r5, #1
    f1d6:	d107      	bne.n	f1e8 <memchr+0x98>
    f1d8:	3001      	adds	r0, #1
    f1da:	f415 7f80 	tst.w	r5, #256	; 0x100
    f1de:	bf02      	ittt	eq
    f1e0:	3001      	addeq	r0, #1
    f1e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    f1e6:	3001      	addeq	r0, #1
    f1e8:	bcf0      	pop	{r4, r5, r6, r7}
    f1ea:	3801      	subs	r0, #1
    f1ec:	4770      	bx	lr
    f1ee:	bf00      	nop

0000f1f0 <__assert_func>:
    f1f0:	b500      	push	{lr}
    f1f2:	4c0b      	ldr	r4, [pc, #44]	; (f220 <__assert_func+0x30>)
    f1f4:	6825      	ldr	r5, [r4, #0]
    f1f6:	4614      	mov	r4, r2
    f1f8:	68ee      	ldr	r6, [r5, #12]
    f1fa:	461a      	mov	r2, r3
    f1fc:	b085      	sub	sp, #20
    f1fe:	4603      	mov	r3, r0
    f200:	460d      	mov	r5, r1
    f202:	b14c      	cbz	r4, f218 <__assert_func+0x28>
    f204:	4907      	ldr	r1, [pc, #28]	; (f224 <__assert_func+0x34>)
    f206:	9500      	str	r5, [sp, #0]
    f208:	e9cd 1401 	strd	r1, r4, [sp, #4]
    f20c:	4630      	mov	r0, r6
    f20e:	4906      	ldr	r1, [pc, #24]	; (f228 <__assert_func+0x38>)
    f210:	f000 ff86 	bl	10120 <fiprintf>
    f214:	f7fc f982 	bl	b51c <abort>
    f218:	4904      	ldr	r1, [pc, #16]	; (f22c <__assert_func+0x3c>)
    f21a:	460c      	mov	r4, r1
    f21c:	e7f3      	b.n	f206 <__assert_func+0x16>
    f21e:	bf00      	nop
    f220:	20003ce0 	.word	0x20003ce0
    f224:	20002b90 	.word	0x20002b90
    f228:	20002ba0 	.word	0x20002ba0
    f22c:	20001ee4 	.word	0x20001ee4

0000f230 <_calloc_r>:
    f230:	b538      	push	{r3, r4, r5, lr}
    f232:	fba1 1402 	umull	r1, r4, r1, r2
    f236:	bb8c      	cbnz	r4, f29c <_calloc_r+0x6c>
    f238:	f7fd ffb0 	bl	d19c <_malloc_r>
    f23c:	4605      	mov	r5, r0
    f23e:	b1e0      	cbz	r0, f27a <_calloc_r+0x4a>
    f240:	f850 2c04 	ldr.w	r2, [r0, #-4]
    f244:	f022 0203 	bic.w	r2, r2, #3
    f248:	3a04      	subs	r2, #4
    f24a:	2a24      	cmp	r2, #36	; 0x24
    f24c:	d817      	bhi.n	f27e <_calloc_r+0x4e>
    f24e:	2a13      	cmp	r2, #19
    f250:	d91a      	bls.n	f288 <_calloc_r+0x58>
    f252:	2a1b      	cmp	r2, #27
    f254:	e9c0 4400 	strd	r4, r4, [r0]
    f258:	d91d      	bls.n	f296 <_calloc_r+0x66>
    f25a:	2a24      	cmp	r2, #36	; 0x24
    f25c:	bf14      	ite	ne
    f25e:	f100 0210 	addne.w	r2, r0, #16
    f262:	f100 0218 	addeq.w	r2, r0, #24
    f266:	f04f 0300 	mov.w	r3, #0
    f26a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    f26e:	bf04      	itt	eq
    f270:	6104      	streq	r4, [r0, #16]
    f272:	6144      	streq	r4, [r0, #20]
    f274:	e9c2 3300 	strd	r3, r3, [r2]
    f278:	6093      	str	r3, [r2, #8]
    f27a:	4628      	mov	r0, r5
    f27c:	bd38      	pop	{r3, r4, r5, pc}
    f27e:	4621      	mov	r1, r4
    f280:	f7fe fe70 	bl	df64 <memset>
    f284:	4628      	mov	r0, r5
    f286:	bd38      	pop	{r3, r4, r5, pc}
    f288:	4602      	mov	r2, r0
    f28a:	2300      	movs	r3, #0
    f28c:	e9c2 3300 	strd	r3, r3, [r2]
    f290:	6093      	str	r3, [r2, #8]
    f292:	4628      	mov	r0, r5
    f294:	bd38      	pop	{r3, r4, r5, pc}
    f296:	f100 0208 	add.w	r2, r0, #8
    f29a:	e7f6      	b.n	f28a <_calloc_r+0x5a>
    f29c:	f7fe ff52 	bl	e144 <__errno>
    f2a0:	230c      	movs	r3, #12
    f2a2:	2500      	movs	r5, #0
    f2a4:	6003      	str	r3, [r0, #0]
    f2a6:	e7e8      	b.n	f27a <_calloc_r+0x4a>

0000f2a8 <quorem>:
    f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ac:	6903      	ldr	r3, [r0, #16]
    f2ae:	690c      	ldr	r4, [r1, #16]
    f2b0:	42a3      	cmp	r3, r4
    f2b2:	b083      	sub	sp, #12
    f2b4:	f2c0 8087 	blt.w	f3c6 <quorem+0x11e>
    f2b8:	3c01      	subs	r4, #1
    f2ba:	f101 0514 	add.w	r5, r1, #20
    f2be:	00a3      	lsls	r3, r4, #2
    f2c0:	f100 0814 	add.w	r8, r0, #20
    f2c4:	9300      	str	r3, [sp, #0]
    f2c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    f2ca:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    f2ce:	3301      	adds	r3, #1
    f2d0:	4681      	mov	r9, r0
    f2d2:	429a      	cmp	r2, r3
    f2d4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    f2d8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    f2dc:	9001      	str	r0, [sp, #4]
    f2de:	fbb2 f6f3 	udiv	r6, r2, r3
    f2e2:	d33b      	bcc.n	f35c <quorem+0xb4>
    f2e4:	f04f 0c00 	mov.w	ip, #0
    f2e8:	46ae      	mov	lr, r5
    f2ea:	4640      	mov	r0, r8
    f2ec:	46e2      	mov	sl, ip
    f2ee:	4663      	mov	r3, ip
    f2f0:	f85e bb04 	ldr.w	fp, [lr], #4
    f2f4:	6802      	ldr	r2, [r0, #0]
    f2f6:	fa1f fc8b 	uxth.w	ip, fp
    f2fa:	fb06 330c 	mla	r3, r6, ip, r3
    f2fe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    f302:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    f306:	fb06 cc0b 	mla	ip, r6, fp, ip
    f30a:	b29b      	uxth	r3, r3
    f30c:	ebaa 0303 	sub.w	r3, sl, r3
    f310:	fa1f fa8c 	uxth.w	sl, ip
    f314:	fa13 f382 	uxtah	r3, r3, r2
    f318:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    f31c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    f320:	b29b      	uxth	r3, r3
    f322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f326:	4577      	cmp	r7, lr
    f328:	f840 3b04 	str.w	r3, [r0], #4
    f32c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    f330:	ea4f 431c 	mov.w	r3, ip, lsr #16
    f334:	d2dc      	bcs.n	f2f0 <quorem+0x48>
    f336:	9b00      	ldr	r3, [sp, #0]
    f338:	f858 3003 	ldr.w	r3, [r8, r3]
    f33c:	b973      	cbnz	r3, f35c <quorem+0xb4>
    f33e:	9b01      	ldr	r3, [sp, #4]
    f340:	3b04      	subs	r3, #4
    f342:	4598      	cmp	r8, r3
    f344:	d304      	bcc.n	f350 <quorem+0xa8>
    f346:	e007      	b.n	f358 <quorem+0xb0>
    f348:	4598      	cmp	r8, r3
    f34a:	f104 34ff 	add.w	r4, r4, #4294967295
    f34e:	d203      	bcs.n	f358 <quorem+0xb0>
    f350:	f853 2904 	ldr.w	r2, [r3], #-4
    f354:	2a00      	cmp	r2, #0
    f356:	d0f7      	beq.n	f348 <quorem+0xa0>
    f358:	f8c9 4010 	str.w	r4, [r9, #16]
    f35c:	4648      	mov	r0, r9
    f35e:	f7ff fc33 	bl	ebc8 <__mcmp>
    f362:	2800      	cmp	r0, #0
    f364:	db2b      	blt.n	f3be <quorem+0x116>
    f366:	3601      	adds	r6, #1
    f368:	4641      	mov	r1, r8
    f36a:	2300      	movs	r3, #0
    f36c:	f855 0b04 	ldr.w	r0, [r5], #4
    f370:	f8d1 c000 	ldr.w	ip, [r1]
    f374:	b282      	uxth	r2, r0
    f376:	1a9a      	subs	r2, r3, r2
    f378:	0c03      	lsrs	r3, r0, #16
    f37a:	fa12 f28c 	uxtah	r2, r2, ip
    f37e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    f382:	eb03 4322 	add.w	r3, r3, r2, asr #16
    f386:	b292      	uxth	r2, r2
    f388:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    f38c:	42af      	cmp	r7, r5
    f38e:	f841 2b04 	str.w	r2, [r1], #4
    f392:	ea4f 4323 	mov.w	r3, r3, asr #16
    f396:	d2e9      	bcs.n	f36c <quorem+0xc4>
    f398:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    f39c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    f3a0:	b96a      	cbnz	r2, f3be <quorem+0x116>
    f3a2:	3b04      	subs	r3, #4
    f3a4:	4598      	cmp	r8, r3
    f3a6:	d304      	bcc.n	f3b2 <quorem+0x10a>
    f3a8:	e007      	b.n	f3ba <quorem+0x112>
    f3aa:	4598      	cmp	r8, r3
    f3ac:	f104 34ff 	add.w	r4, r4, #4294967295
    f3b0:	d203      	bcs.n	f3ba <quorem+0x112>
    f3b2:	f853 2904 	ldr.w	r2, [r3], #-4
    f3b6:	2a00      	cmp	r2, #0
    f3b8:	d0f7      	beq.n	f3aa <quorem+0x102>
    f3ba:	f8c9 4010 	str.w	r4, [r9, #16]
    f3be:	4630      	mov	r0, r6
    f3c0:	b003      	add	sp, #12
    f3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3c6:	2000      	movs	r0, #0
    f3c8:	b003      	add	sp, #12
    f3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ce:	bf00      	nop

0000f3d0 <_dtoa_r>:
    f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3d4:	ed2d 8b02 	vpush	{d8}
    f3d8:	b08f      	sub	sp, #60	; 0x3c
    f3da:	ed8d 0b02 	vstr	d0, [sp, #8]
    f3de:	9101      	str	r1, [sp, #4]
    f3e0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    f3e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    f3e4:	9305      	str	r3, [sp, #20]
    f3e6:	ec57 6b10 	vmov	r6, r7, d0
    f3ea:	4604      	mov	r4, r0
    f3ec:	4693      	mov	fp, r2
    f3ee:	b141      	cbz	r1, f402 <_dtoa_r+0x32>
    f3f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    f3f2:	604a      	str	r2, [r1, #4]
    f3f4:	2301      	movs	r3, #1
    f3f6:	4093      	lsls	r3, r2
    f3f8:	608b      	str	r3, [r1, #8]
    f3fa:	f7ff f985 	bl	e708 <_Bfree>
    f3fe:	2300      	movs	r3, #0
    f400:	63a3      	str	r3, [r4, #56]	; 0x38
    f402:	f1b7 0800 	subs.w	r8, r7, #0
    f406:	bfb4      	ite	lt
    f408:	2301      	movlt	r3, #1
    f40a:	2300      	movge	r3, #0
    f40c:	602b      	str	r3, [r5, #0]
    f40e:	4bbe      	ldr	r3, [pc, #760]	; (f708 <_dtoa_r+0x338>)
    f410:	bfbc      	itt	lt
    f412:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    f416:	f8cd 800c 	strlt.w	r8, [sp, #12]
    f41a:	ea33 0308 	bics.w	r3, r3, r8
    f41e:	f000 809f 	beq.w	f560 <_dtoa_r+0x190>
    f422:	ed9d 8b02 	vldr	d8, [sp, #8]
    f426:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f42e:	d111      	bne.n	f454 <_dtoa_r+0x84>
    f430:	9a05      	ldr	r2, [sp, #20]
    f432:	2301      	movs	r3, #1
    f434:	6013      	str	r3, [r2, #0]
    f436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f438:	2b00      	cmp	r3, #0
    f43a:	f000 823f 	beq.w	f8bc <_dtoa_r+0x4ec>
    f43e:	4bb3      	ldr	r3, [pc, #716]	; (f70c <_dtoa_r+0x33c>)
    f440:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f442:	6013      	str	r3, [r2, #0]
    f444:	3b01      	subs	r3, #1
    f446:	9300      	str	r3, [sp, #0]
    f448:	9800      	ldr	r0, [sp, #0]
    f44a:	b00f      	add	sp, #60	; 0x3c
    f44c:	ecbd 8b02 	vpop	{d8}
    f450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f454:	aa0c      	add	r2, sp, #48	; 0x30
    f456:	a90d      	add	r1, sp, #52	; 0x34
    f458:	4620      	mov	r0, r4
    f45a:	eeb0 0b48 	vmov.f64	d0, d8
    f45e:	f7ff fc7f 	bl	ed60 <__d2b>
    f462:	ea5f 5318 	movs.w	r3, r8, lsr #20
    f466:	4605      	mov	r5, r0
    f468:	f040 8092 	bne.w	f590 <_dtoa_r+0x1c0>
    f46c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    f470:	440b      	add	r3, r1
    f472:	f203 4232 	addw	r2, r3, #1074	; 0x432
    f476:	2a20      	cmp	r2, #32
    f478:	f340 82fa 	ble.w	fa70 <_dtoa_r+0x6a0>
    f47c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    f480:	fa08 f802 	lsl.w	r8, r8, r2
    f484:	f203 4212 	addw	r2, r3, #1042	; 0x412
    f488:	40d6      	lsrs	r6, r2
    f48a:	ea48 0206 	orr.w	r2, r8, r6
    f48e:	ee07 2a10 	vmov	s14, r2
    f492:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    f496:	1e58      	subs	r0, r3, #1
    f498:	ee17 6a90 	vmov	r6, s15
    f49c:	ec53 2b17 	vmov	r2, r3, d7
    f4a0:	f04f 0a01 	mov.w	sl, #1
    f4a4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    f4a8:	ed9f 3b91 	vldr	d3, [pc, #580]	; f6f0 <_dtoa_r+0x320>
    f4ac:	ed9f 7b92 	vldr	d7, [pc, #584]	; f6f8 <_dtoa_r+0x328>
    f4b0:	ed9f 5b93 	vldr	d5, [pc, #588]	; f700 <_dtoa_r+0x330>
    f4b4:	ee06 0a90 	vmov	s13, r0
    f4b8:	ec43 2b12 	vmov	d2, r2, r3
    f4bc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    f4c0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    f4c4:	ee32 6b46 	vsub.f64	d6, d2, d6
    f4c8:	eea6 7b03 	vfma.f64	d7, d6, d3
    f4cc:	eea4 7b05 	vfma.f64	d7, d4, d5
    f4d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f4d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    f4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4dc:	ee16 7a90 	vmov	r7, s13
    f4e0:	d508      	bpl.n	f4f4 <_dtoa_r+0x124>
    f4e2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f4e6:	eeb4 6b47 	vcmp.f64	d6, d7
    f4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4ee:	bf18      	it	ne
    f4f0:	f107 37ff 	addne.w	r7, r7, #4294967295
    f4f4:	2f16      	cmp	r7, #22
    f4f6:	f200 8145 	bhi.w	f784 <_dtoa_r+0x3b4>
    f4fa:	4b85      	ldr	r3, [pc, #532]	; (f710 <_dtoa_r+0x340>)
    f4fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    f500:	ed93 7b00 	vldr	d7, [r3]
    f504:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f50c:	d557      	bpl.n	f5be <_dtoa_r+0x1ee>
    f50e:	1a09      	subs	r1, r1, r0
    f510:	2300      	movs	r3, #0
    f512:	f1b1 0801 	subs.w	r8, r1, #1
    f516:	f107 37ff 	add.w	r7, r7, #4294967295
    f51a:	930a      	str	r3, [sp, #40]	; 0x28
    f51c:	f100 8139 	bmi.w	f792 <_dtoa_r+0x3c2>
    f520:	2300      	movs	r3, #0
    f522:	9306      	str	r3, [sp, #24]
    f524:	2f00      	cmp	r7, #0
    f526:	da52      	bge.n	f5ce <_dtoa_r+0x1fe>
    f528:	9b06      	ldr	r3, [sp, #24]
    f52a:	9704      	str	r7, [sp, #16]
    f52c:	1bdb      	subs	r3, r3, r7
    f52e:	9306      	str	r3, [sp, #24]
    f530:	427b      	negs	r3, r7
    f532:	9308      	str	r3, [sp, #32]
    f534:	9b01      	ldr	r3, [sp, #4]
    f536:	2b09      	cmp	r3, #9
    f538:	f04f 0700 	mov.w	r7, #0
    f53c:	d84e      	bhi.n	f5dc <_dtoa_r+0x20c>
    f53e:	2b05      	cmp	r3, #5
    f540:	f340 829d 	ble.w	fa7e <_dtoa_r+0x6ae>
    f544:	3b04      	subs	r3, #4
    f546:	9301      	str	r3, [sp, #4]
    f548:	2600      	movs	r6, #0
    f54a:	9b01      	ldr	r3, [sp, #4]
    f54c:	1e9a      	subs	r2, r3, #2
    f54e:	2a03      	cmp	r2, #3
    f550:	f200 8125 	bhi.w	f79e <_dtoa_r+0x3ce>
    f554:	e8df f012 	tbh	[pc, r2, lsl #1]
    f558:	03a703aa 	.word	0x03a703aa
    f55c:	037e039d 	.word	0x037e039d
    f560:	9a05      	ldr	r2, [sp, #20]
    f562:	f3c8 0813 	ubfx	r8, r8, #0, #20
    f566:	f242 730f 	movw	r3, #9999	; 0x270f
    f56a:	ea58 0806 	orrs.w	r8, r8, r6
    f56e:	6013      	str	r3, [r2, #0]
    f570:	d11e      	bne.n	f5b0 <_dtoa_r+0x1e0>
    f572:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f574:	2b00      	cmp	r3, #0
    f576:	f000 8591 	beq.w	1009c <_dtoa_r+0xccc>
    f57a:	4b66      	ldr	r3, [pc, #408]	; (f714 <_dtoa_r+0x344>)
    f57c:	9300      	str	r3, [sp, #0]
    f57e:	3308      	adds	r3, #8
    f580:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f582:	9800      	ldr	r0, [sp, #0]
    f584:	6013      	str	r3, [r2, #0]
    f586:	b00f      	add	sp, #60	; 0x3c
    f588:	ecbd 8b02 	vpop	{d8}
    f58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f590:	ee18 6a90 	vmov	r6, s17
    f594:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f598:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    f59c:	ec53 2b18 	vmov	r2, r3, d8
    f5a0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    f5a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    f5a6:	f04f 0a00 	mov.w	sl, #0
    f5aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    f5ae:	e77b      	b.n	f4a8 <_dtoa_r+0xd8>
    f5b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	f040 833b 	bne.w	fc2e <_dtoa_r+0x85e>
    f5b8:	4b57      	ldr	r3, [pc, #348]	; (f718 <_dtoa_r+0x348>)
    f5ba:	9300      	str	r3, [sp, #0]
    f5bc:	e744      	b.n	f448 <_dtoa_r+0x78>
    f5be:	1a09      	subs	r1, r1, r0
    f5c0:	2300      	movs	r3, #0
    f5c2:	f1b1 0801 	subs.w	r8, r1, #1
    f5c6:	930a      	str	r3, [sp, #40]	; 0x28
    f5c8:	f100 80e3 	bmi.w	f792 <_dtoa_r+0x3c2>
    f5cc:	9306      	str	r3, [sp, #24]
    f5ce:	2300      	movs	r3, #0
    f5d0:	9308      	str	r3, [sp, #32]
    f5d2:	9b01      	ldr	r3, [sp, #4]
    f5d4:	9704      	str	r7, [sp, #16]
    f5d6:	2b09      	cmp	r3, #9
    f5d8:	44b8      	add	r8, r7
    f5da:	d9b0      	bls.n	f53e <_dtoa_r+0x16e>
    f5dc:	2300      	movs	r3, #0
    f5de:	2601      	movs	r6, #1
    f5e0:	9301      	str	r3, [sp, #4]
    f5e2:	9607      	str	r6, [sp, #28]
    f5e4:	f04f 39ff 	mov.w	r9, #4294967295
    f5e8:	469b      	mov	fp, r3
    f5ea:	2100      	movs	r1, #0
    f5ec:	63e1      	str	r1, [r4, #60]	; 0x3c
    f5ee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    f5f2:	4620      	mov	r0, r4
    f5f4:	f7ff f862 	bl	e6bc <_Balloc>
    f5f8:	9000      	str	r0, [sp, #0]
    f5fa:	2800      	cmp	r0, #0
    f5fc:	f000 8540 	beq.w	10080 <_dtoa_r+0xcb0>
    f600:	9b00      	ldr	r3, [sp, #0]
    f602:	63a3      	str	r3, [r4, #56]	; 0x38
    f604:	f1b9 0f0e 	cmp.w	r9, #14
    f608:	f200 80dc 	bhi.w	f7c4 <_dtoa_r+0x3f4>
    f60c:	2e00      	cmp	r6, #0
    f60e:	f000 80d9 	beq.w	f7c4 <_dtoa_r+0x3f4>
    f612:	9b04      	ldr	r3, [sp, #16]
    f614:	2b00      	cmp	r3, #0
    f616:	f340 83de 	ble.w	fdd6 <_dtoa_r+0xa06>
    f61a:	4a3d      	ldr	r2, [pc, #244]	; (f710 <_dtoa_r+0x340>)
    f61c:	f003 010f 	and.w	r1, r3, #15
    f620:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f624:	ed92 7b00 	vldr	d7, [r2]
    f628:	111a      	asrs	r2, r3, #4
    f62a:	05db      	lsls	r3, r3, #23
    f62c:	f140 8382 	bpl.w	fd34 <_dtoa_r+0x964>
    f630:	493a      	ldr	r1, [pc, #232]	; (f71c <_dtoa_r+0x34c>)
    f632:	ed91 6b08 	vldr	d6, [r1, #32]
    f636:	f002 020f 	and.w	r2, r2, #15
    f63a:	2003      	movs	r0, #3
    f63c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    f640:	b15a      	cbz	r2, f65a <_dtoa_r+0x28a>
    f642:	4936      	ldr	r1, [pc, #216]	; (f71c <_dtoa_r+0x34c>)
    f644:	07d6      	lsls	r6, r2, #31
    f646:	d504      	bpl.n	f652 <_dtoa_r+0x282>
    f648:	ed91 6b00 	vldr	d6, [r1]
    f64c:	3001      	adds	r0, #1
    f64e:	ee27 7b06 	vmul.f64	d7, d7, d6
    f652:	1052      	asrs	r2, r2, #1
    f654:	f101 0108 	add.w	r1, r1, #8
    f658:	d1f4      	bne.n	f644 <_dtoa_r+0x274>
    f65a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    f65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f660:	b13b      	cbz	r3, f672 <_dtoa_r+0x2a2>
    f662:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    f666:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f66e:	f100 84ae 	bmi.w	ffce <_dtoa_r+0xbfe>
    f672:	ee07 0a90 	vmov	s15, r0
    f676:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f67a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f67e:	eea5 7b06 	vfma.f64	d7, d5, d6
    f682:	ee17 2a90 	vmov	r2, s15
    f686:	ec51 0b17 	vmov	r0, r1, d7
    f68a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f68e:	f1b9 0f00 	cmp.w	r9, #0
    f692:	f000 8388 	beq.w	fda6 <_dtoa_r+0x9d6>
    f696:	9e04      	ldr	r6, [sp, #16]
    f698:	464a      	mov	r2, r9
    f69a:	9b07      	ldr	r3, [sp, #28]
    f69c:	2b00      	cmp	r3, #0
    f69e:	f000 8447 	beq.w	ff30 <_dtoa_r+0xb60>
    f6a2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f6a6:	4b1a      	ldr	r3, [pc, #104]	; (f710 <_dtoa_r+0x340>)
    f6a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    f6ac:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f6b0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    f6b4:	ee36 7b47 	vsub.f64	d7, d6, d7
    f6b8:	ed1c 6b02 	vldr	d6, [ip, #-8]
    f6bc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    f6c0:	ec41 0b16 	vmov	d6, r0, r1
    f6c4:	ee14 0a90 	vmov	r0, s9
    f6c8:	ee35 5b46 	vsub.f64	d5, d5, d6
    f6cc:	9900      	ldr	r1, [sp, #0]
    f6ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f6d2:	3030      	adds	r0, #48	; 0x30
    f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6d8:	f801 0b01 	strb.w	r0, [r1], #1
    f6dc:	f300 84ac 	bgt.w	10038 <_dtoa_r+0xc68>
    f6e0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    f6e4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f6e8:	f04f 0c00 	mov.w	ip, #0
    f6ec:	e031      	b.n	f752 <_dtoa_r+0x382>
    f6ee:	bf00      	nop
    f6f0:	636f4361 	.word	0x636f4361
    f6f4:	3fd287a7 	.word	0x3fd287a7
    f6f8:	8b60c8b3 	.word	0x8b60c8b3
    f6fc:	3fc68a28 	.word	0x3fc68a28
    f700:	509f79fb 	.word	0x509f79fb
    f704:	3fd34413 	.word	0x3fd34413
    f708:	7ff00000 	.word	0x7ff00000
    f70c:	20003099 	.word	0x20003099
    f710:	20000b18 	.word	0x20000b18
    f714:	20002d6c 	.word	0x20002d6c
    f718:	20002d78 	.word	0x20002d78
    f71c:	20000af0 	.word	0x20000af0
    f720:	f10c 0c01 	add.w	ip, ip, #1
    f724:	4594      	cmp	ip, r2
    f726:	da4d      	bge.n	f7c4 <_dtoa_r+0x3f4>
    f728:	ee27 7b04 	vmul.f64	d7, d7, d4
    f72c:	ee25 5b04 	vmul.f64	d5, d5, d4
    f730:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f734:	ee16 3a90 	vmov	r3, s13
    f738:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    f73c:	3330      	adds	r3, #48	; 0x30
    f73e:	ee37 7b43 	vsub.f64	d7, d7, d3
    f742:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f74a:	f801 3b01 	strb.w	r3, [r1], #1
    f74e:	f100 8473 	bmi.w	10038 <_dtoa_r+0xc68>
    f752:	ee32 6b47 	vsub.f64	d6, d2, d7
    f756:	eeb4 6bc5 	vcmpe.f64	d6, d5
    f75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f75e:	d5df      	bpl.n	f720 <_dtoa_r+0x350>
    f760:	9a00      	ldr	r2, [sp, #0]
    f762:	9604      	str	r6, [sp, #16]
    f764:	e002      	b.n	f76c <_dtoa_r+0x39c>
    f766:	428a      	cmp	r2, r1
    f768:	f000 8450 	beq.w	1000c <_dtoa_r+0xc3c>
    f76c:	4689      	mov	r9, r1
    f76e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f772:	2b39      	cmp	r3, #57	; 0x39
    f774:	d0f7      	beq.n	f766 <_dtoa_r+0x396>
    f776:	3301      	adds	r3, #1
    f778:	b2db      	uxtb	r3, r3
    f77a:	700b      	strb	r3, [r1, #0]
    f77c:	9b04      	ldr	r3, [sp, #16]
    f77e:	3301      	adds	r3, #1
    f780:	9304      	str	r3, [sp, #16]
    f782:	e155      	b.n	fa30 <_dtoa_r+0x660>
    f784:	1a09      	subs	r1, r1, r0
    f786:	2301      	movs	r3, #1
    f788:	f1b1 0801 	subs.w	r8, r1, #1
    f78c:	930a      	str	r3, [sp, #40]	; 0x28
    f78e:	f57f aec7 	bpl.w	f520 <_dtoa_r+0x150>
    f792:	f1c1 0301 	rsb	r3, r1, #1
    f796:	9306      	str	r3, [sp, #24]
    f798:	f04f 0800 	mov.w	r8, #0
    f79c:	e6c2      	b.n	f524 <_dtoa_r+0x154>
    f79e:	2600      	movs	r6, #0
    f7a0:	63e6      	str	r6, [r4, #60]	; 0x3c
    f7a2:	4631      	mov	r1, r6
    f7a4:	4620      	mov	r0, r4
    f7a6:	f7fe ff89 	bl	e6bc <_Balloc>
    f7aa:	9000      	str	r0, [sp, #0]
    f7ac:	2800      	cmp	r0, #0
    f7ae:	f000 8467 	beq.w	10080 <_dtoa_r+0xcb0>
    f7b2:	9b00      	ldr	r3, [sp, #0]
    f7b4:	63a3      	str	r3, [r4, #56]	; 0x38
    f7b6:	f04f 33ff 	mov.w	r3, #4294967295
    f7ba:	930b      	str	r3, [sp, #44]	; 0x2c
    f7bc:	4699      	mov	r9, r3
    f7be:	2301      	movs	r3, #1
    f7c0:	46b3      	mov	fp, r6
    f7c2:	9307      	str	r3, [sp, #28]
    f7c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f7c6:	2a00      	cmp	r2, #0
    f7c8:	db55      	blt.n	f876 <_dtoa_r+0x4a6>
    f7ca:	9904      	ldr	r1, [sp, #16]
    f7cc:	290e      	cmp	r1, #14
    f7ce:	dc52      	bgt.n	f876 <_dtoa_r+0x4a6>
    f7d0:	4bb7      	ldr	r3, [pc, #732]	; (fab0 <_dtoa_r+0x6e0>)
    f7d2:	f1bb 0f00 	cmp.w	fp, #0
    f7d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f7da:	ed93 6b00 	vldr	d6, [r3]
    f7de:	da15      	bge.n	f80c <_dtoa_r+0x43c>
    f7e0:	f1b9 0f00 	cmp.w	r9, #0
    f7e4:	dc12      	bgt.n	f80c <_dtoa_r+0x43c>
    f7e6:	f040 82f2 	bne.w	fdce <_dtoa_r+0x9fe>
    f7ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f7ee:	ee26 7b07 	vmul.f64	d7, d6, d7
    f7f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7fa:	46ca      	mov	sl, r9
    f7fc:	464e      	mov	r6, r9
    f7fe:	f200 826d 	bhi.w	fcdc <_dtoa_r+0x90c>
    f802:	f8dd 8000 	ldr.w	r8, [sp]
    f806:	ea6f 0b0b 	mvn.w	fp, fp
    f80a:	e270      	b.n	fcee <_dtoa_r+0x91e>
    f80c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f810:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f814:	9900      	ldr	r1, [sp, #0]
    f816:	ee17 3a10 	vmov	r3, s14
    f81a:	f1b9 0f01 	cmp.w	r9, #1
    f81e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    f822:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f826:	f801 3b01 	strb.w	r3, [r1], #1
    f82a:	eea5 8b46 	vfms.f64	d8, d5, d6
    f82e:	f000 8334 	beq.w	fe9a <_dtoa_r+0xaca>
    f832:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f836:	2301      	movs	r3, #1
    f838:	e011      	b.n	f85e <_dtoa_r+0x48e>
    f83a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f83e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f842:	3301      	adds	r3, #1
    f844:	ee17 2a10 	vmov	r2, s14
    f848:	454b      	cmp	r3, r9
    f84a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    f84e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f852:	f801 2b01 	strb.w	r2, [r1], #1
    f856:	eea5 8b46 	vfms.f64	d8, d5, d6
    f85a:	f000 831e 	beq.w	fe9a <_dtoa_r+0xaca>
    f85e:	ee28 8b04 	vmul.f64	d8, d8, d4
    f862:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f86a:	d1e6      	bne.n	f83a <_dtoa_r+0x46a>
    f86c:	9b04      	ldr	r3, [sp, #16]
    f86e:	3301      	adds	r3, #1
    f870:	9304      	str	r3, [sp, #16]
    f872:	4689      	mov	r9, r1
    f874:	e0dc      	b.n	fa30 <_dtoa_r+0x660>
    f876:	9b07      	ldr	r3, [sp, #28]
    f878:	b343      	cbz	r3, f8cc <_dtoa_r+0x4fc>
    f87a:	9b01      	ldr	r3, [sp, #4]
    f87c:	2b01      	cmp	r3, #1
    f87e:	f340 8276 	ble.w	fd6e <_dtoa_r+0x99e>
    f882:	9b08      	ldr	r3, [sp, #32]
    f884:	f109 3aff 	add.w	sl, r9, #4294967295
    f888:	4553      	cmp	r3, sl
    f88a:	f280 823f 	bge.w	fd0c <_dtoa_r+0x93c>
    f88e:	9b08      	ldr	r3, [sp, #32]
    f890:	f8cd a020 	str.w	sl, [sp, #32]
    f894:	ebaa 0203 	sub.w	r2, sl, r3
    f898:	4417      	add	r7, r2
    f89a:	f04f 0a00 	mov.w	sl, #0
    f89e:	f1b9 0f00 	cmp.w	r9, #0
    f8a2:	f2c0 8325 	blt.w	fef0 <_dtoa_r+0xb20>
    f8a6:	9b06      	ldr	r3, [sp, #24]
    f8a8:	9309      	str	r3, [sp, #36]	; 0x24
    f8aa:	444b      	add	r3, r9
    f8ac:	44c8      	add	r8, r9
    f8ae:	9306      	str	r3, [sp, #24]
    f8b0:	2101      	movs	r1, #1
    f8b2:	4620      	mov	r0, r4
    f8b4:	f7fe ffd4 	bl	e860 <__i2b>
    f8b8:	4606      	mov	r6, r0
    f8ba:	e00c      	b.n	f8d6 <_dtoa_r+0x506>
    f8bc:	4b7d      	ldr	r3, [pc, #500]	; (fab4 <_dtoa_r+0x6e4>)
    f8be:	9300      	str	r3, [sp, #0]
    f8c0:	9800      	ldr	r0, [sp, #0]
    f8c2:	b00f      	add	sp, #60	; 0x3c
    f8c4:	ecbd 8b02 	vpop	{d8}
    f8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8cc:	9b06      	ldr	r3, [sp, #24]
    f8ce:	f8dd a020 	ldr.w	sl, [sp, #32]
    f8d2:	9e07      	ldr	r6, [sp, #28]
    f8d4:	9309      	str	r3, [sp, #36]	; 0x24
    f8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f8d8:	b16b      	cbz	r3, f8f6 <_dtoa_r+0x526>
    f8da:	f1b8 0f00 	cmp.w	r8, #0
    f8de:	dd0a      	ble.n	f8f6 <_dtoa_r+0x526>
    f8e0:	4543      	cmp	r3, r8
    f8e2:	9906      	ldr	r1, [sp, #24]
    f8e4:	461a      	mov	r2, r3
    f8e6:	bfa8      	it	ge
    f8e8:	4642      	movge	r2, r8
    f8ea:	1a89      	subs	r1, r1, r2
    f8ec:	1a9b      	subs	r3, r3, r2
    f8ee:	9106      	str	r1, [sp, #24]
    f8f0:	9309      	str	r3, [sp, #36]	; 0x24
    f8f2:	eba8 0802 	sub.w	r8, r8, r2
    f8f6:	9b08      	ldr	r3, [sp, #32]
    f8f8:	b163      	cbz	r3, f914 <_dtoa_r+0x544>
    f8fa:	9b07      	ldr	r3, [sp, #28]
    f8fc:	2b00      	cmp	r3, #0
    f8fe:	f000 82a7 	beq.w	fe50 <_dtoa_r+0xa80>
    f902:	f1ba 0f00 	cmp.w	sl, #0
    f906:	f300 8204 	bgt.w	fd12 <_dtoa_r+0x942>
    f90a:	9b08      	ldr	r3, [sp, #32]
    f90c:	ebb3 020a 	subs.w	r2, r3, sl
    f910:	f040 82ff 	bne.w	ff12 <_dtoa_r+0xb42>
    f914:	2101      	movs	r1, #1
    f916:	4620      	mov	r0, r4
    f918:	f7fe ffa2 	bl	e860 <__i2b>
    f91c:	2f00      	cmp	r7, #0
    f91e:	4682      	mov	sl, r0
    f920:	f300 80af 	bgt.w	fa82 <_dtoa_r+0x6b2>
    f924:	9b01      	ldr	r3, [sp, #4]
    f926:	2b01      	cmp	r3, #1
    f928:	f340 8187 	ble.w	fc3a <_dtoa_r+0x86a>
    f92c:	2300      	movs	r3, #0
    f92e:	9308      	str	r3, [sp, #32]
    f930:	2001      	movs	r0, #1
    f932:	2f00      	cmp	r7, #0
    f934:	f040 80b1 	bne.w	fa9a <_dtoa_r+0x6ca>
    f938:	4440      	add	r0, r8
    f93a:	f010 001f 	ands.w	r0, r0, #31
    f93e:	f000 817a 	beq.w	fc36 <_dtoa_r+0x866>
    f942:	f1c0 0220 	rsb	r2, r0, #32
    f946:	2a04      	cmp	r2, #4
    f948:	f300 8088 	bgt.w	fa5c <_dtoa_r+0x68c>
    f94c:	f040 81f6 	bne.w	fd3c <_dtoa_r+0x96c>
    f950:	9b06      	ldr	r3, [sp, #24]
    f952:	2b00      	cmp	r3, #0
    f954:	dd05      	ble.n	f962 <_dtoa_r+0x592>
    f956:	4629      	mov	r1, r5
    f958:	461a      	mov	r2, r3
    f95a:	4620      	mov	r0, r4
    f95c:	f7ff f8bc 	bl	ead8 <__lshift>
    f960:	4605      	mov	r5, r0
    f962:	f1b8 0f00 	cmp.w	r8, #0
    f966:	dd05      	ble.n	f974 <_dtoa_r+0x5a4>
    f968:	4651      	mov	r1, sl
    f96a:	4642      	mov	r2, r8
    f96c:	4620      	mov	r0, r4
    f96e:	f7ff f8b3 	bl	ead8 <__lshift>
    f972:	4682      	mov	sl, r0
    f974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f976:	2b00      	cmp	r3, #0
    f978:	f040 813f 	bne.w	fbfa <_dtoa_r+0x82a>
    f97c:	f1b9 0f00 	cmp.w	r9, #0
    f980:	f340 8125 	ble.w	fbce <_dtoa_r+0x7fe>
    f984:	9b07      	ldr	r3, [sp, #28]
    f986:	2b00      	cmp	r3, #0
    f988:	f040 80a3 	bne.w	fad2 <_dtoa_r+0x702>
    f98c:	9b04      	ldr	r3, [sp, #16]
    f98e:	3301      	adds	r3, #1
    f990:	9304      	str	r3, [sp, #16]
    f992:	f8dd 8000 	ldr.w	r8, [sp]
    f996:	2701      	movs	r7, #1
    f998:	e007      	b.n	f9aa <_dtoa_r+0x5da>
    f99a:	4629      	mov	r1, r5
    f99c:	2300      	movs	r3, #0
    f99e:	220a      	movs	r2, #10
    f9a0:	4620      	mov	r0, r4
    f9a2:	f7fe febb 	bl	e71c <__multadd>
    f9a6:	3701      	adds	r7, #1
    f9a8:	4605      	mov	r5, r0
    f9aa:	4651      	mov	r1, sl
    f9ac:	4628      	mov	r0, r5
    f9ae:	f7ff fc7b 	bl	f2a8 <quorem>
    f9b2:	45b9      	cmp	r9, r7
    f9b4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    f9b8:	f808 0b01 	strb.w	r0, [r8], #1
    f9bc:	dced      	bgt.n	f99a <_dtoa_r+0x5ca>
    f9be:	f1b9 0f00 	cmp.w	r9, #0
    f9c2:	9a00      	ldr	r2, [sp, #0]
    f9c4:	bfcc      	ite	gt
    f9c6:	46cb      	movgt	fp, r9
    f9c8:	f04f 0b01 	movle.w	fp, #1
    f9cc:	4603      	mov	r3, r0
    f9ce:	4493      	add	fp, r2
    f9d0:	2700      	movs	r7, #0
    f9d2:	4629      	mov	r1, r5
    f9d4:	2201      	movs	r2, #1
    f9d6:	4620      	mov	r0, r4
    f9d8:	9301      	str	r3, [sp, #4]
    f9da:	f7ff f87d 	bl	ead8 <__lshift>
    f9de:	4651      	mov	r1, sl
    f9e0:	4605      	mov	r5, r0
    f9e2:	f7ff f8f1 	bl	ebc8 <__mcmp>
    f9e6:	2800      	cmp	r0, #0
    f9e8:	f340 81af 	ble.w	fd4a <_dtoa_r+0x97a>
    f9ec:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f9f0:	9a00      	ldr	r2, [sp, #0]
    f9f2:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9f6:	e004      	b.n	fa02 <_dtoa_r+0x632>
    f9f8:	455a      	cmp	r2, fp
    f9fa:	f000 81b1 	beq.w	fd60 <_dtoa_r+0x990>
    f9fe:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    fa02:	2b39      	cmp	r3, #57	; 0x39
    fa04:	f10b 0901 	add.w	r9, fp, #1
    fa08:	d0f6      	beq.n	f9f8 <_dtoa_r+0x628>
    fa0a:	3301      	adds	r3, #1
    fa0c:	f88b 3000 	strb.w	r3, [fp]
    fa10:	4651      	mov	r1, sl
    fa12:	4620      	mov	r0, r4
    fa14:	f7fe fe78 	bl	e708 <_Bfree>
    fa18:	b156      	cbz	r6, fa30 <_dtoa_r+0x660>
    fa1a:	b12f      	cbz	r7, fa28 <_dtoa_r+0x658>
    fa1c:	42b7      	cmp	r7, r6
    fa1e:	d003      	beq.n	fa28 <_dtoa_r+0x658>
    fa20:	4639      	mov	r1, r7
    fa22:	4620      	mov	r0, r4
    fa24:	f7fe fe70 	bl	e708 <_Bfree>
    fa28:	4631      	mov	r1, r6
    fa2a:	4620      	mov	r0, r4
    fa2c:	f7fe fe6c 	bl	e708 <_Bfree>
    fa30:	4629      	mov	r1, r5
    fa32:	4620      	mov	r0, r4
    fa34:	f7fe fe68 	bl	e708 <_Bfree>
    fa38:	2300      	movs	r3, #0
    fa3a:	f889 3000 	strb.w	r3, [r9]
    fa3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fa42:	601a      	str	r2, [r3, #0]
    fa44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fa46:	2b00      	cmp	r3, #0
    fa48:	f43f acfe 	beq.w	f448 <_dtoa_r+0x78>
    fa4c:	9800      	ldr	r0, [sp, #0]
    fa4e:	f8c3 9000 	str.w	r9, [r3]
    fa52:	b00f      	add	sp, #60	; 0x3c
    fa54:	ecbd 8b02 	vpop	{d8}
    fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa5c:	f1c0 001c 	rsb	r0, r0, #28
    fa60:	9b06      	ldr	r3, [sp, #24]
    fa62:	4403      	add	r3, r0
    fa64:	9306      	str	r3, [sp, #24]
    fa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa68:	4403      	add	r3, r0
    fa6a:	9309      	str	r3, [sp, #36]	; 0x24
    fa6c:	4480      	add	r8, r0
    fa6e:	e76f      	b.n	f950 <_dtoa_r+0x580>
    fa70:	f1c2 0220 	rsb	r2, r2, #32
    fa74:	fa06 f202 	lsl.w	r2, r6, r2
    fa78:	ee07 2a10 	vmov	s14, r2
    fa7c:	e509      	b.n	f492 <_dtoa_r+0xc2>
    fa7e:	2601      	movs	r6, #1
    fa80:	e563      	b.n	f54a <_dtoa_r+0x17a>
    fa82:	4601      	mov	r1, r0
    fa84:	463a      	mov	r2, r7
    fa86:	4620      	mov	r0, r4
    fa88:	f7fe ffc6 	bl	ea18 <__pow5mult>
    fa8c:	9b01      	ldr	r3, [sp, #4]
    fa8e:	2b01      	cmp	r3, #1
    fa90:	4682      	mov	sl, r0
    fa92:	f340 81c5 	ble.w	fe20 <_dtoa_r+0xa50>
    fa96:	2300      	movs	r3, #0
    fa98:	9308      	str	r3, [sp, #32]
    fa9a:	f8da 2010 	ldr.w	r2, [sl, #16]
    fa9e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    faa2:	6910      	ldr	r0, [r2, #16]
    faa4:	f7fe fe8c 	bl	e7c0 <__hi0bits>
    faa8:	f1c0 0020 	rsb	r0, r0, #32
    faac:	e744      	b.n	f938 <_dtoa_r+0x568>
    faae:	bf00      	nop
    fab0:	20000b18 	.word	0x20000b18
    fab4:	20003098 	.word	0x20003098
    fab8:	4631      	mov	r1, r6
    faba:	2300      	movs	r3, #0
    fabc:	220a      	movs	r2, #10
    fabe:	4620      	mov	r0, r4
    fac0:	f7fe fe2c 	bl	e71c <__multadd>
    fac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fac6:	2b00      	cmp	r3, #0
    fac8:	4606      	mov	r6, r0
    faca:	f340 82ce 	ble.w	1006a <_dtoa_r+0xc9a>
    face:	9704      	str	r7, [sp, #16]
    fad0:	4699      	mov	r9, r3
    fad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fad4:	2b00      	cmp	r3, #0
    fad6:	dd05      	ble.n	fae4 <_dtoa_r+0x714>
    fad8:	4631      	mov	r1, r6
    fada:	461a      	mov	r2, r3
    fadc:	4620      	mov	r0, r4
    fade:	f7fe fffb 	bl	ead8 <__lshift>
    fae2:	4606      	mov	r6, r0
    fae4:	9b08      	ldr	r3, [sp, #32]
    fae6:	2b00      	cmp	r3, #0
    fae8:	f040 81eb 	bne.w	fec2 <_dtoa_r+0xaf2>
    faec:	46b0      	mov	r8, r6
    faee:	9b02      	ldr	r3, [sp, #8]
    faf0:	9f00      	ldr	r7, [sp, #0]
    faf2:	f003 0201 	and.w	r2, r3, #1
    faf6:	1e7b      	subs	r3, r7, #1
    faf8:	444b      	add	r3, r9
    fafa:	9308      	str	r3, [sp, #32]
    fafc:	9b01      	ldr	r3, [sp, #4]
    fafe:	920a      	str	r2, [sp, #40]	; 0x28
    fb00:	4313      	orrs	r3, r2
    fb02:	9309      	str	r3, [sp, #36]	; 0x24
    fb04:	4651      	mov	r1, sl
    fb06:	4628      	mov	r0, r5
    fb08:	f7ff fbce 	bl	f2a8 <quorem>
    fb0c:	4631      	mov	r1, r6
    fb0e:	4683      	mov	fp, r0
    fb10:	4628      	mov	r0, r5
    fb12:	f7ff f859 	bl	ebc8 <__mcmp>
    fb16:	4642      	mov	r2, r8
    fb18:	4651      	mov	r1, sl
    fb1a:	4681      	mov	r9, r0
    fb1c:	4620      	mov	r0, r4
    fb1e:	f7ff f875 	bl	ec0c <__mdiff>
    fb22:	68c2      	ldr	r2, [r0, #12]
    fb24:	4601      	mov	r1, r0
    fb26:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    fb2a:	2a00      	cmp	r2, #0
    fb2c:	d142      	bne.n	fbb4 <_dtoa_r+0x7e4>
    fb2e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    fb32:	4628      	mov	r0, r5
    fb34:	f7ff f848 	bl	ebc8 <__mcmp>
    fb38:	9906      	ldr	r1, [sp, #24]
    fb3a:	9002      	str	r0, [sp, #8]
    fb3c:	4620      	mov	r0, r4
    fb3e:	f7fe fde3 	bl	e708 <_Bfree>
    fb42:	9a02      	ldr	r2, [sp, #8]
    fb44:	9b07      	ldr	r3, [sp, #28]
    fb46:	b91a      	cbnz	r2, fb50 <_dtoa_r+0x780>
    fb48:	9909      	ldr	r1, [sp, #36]	; 0x24
    fb4a:	2900      	cmp	r1, #0
    fb4c:	f000 827e 	beq.w	1004c <_dtoa_r+0xc7c>
    fb50:	f1b9 0f00 	cmp.w	r9, #0
    fb54:	f2c0 8183 	blt.w	fe5e <_dtoa_r+0xa8e>
    fb58:	9901      	ldr	r1, [sp, #4]
    fb5a:	ea49 0901 	orr.w	r9, r9, r1
    fb5e:	990a      	ldr	r1, [sp, #40]	; 0x28
    fb60:	ea51 0909 	orrs.w	r9, r1, r9
    fb64:	f000 817b 	beq.w	fe5e <_dtoa_r+0xa8e>
    fb68:	2a00      	cmp	r2, #0
    fb6a:	f300 81c6 	bgt.w	fefa <_dtoa_r+0xb2a>
    fb6e:	9a08      	ldr	r2, [sp, #32]
    fb70:	703b      	strb	r3, [r7, #0]
    fb72:	f107 0901 	add.w	r9, r7, #1
    fb76:	4297      	cmp	r7, r2
    fb78:	46cb      	mov	fp, r9
    fb7a:	f000 81c4 	beq.w	ff06 <_dtoa_r+0xb36>
    fb7e:	4629      	mov	r1, r5
    fb80:	2300      	movs	r3, #0
    fb82:	220a      	movs	r2, #10
    fb84:	4620      	mov	r0, r4
    fb86:	f7fe fdc9 	bl	e71c <__multadd>
    fb8a:	4546      	cmp	r6, r8
    fb8c:	4605      	mov	r5, r0
    fb8e:	4631      	mov	r1, r6
    fb90:	f04f 0300 	mov.w	r3, #0
    fb94:	f04f 020a 	mov.w	r2, #10
    fb98:	4620      	mov	r0, r4
    fb9a:	d012      	beq.n	fbc2 <_dtoa_r+0x7f2>
    fb9c:	f7fe fdbe 	bl	e71c <__multadd>
    fba0:	4641      	mov	r1, r8
    fba2:	4606      	mov	r6, r0
    fba4:	2300      	movs	r3, #0
    fba6:	220a      	movs	r2, #10
    fba8:	4620      	mov	r0, r4
    fbaa:	f7fe fdb7 	bl	e71c <__multadd>
    fbae:	464f      	mov	r7, r9
    fbb0:	4680      	mov	r8, r0
    fbb2:	e7a7      	b.n	fb04 <_dtoa_r+0x734>
    fbb4:	4620      	mov	r0, r4
    fbb6:	9302      	str	r3, [sp, #8]
    fbb8:	f7fe fda6 	bl	e708 <_Bfree>
    fbbc:	9b02      	ldr	r3, [sp, #8]
    fbbe:	2201      	movs	r2, #1
    fbc0:	e7c6      	b.n	fb50 <_dtoa_r+0x780>
    fbc2:	f7fe fdab 	bl	e71c <__multadd>
    fbc6:	464f      	mov	r7, r9
    fbc8:	4606      	mov	r6, r0
    fbca:	4680      	mov	r8, r0
    fbcc:	e79a      	b.n	fb04 <_dtoa_r+0x734>
    fbce:	9b01      	ldr	r3, [sp, #4]
    fbd0:	2b02      	cmp	r3, #2
    fbd2:	dc71      	bgt.n	fcb8 <_dtoa_r+0x8e8>
    fbd4:	9b07      	ldr	r3, [sp, #28]
    fbd6:	2b00      	cmp	r3, #0
    fbd8:	f47f af7b 	bne.w	fad2 <_dtoa_r+0x702>
    fbdc:	9b04      	ldr	r3, [sp, #16]
    fbde:	4651      	mov	r1, sl
    fbe0:	3301      	adds	r3, #1
    fbe2:	4628      	mov	r0, r5
    fbe4:	9304      	str	r3, [sp, #16]
    fbe6:	f7ff fb5f 	bl	f2a8 <quorem>
    fbea:	f8dd b000 	ldr.w	fp, [sp]
    fbee:	f100 0330 	add.w	r3, r0, #48	; 0x30
    fbf2:	f80b 3b01 	strb.w	r3, [fp], #1
    fbf6:	2700      	movs	r7, #0
    fbf8:	e6eb      	b.n	f9d2 <_dtoa_r+0x602>
    fbfa:	4651      	mov	r1, sl
    fbfc:	4628      	mov	r0, r5
    fbfe:	f7fe ffe3 	bl	ebc8 <__mcmp>
    fc02:	2800      	cmp	r0, #0
    fc04:	f6bf aeba 	bge.w	f97c <_dtoa_r+0x5ac>
    fc08:	4629      	mov	r1, r5
    fc0a:	2300      	movs	r3, #0
    fc0c:	220a      	movs	r2, #10
    fc0e:	4620      	mov	r0, r4
    fc10:	f7fe fd84 	bl	e71c <__multadd>
    fc14:	9b04      	ldr	r3, [sp, #16]
    fc16:	1e5f      	subs	r7, r3, #1
    fc18:	9b07      	ldr	r3, [sp, #28]
    fc1a:	4605      	mov	r5, r0
    fc1c:	2b00      	cmp	r3, #0
    fc1e:	f47f af4b 	bne.w	fab8 <_dtoa_r+0x6e8>
    fc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fc24:	2b00      	cmp	r3, #0
    fc26:	f340 8218 	ble.w	1005a <_dtoa_r+0xc8a>
    fc2a:	4699      	mov	r9, r3
    fc2c:	e6b1      	b.n	f992 <_dtoa_r+0x5c2>
    fc2e:	4bbc      	ldr	r3, [pc, #752]	; (ff20 <_dtoa_r+0xb50>)
    fc30:	9300      	str	r3, [sp, #0]
    fc32:	3303      	adds	r3, #3
    fc34:	e4a4      	b.n	f580 <_dtoa_r+0x1b0>
    fc36:	201c      	movs	r0, #28
    fc38:	e712      	b.n	fa60 <_dtoa_r+0x690>
    fc3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fc3e:	2800      	cmp	r0, #0
    fc40:	f47f ae74 	bne.w	f92c <_dtoa_r+0x55c>
    fc44:	f3c1 0213 	ubfx	r2, r1, #0, #20
    fc48:	2a00      	cmp	r2, #0
    fc4a:	f000 80f4 	beq.w	fe36 <_dtoa_r+0xa66>
    fc4e:	9b02      	ldr	r3, [sp, #8]
    fc50:	9308      	str	r3, [sp, #32]
    fc52:	e66d      	b.n	f930 <_dtoa_r+0x560>
    fc54:	2301      	movs	r3, #1
    fc56:	9307      	str	r3, [sp, #28]
    fc58:	9b04      	ldr	r3, [sp, #16]
    fc5a:	445b      	add	r3, fp
    fc5c:	f103 0901 	add.w	r9, r3, #1
    fc60:	f1b9 0f01 	cmp.w	r9, #1
    fc64:	46cc      	mov	ip, r9
    fc66:	930b      	str	r3, [sp, #44]	; 0x2c
    fc68:	bfb8      	it	lt
    fc6a:	f04f 0c01 	movlt.w	ip, #1
    fc6e:	2100      	movs	r1, #0
    fc70:	f1bc 0f17 	cmp.w	ip, #23
    fc74:	63e1      	str	r1, [r4, #60]	; 0x3c
    fc76:	f77f acbc 	ble.w	f5f2 <_dtoa_r+0x222>
    fc7a:	2001      	movs	r0, #1
    fc7c:	2204      	movs	r2, #4
    fc7e:	0052      	lsls	r2, r2, #1
    fc80:	f102 0314 	add.w	r3, r2, #20
    fc84:	4563      	cmp	r3, ip
    fc86:	4601      	mov	r1, r0
    fc88:	f100 0001 	add.w	r0, r0, #1
    fc8c:	d9f7      	bls.n	fc7e <_dtoa_r+0x8ae>
    fc8e:	63e1      	str	r1, [r4, #60]	; 0x3c
    fc90:	e4af      	b.n	f5f2 <_dtoa_r+0x222>
    fc92:	2301      	movs	r3, #1
    fc94:	9307      	str	r3, [sp, #28]
    fc96:	f1bb 0f00 	cmp.w	fp, #0
    fc9a:	dd52      	ble.n	fd42 <_dtoa_r+0x972>
    fc9c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    fca0:	46d9      	mov	r9, fp
    fca2:	46dc      	mov	ip, fp
    fca4:	e7e3      	b.n	fc6e <_dtoa_r+0x89e>
    fca6:	2300      	movs	r3, #0
    fca8:	9307      	str	r3, [sp, #28]
    fcaa:	e7d5      	b.n	fc58 <_dtoa_r+0x888>
    fcac:	2300      	movs	r3, #0
    fcae:	9307      	str	r3, [sp, #28]
    fcb0:	e7f1      	b.n	fc96 <_dtoa_r+0x8c6>
    fcb2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    fcb6:	9704      	str	r7, [sp, #16]
    fcb8:	f1b9 0f00 	cmp.w	r9, #0
    fcbc:	f47f ada1 	bne.w	f802 <_dtoa_r+0x432>
    fcc0:	4651      	mov	r1, sl
    fcc2:	464b      	mov	r3, r9
    fcc4:	2205      	movs	r2, #5
    fcc6:	4620      	mov	r0, r4
    fcc8:	f7fe fd28 	bl	e71c <__multadd>
    fccc:	4601      	mov	r1, r0
    fcce:	4682      	mov	sl, r0
    fcd0:	4628      	mov	r0, r5
    fcd2:	f7fe ff79 	bl	ebc8 <__mcmp>
    fcd6:	2800      	cmp	r0, #0
    fcd8:	f77f ad93 	ble.w	f802 <_dtoa_r+0x432>
    fcdc:	9b04      	ldr	r3, [sp, #16]
    fcde:	f103 0b01 	add.w	fp, r3, #1
    fce2:	9b00      	ldr	r3, [sp, #0]
    fce4:	2231      	movs	r2, #49	; 0x31
    fce6:	4698      	mov	r8, r3
    fce8:	f803 2b01 	strb.w	r2, [r3], #1
    fcec:	9300      	str	r3, [sp, #0]
    fcee:	4651      	mov	r1, sl
    fcf0:	4620      	mov	r0, r4
    fcf2:	f7fe fd09 	bl	e708 <_Bfree>
    fcf6:	f10b 0301 	add.w	r3, fp, #1
    fcfa:	f8dd 9000 	ldr.w	r9, [sp]
    fcfe:	9304      	str	r3, [sp, #16]
    fd00:	f8cd 8000 	str.w	r8, [sp]
    fd04:	2e00      	cmp	r6, #0
    fd06:	f47f ae8f 	bne.w	fa28 <_dtoa_r+0x658>
    fd0a:	e691      	b.n	fa30 <_dtoa_r+0x660>
    fd0c:	eba3 0a0a 	sub.w	sl, r3, sl
    fd10:	e5c5      	b.n	f89e <_dtoa_r+0x4ce>
    fd12:	4631      	mov	r1, r6
    fd14:	4652      	mov	r2, sl
    fd16:	4620      	mov	r0, r4
    fd18:	f7fe fe7e 	bl	ea18 <__pow5mult>
    fd1c:	462a      	mov	r2, r5
    fd1e:	4601      	mov	r1, r0
    fd20:	4606      	mov	r6, r0
    fd22:	4620      	mov	r0, r4
    fd24:	f7fe fdca 	bl	e8bc <__multiply>
    fd28:	4629      	mov	r1, r5
    fd2a:	4605      	mov	r5, r0
    fd2c:	4620      	mov	r0, r4
    fd2e:	f7fe fceb 	bl	e708 <_Bfree>
    fd32:	e5ea      	b.n	f90a <_dtoa_r+0x53a>
    fd34:	2002      	movs	r0, #2
    fd36:	eeb0 5b48 	vmov.f64	d5, d8
    fd3a:	e481      	b.n	f640 <_dtoa_r+0x270>
    fd3c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    fd40:	e68e      	b.n	fa60 <_dtoa_r+0x690>
    fd42:	f04f 0b01 	mov.w	fp, #1
    fd46:	46d9      	mov	r9, fp
    fd48:	e44f      	b.n	f5ea <_dtoa_r+0x21a>
    fd4a:	d103      	bne.n	fd54 <_dtoa_r+0x984>
    fd4c:	9b01      	ldr	r3, [sp, #4]
    fd4e:	07db      	lsls	r3, r3, #31
    fd50:	f53f ae4c 	bmi.w	f9ec <_dtoa_r+0x61c>
    fd54:	46d9      	mov	r9, fp
    fd56:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    fd5a:	2b30      	cmp	r3, #48	; 0x30
    fd5c:	d0fa      	beq.n	fd54 <_dtoa_r+0x984>
    fd5e:	e657      	b.n	fa10 <_dtoa_r+0x640>
    fd60:	9b04      	ldr	r3, [sp, #16]
    fd62:	9a00      	ldr	r2, [sp, #0]
    fd64:	3301      	adds	r3, #1
    fd66:	9304      	str	r3, [sp, #16]
    fd68:	2331      	movs	r3, #49	; 0x31
    fd6a:	7013      	strb	r3, [r2, #0]
    fd6c:	e650      	b.n	fa10 <_dtoa_r+0x640>
    fd6e:	f1ba 0f00 	cmp.w	sl, #0
    fd72:	f000 8123 	beq.w	ffbc <_dtoa_r+0xbec>
    fd76:	f202 4233 	addw	r2, r2, #1075	; 0x433
    fd7a:	9b06      	ldr	r3, [sp, #24]
    fd7c:	9309      	str	r3, [sp, #36]	; 0x24
    fd7e:	4413      	add	r3, r2
    fd80:	f8dd a020 	ldr.w	sl, [sp, #32]
    fd84:	9306      	str	r3, [sp, #24]
    fd86:	4490      	add	r8, r2
    fd88:	e592      	b.n	f8b0 <_dtoa_r+0x4e0>
    fd8a:	ee07 0a90 	vmov	s15, r0
    fd8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    fd92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    fd96:	eea6 5b07 	vfma.f64	d5, d6, d7
    fd9a:	ee15 2a90 	vmov	r2, s11
    fd9e:	ec51 0b15 	vmov	r0, r1, d5
    fda2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    fda6:	ec41 0b15 	vmov	d5, r0, r1
    fdaa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    fdae:	ee36 7b47 	vsub.f64	d7, d6, d7
    fdb2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fdba:	f300 8137 	bgt.w	1002c <_dtoa_r+0xc5c>
    fdbe:	eeb1 5b45 	vneg.f64	d5, d5
    fdc2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    fdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fdca:	f57f acfb 	bpl.w	f7c4 <_dtoa_r+0x3f4>
    fdce:	f04f 0a00 	mov.w	sl, #0
    fdd2:	4656      	mov	r6, sl
    fdd4:	e515      	b.n	f802 <_dtoa_r+0x432>
    fdd6:	f000 80f5 	beq.w	ffc4 <_dtoa_r+0xbf4>
    fdda:	9b04      	ldr	r3, [sp, #16]
    fddc:	4951      	ldr	r1, [pc, #324]	; (ff24 <_dtoa_r+0xb54>)
    fdde:	425a      	negs	r2, r3
    fde0:	f002 000f 	and.w	r0, r2, #15
    fde4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    fde8:	ed91 6b00 	vldr	d6, [r1]
    fdec:	1112      	asrs	r2, r2, #4
    fdee:	ee28 6b06 	vmul.f64	d6, d8, d6
    fdf2:	f000 8142 	beq.w	1007a <_dtoa_r+0xcaa>
    fdf6:	eeb0 7b46 	vmov.f64	d7, d6
    fdfa:	494b      	ldr	r1, [pc, #300]	; (ff28 <_dtoa_r+0xb58>)
    fdfc:	2600      	movs	r6, #0
    fdfe:	2002      	movs	r0, #2
    fe00:	07d3      	lsls	r3, r2, #31
    fe02:	d505      	bpl.n	fe10 <_dtoa_r+0xa40>
    fe04:	ed91 5b00 	vldr	d5, [r1]
    fe08:	3001      	adds	r0, #1
    fe0a:	2601      	movs	r6, #1
    fe0c:	ee27 7b05 	vmul.f64	d7, d7, d5
    fe10:	1052      	asrs	r2, r2, #1
    fe12:	f101 0108 	add.w	r1, r1, #8
    fe16:	d1f3      	bne.n	fe00 <_dtoa_r+0xa30>
    fe18:	2e00      	cmp	r6, #0
    fe1a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    fe1e:	e41e      	b.n	f65e <_dtoa_r+0x28e>
    fe20:	9b02      	ldr	r3, [sp, #8]
    fe22:	2b00      	cmp	r3, #0
    fe24:	f47f ae37 	bne.w	fa96 <_dtoa_r+0x6c6>
    fe28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fe2c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    fe30:	2a00      	cmp	r2, #0
    fe32:	f040 8137 	bne.w	100a4 <_dtoa_r+0xcd4>
    fe36:	4a3d      	ldr	r2, [pc, #244]	; (ff2c <_dtoa_r+0xb5c>)
    fe38:	400a      	ands	r2, r1
    fe3a:	2a00      	cmp	r2, #0
    fe3c:	f000 80fa 	beq.w	10034 <_dtoa_r+0xc64>
    fe40:	9b06      	ldr	r3, [sp, #24]
    fe42:	3301      	adds	r3, #1
    fe44:	9306      	str	r3, [sp, #24]
    fe46:	2301      	movs	r3, #1
    fe48:	f108 0801 	add.w	r8, r8, #1
    fe4c:	9308      	str	r3, [sp, #32]
    fe4e:	e56f      	b.n	f930 <_dtoa_r+0x560>
    fe50:	4629      	mov	r1, r5
    fe52:	9a08      	ldr	r2, [sp, #32]
    fe54:	4620      	mov	r0, r4
    fe56:	f7fe fddf 	bl	ea18 <__pow5mult>
    fe5a:	4605      	mov	r5, r0
    fe5c:	e55a      	b.n	f914 <_dtoa_r+0x544>
    fe5e:	2a00      	cmp	r2, #0
    fe60:	dd12      	ble.n	fe88 <_dtoa_r+0xab8>
    fe62:	4629      	mov	r1, r5
    fe64:	2201      	movs	r2, #1
    fe66:	4620      	mov	r0, r4
    fe68:	9301      	str	r3, [sp, #4]
    fe6a:	f7fe fe35 	bl	ead8 <__lshift>
    fe6e:	4651      	mov	r1, sl
    fe70:	4605      	mov	r5, r0
    fe72:	f7fe fea9 	bl	ebc8 <__mcmp>
    fe76:	2800      	cmp	r0, #0
    fe78:	9b01      	ldr	r3, [sp, #4]
    fe7a:	f340 80e1 	ble.w	10040 <_dtoa_r+0xc70>
    fe7e:	2b39      	cmp	r3, #57	; 0x39
    fe80:	f000 80ca 	beq.w	10018 <_dtoa_r+0xc48>
    fe84:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    fe88:	46b9      	mov	r9, r7
    fe8a:	f809 3b01 	strb.w	r3, [r9], #1
    fe8e:	9b04      	ldr	r3, [sp, #16]
    fe90:	3301      	adds	r3, #1
    fe92:	4637      	mov	r7, r6
    fe94:	9304      	str	r3, [sp, #16]
    fe96:	4646      	mov	r6, r8
    fe98:	e5ba      	b.n	fa10 <_dtoa_r+0x640>
    fe9a:	ee38 8b08 	vadd.f64	d8, d8, d8
    fe9e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fea6:	dc0a      	bgt.n	febe <_dtoa_r+0xaee>
    fea8:	eeb4 8b46 	vcmp.f64	d8, d6
    feac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    feb0:	f47f acdc 	bne.w	f86c <_dtoa_r+0x49c>
    feb4:	ee17 3a10 	vmov	r3, s14
    feb8:	07d8      	lsls	r0, r3, #31
    feba:	f57f acd7 	bpl.w	f86c <_dtoa_r+0x49c>
    febe:	9a00      	ldr	r2, [sp, #0]
    fec0:	e454      	b.n	f76c <_dtoa_r+0x39c>
    fec2:	6871      	ldr	r1, [r6, #4]
    fec4:	4620      	mov	r0, r4
    fec6:	f7fe fbf9 	bl	e6bc <_Balloc>
    feca:	4607      	mov	r7, r0
    fecc:	2800      	cmp	r0, #0
    fece:	f000 80de 	beq.w	1008e <_dtoa_r+0xcbe>
    fed2:	6933      	ldr	r3, [r6, #16]
    fed4:	3302      	adds	r3, #2
    fed6:	009a      	lsls	r2, r3, #2
    fed8:	f106 010c 	add.w	r1, r6, #12
    fedc:	300c      	adds	r0, #12
    fede:	f7fa fea5 	bl	ac2c <memcpy>
    fee2:	4639      	mov	r1, r7
    fee4:	2201      	movs	r2, #1
    fee6:	4620      	mov	r0, r4
    fee8:	f7fe fdf6 	bl	ead8 <__lshift>
    feec:	4680      	mov	r8, r0
    feee:	e5fe      	b.n	faee <_dtoa_r+0x71e>
    fef0:	9b06      	ldr	r3, [sp, #24]
    fef2:	eba3 0309 	sub.w	r3, r3, r9
    fef6:	9309      	str	r3, [sp, #36]	; 0x24
    fef8:	e4da      	b.n	f8b0 <_dtoa_r+0x4e0>
    fefa:	2b39      	cmp	r3, #57	; 0x39
    fefc:	f000 808c 	beq.w	10018 <_dtoa_r+0xc48>
    ff00:	46b9      	mov	r9, r7
    ff02:	3301      	adds	r3, #1
    ff04:	e7c1      	b.n	fe8a <_dtoa_r+0xaba>
    ff06:	9a04      	ldr	r2, [sp, #16]
    ff08:	3201      	adds	r2, #1
    ff0a:	4637      	mov	r7, r6
    ff0c:	9204      	str	r2, [sp, #16]
    ff0e:	4646      	mov	r6, r8
    ff10:	e55f      	b.n	f9d2 <_dtoa_r+0x602>
    ff12:	4629      	mov	r1, r5
    ff14:	4620      	mov	r0, r4
    ff16:	f7fe fd7f 	bl	ea18 <__pow5mult>
    ff1a:	4605      	mov	r5, r0
    ff1c:	e4fa      	b.n	f914 <_dtoa_r+0x544>
    ff1e:	bf00      	nop
    ff20:	20002d78 	.word	0x20002d78
    ff24:	20000b18 	.word	0x20000b18
    ff28:	20000af0 	.word	0x20000af0
    ff2c:	7ff00000 	.word	0x7ff00000
    ff30:	4b5e      	ldr	r3, [pc, #376]	; (100ac <_dtoa_r+0xcdc>)
    ff32:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    ff36:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    ff3a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    ff3e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    ff42:	ee36 7b47 	vsub.f64	d7, d6, d7
    ff46:	ec41 0b16 	vmov	d6, r0, r1
    ff4a:	ee15 1a90 	vmov	r1, s11
    ff4e:	ee23 3b06 	vmul.f64	d3, d3, d6
    ff52:	9800      	ldr	r0, [sp, #0]
    ff54:	3130      	adds	r1, #48	; 0x30
    ff56:	2a01      	cmp	r2, #1
    ff58:	f800 1b01 	strb.w	r1, [r0], #1
    ff5c:	f000 8083 	beq.w	10066 <_dtoa_r+0xc96>
    ff60:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ff64:	9b00      	ldr	r3, [sp, #0]
    ff66:	1899      	adds	r1, r3, r2
    ff68:	ee27 7b04 	vmul.f64	d7, d7, d4
    ff6c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ff70:	ee16 3a90 	vmov	r3, s13
    ff74:	3330      	adds	r3, #48	; 0x30
    ff76:	f800 3b01 	strb.w	r3, [r0], #1
    ff7a:	4281      	cmp	r1, r0
    ff7c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    ff80:	ee37 7b45 	vsub.f64	d7, d7, d5
    ff84:	d1f0      	bne.n	ff68 <_dtoa_r+0xb98>
    ff86:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ff8a:	ee33 5b06 	vadd.f64	d5, d3, d6
    ff8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    ff92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff96:	f53f abe3 	bmi.w	f760 <_dtoa_r+0x390>
    ff9a:	ee36 6b43 	vsub.f64	d6, d6, d3
    ff9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ffa6:	f77f ac0d 	ble.w	f7c4 <_dtoa_r+0x3f4>
    ffaa:	4689      	mov	r9, r1
    ffac:	3901      	subs	r1, #1
    ffae:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    ffb2:	2b30      	cmp	r3, #48	; 0x30
    ffb4:	d0f9      	beq.n	ffaa <_dtoa_r+0xbda>
    ffb6:	1c73      	adds	r3, r6, #1
    ffb8:	9304      	str	r3, [sp, #16]
    ffba:	e539      	b.n	fa30 <_dtoa_r+0x660>
    ffbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ffbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    ffc2:	e6da      	b.n	fd7a <_dtoa_r+0x9aa>
    ffc4:	2002      	movs	r0, #2
    ffc6:	eeb0 6b48 	vmov.f64	d6, d8
    ffca:	f7ff bb48 	b.w	f65e <_dtoa_r+0x28e>
    ffce:	f1b9 0f00 	cmp.w	r9, #0
    ffd2:	f43f aeda 	beq.w	fd8a <_dtoa_r+0x9ba>
    ffd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ffd8:	2a00      	cmp	r2, #0
    ffda:	f77f abf3 	ble.w	f7c4 <_dtoa_r+0x3f4>
    ffde:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ffe2:	ee26 6b04 	vmul.f64	d6, d6, d4
    ffe6:	3001      	adds	r0, #1
    ffe8:	ee07 0a90 	vmov	s15, r0
    ffec:	9b04      	ldr	r3, [sp, #16]
    ffee:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    fff2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    fff6:	eea6 7b05 	vfma.f64	d7, d6, d5
    fffa:	ee17 ca90 	vmov	ip, s15
    fffe:	ec51 0b17 	vmov	r0, r1, d7
   10002:	1e5e      	subs	r6, r3, #1
   10004:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   10008:	f7ff bb47 	b.w	f69a <_dtoa_r+0x2ca>
   1000c:	9b04      	ldr	r3, [sp, #16]
   1000e:	3301      	adds	r3, #1
   10010:	9304      	str	r3, [sp, #16]
   10012:	2331      	movs	r3, #49	; 0x31
   10014:	f7ff bbb1 	b.w	f77a <_dtoa_r+0x3aa>
   10018:	9b04      	ldr	r3, [sp, #16]
   1001a:	46bb      	mov	fp, r7
   1001c:	3301      	adds	r3, #1
   1001e:	9304      	str	r3, [sp, #16]
   10020:	2339      	movs	r3, #57	; 0x39
   10022:	4637      	mov	r7, r6
   10024:	f80b 3b01 	strb.w	r3, [fp], #1
   10028:	4646      	mov	r6, r8
   1002a:	e4e1      	b.n	f9f0 <_dtoa_r+0x620>
   1002c:	f04f 0a00 	mov.w	sl, #0
   10030:	4656      	mov	r6, sl
   10032:	e653      	b.n	fcdc <_dtoa_r+0x90c>
   10034:	9208      	str	r2, [sp, #32]
   10036:	e47b      	b.n	f930 <_dtoa_r+0x560>
   10038:	1c73      	adds	r3, r6, #1
   1003a:	9304      	str	r3, [sp, #16]
   1003c:	4689      	mov	r9, r1
   1003e:	e4f7      	b.n	fa30 <_dtoa_r+0x660>
   10040:	f47f af22 	bne.w	fe88 <_dtoa_r+0xab8>
   10044:	07da      	lsls	r2, r3, #31
   10046:	f57f af1f 	bpl.w	fe88 <_dtoa_r+0xab8>
   1004a:	e718      	b.n	fe7e <_dtoa_r+0xaae>
   1004c:	2b39      	cmp	r3, #57	; 0x39
   1004e:	d0e3      	beq.n	10018 <_dtoa_r+0xc48>
   10050:	f1b9 0f00 	cmp.w	r9, #0
   10054:	f73f af16 	bgt.w	fe84 <_dtoa_r+0xab4>
   10058:	e716      	b.n	fe88 <_dtoa_r+0xab8>
   1005a:	9b01      	ldr	r3, [sp, #4]
   1005c:	2b02      	cmp	r3, #2
   1005e:	f73f ae28 	bgt.w	fcb2 <_dtoa_r+0x8e2>
   10062:	9704      	str	r7, [sp, #16]
   10064:	e5ba      	b.n	fbdc <_dtoa_r+0x80c>
   10066:	4601      	mov	r1, r0
   10068:	e78d      	b.n	ff86 <_dtoa_r+0xbb6>
   1006a:	9b01      	ldr	r3, [sp, #4]
   1006c:	2b02      	cmp	r3, #2
   1006e:	f73f ae20 	bgt.w	fcb2 <_dtoa_r+0x8e2>
   10072:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   10076:	9704      	str	r7, [sp, #16]
   10078:	e52b      	b.n	fad2 <_dtoa_r+0x702>
   1007a:	2002      	movs	r0, #2
   1007c:	f7ff baef 	b.w	f65e <_dtoa_r+0x28e>
   10080:	4b0b      	ldr	r3, [pc, #44]	; (100b0 <_dtoa_r+0xce0>)
   10082:	480c      	ldr	r0, [pc, #48]	; (100b4 <_dtoa_r+0xce4>)
   10084:	2200      	movs	r2, #0
   10086:	f240 11af 	movw	r1, #431	; 0x1af
   1008a:	f7ff f8b1 	bl	f1f0 <__assert_func>
   1008e:	4b08      	ldr	r3, [pc, #32]	; (100b0 <_dtoa_r+0xce0>)
   10090:	4808      	ldr	r0, [pc, #32]	; (100b4 <_dtoa_r+0xce4>)
   10092:	463a      	mov	r2, r7
   10094:	f240 21ef 	movw	r1, #751	; 0x2ef
   10098:	f7ff f8aa 	bl	f1f0 <__assert_func>
   1009c:	4b06      	ldr	r3, [pc, #24]	; (100b8 <_dtoa_r+0xce8>)
   1009e:	9300      	str	r3, [sp, #0]
   100a0:	f7ff b9d2 	b.w	f448 <_dtoa_r+0x78>
   100a4:	9b02      	ldr	r3, [sp, #8]
   100a6:	9308      	str	r3, [sp, #32]
   100a8:	e4f7      	b.n	fa9a <_dtoa_r+0x6ca>
   100aa:	bf00      	nop
   100ac:	20000b18 	.word	0x20000b18
   100b0:	20002bd0 	.word	0x20002bd0
   100b4:	20002d7c 	.word	0x20002d7c
   100b8:	20002d6c 	.word	0x20002d6c

000100bc <_wcrtomb_r>:
   100bc:	b570      	push	{r4, r5, r6, lr}
   100be:	4605      	mov	r5, r0
   100c0:	b084      	sub	sp, #16
   100c2:	b15b      	cbz	r3, 100dc <_wcrtomb_r+0x20>
   100c4:	461c      	mov	r4, r3
   100c6:	b169      	cbz	r1, 100e4 <_wcrtomb_r+0x28>
   100c8:	4b0e      	ldr	r3, [pc, #56]	; (10104 <_wcrtomb_r+0x48>)
   100ca:	4628      	mov	r0, r5
   100cc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   100d0:	4623      	mov	r3, r4
   100d2:	47b0      	blx	r6
   100d4:	1c43      	adds	r3, r0, #1
   100d6:	d00f      	beq.n	100f8 <_wcrtomb_r+0x3c>
   100d8:	b004      	add	sp, #16
   100da:	bd70      	pop	{r4, r5, r6, pc}
   100dc:	f500 7482 	add.w	r4, r0, #260	; 0x104
   100e0:	2900      	cmp	r1, #0
   100e2:	d1f1      	bne.n	100c8 <_wcrtomb_r+0xc>
   100e4:	4a07      	ldr	r2, [pc, #28]	; (10104 <_wcrtomb_r+0x48>)
   100e6:	4623      	mov	r3, r4
   100e8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   100ec:	4628      	mov	r0, r5
   100ee:	460a      	mov	r2, r1
   100f0:	a901      	add	r1, sp, #4
   100f2:	47b0      	blx	r6
   100f4:	1c43      	adds	r3, r0, #1
   100f6:	d1ef      	bne.n	100d8 <_wcrtomb_r+0x1c>
   100f8:	2200      	movs	r2, #0
   100fa:	238a      	movs	r3, #138	; 0x8a
   100fc:	6022      	str	r2, [r4, #0]
   100fe:	602b      	str	r3, [r5, #0]
   10100:	b004      	add	sp, #16
   10102:	bd70      	pop	{r4, r5, r6, pc}
   10104:	20003758 	.word	0x20003758

00010108 <_wcsrtombs_r>:
   10108:	b510      	push	{r4, lr}
   1010a:	b082      	sub	sp, #8
   1010c:	9c04      	ldr	r4, [sp, #16]
   1010e:	e9cd 3400 	strd	r3, r4, [sp]
   10112:	f04f 33ff 	mov.w	r3, #4294967295
   10116:	f001 fb47 	bl	117a8 <_wcsnrtombs_r>
   1011a:	b002      	add	sp, #8
   1011c:	bd10      	pop	{r4, pc}
   1011e:	bf00      	nop

00010120 <fiprintf>:
   10120:	b40e      	push	{r1, r2, r3}
   10122:	b510      	push	{r4, lr}
   10124:	b083      	sub	sp, #12
   10126:	ab05      	add	r3, sp, #20
   10128:	4c06      	ldr	r4, [pc, #24]	; (10144 <fiprintf+0x24>)
   1012a:	f853 2b04 	ldr.w	r2, [r3], #4
   1012e:	9301      	str	r3, [sp, #4]
   10130:	4601      	mov	r1, r0
   10132:	6820      	ldr	r0, [r4, #0]
   10134:	f000 f844 	bl	101c0 <_vfiprintf_r>
   10138:	b003      	add	sp, #12
   1013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1013e:	b003      	add	sp, #12
   10140:	4770      	bx	lr
   10142:	bf00      	nop
   10144:	20003ce0 	.word	0x20003ce0

00010148 <__sprint_r.part.0>:
   10148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1014c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1014e:	049c      	lsls	r4, r3, #18
   10150:	4690      	mov	r8, r2
   10152:	d52d      	bpl.n	101b0 <__sprint_r.part.0+0x68>
   10154:	6893      	ldr	r3, [r2, #8]
   10156:	6812      	ldr	r2, [r2, #0]
   10158:	b343      	cbz	r3, 101ac <__sprint_r.part.0+0x64>
   1015a:	468b      	mov	fp, r1
   1015c:	4606      	mov	r6, r0
   1015e:	f102 0908 	add.w	r9, r2, #8
   10162:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   10166:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1016a:	d015      	beq.n	10198 <__sprint_r.part.0+0x50>
   1016c:	3d04      	subs	r5, #4
   1016e:	2400      	movs	r4, #0
   10170:	e001      	b.n	10176 <__sprint_r.part.0+0x2e>
   10172:	42a7      	cmp	r7, r4
   10174:	d00e      	beq.n	10194 <__sprint_r.part.0+0x4c>
   10176:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1017a:	465a      	mov	r2, fp
   1017c:	4630      	mov	r0, r6
   1017e:	f001 fa5b 	bl	11638 <_fputwc_r>
   10182:	1c43      	adds	r3, r0, #1
   10184:	f104 0401 	add.w	r4, r4, #1
   10188:	d1f3      	bne.n	10172 <__sprint_r.part.0+0x2a>
   1018a:	2300      	movs	r3, #0
   1018c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10194:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10198:	f02a 0a03 	bic.w	sl, sl, #3
   1019c:	eba3 030a 	sub.w	r3, r3, sl
   101a0:	f8c8 3008 	str.w	r3, [r8, #8]
   101a4:	f109 0908 	add.w	r9, r9, #8
   101a8:	2b00      	cmp	r3, #0
   101aa:	d1da      	bne.n	10162 <__sprint_r.part.0+0x1a>
   101ac:	2000      	movs	r0, #0
   101ae:	e7ec      	b.n	1018a <__sprint_r.part.0+0x42>
   101b0:	f001 f80c 	bl	111cc <__sfvwrite_r>
   101b4:	2300      	movs	r3, #0
   101b6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   101ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101be:	bf00      	nop

000101c0 <_vfiprintf_r>:
   101c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101c4:	ed2d 8b02 	vpush	{d8}
   101c8:	b0c5      	sub	sp, #276	; 0x114
   101ca:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   101ce:	4683      	mov	fp, r0
   101d0:	ee08 1a10 	vmov	s16, r1
   101d4:	4616      	mov	r6, r2
   101d6:	2100      	movs	r1, #0
   101d8:	2208      	movs	r2, #8
   101da:	4650      	mov	r0, sl
   101dc:	461c      	mov	r4, r3
   101de:	9307      	str	r3, [sp, #28]
   101e0:	f7fd fec0 	bl	df64 <memset>
   101e4:	f1bb 0f00 	cmp.w	fp, #0
   101e8:	d004      	beq.n	101f4 <_vfiprintf_r+0x34>
   101ea:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   101ee:	2b00      	cmp	r3, #0
   101f0:	f000 86a0 	beq.w	10f34 <_vfiprintf_r+0xd74>
   101f4:	ee18 2a10 	vmov	r2, s16
   101f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   101fa:	07db      	lsls	r3, r3, #31
   101fc:	f140 8513 	bpl.w	10c26 <_vfiprintf_r+0xa66>
   10200:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10204:	b28a      	uxth	r2, r1
   10206:	0495      	lsls	r5, r2, #18
   10208:	d40b      	bmi.n	10222 <_vfiprintf_r+0x62>
   1020a:	ee18 3a10 	vmov	r3, s16
   1020e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   10212:	8199      	strh	r1, [r3, #12]
   10214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10216:	b28a      	uxth	r2, r1
   10218:	ee18 1a10 	vmov	r1, s16
   1021c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10220:	664b      	str	r3, [r1, #100]	; 0x64
   10222:	0710      	lsls	r0, r2, #28
   10224:	f140 8105 	bpl.w	10432 <_vfiprintf_r+0x272>
   10228:	ee18 3a10 	vmov	r3, s16
   1022c:	691b      	ldr	r3, [r3, #16]
   1022e:	2b00      	cmp	r3, #0
   10230:	f000 80ff 	beq.w	10432 <_vfiprintf_r+0x272>
   10234:	f002 031a 	and.w	r3, r2, #26
   10238:	2b0a      	cmp	r3, #10
   1023a:	f000 810a 	beq.w	10452 <_vfiprintf_r+0x292>
   1023e:	2300      	movs	r3, #0
   10240:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   10244:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   10248:	aa1b      	add	r2, sp, #108	; 0x6c
   1024a:	930c      	str	r3, [sp, #48]	; 0x30
   1024c:	9218      	str	r2, [sp, #96]	; 0x60
   1024e:	4691      	mov	r9, r2
   10250:	930b      	str	r3, [sp, #44]	; 0x2c
   10252:	9305      	str	r3, [sp, #20]
   10254:	46b0      	mov	r8, r6
   10256:	4644      	mov	r4, r8
   10258:	4ba8      	ldr	r3, [pc, #672]	; (104fc <_vfiprintf_r+0x33c>)
   1025a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1025e:	f7fd ff05 	bl	e06c <__locale_mb_cur_max>
   10262:	4622      	mov	r2, r4
   10264:	4603      	mov	r3, r0
   10266:	a912      	add	r1, sp, #72	; 0x48
   10268:	f8cd a000 	str.w	sl, [sp]
   1026c:	4658      	mov	r0, fp
   1026e:	47a8      	blx	r5
   10270:	2800      	cmp	r0, #0
   10272:	f000 8145 	beq.w	10500 <_vfiprintf_r+0x340>
   10276:	f2c0 8139 	blt.w	104ec <_vfiprintf_r+0x32c>
   1027a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1027c:	2a25      	cmp	r2, #37	; 0x25
   1027e:	4603      	mov	r3, r0
   10280:	d001      	beq.n	10286 <_vfiprintf_r+0xc6>
   10282:	441c      	add	r4, r3
   10284:	e7e8      	b.n	10258 <_vfiprintf_r+0x98>
   10286:	ebb4 0608 	subs.w	r6, r4, r8
   1028a:	4605      	mov	r5, r0
   1028c:	f040 813c 	bne.w	10508 <_vfiprintf_r+0x348>
   10290:	2300      	movs	r3, #0
   10292:	7861      	ldrb	r1, [r4, #1]
   10294:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10298:	f104 0801 	add.w	r8, r4, #1
   1029c:	9306      	str	r3, [sp, #24]
   1029e:	f04f 37ff 	mov.w	r7, #4294967295
   102a2:	461e      	mov	r6, r3
   102a4:	242b      	movs	r4, #43	; 0x2b
   102a6:	f108 0801 	add.w	r8, r8, #1
   102aa:	f1a1 0320 	sub.w	r3, r1, #32
   102ae:	2b5a      	cmp	r3, #90	; 0x5a
   102b0:	f200 8178 	bhi.w	105a4 <_vfiprintf_r+0x3e4>
   102b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   102b8:	017602b5 	.word	0x017602b5
   102bc:	02b00176 	.word	0x02b00176
   102c0:	01760176 	.word	0x01760176
   102c4:	006a0176 	.word	0x006a0176
   102c8:	01760176 	.word	0x01760176
   102cc:	028d027d 	.word	0x028d027d
   102d0:	02880176 	.word	0x02880176
   102d4:	01760297 	.word	0x01760297
   102d8:	005b0292 	.word	0x005b0292
   102dc:	005b005b 	.word	0x005b005b
   102e0:	005b005b 	.word	0x005b005b
   102e4:	005b005b 	.word	0x005b005b
   102e8:	005b005b 	.word	0x005b005b
   102ec:	01760176 	.word	0x01760176
   102f0:	01760176 	.word	0x01760176
   102f4:	01760176 	.word	0x01760176
   102f8:	01760176 	.word	0x01760176
   102fc:	025c0176 	.word	0x025c0176
   10300:	01760084 	.word	0x01760084
   10304:	01760176 	.word	0x01760176
   10308:	01760176 	.word	0x01760176
   1030c:	01760176 	.word	0x01760176
   10310:	01760176 	.word	0x01760176
   10314:	00e80176 	.word	0x00e80176
   10318:	01760176 	.word	0x01760176
   1031c:	02330176 	.word	0x02330176
   10320:	02da0176 	.word	0x02da0176
   10324:	01760176 	.word	0x01760176
   10328:	0176058b 	.word	0x0176058b
   1032c:	01760176 	.word	0x01760176
   10330:	01760176 	.word	0x01760176
   10334:	01760176 	.word	0x01760176
   10338:	01760176 	.word	0x01760176
   1033c:	025c0176 	.word	0x025c0176
   10340:	01760086 	.word	0x01760086
   10344:	01760176 	.word	0x01760176
   10348:	008602cd 	.word	0x008602cd
   1034c:	0176007f 	.word	0x0176007f
   10350:	017602c0 	.word	0x017602c0
   10354:	00ea02fd 	.word	0x00ea02fd
   10358:	007f02ed 	.word	0x007f02ed
   1035c:	02330176 	.word	0x02330176
   10360:	0569007c 	.word	0x0569007c
   10364:	01760176 	.word	0x01760176
   10368:	0176056b 	.word	0x0176056b
   1036c:	007c      	.short	0x007c
   1036e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10372:	2200      	movs	r2, #0
   10374:	f818 1b01 	ldrb.w	r1, [r8], #1
   10378:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1037c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10380:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10384:	2b09      	cmp	r3, #9
   10386:	d9f5      	bls.n	10374 <_vfiprintf_r+0x1b4>
   10388:	9206      	str	r2, [sp, #24]
   1038a:	e78e      	b.n	102aa <_vfiprintf_r+0xea>
   1038c:	4658      	mov	r0, fp
   1038e:	f7fe fed7 	bl	f140 <_localeconv_r>
   10392:	6843      	ldr	r3, [r0, #4]
   10394:	930d      	str	r3, [sp, #52]	; 0x34
   10396:	4618      	mov	r0, r3
   10398:	f7fd ff72 	bl	e280 <strlen>
   1039c:	900e      	str	r0, [sp, #56]	; 0x38
   1039e:	4605      	mov	r5, r0
   103a0:	4658      	mov	r0, fp
   103a2:	f7fe fecd 	bl	f140 <_localeconv_r>
   103a6:	6883      	ldr	r3, [r0, #8]
   103a8:	930b      	str	r3, [sp, #44]	; 0x2c
   103aa:	2d00      	cmp	r5, #0
   103ac:	f040 84d6 	bne.w	10d5c <_vfiprintf_r+0xb9c>
   103b0:	f898 1000 	ldrb.w	r1, [r8]
   103b4:	e777      	b.n	102a6 <_vfiprintf_r+0xe6>
   103b6:	f898 1000 	ldrb.w	r1, [r8]
   103ba:	f046 0620 	orr.w	r6, r6, #32
   103be:	e772      	b.n	102a6 <_vfiprintf_r+0xe6>
   103c0:	f046 0610 	orr.w	r6, r6, #16
   103c4:	06b4      	lsls	r4, r6, #26
   103c6:	f140 818e 	bpl.w	106e6 <_vfiprintf_r+0x526>
   103ca:	9b07      	ldr	r3, [sp, #28]
   103cc:	3307      	adds	r3, #7
   103ce:	f023 0307 	bic.w	r3, r3, #7
   103d2:	461a      	mov	r2, r3
   103d4:	6859      	ldr	r1, [r3, #4]
   103d6:	f852 3b08 	ldr.w	r3, [r2], #8
   103da:	9207      	str	r2, [sp, #28]
   103dc:	460a      	mov	r2, r1
   103de:	2900      	cmp	r1, #0
   103e0:	f2c0 8470 	blt.w	10cc4 <_vfiprintf_r+0xb04>
   103e4:	1c79      	adds	r1, r7, #1
   103e6:	f000 85a2 	beq.w	10f2e <_vfiprintf_r+0xd6e>
   103ea:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   103ee:	9103      	str	r1, [sp, #12]
   103f0:	ea53 0102 	orrs.w	r1, r3, r2
   103f4:	f000 843f 	beq.w	10c76 <_vfiprintf_r+0xab6>
   103f8:	2b0a      	cmp	r3, #10
   103fa:	f172 0100 	sbcs.w	r1, r2, #0
   103fe:	f080 8541 	bcs.w	10e84 <_vfiprintf_r+0xcc4>
   10402:	3330      	adds	r3, #48	; 0x30
   10404:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   10408:	9e03      	ldr	r6, [sp, #12]
   1040a:	2301      	movs	r3, #1
   1040c:	9304      	str	r3, [sp, #16]
   1040e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   10412:	9b04      	ldr	r3, [sp, #16]
   10414:	42bb      	cmp	r3, r7
   10416:	bfb8      	it	lt
   10418:	463b      	movlt	r3, r7
   1041a:	9303      	str	r3, [sp, #12]
   1041c:	2300      	movs	r3, #0
   1041e:	9308      	str	r3, [sp, #32]
   10420:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   10424:	2b00      	cmp	r3, #0
   10426:	f000 80cb 	beq.w	105c0 <_vfiprintf_r+0x400>
   1042a:	9b03      	ldr	r3, [sp, #12]
   1042c:	3301      	adds	r3, #1
   1042e:	9303      	str	r3, [sp, #12]
   10430:	e0c6      	b.n	105c0 <_vfiprintf_r+0x400>
   10432:	ee18 1a10 	vmov	r1, s16
   10436:	4658      	mov	r0, fp
   10438:	ee18 5a10 	vmov	r5, s16
   1043c:	f001 f840 	bl	114c0 <__swsetup_r>
   10440:	2800      	cmp	r0, #0
   10442:	f040 8652 	bne.w	110ea <_vfiprintf_r+0xf2a>
   10446:	89aa      	ldrh	r2, [r5, #12]
   10448:	f002 031a 	and.w	r3, r2, #26
   1044c:	2b0a      	cmp	r3, #10
   1044e:	f47f aef6 	bne.w	1023e <_vfiprintf_r+0x7e>
   10452:	ee18 1a10 	vmov	r1, s16
   10456:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1045a:	2b00      	cmp	r3, #0
   1045c:	f6ff aeef 	blt.w	1023e <_vfiprintf_r+0x7e>
   10460:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10462:	07db      	lsls	r3, r3, #31
   10464:	d402      	bmi.n	1046c <_vfiprintf_r+0x2ac>
   10466:	0597      	lsls	r7, r2, #22
   10468:	f140 8612 	bpl.w	11090 <_vfiprintf_r+0xed0>
   1046c:	ee18 1a10 	vmov	r1, s16
   10470:	4623      	mov	r3, r4
   10472:	4632      	mov	r2, r6
   10474:	4658      	mov	r0, fp
   10476:	f000 fe69 	bl	1114c <__sbprintf>
   1047a:	9005      	str	r0, [sp, #20]
   1047c:	9805      	ldr	r0, [sp, #20]
   1047e:	b045      	add	sp, #276	; 0x114
   10480:	ecbd 8b02 	vpop	{d8}
   10484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10488:	f046 0610 	orr.w	r6, r6, #16
   1048c:	f016 0220 	ands.w	r2, r6, #32
   10490:	f000 8136 	beq.w	10700 <_vfiprintf_r+0x540>
   10494:	9b07      	ldr	r3, [sp, #28]
   10496:	3307      	adds	r3, #7
   10498:	f023 0307 	bic.w	r3, r3, #7
   1049c:	4619      	mov	r1, r3
   1049e:	685a      	ldr	r2, [r3, #4]
   104a0:	f851 3b08 	ldr.w	r3, [r1], #8
   104a4:	9107      	str	r1, [sp, #28]
   104a6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   104aa:	9103      	str	r1, [sp, #12]
   104ac:	2100      	movs	r1, #0
   104ae:	2000      	movs	r0, #0
   104b0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   104b4:	1c78      	adds	r0, r7, #1
   104b6:	f000 8210 	beq.w	108da <_vfiprintf_r+0x71a>
   104ba:	9803      	ldr	r0, [sp, #12]
   104bc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   104c0:	ea53 0002 	orrs.w	r0, r3, r2
   104c4:	f040 8208 	bne.w	108d8 <_vfiprintf_r+0x718>
   104c8:	2f00      	cmp	r7, #0
   104ca:	f040 8538 	bne.w	10f3e <_vfiprintf_r+0xd7e>
   104ce:	2900      	cmp	r1, #0
   104d0:	f040 83d5 	bne.w	10c7e <_vfiprintf_r+0xabe>
   104d4:	9b03      	ldr	r3, [sp, #12]
   104d6:	f013 0301 	ands.w	r3, r3, #1
   104da:	9304      	str	r3, [sp, #16]
   104dc:	f000 8411 	beq.w	10d02 <_vfiprintf_r+0xb42>
   104e0:	2330      	movs	r3, #48	; 0x30
   104e2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   104e6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   104ea:	e792      	b.n	10412 <_vfiprintf_r+0x252>
   104ec:	2208      	movs	r2, #8
   104ee:	2100      	movs	r1, #0
   104f0:	4650      	mov	r0, sl
   104f2:	f7fd fd37 	bl	df64 <memset>
   104f6:	2301      	movs	r3, #1
   104f8:	441c      	add	r4, r3
   104fa:	e6ad      	b.n	10258 <_vfiprintf_r+0x98>
   104fc:	20003758 	.word	0x20003758
   10500:	ebb4 0608 	subs.w	r6, r4, r8
   10504:	4605      	mov	r5, r0
   10506:	d01b      	beq.n	10540 <_vfiprintf_r+0x380>
   10508:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1050a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1050c:	3301      	adds	r3, #1
   1050e:	4432      	add	r2, r6
   10510:	2b07      	cmp	r3, #7
   10512:	e9c9 8600 	strd	r8, r6, [r9]
   10516:	921a      	str	r2, [sp, #104]	; 0x68
   10518:	9319      	str	r3, [sp, #100]	; 0x64
   1051a:	dd1c      	ble.n	10556 <_vfiprintf_r+0x396>
   1051c:	2a00      	cmp	r2, #0
   1051e:	f000 83a6 	beq.w	10c6e <_vfiprintf_r+0xaae>
   10522:	ee18 1a10 	vmov	r1, s16
   10526:	aa18      	add	r2, sp, #96	; 0x60
   10528:	4658      	mov	r0, fp
   1052a:	f7ff fe0d 	bl	10148 <__sprint_r.part.0>
   1052e:	bb20      	cbnz	r0, 1057a <_vfiprintf_r+0x3ba>
   10530:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10534:	9b05      	ldr	r3, [sp, #20]
   10536:	4433      	add	r3, r6
   10538:	9305      	str	r3, [sp, #20]
   1053a:	2d00      	cmp	r5, #0
   1053c:	f47f aea8 	bne.w	10290 <_vfiprintf_r+0xd0>
   10540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10542:	2b00      	cmp	r3, #0
   10544:	f040 85c1 	bne.w	110ca <_vfiprintf_r+0xf0a>
   10548:	ee18 3a10 	vmov	r3, s16
   1054c:	2200      	movs	r2, #0
   1054e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   10552:	9219      	str	r2, [sp, #100]	; 0x64
   10554:	e015      	b.n	10582 <_vfiprintf_r+0x3c2>
   10556:	f109 0908 	add.w	r9, r9, #8
   1055a:	e7eb      	b.n	10534 <_vfiprintf_r+0x374>
   1055c:	ee18 1a10 	vmov	r1, s16
   10560:	aa18      	add	r2, sp, #96	; 0x60
   10562:	4658      	mov	r0, fp
   10564:	f7ff fdf0 	bl	10148 <__sprint_r.part.0>
   10568:	2800      	cmp	r0, #0
   1056a:	f000 80a6 	beq.w	106ba <_vfiprintf_r+0x4fa>
   1056e:	9b08      	ldr	r3, [sp, #32]
   10570:	b11b      	cbz	r3, 1057a <_vfiprintf_r+0x3ba>
   10572:	9908      	ldr	r1, [sp, #32]
   10574:	4658      	mov	r0, fp
   10576:	f7fd ff85 	bl	e484 <_free_r>
   1057a:	ee18 3a10 	vmov	r3, s16
   1057e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   10582:	ee18 2a10 	vmov	r2, s16
   10586:	6e52      	ldr	r2, [r2, #100]	; 0x64
   10588:	f012 0f01 	tst.w	r2, #1
   1058c:	b29a      	uxth	r2, r3
   1058e:	f000 80a0 	beq.w	106d2 <_vfiprintf_r+0x512>
   10592:	0650      	lsls	r0, r2, #25
   10594:	f100 85b2 	bmi.w	110fc <_vfiprintf_r+0xf3c>
   10598:	9805      	ldr	r0, [sp, #20]
   1059a:	b045      	add	sp, #276	; 0x114
   1059c:	ecbd 8b02 	vpop	{d8}
   105a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105a4:	2900      	cmp	r1, #0
   105a6:	d0cb      	beq.n	10540 <_vfiprintf_r+0x380>
   105a8:	2300      	movs	r3, #0
   105aa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   105ae:	2301      	movs	r3, #1
   105b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   105b4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   105b8:	ac2b      	add	r4, sp, #172	; 0xac
   105ba:	2300      	movs	r3, #0
   105bc:	9308      	str	r3, [sp, #32]
   105be:	461f      	mov	r7, r3
   105c0:	f016 0302 	ands.w	r3, r6, #2
   105c4:	9309      	str	r3, [sp, #36]	; 0x24
   105c6:	d002      	beq.n	105ce <_vfiprintf_r+0x40e>
   105c8:	9b03      	ldr	r3, [sp, #12]
   105ca:	3302      	adds	r3, #2
   105cc:	9303      	str	r3, [sp, #12]
   105ce:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   105d2:	930a      	str	r3, [sp, #40]	; 0x28
   105d4:	d105      	bne.n	105e2 <_vfiprintf_r+0x422>
   105d6:	9b06      	ldr	r3, [sp, #24]
   105d8:	9a03      	ldr	r2, [sp, #12]
   105da:	1a9d      	subs	r5, r3, r2
   105dc:	2d00      	cmp	r5, #0
   105de:	f300 827b 	bgt.w	10ad8 <_vfiprintf_r+0x918>
   105e2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   105e6:	1c41      	adds	r1, r0, #1
   105e8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   105ec:	b182      	cbz	r2, 10610 <_vfiprintf_r+0x450>
   105ee:	2201      	movs	r2, #1
   105f0:	3301      	adds	r3, #1
   105f2:	f8c9 2004 	str.w	r2, [r9, #4]
   105f6:	2907      	cmp	r1, #7
   105f8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   105fc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10600:	f8c9 2000 	str.w	r2, [r9]
   10604:	f300 824a 	bgt.w	10a9c <_vfiprintf_r+0x8dc>
   10608:	4608      	mov	r0, r1
   1060a:	f109 0908 	add.w	r9, r9, #8
   1060e:	3101      	adds	r1, #1
   10610:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10612:	b1e2      	cbz	r2, 1064e <_vfiprintf_r+0x48e>
   10614:	aa11      	add	r2, sp, #68	; 0x44
   10616:	3302      	adds	r3, #2
   10618:	f8c9 2000 	str.w	r2, [r9]
   1061c:	2907      	cmp	r1, #7
   1061e:	f04f 0202 	mov.w	r2, #2
   10622:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10626:	f8c9 2004 	str.w	r2, [r9, #4]
   1062a:	f340 8250 	ble.w	10ace <_vfiprintf_r+0x90e>
   1062e:	2b00      	cmp	r3, #0
   10630:	f000 8343 	beq.w	10cba <_vfiprintf_r+0xafa>
   10634:	ee18 1a10 	vmov	r1, s16
   10638:	aa18      	add	r2, sp, #96	; 0x60
   1063a:	4658      	mov	r0, fp
   1063c:	f7ff fd84 	bl	10148 <__sprint_r.part.0>
   10640:	2800      	cmp	r0, #0
   10642:	d194      	bne.n	1056e <_vfiprintf_r+0x3ae>
   10644:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10648:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1064c:	1c41      	adds	r1, r0, #1
   1064e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10650:	2a80      	cmp	r2, #128	; 0x80
   10652:	f000 8184 	beq.w	1095e <_vfiprintf_r+0x79e>
   10656:	9a04      	ldr	r2, [sp, #16]
   10658:	1abd      	subs	r5, r7, r2
   1065a:	2d00      	cmp	r5, #0
   1065c:	f300 81d7 	bgt.w	10a0e <_vfiprintf_r+0x84e>
   10660:	9a04      	ldr	r2, [sp, #16]
   10662:	f8c9 4000 	str.w	r4, [r9]
   10666:	4413      	add	r3, r2
   10668:	2907      	cmp	r1, #7
   1066a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1066e:	f8c9 2004 	str.w	r2, [r9, #4]
   10672:	f340 816e 	ble.w	10952 <_vfiprintf_r+0x792>
   10676:	2b00      	cmp	r3, #0
   10678:	f000 8275 	beq.w	10b66 <_vfiprintf_r+0x9a6>
   1067c:	ee18 1a10 	vmov	r1, s16
   10680:	aa18      	add	r2, sp, #96	; 0x60
   10682:	4658      	mov	r0, fp
   10684:	f7ff fd60 	bl	10148 <__sprint_r.part.0>
   10688:	2800      	cmp	r0, #0
   1068a:	f47f af70 	bne.w	1056e <_vfiprintf_r+0x3ae>
   1068e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10690:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10694:	0775      	lsls	r5, r6, #29
   10696:	d505      	bpl.n	106a4 <_vfiprintf_r+0x4e4>
   10698:	9a06      	ldr	r2, [sp, #24]
   1069a:	9903      	ldr	r1, [sp, #12]
   1069c:	1a54      	subs	r4, r2, r1
   1069e:	2c00      	cmp	r4, #0
   106a0:	f300 826b 	bgt.w	10b7a <_vfiprintf_r+0x9ba>
   106a4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   106a8:	9803      	ldr	r0, [sp, #12]
   106aa:	4281      	cmp	r1, r0
   106ac:	bfac      	ite	ge
   106ae:	1852      	addge	r2, r2, r1
   106b0:	1812      	addlt	r2, r2, r0
   106b2:	9205      	str	r2, [sp, #20]
   106b4:	2b00      	cmp	r3, #0
   106b6:	f47f af51 	bne.w	1055c <_vfiprintf_r+0x39c>
   106ba:	9908      	ldr	r1, [sp, #32]
   106bc:	2300      	movs	r3, #0
   106be:	9319      	str	r3, [sp, #100]	; 0x64
   106c0:	2900      	cmp	r1, #0
   106c2:	f000 8149 	beq.w	10958 <_vfiprintf_r+0x798>
   106c6:	4658      	mov	r0, fp
   106c8:	f7fd fedc 	bl	e484 <_free_r>
   106cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106d0:	e5c1      	b.n	10256 <_vfiprintf_r+0x96>
   106d2:	059c      	lsls	r4, r3, #22
   106d4:	f53f af5d 	bmi.w	10592 <_vfiprintf_r+0x3d2>
   106d8:	ee18 4a10 	vmov	r4, s16
   106dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   106de:	f7fd fd61 	bl	e1a4 <__retarget_lock_release_recursive>
   106e2:	89a2      	ldrh	r2, [r4, #12]
   106e4:	e755      	b.n	10592 <_vfiprintf_r+0x3d2>
   106e6:	06f0      	lsls	r0, r6, #27
   106e8:	9a07      	ldr	r2, [sp, #28]
   106ea:	f100 831f 	bmi.w	10d2c <_vfiprintf_r+0xb6c>
   106ee:	0671      	lsls	r1, r6, #25
   106f0:	f140 8319 	bpl.w	10d26 <_vfiprintf_r+0xb66>
   106f4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   106f8:	9207      	str	r2, [sp, #28]
   106fa:	17da      	asrs	r2, r3, #31
   106fc:	4611      	mov	r1, r2
   106fe:	e66e      	b.n	103de <_vfiprintf_r+0x21e>
   10700:	f016 0310 	ands.w	r3, r6, #16
   10704:	9907      	ldr	r1, [sp, #28]
   10706:	f040 8309 	bne.w	10d1c <_vfiprintf_r+0xb5c>
   1070a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1070e:	f000 8301 	beq.w	10d14 <_vfiprintf_r+0xb54>
   10712:	461a      	mov	r2, r3
   10714:	f851 3b04 	ldr.w	r3, [r1], #4
   10718:	9107      	str	r1, [sp, #28]
   1071a:	b29b      	uxth	r3, r3
   1071c:	e6c3      	b.n	104a6 <_vfiprintf_r+0x2e6>
   1071e:	9b07      	ldr	r3, [sp, #28]
   10720:	461a      	mov	r2, r3
   10722:	2300      	movs	r3, #0
   10724:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10728:	4613      	mov	r3, r2
   1072a:	f853 4b04 	ldr.w	r4, [r3], #4
   1072e:	9303      	str	r3, [sp, #12]
   10730:	2c00      	cmp	r4, #0
   10732:	f000 8412 	beq.w	10f5a <_vfiprintf_r+0xd9a>
   10736:	2953      	cmp	r1, #83	; 0x53
   10738:	f000 8365 	beq.w	10e06 <_vfiprintf_r+0xc46>
   1073c:	f016 0510 	ands.w	r5, r6, #16
   10740:	f040 8361 	bne.w	10e06 <_vfiprintf_r+0xc46>
   10744:	1c7b      	adds	r3, r7, #1
   10746:	f000 84b3 	beq.w	110b0 <_vfiprintf_r+0xef0>
   1074a:	463a      	mov	r2, r7
   1074c:	4629      	mov	r1, r5
   1074e:	4620      	mov	r0, r4
   10750:	f7fe fcfe 	bl	f150 <memchr>
   10754:	9008      	str	r0, [sp, #32]
   10756:	2800      	cmp	r0, #0
   10758:	f000 849f 	beq.w	1109a <_vfiprintf_r+0xeda>
   1075c:	1b03      	subs	r3, r0, r4
   1075e:	9a03      	ldr	r2, [sp, #12]
   10760:	9304      	str	r3, [sp, #16]
   10762:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10766:	462f      	mov	r7, r5
   10768:	9207      	str	r2, [sp, #28]
   1076a:	9303      	str	r3, [sp, #12]
   1076c:	9508      	str	r5, [sp, #32]
   1076e:	e657      	b.n	10420 <_vfiprintf_r+0x260>
   10770:	2943      	cmp	r1, #67	; 0x43
   10772:	d002      	beq.n	1077a <_vfiprintf_r+0x5ba>
   10774:	06f5      	lsls	r5, r6, #27
   10776:	f140 832d 	bpl.w	10dd4 <_vfiprintf_r+0xc14>
   1077a:	9d07      	ldr	r5, [sp, #28]
   1077c:	2208      	movs	r2, #8
   1077e:	2100      	movs	r1, #0
   10780:	a816      	add	r0, sp, #88	; 0x58
   10782:	ac2b      	add	r4, sp, #172	; 0xac
   10784:	f7fd fbee 	bl	df64 <memset>
   10788:	ab16      	add	r3, sp, #88	; 0x58
   1078a:	f855 2b04 	ldr.w	r2, [r5], #4
   1078e:	4621      	mov	r1, r4
   10790:	4658      	mov	r0, fp
   10792:	f7ff fc93 	bl	100bc <_wcrtomb_r>
   10796:	4603      	mov	r3, r0
   10798:	3301      	adds	r3, #1
   1079a:	9004      	str	r0, [sp, #16]
   1079c:	f000 84b3 	beq.w	11106 <_vfiprintf_r+0xf46>
   107a0:	9b04      	ldr	r3, [sp, #16]
   107a2:	9507      	str	r5, [sp, #28]
   107a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   107a8:	9303      	str	r3, [sp, #12]
   107aa:	2300      	movs	r3, #0
   107ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   107b0:	e703      	b.n	105ba <_vfiprintf_r+0x3fa>
   107b2:	9b07      	ldr	r3, [sp, #28]
   107b4:	f853 2b04 	ldr.w	r2, [r3], #4
   107b8:	9206      	str	r2, [sp, #24]
   107ba:	2a00      	cmp	r2, #0
   107bc:	f280 829c 	bge.w	10cf8 <_vfiprintf_r+0xb38>
   107c0:	9a06      	ldr	r2, [sp, #24]
   107c2:	4252      	negs	r2, r2
   107c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   107c8:	f898 1000 	ldrb.w	r1, [r8]
   107cc:	f046 0604 	orr.w	r6, r6, #4
   107d0:	e569      	b.n	102a6 <_vfiprintf_r+0xe6>
   107d2:	f898 1000 	ldrb.w	r1, [r8]
   107d6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   107da:	e564      	b.n	102a6 <_vfiprintf_r+0xe6>
   107dc:	f898 1000 	ldrb.w	r1, [r8]
   107e0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   107e4:	e55f      	b.n	102a6 <_vfiprintf_r+0xe6>
   107e6:	4642      	mov	r2, r8
   107e8:	f812 1b01 	ldrb.w	r1, [r2], #1
   107ec:	292a      	cmp	r1, #42	; 0x2a
   107ee:	f000 8496 	beq.w	1111e <_vfiprintf_r+0xf5e>
   107f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   107f6:	2b09      	cmp	r3, #9
   107f8:	4690      	mov	r8, r2
   107fa:	f04f 0700 	mov.w	r7, #0
   107fe:	f63f ad54 	bhi.w	102aa <_vfiprintf_r+0xea>
   10802:	f818 1b01 	ldrb.w	r1, [r8], #1
   10806:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1080a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1080e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10812:	2b09      	cmp	r3, #9
   10814:	d9f5      	bls.n	10802 <_vfiprintf_r+0x642>
   10816:	e548      	b.n	102aa <_vfiprintf_r+0xea>
   10818:	f898 1000 	ldrb.w	r1, [r8]
   1081c:	f046 0601 	orr.w	r6, r6, #1
   10820:	e541      	b.n	102a6 <_vfiprintf_r+0xe6>
   10822:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   10826:	2b00      	cmp	r3, #0
   10828:	f47f adc2 	bne.w	103b0 <_vfiprintf_r+0x1f0>
   1082c:	2320      	movs	r3, #32
   1082e:	f898 1000 	ldrb.w	r1, [r8]
   10832:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10836:	e536      	b.n	102a6 <_vfiprintf_r+0xe6>
   10838:	f898 1000 	ldrb.w	r1, [r8]
   1083c:	296c      	cmp	r1, #108	; 0x6c
   1083e:	bf03      	ittte	eq
   10840:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   10844:	f046 0620 	orreq.w	r6, r6, #32
   10848:	f108 0801 	addeq.w	r8, r8, #1
   1084c:	f046 0610 	orrne.w	r6, r6, #16
   10850:	e529      	b.n	102a6 <_vfiprintf_r+0xe6>
   10852:	f898 1000 	ldrb.w	r1, [r8]
   10856:	2968      	cmp	r1, #104	; 0x68
   10858:	bf03      	ittte	eq
   1085a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1085e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   10862:	f108 0801 	addeq.w	r8, r8, #1
   10866:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1086a:	e51c      	b.n	102a6 <_vfiprintf_r+0xe6>
   1086c:	f046 0310 	orr.w	r3, r6, #16
   10870:	9303      	str	r3, [sp, #12]
   10872:	9b03      	ldr	r3, [sp, #12]
   10874:	f013 0220 	ands.w	r2, r3, #32
   10878:	f000 8206 	beq.w	10c88 <_vfiprintf_r+0xac8>
   1087c:	9b07      	ldr	r3, [sp, #28]
   1087e:	3307      	adds	r3, #7
   10880:	f023 0307 	bic.w	r3, r3, #7
   10884:	4619      	mov	r1, r3
   10886:	685a      	ldr	r2, [r3, #4]
   10888:	f851 3b08 	ldr.w	r3, [r1], #8
   1088c:	9107      	str	r1, [sp, #28]
   1088e:	2101      	movs	r1, #1
   10890:	e60d      	b.n	104ae <_vfiprintf_r+0x2ee>
   10892:	9a07      	ldr	r2, [sp, #28]
   10894:	f046 0302 	orr.w	r3, r6, #2
   10898:	9303      	str	r3, [sp, #12]
   1089a:	f852 3b04 	ldr.w	r3, [r2], #4
   1089e:	9207      	str	r2, [sp, #28]
   108a0:	f647 0230 	movw	r2, #30768	; 0x7830
   108a4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   108a8:	4ab8      	ldr	r2, [pc, #736]	; (10b8c <_vfiprintf_r+0x9cc>)
   108aa:	920c      	str	r2, [sp, #48]	; 0x30
   108ac:	2102      	movs	r1, #2
   108ae:	2200      	movs	r2, #0
   108b0:	e5fd      	b.n	104ae <_vfiprintf_r+0x2ee>
   108b2:	06b7      	lsls	r7, r6, #26
   108b4:	f100 8248 	bmi.w	10d48 <_vfiprintf_r+0xb88>
   108b8:	06f5      	lsls	r5, r6, #27
   108ba:	f100 8346 	bmi.w	10f4a <_vfiprintf_r+0xd8a>
   108be:	0674      	lsls	r4, r6, #25
   108c0:	f100 83d5 	bmi.w	1106e <_vfiprintf_r+0xeae>
   108c4:	05b0      	lsls	r0, r6, #22
   108c6:	f140 8340 	bpl.w	10f4a <_vfiprintf_r+0xd8a>
   108ca:	9b07      	ldr	r3, [sp, #28]
   108cc:	9905      	ldr	r1, [sp, #20]
   108ce:	f853 2b04 	ldr.w	r2, [r3], #4
   108d2:	9307      	str	r3, [sp, #28]
   108d4:	7011      	strb	r1, [r2, #0]
   108d6:	e4be      	b.n	10256 <_vfiprintf_r+0x96>
   108d8:	9603      	str	r6, [sp, #12]
   108da:	2901      	cmp	r1, #1
   108dc:	f43f ad8c 	beq.w	103f8 <_vfiprintf_r+0x238>
   108e0:	2902      	cmp	r1, #2
   108e2:	ac44      	add	r4, sp, #272	; 0x110
   108e4:	d111      	bne.n	1090a <_vfiprintf_r+0x74a>
   108e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   108e8:	f003 010f 	and.w	r1, r3, #15
   108ec:	091b      	lsrs	r3, r3, #4
   108ee:	5c41      	ldrb	r1, [r0, r1]
   108f0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   108f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   108f8:	0912      	lsrs	r2, r2, #4
   108fa:	ea53 0102 	orrs.w	r1, r3, r2
   108fe:	d1f3      	bne.n	108e8 <_vfiprintf_r+0x728>
   10900:	9e03      	ldr	r6, [sp, #12]
   10902:	ab44      	add	r3, sp, #272	; 0x110
   10904:	1b1b      	subs	r3, r3, r4
   10906:	9304      	str	r3, [sp, #16]
   10908:	e583      	b.n	10412 <_vfiprintf_r+0x252>
   1090a:	f003 0107 	and.w	r1, r3, #7
   1090e:	08db      	lsrs	r3, r3, #3
   10910:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   10914:	08d2      	lsrs	r2, r2, #3
   10916:	3130      	adds	r1, #48	; 0x30
   10918:	ea53 0502 	orrs.w	r5, r3, r2
   1091c:	4620      	mov	r0, r4
   1091e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   10922:	d1f2      	bne.n	1090a <_vfiprintf_r+0x74a>
   10924:	9e03      	ldr	r6, [sp, #12]
   10926:	07f3      	lsls	r3, r6, #31
   10928:	d5eb      	bpl.n	10902 <_vfiprintf_r+0x742>
   1092a:	2930      	cmp	r1, #48	; 0x30
   1092c:	d0e8      	beq.n	10900 <_vfiprintf_r+0x740>
   1092e:	2330      	movs	r3, #48	; 0x30
   10930:	3802      	subs	r0, #2
   10932:	f804 3c01 	strb.w	r3, [r4, #-1]
   10936:	ab44      	add	r3, sp, #272	; 0x110
   10938:	1a1b      	subs	r3, r3, r0
   1093a:	9e03      	ldr	r6, [sp, #12]
   1093c:	9304      	str	r3, [sp, #16]
   1093e:	4604      	mov	r4, r0
   10940:	e567      	b.n	10412 <_vfiprintf_r+0x252>
   10942:	9b04      	ldr	r3, [sp, #16]
   10944:	941b      	str	r4, [sp, #108]	; 0x6c
   10946:	2201      	movs	r2, #1
   10948:	931c      	str	r3, [sp, #112]	; 0x70
   1094a:	931a      	str	r3, [sp, #104]	; 0x68
   1094c:	9219      	str	r2, [sp, #100]	; 0x64
   1094e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10952:	f109 0908 	add.w	r9, r9, #8
   10956:	e69d      	b.n	10694 <_vfiprintf_r+0x4d4>
   10958:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1095c:	e47b      	b.n	10256 <_vfiprintf_r+0x96>
   1095e:	9a06      	ldr	r2, [sp, #24]
   10960:	9d03      	ldr	r5, [sp, #12]
   10962:	1b55      	subs	r5, r2, r5
   10964:	2d00      	cmp	r5, #0
   10966:	f77f ae76 	ble.w	10656 <_vfiprintf_r+0x496>
   1096a:	2d10      	cmp	r5, #16
   1096c:	f340 83bb 	ble.w	110e6 <_vfiprintf_r+0xf26>
   10970:	9409      	str	r4, [sp, #36]	; 0x24
   10972:	ee18 4a10 	vmov	r4, s16
   10976:	e007      	b.n	10988 <_vfiprintf_r+0x7c8>
   10978:	f100 0c02 	add.w	ip, r0, #2
   1097c:	f109 0908 	add.w	r9, r9, #8
   10980:	4610      	mov	r0, r2
   10982:	3d10      	subs	r5, #16
   10984:	2d10      	cmp	r5, #16
   10986:	dd1e      	ble.n	109c6 <_vfiprintf_r+0x806>
   10988:	4981      	ldr	r1, [pc, #516]	; (10b90 <_vfiprintf_r+0x9d0>)
   1098a:	f8c9 1000 	str.w	r1, [r9]
   1098e:	1c42      	adds	r2, r0, #1
   10990:	3310      	adds	r3, #16
   10992:	2110      	movs	r1, #16
   10994:	2a07      	cmp	r2, #7
   10996:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1099a:	f8c9 1004 	str.w	r1, [r9, #4]
   1099e:	ddeb      	ble.n	10978 <_vfiprintf_r+0x7b8>
   109a0:	aa18      	add	r2, sp, #96	; 0x60
   109a2:	2b00      	cmp	r3, #0
   109a4:	d074      	beq.n	10a90 <_vfiprintf_r+0x8d0>
   109a6:	4621      	mov	r1, r4
   109a8:	4658      	mov	r0, fp
   109aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   109ae:	f7ff fbcb 	bl	10148 <__sprint_r.part.0>
   109b2:	2800      	cmp	r0, #0
   109b4:	f47f addb 	bne.w	1056e <_vfiprintf_r+0x3ae>
   109b8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   109bc:	3d10      	subs	r5, #16
   109be:	2d10      	cmp	r5, #16
   109c0:	f100 0c01 	add.w	ip, r0, #1
   109c4:	dce0      	bgt.n	10988 <_vfiprintf_r+0x7c8>
   109c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   109c8:	4a71      	ldr	r2, [pc, #452]	; (10b90 <_vfiprintf_r+0x9d0>)
   109ca:	f8c9 5004 	str.w	r5, [r9, #4]
   109ce:	442b      	add	r3, r5
   109d0:	f1bc 0f07 	cmp.w	ip, #7
   109d4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   109d8:	f8c9 2000 	str.w	r2, [r9]
   109dc:	f340 8194 	ble.w	10d08 <_vfiprintf_r+0xb48>
   109e0:	2b00      	cmp	r3, #0
   109e2:	f000 831f 	beq.w	11024 <_vfiprintf_r+0xe64>
   109e6:	ee18 1a10 	vmov	r1, s16
   109ea:	aa18      	add	r2, sp, #96	; 0x60
   109ec:	4658      	mov	r0, fp
   109ee:	f7ff fbab 	bl	10148 <__sprint_r.part.0>
   109f2:	2800      	cmp	r0, #0
   109f4:	f47f adbb 	bne.w	1056e <_vfiprintf_r+0x3ae>
   109f8:	9a04      	ldr	r2, [sp, #16]
   109fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   109fe:	1abd      	subs	r5, r7, r2
   10a00:	2d00      	cmp	r5, #0
   10a02:	f100 0101 	add.w	r1, r0, #1
   10a06:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a0a:	f77f ae29 	ble.w	10660 <_vfiprintf_r+0x4a0>
   10a0e:	2d10      	cmp	r5, #16
   10a10:	dd29      	ble.n	10a66 <_vfiprintf_r+0x8a6>
   10a12:	9409      	str	r4, [sp, #36]	; 0x24
   10a14:	2710      	movs	r7, #16
   10a16:	ee18 4a10 	vmov	r4, s16
   10a1a:	e007      	b.n	10a2c <_vfiprintf_r+0x86c>
   10a1c:	f100 0c02 	add.w	ip, r0, #2
   10a20:	f109 0908 	add.w	r9, r9, #8
   10a24:	4610      	mov	r0, r2
   10a26:	3d10      	subs	r5, #16
   10a28:	2d10      	cmp	r5, #16
   10a2a:	dd1a      	ble.n	10a62 <_vfiprintf_r+0x8a2>
   10a2c:	1c42      	adds	r2, r0, #1
   10a2e:	4958      	ldr	r1, [pc, #352]	; (10b90 <_vfiprintf_r+0x9d0>)
   10a30:	3310      	adds	r3, #16
   10a32:	2a07      	cmp	r2, #7
   10a34:	e9c9 1700 	strd	r1, r7, [r9]
   10a38:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10a3c:	ddee      	ble.n	10a1c <_vfiprintf_r+0x85c>
   10a3e:	aa18      	add	r2, sp, #96	; 0x60
   10a40:	b303      	cbz	r3, 10a84 <_vfiprintf_r+0x8c4>
   10a42:	4621      	mov	r1, r4
   10a44:	4658      	mov	r0, fp
   10a46:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a4a:	f7ff fb7d 	bl	10148 <__sprint_r.part.0>
   10a4e:	2800      	cmp	r0, #0
   10a50:	f47f ad8d 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10a54:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10a58:	3d10      	subs	r5, #16
   10a5a:	2d10      	cmp	r5, #16
   10a5c:	f100 0c01 	add.w	ip, r0, #1
   10a60:	dce4      	bgt.n	10a2c <_vfiprintf_r+0x86c>
   10a62:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10a64:	4661      	mov	r1, ip
   10a66:	4a4a      	ldr	r2, [pc, #296]	; (10b90 <_vfiprintf_r+0x9d0>)
   10a68:	f8c9 5004 	str.w	r5, [r9, #4]
   10a6c:	442b      	add	r3, r5
   10a6e:	2907      	cmp	r1, #7
   10a70:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10a74:	f8c9 2000 	str.w	r2, [r9]
   10a78:	f300 80e7 	bgt.w	10c4a <_vfiprintf_r+0xa8a>
   10a7c:	f109 0908 	add.w	r9, r9, #8
   10a80:	3101      	adds	r1, #1
   10a82:	e5ed      	b.n	10660 <_vfiprintf_r+0x4a0>
   10a84:	f04f 0c01 	mov.w	ip, #1
   10a88:	4618      	mov	r0, r3
   10a8a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a8e:	e7ca      	b.n	10a26 <_vfiprintf_r+0x866>
   10a90:	f04f 0c01 	mov.w	ip, #1
   10a94:	4618      	mov	r0, r3
   10a96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a9a:	e772      	b.n	10982 <_vfiprintf_r+0x7c2>
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	f000 8104 	beq.w	10caa <_vfiprintf_r+0xaea>
   10aa2:	ee18 1a10 	vmov	r1, s16
   10aa6:	aa18      	add	r2, sp, #96	; 0x60
   10aa8:	4658      	mov	r0, fp
   10aaa:	f7ff fb4d 	bl	10148 <__sprint_r.part.0>
   10aae:	2800      	cmp	r0, #0
   10ab0:	f47f ad5d 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10ab4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10ab8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10abc:	1c41      	adds	r1, r0, #1
   10abe:	e5a7      	b.n	10610 <_vfiprintf_r+0x450>
   10ac0:	2302      	movs	r3, #2
   10ac2:	aa11      	add	r2, sp, #68	; 0x44
   10ac4:	931c      	str	r3, [sp, #112]	; 0x70
   10ac6:	921b      	str	r2, [sp, #108]	; 0x6c
   10ac8:	2101      	movs	r1, #1
   10aca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10ace:	4608      	mov	r0, r1
   10ad0:	f109 0908 	add.w	r9, r9, #8
   10ad4:	1c41      	adds	r1, r0, #1
   10ad6:	e5ba      	b.n	1064e <_vfiprintf_r+0x48e>
   10ad8:	2d10      	cmp	r5, #16
   10ada:	f340 82e5 	ble.w	110a8 <_vfiprintf_r+0xee8>
   10ade:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   10ae2:	940f      	str	r4, [sp, #60]	; 0x3c
   10ae4:	4608      	mov	r0, r1
   10ae6:	ee18 4a10 	vmov	r4, s16
   10aea:	e007      	b.n	10afc <_vfiprintf_r+0x93c>
   10aec:	f100 0c02 	add.w	ip, r0, #2
   10af0:	f109 0908 	add.w	r9, r9, #8
   10af4:	4610      	mov	r0, r2
   10af6:	3d10      	subs	r5, #16
   10af8:	2d10      	cmp	r5, #16
   10afa:	dd1d      	ble.n	10b38 <_vfiprintf_r+0x978>
   10afc:	4925      	ldr	r1, [pc, #148]	; (10b94 <_vfiprintf_r+0x9d4>)
   10afe:	f8c9 1000 	str.w	r1, [r9]
   10b02:	1c42      	adds	r2, r0, #1
   10b04:	3310      	adds	r3, #16
   10b06:	2110      	movs	r1, #16
   10b08:	2a07      	cmp	r2, #7
   10b0a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10b0e:	f8c9 1004 	str.w	r1, [r9, #4]
   10b12:	ddeb      	ble.n	10aec <_vfiprintf_r+0x92c>
   10b14:	aa18      	add	r2, sp, #96	; 0x60
   10b16:	b303      	cbz	r3, 10b5a <_vfiprintf_r+0x99a>
   10b18:	4621      	mov	r1, r4
   10b1a:	4658      	mov	r0, fp
   10b1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b20:	f7ff fb12 	bl	10148 <__sprint_r.part.0>
   10b24:	2800      	cmp	r0, #0
   10b26:	f47f ad22 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10b2a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10b2e:	3d10      	subs	r5, #16
   10b30:	2d10      	cmp	r5, #16
   10b32:	f100 0c01 	add.w	ip, r0, #1
   10b36:	dce1      	bgt.n	10afc <_vfiprintf_r+0x93c>
   10b38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10b3a:	4660      	mov	r0, ip
   10b3c:	4a15      	ldr	r2, [pc, #84]	; (10b94 <_vfiprintf_r+0x9d4>)
   10b3e:	f8c9 5004 	str.w	r5, [r9, #4]
   10b42:	442b      	add	r3, r5
   10b44:	2807      	cmp	r0, #7
   10b46:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10b4a:	f8c9 2000 	str.w	r2, [r9]
   10b4e:	f300 80c1 	bgt.w	10cd4 <_vfiprintf_r+0xb14>
   10b52:	f109 0908 	add.w	r9, r9, #8
   10b56:	1c41      	adds	r1, r0, #1
   10b58:	e546      	b.n	105e8 <_vfiprintf_r+0x428>
   10b5a:	4618      	mov	r0, r3
   10b5c:	f04f 0c01 	mov.w	ip, #1
   10b60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b64:	e7c7      	b.n	10af6 <_vfiprintf_r+0x936>
   10b66:	0776      	lsls	r6, r6, #29
   10b68:	9319      	str	r3, [sp, #100]	; 0x64
   10b6a:	d553      	bpl.n	10c14 <_vfiprintf_r+0xa54>
   10b6c:	9a06      	ldr	r2, [sp, #24]
   10b6e:	9903      	ldr	r1, [sp, #12]
   10b70:	1a54      	subs	r4, r2, r1
   10b72:	2c00      	cmp	r4, #0
   10b74:	dd4e      	ble.n	10c14 <_vfiprintf_r+0xa54>
   10b76:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b7a:	2c10      	cmp	r4, #16
   10b7c:	f340 82b0 	ble.w	110e0 <_vfiprintf_r+0xf20>
   10b80:	9919      	ldr	r1, [sp, #100]	; 0x64
   10b82:	ee18 6a10 	vmov	r6, s16
   10b86:	2510      	movs	r5, #16
   10b88:	e00d      	b.n	10ba6 <_vfiprintf_r+0x9e6>
   10b8a:	bf00      	nop
   10b8c:	20002dec 	.word	0x20002dec
   10b90:	2000318c 	.word	0x2000318c
   10b94:	20002e08 	.word	0x20002e08
   10b98:	1c88      	adds	r0, r1, #2
   10b9a:	f109 0908 	add.w	r9, r9, #8
   10b9e:	4611      	mov	r1, r2
   10ba0:	3c10      	subs	r4, #16
   10ba2:	2c10      	cmp	r4, #16
   10ba4:	dd1a      	ble.n	10bdc <_vfiprintf_r+0xa1c>
   10ba6:	1c4a      	adds	r2, r1, #1
   10ba8:	48b3      	ldr	r0, [pc, #716]	; (10e78 <_vfiprintf_r+0xcb8>)
   10baa:	3310      	adds	r3, #16
   10bac:	2a07      	cmp	r2, #7
   10bae:	e9c9 0500 	strd	r0, r5, [r9]
   10bb2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10bb6:	ddef      	ble.n	10b98 <_vfiprintf_r+0x9d8>
   10bb8:	aa18      	add	r2, sp, #96	; 0x60
   10bba:	b333      	cbz	r3, 10c0a <_vfiprintf_r+0xa4a>
   10bbc:	4631      	mov	r1, r6
   10bbe:	4658      	mov	r0, fp
   10bc0:	f7ff fac2 	bl	10148 <__sprint_r.part.0>
   10bc4:	2800      	cmp	r0, #0
   10bc6:	f47f acd2 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10bca:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   10bce:	3c10      	subs	r4, #16
   10bd0:	2c10      	cmp	r4, #16
   10bd2:	f101 0001 	add.w	r0, r1, #1
   10bd6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10bda:	dce4      	bgt.n	10ba6 <_vfiprintf_r+0x9e6>
   10bdc:	4aa6      	ldr	r2, [pc, #664]	; (10e78 <_vfiprintf_r+0xcb8>)
   10bde:	f8c9 4004 	str.w	r4, [r9, #4]
   10be2:	4423      	add	r3, r4
   10be4:	2807      	cmp	r0, #7
   10be6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10bea:	f8c9 2000 	str.w	r2, [r9]
   10bee:	f77f ad59 	ble.w	106a4 <_vfiprintf_r+0x4e4>
   10bf2:	b17b      	cbz	r3, 10c14 <_vfiprintf_r+0xa54>
   10bf4:	ee18 1a10 	vmov	r1, s16
   10bf8:	aa18      	add	r2, sp, #96	; 0x60
   10bfa:	4658      	mov	r0, fp
   10bfc:	f7ff faa4 	bl	10148 <__sprint_r.part.0>
   10c00:	2800      	cmp	r0, #0
   10c02:	f47f acb4 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10c06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10c08:	e54c      	b.n	106a4 <_vfiprintf_r+0x4e4>
   10c0a:	2001      	movs	r0, #1
   10c0c:	4619      	mov	r1, r3
   10c0e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c12:	e7c5      	b.n	10ba0 <_vfiprintf_r+0x9e0>
   10c14:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   10c18:	9903      	ldr	r1, [sp, #12]
   10c1a:	428a      	cmp	r2, r1
   10c1c:	bfac      	ite	ge
   10c1e:	189b      	addge	r3, r3, r2
   10c20:	185b      	addlt	r3, r3, r1
   10c22:	9305      	str	r3, [sp, #20]
   10c24:	e549      	b.n	106ba <_vfiprintf_r+0x4fa>
   10c26:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10c2a:	058f      	lsls	r7, r1, #22
   10c2c:	ee18 3a10 	vmov	r3, s16
   10c30:	b28a      	uxth	r2, r1
   10c32:	f53f aae8 	bmi.w	10206 <_vfiprintf_r+0x46>
   10c36:	ee18 5a10 	vmov	r5, s16
   10c3a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10c3c:	f7fd fab0 	bl	e1a0 <__retarget_lock_acquire_recursive>
   10c40:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   10c44:	b28a      	uxth	r2, r1
   10c46:	f7ff bade 	b.w	10206 <_vfiprintf_r+0x46>
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	f43f ae79 	beq.w	10942 <_vfiprintf_r+0x782>
   10c50:	ee18 1a10 	vmov	r1, s16
   10c54:	aa18      	add	r2, sp, #96	; 0x60
   10c56:	4658      	mov	r0, fp
   10c58:	f7ff fa76 	bl	10148 <__sprint_r.part.0>
   10c5c:	2800      	cmp	r0, #0
   10c5e:	f47f ac86 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10c62:	9919      	ldr	r1, [sp, #100]	; 0x64
   10c64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10c66:	3101      	adds	r1, #1
   10c68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c6c:	e4f8      	b.n	10660 <_vfiprintf_r+0x4a0>
   10c6e:	9219      	str	r2, [sp, #100]	; 0x64
   10c70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c74:	e45e      	b.n	10534 <_vfiprintf_r+0x374>
   10c76:	2f00      	cmp	r7, #0
   10c78:	f47f abc3 	bne.w	10402 <_vfiprintf_r+0x242>
   10c7c:	9e03      	ldr	r6, [sp, #12]
   10c7e:	2700      	movs	r7, #0
   10c80:	9704      	str	r7, [sp, #16]
   10c82:	ac44      	add	r4, sp, #272	; 0x110
   10c84:	f7ff bbc5 	b.w	10412 <_vfiprintf_r+0x252>
   10c88:	9b03      	ldr	r3, [sp, #12]
   10c8a:	f013 0310 	ands.w	r3, r3, #16
   10c8e:	d154      	bne.n	10d3a <_vfiprintf_r+0xb7a>
   10c90:	9a03      	ldr	r2, [sp, #12]
   10c92:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   10c96:	f000 816b 	beq.w	10f70 <_vfiprintf_r+0xdb0>
   10c9a:	9907      	ldr	r1, [sp, #28]
   10c9c:	461a      	mov	r2, r3
   10c9e:	f851 3b04 	ldr.w	r3, [r1], #4
   10ca2:	9107      	str	r1, [sp, #28]
   10ca4:	b29b      	uxth	r3, r3
   10ca6:	2101      	movs	r1, #1
   10ca8:	e401      	b.n	104ae <_vfiprintf_r+0x2ee>
   10caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10cac:	2a00      	cmp	r2, #0
   10cae:	d164      	bne.n	10d7a <_vfiprintf_r+0xbba>
   10cb0:	4618      	mov	r0, r3
   10cb2:	2101      	movs	r1, #1
   10cb4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10cb8:	e4c9      	b.n	1064e <_vfiprintf_r+0x48e>
   10cba:	2101      	movs	r1, #1
   10cbc:	4618      	mov	r0, r3
   10cbe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10cc2:	e4c4      	b.n	1064e <_vfiprintf_r+0x48e>
   10cc4:	425b      	negs	r3, r3
   10cc6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   10cca:	9603      	str	r6, [sp, #12]
   10ccc:	202d      	movs	r0, #45	; 0x2d
   10cce:	2101      	movs	r1, #1
   10cd0:	f7ff bbee 	b.w	104b0 <_vfiprintf_r+0x2f0>
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	f000 8088 	beq.w	10dea <_vfiprintf_r+0xc2a>
   10cda:	ee18 1a10 	vmov	r1, s16
   10cde:	aa18      	add	r2, sp, #96	; 0x60
   10ce0:	4658      	mov	r0, fp
   10ce2:	f7ff fa31 	bl	10148 <__sprint_r.part.0>
   10ce6:	2800      	cmp	r0, #0
   10ce8:	f47f ac41 	bne.w	1056e <_vfiprintf_r+0x3ae>
   10cec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10cf0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10cf4:	1c41      	adds	r1, r0, #1
   10cf6:	e477      	b.n	105e8 <_vfiprintf_r+0x428>
   10cf8:	f898 1000 	ldrb.w	r1, [r8]
   10cfc:	9307      	str	r3, [sp, #28]
   10cfe:	f7ff bad2 	b.w	102a6 <_vfiprintf_r+0xe6>
   10d02:	ac44      	add	r4, sp, #272	; 0x110
   10d04:	f7ff bb85 	b.w	10412 <_vfiprintf_r+0x252>
   10d08:	f109 0908 	add.w	r9, r9, #8
   10d0c:	f10c 0101 	add.w	r1, ip, #1
   10d10:	4660      	mov	r0, ip
   10d12:	e4a0      	b.n	10656 <_vfiprintf_r+0x496>
   10d14:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10d18:	f040 8197 	bne.w	1104a <_vfiprintf_r+0xe8a>
   10d1c:	f851 3b04 	ldr.w	r3, [r1], #4
   10d20:	9107      	str	r1, [sp, #28]
   10d22:	f7ff bbc0 	b.w	104a6 <_vfiprintf_r+0x2e6>
   10d26:	05b3      	lsls	r3, r6, #22
   10d28:	f100 8188 	bmi.w	1103c <_vfiprintf_r+0xe7c>
   10d2c:	f852 3b04 	ldr.w	r3, [r2], #4
   10d30:	9207      	str	r2, [sp, #28]
   10d32:	17da      	asrs	r2, r3, #31
   10d34:	4611      	mov	r1, r2
   10d36:	f7ff bb52 	b.w	103de <_vfiprintf_r+0x21e>
   10d3a:	9907      	ldr	r1, [sp, #28]
   10d3c:	f851 3b04 	ldr.w	r3, [r1], #4
   10d40:	9107      	str	r1, [sp, #28]
   10d42:	2101      	movs	r1, #1
   10d44:	f7ff bbb3 	b.w	104ae <_vfiprintf_r+0x2ee>
   10d48:	9b07      	ldr	r3, [sp, #28]
   10d4a:	9805      	ldr	r0, [sp, #20]
   10d4c:	f853 1b04 	ldr.w	r1, [r3], #4
   10d50:	9307      	str	r3, [sp, #28]
   10d52:	17c2      	asrs	r2, r0, #31
   10d54:	e9c1 0200 	strd	r0, r2, [r1]
   10d58:	f7ff ba7d 	b.w	10256 <_vfiprintf_r+0x96>
   10d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d5e:	2b00      	cmp	r3, #0
   10d60:	f43f ab26 	beq.w	103b0 <_vfiprintf_r+0x1f0>
   10d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d66:	781b      	ldrb	r3, [r3, #0]
   10d68:	2b00      	cmp	r3, #0
   10d6a:	f43f ab21 	beq.w	103b0 <_vfiprintf_r+0x1f0>
   10d6e:	f898 1000 	ldrb.w	r1, [r8]
   10d72:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   10d76:	f7ff ba96 	b.w	102a6 <_vfiprintf_r+0xe6>
   10d7a:	2302      	movs	r3, #2
   10d7c:	aa11      	add	r2, sp, #68	; 0x44
   10d7e:	931c      	str	r3, [sp, #112]	; 0x70
   10d80:	921b      	str	r2, [sp, #108]	; 0x6c
   10d82:	2001      	movs	r0, #1
   10d84:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10d88:	e6a2      	b.n	10ad0 <_vfiprintf_r+0x910>
   10d8a:	9603      	str	r6, [sp, #12]
   10d8c:	e571      	b.n	10872 <_vfiprintf_r+0x6b2>
   10d8e:	4b3b      	ldr	r3, [pc, #236]	; (10e7c <_vfiprintf_r+0xcbc>)
   10d90:	930c      	str	r3, [sp, #48]	; 0x30
   10d92:	f016 0220 	ands.w	r2, r6, #32
   10d96:	d059      	beq.n	10e4c <_vfiprintf_r+0xc8c>
   10d98:	9b07      	ldr	r3, [sp, #28]
   10d9a:	3307      	adds	r3, #7
   10d9c:	f023 0307 	bic.w	r3, r3, #7
   10da0:	4618      	mov	r0, r3
   10da2:	685a      	ldr	r2, [r3, #4]
   10da4:	f850 3b08 	ldr.w	r3, [r0], #8
   10da8:	9007      	str	r0, [sp, #28]
   10daa:	07f4      	lsls	r4, r6, #31
   10dac:	d509      	bpl.n	10dc2 <_vfiprintf_r+0xc02>
   10dae:	ea53 0002 	orrs.w	r0, r3, r2
   10db2:	d006      	beq.n	10dc2 <_vfiprintf_r+0xc02>
   10db4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10db8:	2130      	movs	r1, #48	; 0x30
   10dba:	f046 0602 	orr.w	r6, r6, #2
   10dbe:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   10dc2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   10dc6:	9103      	str	r1, [sp, #12]
   10dc8:	2102      	movs	r1, #2
   10dca:	f7ff bb70 	b.w	104ae <_vfiprintf_r+0x2ee>
   10dce:	4b2c      	ldr	r3, [pc, #176]	; (10e80 <_vfiprintf_r+0xcc0>)
   10dd0:	930c      	str	r3, [sp, #48]	; 0x30
   10dd2:	e7de      	b.n	10d92 <_vfiprintf_r+0xbd2>
   10dd4:	9b07      	ldr	r3, [sp, #28]
   10dd6:	2101      	movs	r1, #1
   10dd8:	f853 2b04 	ldr.w	r2, [r3], #4
   10ddc:	9103      	str	r1, [sp, #12]
   10dde:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   10de2:	9307      	str	r3, [sp, #28]
   10de4:	9104      	str	r1, [sp, #16]
   10de6:	ac2b      	add	r4, sp, #172	; 0xac
   10de8:	e4df      	b.n	107aa <_vfiprintf_r+0x5ea>
   10dea:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10dee:	2a00      	cmp	r2, #0
   10df0:	f040 8132 	bne.w	11058 <_vfiprintf_r+0xe98>
   10df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10df6:	2a00      	cmp	r2, #0
   10df8:	f47f ae62 	bne.w	10ac0 <_vfiprintf_r+0x900>
   10dfc:	4618      	mov	r0, r3
   10dfe:	2101      	movs	r1, #1
   10e00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10e04:	e427      	b.n	10656 <_vfiprintf_r+0x496>
   10e06:	2100      	movs	r1, #0
   10e08:	2208      	movs	r2, #8
   10e0a:	a816      	add	r0, sp, #88	; 0x58
   10e0c:	9413      	str	r4, [sp, #76]	; 0x4c
   10e0e:	f7fd f8a9 	bl	df64 <memset>
   10e12:	1c79      	adds	r1, r7, #1
   10e14:	f000 80bc 	beq.w	10f90 <_vfiprintf_r+0xdd0>
   10e18:	2500      	movs	r5, #0
   10e1a:	9407      	str	r4, [sp, #28]
   10e1c:	462c      	mov	r4, r5
   10e1e:	e00c      	b.n	10e3a <_vfiprintf_r+0xc7a>
   10e20:	a92b      	add	r1, sp, #172	; 0xac
   10e22:	4658      	mov	r0, fp
   10e24:	f7ff f94a 	bl	100bc <_wcrtomb_r>
   10e28:	1c42      	adds	r2, r0, #1
   10e2a:	4420      	add	r0, r4
   10e2c:	f000 816b 	beq.w	11106 <_vfiprintf_r+0xf46>
   10e30:	42b8      	cmp	r0, r7
   10e32:	dc08      	bgt.n	10e46 <_vfiprintf_r+0xc86>
   10e34:	f000 8170 	beq.w	11118 <_vfiprintf_r+0xf58>
   10e38:	4604      	mov	r4, r0
   10e3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10e3c:	5952      	ldr	r2, [r2, r5]
   10e3e:	ab16      	add	r3, sp, #88	; 0x58
   10e40:	3504      	adds	r5, #4
   10e42:	2a00      	cmp	r2, #0
   10e44:	d1ec      	bne.n	10e20 <_vfiprintf_r+0xc60>
   10e46:	9404      	str	r4, [sp, #16]
   10e48:	9c07      	ldr	r4, [sp, #28]
   10e4a:	e0af      	b.n	10fac <_vfiprintf_r+0xdec>
   10e4c:	f016 0310 	ands.w	r3, r6, #16
   10e50:	9807      	ldr	r0, [sp, #28]
   10e52:	d10c      	bne.n	10e6e <_vfiprintf_r+0xcae>
   10e54:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   10e58:	d005      	beq.n	10e66 <_vfiprintf_r+0xca6>
   10e5a:	461a      	mov	r2, r3
   10e5c:	f850 3b04 	ldr.w	r3, [r0], #4
   10e60:	9007      	str	r0, [sp, #28]
   10e62:	b29b      	uxth	r3, r3
   10e64:	e7a1      	b.n	10daa <_vfiprintf_r+0xbea>
   10e66:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10e6a:	f040 80e1 	bne.w	11030 <_vfiprintf_r+0xe70>
   10e6e:	f850 3b04 	ldr.w	r3, [r0], #4
   10e72:	9007      	str	r0, [sp, #28]
   10e74:	e799      	b.n	10daa <_vfiprintf_r+0xbea>
   10e76:	bf00      	nop
   10e78:	20002e08 	.word	0x20002e08
   10e7c:	20002dec 	.word	0x20002dec
   10e80:	20002dd8 	.word	0x20002dd8
   10e84:	9903      	ldr	r1, [sp, #12]
   10e86:	9704      	str	r7, [sp, #16]
   10e88:	ac44      	add	r4, sp, #272	; 0x110
   10e8a:	469e      	mov	lr, r3
   10e8c:	ee08 ba90 	vmov	s17, fp
   10e90:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   10e94:	f04f 0c00 	mov.w	ip, #0
   10e98:	4623      	mov	r3, r4
   10e9a:	e006      	b.n	10eaa <_vfiprintf_r+0xcea>
   10e9c:	f1be 0f0a 	cmp.w	lr, #10
   10ea0:	f172 0200 	sbcs.w	r2, r2, #0
   10ea4:	d339      	bcc.n	10f1a <_vfiprintf_r+0xd5a>
   10ea6:	46a6      	mov	lr, r4
   10ea8:	462a      	mov	r2, r5
   10eaa:	49a6      	ldr	r1, [pc, #664]	; (11144 <_vfiprintf_r+0xf84>)
   10eac:	eb1e 0002 	adds.w	r0, lr, r2
   10eb0:	f140 0000 	adc.w	r0, r0, #0
   10eb4:	460f      	mov	r7, r1
   10eb6:	fba1 1400 	umull	r1, r4, r1, r0
   10eba:	f024 0103 	bic.w	r1, r4, #3
   10ebe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   10ec2:	1a40      	subs	r0, r0, r1
   10ec4:	ebbe 0100 	subs.w	r1, lr, r0
   10ec8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   10ecc:	f162 0400 	sbc.w	r4, r2, #0
   10ed0:	fb05 f501 	mul.w	r5, r5, r1
   10ed4:	fb07 5504 	mla	r5, r7, r4, r5
   10ed8:	fba1 4107 	umull	r4, r1, r1, r7
   10edc:	440d      	add	r5, r1
   10ede:	2705      	movs	r7, #5
   10ee0:	f004 0101 	and.w	r1, r4, #1
   10ee4:	fba1 1b07 	umull	r1, fp, r1, r7
   10ee8:	1809      	adds	r1, r1, r0
   10eea:	0864      	lsrs	r4, r4, #1
   10eec:	3130      	adds	r1, #48	; 0x30
   10eee:	f803 1c01 	strb.w	r1, [r3, #-1]
   10ef2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   10ef6:	f10c 0c01 	add.w	ip, ip, #1
   10efa:	3b01      	subs	r3, #1
   10efc:	086d      	lsrs	r5, r5, #1
   10efe:	2e00      	cmp	r6, #0
   10f00:	d0cc      	beq.n	10e9c <_vfiprintf_r+0xcdc>
   10f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f04:	7809      	ldrb	r1, [r1, #0]
   10f06:	4561      	cmp	r1, ip
   10f08:	d1c8      	bne.n	10e9c <_vfiprintf_r+0xcdc>
   10f0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10f0e:	d0c5      	beq.n	10e9c <_vfiprintf_r+0xcdc>
   10f10:	f1be 0f0a 	cmp.w	lr, #10
   10f14:	f172 0200 	sbcs.w	r2, r2, #0
   10f18:	d26c      	bcs.n	10ff4 <_vfiprintf_r+0xe34>
   10f1a:	461c      	mov	r4, r3
   10f1c:	ab44      	add	r3, sp, #272	; 0x110
   10f1e:	1b1b      	subs	r3, r3, r4
   10f20:	9f04      	ldr	r7, [sp, #16]
   10f22:	9e03      	ldr	r6, [sp, #12]
   10f24:	9304      	str	r3, [sp, #16]
   10f26:	ee18 ba90 	vmov	fp, s17
   10f2a:	f7ff ba72 	b.w	10412 <_vfiprintf_r+0x252>
   10f2e:	9603      	str	r6, [sp, #12]
   10f30:	f7ff ba62 	b.w	103f8 <_vfiprintf_r+0x238>
   10f34:	4658      	mov	r0, fp
   10f36:	f7fc fed5 	bl	dce4 <__sinit>
   10f3a:	f7ff b95b 	b.w	101f4 <_vfiprintf_r+0x34>
   10f3e:	2901      	cmp	r1, #1
   10f40:	9603      	str	r6, [sp, #12]
   10f42:	f47f accd 	bne.w	108e0 <_vfiprintf_r+0x720>
   10f46:	f7ff ba5c 	b.w	10402 <_vfiprintf_r+0x242>
   10f4a:	9b07      	ldr	r3, [sp, #28]
   10f4c:	9905      	ldr	r1, [sp, #20]
   10f4e:	f853 2b04 	ldr.w	r2, [r3], #4
   10f52:	6011      	str	r1, [r2, #0]
   10f54:	9307      	str	r3, [sp, #28]
   10f56:	f7ff b97e 	b.w	10256 <_vfiprintf_r+0x96>
   10f5a:	2f06      	cmp	r7, #6
   10f5c:	463b      	mov	r3, r7
   10f5e:	9a03      	ldr	r2, [sp, #12]
   10f60:	4c79      	ldr	r4, [pc, #484]	; (11148 <_vfiprintf_r+0xf88>)
   10f62:	9207      	str	r2, [sp, #28]
   10f64:	bf28      	it	cs
   10f66:	2306      	movcs	r3, #6
   10f68:	9304      	str	r3, [sp, #16]
   10f6a:	9303      	str	r3, [sp, #12]
   10f6c:	f7ff bb25 	b.w	105ba <_vfiprintf_r+0x3fa>
   10f70:	9b03      	ldr	r3, [sp, #12]
   10f72:	9907      	ldr	r1, [sp, #28]
   10f74:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10f78:	bf14      	ite	ne
   10f7a:	f851 3b04 	ldrne.w	r3, [r1], #4
   10f7e:	f851 3b04 	ldreq.w	r3, [r1], #4
   10f82:	9107      	str	r1, [sp, #28]
   10f84:	bf1c      	itt	ne
   10f86:	4602      	movne	r2, r0
   10f88:	b2db      	uxtbne	r3, r3
   10f8a:	2101      	movs	r1, #1
   10f8c:	f7ff ba8f 	b.w	104ae <_vfiprintf_r+0x2ee>
   10f90:	ab16      	add	r3, sp, #88	; 0x58
   10f92:	9300      	str	r3, [sp, #0]
   10f94:	2300      	movs	r3, #0
   10f96:	4619      	mov	r1, r3
   10f98:	aa13      	add	r2, sp, #76	; 0x4c
   10f9a:	4658      	mov	r0, fp
   10f9c:	f7ff f8b4 	bl	10108 <_wcsrtombs_r>
   10fa0:	4603      	mov	r3, r0
   10fa2:	3301      	adds	r3, #1
   10fa4:	9004      	str	r0, [sp, #16]
   10fa6:	f000 80ae 	beq.w	11106 <_vfiprintf_r+0xf46>
   10faa:	9413      	str	r4, [sp, #76]	; 0x4c
   10fac:	9b04      	ldr	r3, [sp, #16]
   10fae:	2b00      	cmp	r3, #0
   10fb0:	d030      	beq.n	11014 <_vfiprintf_r+0xe54>
   10fb2:	2b63      	cmp	r3, #99	; 0x63
   10fb4:	dc63      	bgt.n	1107e <_vfiprintf_r+0xebe>
   10fb6:	2300      	movs	r3, #0
   10fb8:	9308      	str	r3, [sp, #32]
   10fba:	ac2b      	add	r4, sp, #172	; 0xac
   10fbc:	2208      	movs	r2, #8
   10fbe:	2100      	movs	r1, #0
   10fc0:	a816      	add	r0, sp, #88	; 0x58
   10fc2:	f7fc ffcf 	bl	df64 <memset>
   10fc6:	9d04      	ldr	r5, [sp, #16]
   10fc8:	ab16      	add	r3, sp, #88	; 0x58
   10fca:	9300      	str	r3, [sp, #0]
   10fcc:	aa13      	add	r2, sp, #76	; 0x4c
   10fce:	462b      	mov	r3, r5
   10fd0:	4621      	mov	r1, r4
   10fd2:	4658      	mov	r0, fp
   10fd4:	f7ff f898 	bl	10108 <_wcsrtombs_r>
   10fd8:	4285      	cmp	r5, r0
   10fda:	f040 80ab 	bne.w	11134 <_vfiprintf_r+0xf74>
   10fde:	9b03      	ldr	r3, [sp, #12]
   10fe0:	9a04      	ldr	r2, [sp, #16]
   10fe2:	9307      	str	r3, [sp, #28]
   10fe4:	2300      	movs	r3, #0
   10fe6:	54a3      	strb	r3, [r4, r2]
   10fe8:	461f      	mov	r7, r3
   10fea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10fee:	9303      	str	r3, [sp, #12]
   10ff0:	f7ff ba16 	b.w	10420 <_vfiprintf_r+0x260>
   10ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10ff6:	990d      	ldr	r1, [sp, #52]	; 0x34
   10ff8:	1a9b      	subs	r3, r3, r2
   10ffa:	4618      	mov	r0, r3
   10ffc:	9308      	str	r3, [sp, #32]
   10ffe:	f7fd f803 	bl	e008 <strncpy>
   11002:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11004:	9b08      	ldr	r3, [sp, #32]
   11006:	784a      	ldrb	r2, [r1, #1]
   11008:	b10a      	cbz	r2, 1100e <_vfiprintf_r+0xe4e>
   1100a:	3101      	adds	r1, #1
   1100c:	910b      	str	r1, [sp, #44]	; 0x2c
   1100e:	f04f 0c00 	mov.w	ip, #0
   11012:	e748      	b.n	10ea6 <_vfiprintf_r+0xce6>
   11014:	9b03      	ldr	r3, [sp, #12]
   11016:	9307      	str	r3, [sp, #28]
   11018:	9b04      	ldr	r3, [sp, #16]
   1101a:	9303      	str	r3, [sp, #12]
   1101c:	461f      	mov	r7, r3
   1101e:	9308      	str	r3, [sp, #32]
   11020:	f7ff b9fe 	b.w	10420 <_vfiprintf_r+0x260>
   11024:	2101      	movs	r1, #1
   11026:	4618      	mov	r0, r3
   11028:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1102c:	f7ff bb13 	b.w	10656 <_vfiprintf_r+0x496>
   11030:	f850 3b04 	ldr.w	r3, [r0], #4
   11034:	9007      	str	r0, [sp, #28]
   11036:	4622      	mov	r2, r4
   11038:	b2db      	uxtb	r3, r3
   1103a:	e6b6      	b.n	10daa <_vfiprintf_r+0xbea>
   1103c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   11040:	9207      	str	r2, [sp, #28]
   11042:	17da      	asrs	r2, r3, #31
   11044:	4611      	mov	r1, r2
   11046:	f7ff b9ca 	b.w	103de <_vfiprintf_r+0x21e>
   1104a:	f851 3b04 	ldr.w	r3, [r1], #4
   1104e:	9107      	str	r1, [sp, #28]
   11050:	4602      	mov	r2, r0
   11052:	b2db      	uxtb	r3, r3
   11054:	f7ff ba27 	b.w	104a6 <_vfiprintf_r+0x2e6>
   11058:	2301      	movs	r3, #1
   1105a:	931c      	str	r3, [sp, #112]	; 0x70
   1105c:	2101      	movs	r1, #1
   1105e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   11062:	931b      	str	r3, [sp, #108]	; 0x6c
   11064:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11068:	460b      	mov	r3, r1
   1106a:	f7ff bacd 	b.w	10608 <_vfiprintf_r+0x448>
   1106e:	9b07      	ldr	r3, [sp, #28]
   11070:	9905      	ldr	r1, [sp, #20]
   11072:	f853 2b04 	ldr.w	r2, [r3], #4
   11076:	9307      	str	r3, [sp, #28]
   11078:	8011      	strh	r1, [r2, #0]
   1107a:	f7ff b8ec 	b.w	10256 <_vfiprintf_r+0x96>
   1107e:	1c59      	adds	r1, r3, #1
   11080:	4658      	mov	r0, fp
   11082:	f7fc f88b 	bl	d19c <_malloc_r>
   11086:	4604      	mov	r4, r0
   11088:	2800      	cmp	r0, #0
   1108a:	d03c      	beq.n	11106 <_vfiprintf_r+0xf46>
   1108c:	9008      	str	r0, [sp, #32]
   1108e:	e795      	b.n	10fbc <_vfiprintf_r+0xdfc>
   11090:	6d88      	ldr	r0, [r1, #88]	; 0x58
   11092:	f7fd f887 	bl	e1a4 <__retarget_lock_release_recursive>
   11096:	f7ff b9e9 	b.w	1046c <_vfiprintf_r+0x2ac>
   1109a:	9b03      	ldr	r3, [sp, #12]
   1109c:	9307      	str	r3, [sp, #28]
   1109e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   110a2:	9f08      	ldr	r7, [sp, #32]
   110a4:	f7ff b9bc 	b.w	10420 <_vfiprintf_r+0x260>
   110a8:	9819      	ldr	r0, [sp, #100]	; 0x64
   110aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   110ac:	3001      	adds	r0, #1
   110ae:	e545      	b.n	10b3c <_vfiprintf_r+0x97c>
   110b0:	9b03      	ldr	r3, [sp, #12]
   110b2:	9307      	str	r3, [sp, #28]
   110b4:	4620      	mov	r0, r4
   110b6:	f7fd f8e3 	bl	e280 <strlen>
   110ba:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   110be:	462f      	mov	r7, r5
   110c0:	9004      	str	r0, [sp, #16]
   110c2:	9303      	str	r3, [sp, #12]
   110c4:	9508      	str	r5, [sp, #32]
   110c6:	f7ff b9ab 	b.w	10420 <_vfiprintf_r+0x260>
   110ca:	ee18 1a10 	vmov	r1, s16
   110ce:	aa18      	add	r2, sp, #96	; 0x60
   110d0:	4658      	mov	r0, fp
   110d2:	f7ff f839 	bl	10148 <__sprint_r.part.0>
   110d6:	2800      	cmp	r0, #0
   110d8:	f43f aa36 	beq.w	10548 <_vfiprintf_r+0x388>
   110dc:	f7ff ba4d 	b.w	1057a <_vfiprintf_r+0x3ba>
   110e0:	9819      	ldr	r0, [sp, #100]	; 0x64
   110e2:	3001      	adds	r0, #1
   110e4:	e57a      	b.n	10bdc <_vfiprintf_r+0xa1c>
   110e6:	468c      	mov	ip, r1
   110e8:	e46e      	b.n	109c8 <_vfiprintf_r+0x808>
   110ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   110ec:	07d9      	lsls	r1, r3, #31
   110ee:	d405      	bmi.n	110fc <_vfiprintf_r+0xf3c>
   110f0:	89ab      	ldrh	r3, [r5, #12]
   110f2:	059a      	lsls	r2, r3, #22
   110f4:	d402      	bmi.n	110fc <_vfiprintf_r+0xf3c>
   110f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   110f8:	f7fd f854 	bl	e1a4 <__retarget_lock_release_recursive>
   110fc:	f04f 33ff 	mov.w	r3, #4294967295
   11100:	9305      	str	r3, [sp, #20]
   11102:	f7ff ba49 	b.w	10598 <_vfiprintf_r+0x3d8>
   11106:	ee18 2a10 	vmov	r2, s16
   1110a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1110e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11112:	8193      	strh	r3, [r2, #12]
   11114:	f7ff ba35 	b.w	10582 <_vfiprintf_r+0x3c2>
   11118:	9c07      	ldr	r4, [sp, #28]
   1111a:	9704      	str	r7, [sp, #16]
   1111c:	e746      	b.n	10fac <_vfiprintf_r+0xdec>
   1111e:	9b07      	ldr	r3, [sp, #28]
   11120:	f898 1001 	ldrb.w	r1, [r8, #1]
   11124:	f853 7b04 	ldr.w	r7, [r3], #4
   11128:	9307      	str	r3, [sp, #28]
   1112a:	4690      	mov	r8, r2
   1112c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   11130:	f7ff b8b9 	b.w	102a6 <_vfiprintf_r+0xe6>
   11134:	ee18 2a10 	vmov	r2, s16
   11138:	8993      	ldrh	r3, [r2, #12]
   1113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1113e:	8193      	strh	r3, [r2, #12]
   11140:	f7ff ba15 	b.w	1056e <_vfiprintf_r+0x3ae>
   11144:	cccccccd 	.word	0xcccccccd
   11148:	20002e00 	.word	0x20002e00

0001114c <__sbprintf>:
   1114c:	b570      	push	{r4, r5, r6, lr}
   1114e:	460c      	mov	r4, r1
   11150:	8989      	ldrh	r1, [r1, #12]
   11152:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   11156:	f021 0102 	bic.w	r1, r1, #2
   1115a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1115e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11160:	911b      	str	r1, [sp, #108]	; 0x6c
   11162:	89e1      	ldrh	r1, [r4, #14]
   11164:	f8ad 1016 	strh.w	r1, [sp, #22]
   11168:	69e1      	ldr	r1, [r4, #28]
   1116a:	9109      	str	r1, [sp, #36]	; 0x24
   1116c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1116e:	910b      	str	r1, [sp, #44]	; 0x2c
   11170:	a91c      	add	r1, sp, #112	; 0x70
   11172:	9102      	str	r1, [sp, #8]
   11174:	9106      	str	r1, [sp, #24]
   11176:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1117a:	4606      	mov	r6, r0
   1117c:	9104      	str	r1, [sp, #16]
   1117e:	9107      	str	r1, [sp, #28]
   11180:	a818      	add	r0, sp, #96	; 0x60
   11182:	2100      	movs	r1, #0
   11184:	e9cd 3200 	strd	r3, r2, [sp]
   11188:	9108      	str	r1, [sp, #32]
   1118a:	f7fd f805 	bl	e198 <__retarget_lock_init_recursive>
   1118e:	e9dd 3200 	ldrd	r3, r2, [sp]
   11192:	a902      	add	r1, sp, #8
   11194:	4630      	mov	r0, r6
   11196:	f7ff f813 	bl	101c0 <_vfiprintf_r>
   1119a:	1e05      	subs	r5, r0, #0
   1119c:	db07      	blt.n	111ae <__sbprintf+0x62>
   1119e:	a902      	add	r1, sp, #8
   111a0:	4630      	mov	r0, r6
   111a2:	f7fd ffa3 	bl	f0ec <_fflush_r>
   111a6:	2800      	cmp	r0, #0
   111a8:	bf18      	it	ne
   111aa:	f04f 35ff 	movne.w	r5, #4294967295
   111ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   111b2:	065b      	lsls	r3, r3, #25
   111b4:	d503      	bpl.n	111be <__sbprintf+0x72>
   111b6:	89a3      	ldrh	r3, [r4, #12]
   111b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111bc:	81a3      	strh	r3, [r4, #12]
   111be:	9818      	ldr	r0, [sp, #96]	; 0x60
   111c0:	f7fc ffec 	bl	e19c <__retarget_lock_close_recursive>
   111c4:	4628      	mov	r0, r5
   111c6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   111ca:	bd70      	pop	{r4, r5, r6, pc}

000111cc <__sfvwrite_r>:
   111cc:	6893      	ldr	r3, [r2, #8]
   111ce:	2b00      	cmp	r3, #0
   111d0:	f000 8085 	beq.w	112de <__sfvwrite_r+0x112>
   111d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   111dc:	460c      	mov	r4, r1
   111de:	0719      	lsls	r1, r3, #28
   111e0:	4680      	mov	r8, r0
   111e2:	b083      	sub	sp, #12
   111e4:	4617      	mov	r7, r2
   111e6:	b298      	uxth	r0, r3
   111e8:	d525      	bpl.n	11236 <__sfvwrite_r+0x6a>
   111ea:	6923      	ldr	r3, [r4, #16]
   111ec:	b31b      	cbz	r3, 11236 <__sfvwrite_r+0x6a>
   111ee:	f010 0302 	ands.w	r3, r0, #2
   111f2:	683d      	ldr	r5, [r7, #0]
   111f4:	d02d      	beq.n	11252 <__sfvwrite_r+0x86>
   111f6:	f04f 0a00 	mov.w	sl, #0
   111fa:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 114bc <__sfvwrite_r+0x2f0>
   111fe:	4656      	mov	r6, sl
   11200:	46b9      	mov	r9, r7
   11202:	455e      	cmp	r6, fp
   11204:	4633      	mov	r3, r6
   11206:	4652      	mov	r2, sl
   11208:	bf28      	it	cs
   1120a:	465b      	movcs	r3, fp
   1120c:	4640      	mov	r0, r8
   1120e:	2e00      	cmp	r6, #0
   11210:	d052      	beq.n	112b8 <__sfvwrite_r+0xec>
   11212:	69e1      	ldr	r1, [r4, #28]
   11214:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11216:	47b8      	blx	r7
   11218:	2800      	cmp	r0, #0
   1121a:	dd56      	ble.n	112ca <__sfvwrite_r+0xfe>
   1121c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11220:	1a1b      	subs	r3, r3, r0
   11222:	4482      	add	sl, r0
   11224:	1a36      	subs	r6, r6, r0
   11226:	f8c9 3008 	str.w	r3, [r9, #8]
   1122a:	2b00      	cmp	r3, #0
   1122c:	d1e9      	bne.n	11202 <__sfvwrite_r+0x36>
   1122e:	2000      	movs	r0, #0
   11230:	b003      	add	sp, #12
   11232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11236:	4621      	mov	r1, r4
   11238:	4640      	mov	r0, r8
   1123a:	f000 f941 	bl	114c0 <__swsetup_r>
   1123e:	2800      	cmp	r0, #0
   11240:	f040 8138 	bne.w	114b4 <__sfvwrite_r+0x2e8>
   11244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11248:	683d      	ldr	r5, [r7, #0]
   1124a:	b298      	uxth	r0, r3
   1124c:	f010 0302 	ands.w	r3, r0, #2
   11250:	d1d1      	bne.n	111f6 <__sfvwrite_r+0x2a>
   11252:	f010 0901 	ands.w	r9, r0, #1
   11256:	d144      	bne.n	112e2 <__sfvwrite_r+0x116>
   11258:	464e      	mov	r6, r9
   1125a:	9700      	str	r7, [sp, #0]
   1125c:	b346      	cbz	r6, 112b0 <__sfvwrite_r+0xe4>
   1125e:	0582      	lsls	r2, r0, #22
   11260:	f8d4 b008 	ldr.w	fp, [r4, #8]
   11264:	f140 8085 	bpl.w	11372 <__sfvwrite_r+0x1a6>
   11268:	45b3      	cmp	fp, r6
   1126a:	465a      	mov	r2, fp
   1126c:	f200 80b4 	bhi.w	113d8 <__sfvwrite_r+0x20c>
   11270:	f410 6f90 	tst.w	r0, #1152	; 0x480
   11274:	f040 80c1 	bne.w	113fa <__sfvwrite_r+0x22e>
   11278:	6820      	ldr	r0, [r4, #0]
   1127a:	9201      	str	r2, [sp, #4]
   1127c:	4649      	mov	r1, r9
   1127e:	f7fc fdf5 	bl	de6c <memmove>
   11282:	68a3      	ldr	r3, [r4, #8]
   11284:	9a01      	ldr	r2, [sp, #4]
   11286:	eba3 010b 	sub.w	r1, r3, fp
   1128a:	6823      	ldr	r3, [r4, #0]
   1128c:	60a1      	str	r1, [r4, #8]
   1128e:	4413      	add	r3, r2
   11290:	46b2      	mov	sl, r6
   11292:	6023      	str	r3, [r4, #0]
   11294:	2600      	movs	r6, #0
   11296:	9a00      	ldr	r2, [sp, #0]
   11298:	6893      	ldr	r3, [r2, #8]
   1129a:	eba3 030a 	sub.w	r3, r3, sl
   1129e:	44d1      	add	r9, sl
   112a0:	6093      	str	r3, [r2, #8]
   112a2:	2b00      	cmp	r3, #0
   112a4:	d0c3      	beq.n	1122e <__sfvwrite_r+0x62>
   112a6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   112aa:	b280      	uxth	r0, r0
   112ac:	2e00      	cmp	r6, #0
   112ae:	d1d6      	bne.n	1125e <__sfvwrite_r+0x92>
   112b0:	e9d5 9600 	ldrd	r9, r6, [r5]
   112b4:	3508      	adds	r5, #8
   112b6:	e7d1      	b.n	1125c <__sfvwrite_r+0x90>
   112b8:	e9d5 a600 	ldrd	sl, r6, [r5]
   112bc:	3508      	adds	r5, #8
   112be:	e7a0      	b.n	11202 <__sfvwrite_r+0x36>
   112c0:	4621      	mov	r1, r4
   112c2:	4640      	mov	r0, r8
   112c4:	f7fd ff12 	bl	f0ec <_fflush_r>
   112c8:	b388      	cbz	r0, 1132e <__sfvwrite_r+0x162>
   112ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   112ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   112d2:	f04f 30ff 	mov.w	r0, #4294967295
   112d6:	81a3      	strh	r3, [r4, #12]
   112d8:	b003      	add	sp, #12
   112da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112de:	2000      	movs	r0, #0
   112e0:	4770      	bx	lr
   112e2:	461e      	mov	r6, r3
   112e4:	46ba      	mov	sl, r7
   112e6:	4699      	mov	r9, r3
   112e8:	4618      	mov	r0, r3
   112ea:	9500      	str	r5, [sp, #0]
   112ec:	461f      	mov	r7, r3
   112ee:	b366      	cbz	r6, 1134a <__sfvwrite_r+0x17e>
   112f0:	2800      	cmp	r0, #0
   112f2:	d032      	beq.n	1135a <__sfvwrite_r+0x18e>
   112f4:	464a      	mov	r2, r9
   112f6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   112fa:	6820      	ldr	r0, [r4, #0]
   112fc:	68a5      	ldr	r5, [r4, #8]
   112fe:	42b2      	cmp	r2, r6
   11300:	bf28      	it	cs
   11302:	4632      	movcs	r2, r6
   11304:	4288      	cmp	r0, r1
   11306:	d904      	bls.n	11312 <__sfvwrite_r+0x146>
   11308:	eb05 0b03 	add.w	fp, r5, r3
   1130c:	455a      	cmp	r2, fp
   1130e:	f300 80a7 	bgt.w	11460 <__sfvwrite_r+0x294>
   11312:	4293      	cmp	r3, r2
   11314:	dc64      	bgt.n	113e0 <__sfvwrite_r+0x214>
   11316:	69e1      	ldr	r1, [r4, #28]
   11318:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1131a:	463a      	mov	r2, r7
   1131c:	4640      	mov	r0, r8
   1131e:	47a8      	blx	r5
   11320:	f1b0 0b00 	subs.w	fp, r0, #0
   11324:	ddd1      	ble.n	112ca <__sfvwrite_r+0xfe>
   11326:	ebb9 090b 	subs.w	r9, r9, fp
   1132a:	d0c9      	beq.n	112c0 <__sfvwrite_r+0xf4>
   1132c:	2001      	movs	r0, #1
   1132e:	f8da 3008 	ldr.w	r3, [sl, #8]
   11332:	eba3 030b 	sub.w	r3, r3, fp
   11336:	445f      	add	r7, fp
   11338:	eba6 060b 	sub.w	r6, r6, fp
   1133c:	f8ca 3008 	str.w	r3, [sl, #8]
   11340:	2b00      	cmp	r3, #0
   11342:	f43f af74 	beq.w	1122e <__sfvwrite_r+0x62>
   11346:	2e00      	cmp	r6, #0
   11348:	d1d2      	bne.n	112f0 <__sfvwrite_r+0x124>
   1134a:	9a00      	ldr	r2, [sp, #0]
   1134c:	6856      	ldr	r6, [r2, #4]
   1134e:	4613      	mov	r3, r2
   11350:	3208      	adds	r2, #8
   11352:	9200      	str	r2, [sp, #0]
   11354:	2e00      	cmp	r6, #0
   11356:	d0f8      	beq.n	1134a <__sfvwrite_r+0x17e>
   11358:	681f      	ldr	r7, [r3, #0]
   1135a:	4632      	mov	r2, r6
   1135c:	210a      	movs	r1, #10
   1135e:	4638      	mov	r0, r7
   11360:	f7fd fef6 	bl	f150 <memchr>
   11364:	2800      	cmp	r0, #0
   11366:	f000 809c 	beq.w	114a2 <__sfvwrite_r+0x2d6>
   1136a:	3001      	adds	r0, #1
   1136c:	eba0 0907 	sub.w	r9, r0, r7
   11370:	e7c0      	b.n	112f4 <__sfvwrite_r+0x128>
   11372:	6820      	ldr	r0, [r4, #0]
   11374:	6923      	ldr	r3, [r4, #16]
   11376:	4298      	cmp	r0, r3
   11378:	d816      	bhi.n	113a8 <__sfvwrite_r+0x1dc>
   1137a:	6962      	ldr	r2, [r4, #20]
   1137c:	42b2      	cmp	r2, r6
   1137e:	d813      	bhi.n	113a8 <__sfvwrite_r+0x1dc>
   11380:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11384:	42b3      	cmp	r3, r6
   11386:	bf28      	it	cs
   11388:	4633      	movcs	r3, r6
   1138a:	69e1      	ldr	r1, [r4, #28]
   1138c:	fb93 f3f2 	sdiv	r3, r3, r2
   11390:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11392:	fb02 f303 	mul.w	r3, r2, r3
   11396:	4640      	mov	r0, r8
   11398:	464a      	mov	r2, r9
   1139a:	47b8      	blx	r7
   1139c:	f1b0 0a00 	subs.w	sl, r0, #0
   113a0:	dd93      	ble.n	112ca <__sfvwrite_r+0xfe>
   113a2:	eba6 060a 	sub.w	r6, r6, sl
   113a6:	e776      	b.n	11296 <__sfvwrite_r+0xca>
   113a8:	45b3      	cmp	fp, r6
   113aa:	46da      	mov	sl, fp
   113ac:	bf28      	it	cs
   113ae:	46b2      	movcs	sl, r6
   113b0:	4652      	mov	r2, sl
   113b2:	4649      	mov	r1, r9
   113b4:	f7fc fd5a 	bl	de6c <memmove>
   113b8:	68a3      	ldr	r3, [r4, #8]
   113ba:	6822      	ldr	r2, [r4, #0]
   113bc:	eba3 030a 	sub.w	r3, r3, sl
   113c0:	4452      	add	r2, sl
   113c2:	60a3      	str	r3, [r4, #8]
   113c4:	6022      	str	r2, [r4, #0]
   113c6:	2b00      	cmp	r3, #0
   113c8:	d1eb      	bne.n	113a2 <__sfvwrite_r+0x1d6>
   113ca:	4621      	mov	r1, r4
   113cc:	4640      	mov	r0, r8
   113ce:	f7fd fe8d 	bl	f0ec <_fflush_r>
   113d2:	2800      	cmp	r0, #0
   113d4:	d0e5      	beq.n	113a2 <__sfvwrite_r+0x1d6>
   113d6:	e778      	b.n	112ca <__sfvwrite_r+0xfe>
   113d8:	6820      	ldr	r0, [r4, #0]
   113da:	46b3      	mov	fp, r6
   113dc:	4632      	mov	r2, r6
   113de:	e74c      	b.n	1127a <__sfvwrite_r+0xae>
   113e0:	4639      	mov	r1, r7
   113e2:	9201      	str	r2, [sp, #4]
   113e4:	f7fc fd42 	bl	de6c <memmove>
   113e8:	9a01      	ldr	r2, [sp, #4]
   113ea:	68a3      	ldr	r3, [r4, #8]
   113ec:	1a9b      	subs	r3, r3, r2
   113ee:	60a3      	str	r3, [r4, #8]
   113f0:	6823      	ldr	r3, [r4, #0]
   113f2:	4413      	add	r3, r2
   113f4:	6023      	str	r3, [r4, #0]
   113f6:	4693      	mov	fp, r2
   113f8:	e795      	b.n	11326 <__sfvwrite_r+0x15a>
   113fa:	6823      	ldr	r3, [r4, #0]
   113fc:	6921      	ldr	r1, [r4, #16]
   113fe:	eba3 0b01 	sub.w	fp, r3, r1
   11402:	6963      	ldr	r3, [r4, #20]
   11404:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   11408:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1140c:	f10b 0301 	add.w	r3, fp, #1
   11410:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   11414:	4433      	add	r3, r6
   11416:	4553      	cmp	r3, sl
   11418:	4652      	mov	r2, sl
   1141a:	bf84      	itt	hi
   1141c:	469a      	movhi	sl, r3
   1141e:	4652      	movhi	r2, sl
   11420:	0543      	lsls	r3, r0, #21
   11422:	d52c      	bpl.n	1147e <__sfvwrite_r+0x2b2>
   11424:	4611      	mov	r1, r2
   11426:	4640      	mov	r0, r8
   11428:	f7fb feb8 	bl	d19c <_malloc_r>
   1142c:	2800      	cmp	r0, #0
   1142e:	d03b      	beq.n	114a8 <__sfvwrite_r+0x2dc>
   11430:	465a      	mov	r2, fp
   11432:	6921      	ldr	r1, [r4, #16]
   11434:	9001      	str	r0, [sp, #4]
   11436:	f7f9 fbf9 	bl	ac2c <memcpy>
   1143a:	89a2      	ldrh	r2, [r4, #12]
   1143c:	9b01      	ldr	r3, [sp, #4]
   1143e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11446:	81a2      	strh	r2, [r4, #12]
   11448:	eb03 000b 	add.w	r0, r3, fp
   1144c:	6123      	str	r3, [r4, #16]
   1144e:	ebaa 030b 	sub.w	r3, sl, fp
   11452:	f8c4 a014 	str.w	sl, [r4, #20]
   11456:	60a3      	str	r3, [r4, #8]
   11458:	6020      	str	r0, [r4, #0]
   1145a:	46b3      	mov	fp, r6
   1145c:	4632      	mov	r2, r6
   1145e:	e70c      	b.n	1127a <__sfvwrite_r+0xae>
   11460:	4639      	mov	r1, r7
   11462:	465a      	mov	r2, fp
   11464:	f7fc fd02 	bl	de6c <memmove>
   11468:	6823      	ldr	r3, [r4, #0]
   1146a:	445b      	add	r3, fp
   1146c:	6023      	str	r3, [r4, #0]
   1146e:	4621      	mov	r1, r4
   11470:	4640      	mov	r0, r8
   11472:	f7fd fe3b 	bl	f0ec <_fflush_r>
   11476:	2800      	cmp	r0, #0
   11478:	f43f af55 	beq.w	11326 <__sfvwrite_r+0x15a>
   1147c:	e725      	b.n	112ca <__sfvwrite_r+0xfe>
   1147e:	4640      	mov	r0, r8
   11480:	f7fc f954 	bl	d72c <_realloc_r>
   11484:	4603      	mov	r3, r0
   11486:	2800      	cmp	r0, #0
   11488:	d1de      	bne.n	11448 <__sfvwrite_r+0x27c>
   1148a:	6921      	ldr	r1, [r4, #16]
   1148c:	4640      	mov	r0, r8
   1148e:	f7fc fff9 	bl	e484 <_free_r>
   11492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11496:	220c      	movs	r2, #12
   11498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1149c:	f8c8 2000 	str.w	r2, [r8]
   114a0:	e715      	b.n	112ce <__sfvwrite_r+0x102>
   114a2:	1c72      	adds	r2, r6, #1
   114a4:	4691      	mov	r9, r2
   114a6:	e726      	b.n	112f6 <__sfvwrite_r+0x12a>
   114a8:	220c      	movs	r2, #12
   114aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114ae:	f8c8 2000 	str.w	r2, [r8]
   114b2:	e70c      	b.n	112ce <__sfvwrite_r+0x102>
   114b4:	f04f 30ff 	mov.w	r0, #4294967295
   114b8:	e6ba      	b.n	11230 <__sfvwrite_r+0x64>
   114ba:	bf00      	nop
   114bc:	7ffffc00 	.word	0x7ffffc00

000114c0 <__swsetup_r>:
   114c0:	b538      	push	{r3, r4, r5, lr}
   114c2:	4b31      	ldr	r3, [pc, #196]	; (11588 <__swsetup_r+0xc8>)
   114c4:	681b      	ldr	r3, [r3, #0]
   114c6:	4605      	mov	r5, r0
   114c8:	460c      	mov	r4, r1
   114ca:	b113      	cbz	r3, 114d2 <__swsetup_r+0x12>
   114cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   114ce:	2a00      	cmp	r2, #0
   114d0:	d04e      	beq.n	11570 <__swsetup_r+0xb0>
   114d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114d6:	0718      	lsls	r0, r3, #28
   114d8:	b29a      	uxth	r2, r3
   114da:	d51c      	bpl.n	11516 <__swsetup_r+0x56>
   114dc:	6921      	ldr	r1, [r4, #16]
   114de:	b329      	cbz	r1, 1152c <__swsetup_r+0x6c>
   114e0:	f012 0001 	ands.w	r0, r2, #1
   114e4:	d007      	beq.n	114f6 <__swsetup_r+0x36>
   114e6:	2000      	movs	r0, #0
   114e8:	60a0      	str	r0, [r4, #8]
   114ea:	6960      	ldr	r0, [r4, #20]
   114ec:	4240      	negs	r0, r0
   114ee:	61a0      	str	r0, [r4, #24]
   114f0:	b139      	cbz	r1, 11502 <__swsetup_r+0x42>
   114f2:	2000      	movs	r0, #0
   114f4:	bd38      	pop	{r3, r4, r5, pc}
   114f6:	0795      	lsls	r5, r2, #30
   114f8:	bf58      	it	pl
   114fa:	6960      	ldrpl	r0, [r4, #20]
   114fc:	60a0      	str	r0, [r4, #8]
   114fe:	2900      	cmp	r1, #0
   11500:	d1f7      	bne.n	114f2 <__swsetup_r+0x32>
   11502:	0612      	lsls	r2, r2, #24
   11504:	bf58      	it	pl
   11506:	4608      	movpl	r0, r1
   11508:	d5f4      	bpl.n	114f4 <__swsetup_r+0x34>
   1150a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1150e:	81a3      	strh	r3, [r4, #12]
   11510:	f04f 30ff 	mov.w	r0, #4294967295
   11514:	bd38      	pop	{r3, r4, r5, pc}
   11516:	06d1      	lsls	r1, r2, #27
   11518:	d52e      	bpl.n	11578 <__swsetup_r+0xb8>
   1151a:	0752      	lsls	r2, r2, #29
   1151c:	d414      	bmi.n	11548 <__swsetup_r+0x88>
   1151e:	6921      	ldr	r1, [r4, #16]
   11520:	f043 0308 	orr.w	r3, r3, #8
   11524:	81a3      	strh	r3, [r4, #12]
   11526:	b29a      	uxth	r2, r3
   11528:	2900      	cmp	r1, #0
   1152a:	d1d9      	bne.n	114e0 <__swsetup_r+0x20>
   1152c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   11530:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   11534:	d0d4      	beq.n	114e0 <__swsetup_r+0x20>
   11536:	4621      	mov	r1, r4
   11538:	4628      	mov	r0, r5
   1153a:	f000 f947 	bl	117cc <__smakebuf_r>
   1153e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11542:	6921      	ldr	r1, [r4, #16]
   11544:	b29a      	uxth	r2, r3
   11546:	e7cb      	b.n	114e0 <__swsetup_r+0x20>
   11548:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1154a:	b151      	cbz	r1, 11562 <__swsetup_r+0xa2>
   1154c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11550:	4291      	cmp	r1, r2
   11552:	d004      	beq.n	1155e <__swsetup_r+0x9e>
   11554:	4628      	mov	r0, r5
   11556:	f7fc ff95 	bl	e484 <_free_r>
   1155a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1155e:	2200      	movs	r2, #0
   11560:	6322      	str	r2, [r4, #48]	; 0x30
   11562:	6921      	ldr	r1, [r4, #16]
   11564:	2200      	movs	r2, #0
   11566:	e9c4 1200 	strd	r1, r2, [r4]
   1156a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1156e:	e7d7      	b.n	11520 <__swsetup_r+0x60>
   11570:	4618      	mov	r0, r3
   11572:	f7fc fbb7 	bl	dce4 <__sinit>
   11576:	e7ac      	b.n	114d2 <__swsetup_r+0x12>
   11578:	2209      	movs	r2, #9
   1157a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1157e:	602a      	str	r2, [r5, #0]
   11580:	f04f 30ff 	mov.w	r0, #4294967295
   11584:	81a3      	strh	r3, [r4, #12]
   11586:	bd38      	pop	{r3, r4, r5, pc}
   11588:	20003ce0 	.word	0x20003ce0

0001158c <__fputwc>:
   1158c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11590:	b082      	sub	sp, #8
   11592:	4682      	mov	sl, r0
   11594:	4688      	mov	r8, r1
   11596:	4614      	mov	r4, r2
   11598:	f7fc fd68 	bl	e06c <__locale_mb_cur_max>
   1159c:	2801      	cmp	r0, #1
   1159e:	d103      	bne.n	115a8 <__fputwc+0x1c>
   115a0:	f108 33ff 	add.w	r3, r8, #4294967295
   115a4:	2bfe      	cmp	r3, #254	; 0xfe
   115a6:	d936      	bls.n	11616 <__fputwc+0x8a>
   115a8:	f10d 0904 	add.w	r9, sp, #4
   115ac:	4642      	mov	r2, r8
   115ae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   115b2:	4649      	mov	r1, r9
   115b4:	4650      	mov	r0, sl
   115b6:	f7fe fd81 	bl	100bc <_wcrtomb_r>
   115ba:	1c42      	adds	r2, r0, #1
   115bc:	4606      	mov	r6, r0
   115be:	d032      	beq.n	11626 <__fputwc+0x9a>
   115c0:	b320      	cbz	r0, 1160c <__fputwc+0x80>
   115c2:	f89d c004 	ldrb.w	ip, [sp, #4]
   115c6:	2500      	movs	r5, #0
   115c8:	e009      	b.n	115de <__fputwc+0x52>
   115ca:	6823      	ldr	r3, [r4, #0]
   115cc:	1c5a      	adds	r2, r3, #1
   115ce:	6022      	str	r2, [r4, #0]
   115d0:	f883 c000 	strb.w	ip, [r3]
   115d4:	3501      	adds	r5, #1
   115d6:	42b5      	cmp	r5, r6
   115d8:	d218      	bcs.n	1160c <__fputwc+0x80>
   115da:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   115de:	68a3      	ldr	r3, [r4, #8]
   115e0:	3b01      	subs	r3, #1
   115e2:	2b00      	cmp	r3, #0
   115e4:	60a3      	str	r3, [r4, #8]
   115e6:	daf0      	bge.n	115ca <__fputwc+0x3e>
   115e8:	69a7      	ldr	r7, [r4, #24]
   115ea:	42bb      	cmp	r3, r7
   115ec:	4661      	mov	r1, ip
   115ee:	4622      	mov	r2, r4
   115f0:	4650      	mov	r0, sl
   115f2:	db02      	blt.n	115fa <__fputwc+0x6e>
   115f4:	f1bc 0f0a 	cmp.w	ip, #10
   115f8:	d1e7      	bne.n	115ca <__fputwc+0x3e>
   115fa:	f000 f953 	bl	118a4 <__swbuf_r>
   115fe:	1c43      	adds	r3, r0, #1
   11600:	d1e8      	bne.n	115d4 <__fputwc+0x48>
   11602:	4606      	mov	r6, r0
   11604:	4630      	mov	r0, r6
   11606:	b002      	add	sp, #8
   11608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1160c:	4646      	mov	r6, r8
   1160e:	4630      	mov	r0, r6
   11610:	b002      	add	sp, #8
   11612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11616:	fa5f fc88 	uxtb.w	ip, r8
   1161a:	f88d c004 	strb.w	ip, [sp, #4]
   1161e:	4606      	mov	r6, r0
   11620:	f10d 0904 	add.w	r9, sp, #4
   11624:	e7cf      	b.n	115c6 <__fputwc+0x3a>
   11626:	89a3      	ldrh	r3, [r4, #12]
   11628:	4630      	mov	r0, r6
   1162a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1162e:	81a3      	strh	r3, [r4, #12]
   11630:	b002      	add	sp, #8
   11632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11636:	bf00      	nop

00011638 <_fputwc_r>:
   11638:	b530      	push	{r4, r5, lr}
   1163a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1163c:	f013 0f01 	tst.w	r3, #1
   11640:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   11644:	4614      	mov	r4, r2
   11646:	b083      	sub	sp, #12
   11648:	4605      	mov	r5, r0
   1164a:	b29a      	uxth	r2, r3
   1164c:	d101      	bne.n	11652 <_fputwc_r+0x1a>
   1164e:	0598      	lsls	r0, r3, #22
   11650:	d51c      	bpl.n	1168c <_fputwc_r+0x54>
   11652:	0490      	lsls	r0, r2, #18
   11654:	d406      	bmi.n	11664 <_fputwc_r+0x2c>
   11656:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1165c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11660:	81a3      	strh	r3, [r4, #12]
   11662:	6662      	str	r2, [r4, #100]	; 0x64
   11664:	4622      	mov	r2, r4
   11666:	4628      	mov	r0, r5
   11668:	f7ff ff90 	bl	1158c <__fputwc>
   1166c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1166e:	07da      	lsls	r2, r3, #31
   11670:	4605      	mov	r5, r0
   11672:	d402      	bmi.n	1167a <_fputwc_r+0x42>
   11674:	89a3      	ldrh	r3, [r4, #12]
   11676:	059b      	lsls	r3, r3, #22
   11678:	d502      	bpl.n	11680 <_fputwc_r+0x48>
   1167a:	4628      	mov	r0, r5
   1167c:	b003      	add	sp, #12
   1167e:	bd30      	pop	{r4, r5, pc}
   11680:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11682:	f7fc fd8f 	bl	e1a4 <__retarget_lock_release_recursive>
   11686:	4628      	mov	r0, r5
   11688:	b003      	add	sp, #12
   1168a:	bd30      	pop	{r4, r5, pc}
   1168c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1168e:	9101      	str	r1, [sp, #4]
   11690:	f7fc fd86 	bl	e1a0 <__retarget_lock_acquire_recursive>
   11694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11698:	9901      	ldr	r1, [sp, #4]
   1169a:	b29a      	uxth	r2, r3
   1169c:	e7d9      	b.n	11652 <_fputwc_r+0x1a>
   1169e:	bf00      	nop

000116a0 <_wcsnrtombs_l>:
   116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a4:	b08b      	sub	sp, #44	; 0x2c
   116a6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   116aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
   116ac:	9103      	str	r1, [sp, #12]
   116ae:	4681      	mov	r9, r0
   116b0:	9205      	str	r2, [sp, #20]
   116b2:	461e      	mov	r6, r3
   116b4:	f1b8 0f00 	cmp.w	r8, #0
   116b8:	d05c      	beq.n	11774 <_wcsnrtombs_l+0xd4>
   116ba:	9b03      	ldr	r3, [sp, #12]
   116bc:	2b00      	cmp	r3, #0
   116be:	d05e      	beq.n	1177e <_wcsnrtombs_l+0xde>
   116c0:	9b05      	ldr	r3, [sp, #20]
   116c2:	681d      	ldr	r5, [r3, #0]
   116c4:	2f00      	cmp	r7, #0
   116c6:	d06a      	beq.n	1179e <_wcsnrtombs_l+0xfe>
   116c8:	1e74      	subs	r4, r6, #1
   116ca:	b34e      	cbz	r6, 11720 <_wcsnrtombs_l+0x80>
   116cc:	9b03      	ldr	r3, [sp, #12]
   116ce:	9304      	str	r3, [sp, #16]
   116d0:	3d04      	subs	r5, #4
   116d2:	2600      	movs	r6, #0
   116d4:	9501      	str	r5, [sp, #4]
   116d6:	e00b      	b.n	116f0 <_wcsnrtombs_l+0x50>
   116d8:	9b03      	ldr	r3, [sp, #12]
   116da:	bb2b      	cbnz	r3, 11728 <_wcsnrtombs_l+0x88>
   116dc:	9b01      	ldr	r3, [sp, #4]
   116de:	681a      	ldr	r2, [r3, #0]
   116e0:	2a00      	cmp	r2, #0
   116e2:	d03a      	beq.n	1175a <_wcsnrtombs_l+0xba>
   116e4:	45bc      	cmp	ip, r7
   116e6:	d25c      	bcs.n	117a2 <_wcsnrtombs_l+0x102>
   116e8:	3c01      	subs	r4, #1
   116ea:	1c63      	adds	r3, r4, #1
   116ec:	4666      	mov	r6, ip
   116ee:	d017      	beq.n	11720 <_wcsnrtombs_l+0x80>
   116f0:	f8d8 3000 	ldr.w	r3, [r8]
   116f4:	9302      	str	r3, [sp, #8]
   116f6:	9b01      	ldr	r3, [sp, #4]
   116f8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   116fc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11700:	9301      	str	r3, [sp, #4]
   11702:	a907      	add	r1, sp, #28
   11704:	4643      	mov	r3, r8
   11706:	4648      	mov	r0, r9
   11708:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1170c:	47a8      	blx	r5
   1170e:	1c42      	adds	r2, r0, #1
   11710:	d03a      	beq.n	11788 <_wcsnrtombs_l+0xe8>
   11712:	eb00 0c06 	add.w	ip, r0, r6
   11716:	45bc      	cmp	ip, r7
   11718:	d9de      	bls.n	116d8 <_wcsnrtombs_l+0x38>
   1171a:	9b02      	ldr	r3, [sp, #8]
   1171c:	e9c8 3b00 	strd	r3, fp, [r8]
   11720:	4630      	mov	r0, r6
   11722:	b00b      	add	sp, #44	; 0x2c
   11724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11728:	2800      	cmp	r0, #0
   1172a:	dd0e      	ble.n	1174a <_wcsnrtombs_l+0xaa>
   1172c:	9b04      	ldr	r3, [sp, #16]
   1172e:	9d01      	ldr	r5, [sp, #4]
   11730:	4418      	add	r0, r3
   11732:	1e5a      	subs	r2, r3, #1
   11734:	a907      	add	r1, sp, #28
   11736:	f100 3eff 	add.w	lr, r0, #4294967295
   1173a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1173e:	f802 3f01 	strb.w	r3, [r2, #1]!
   11742:	4572      	cmp	r2, lr
   11744:	d1f9      	bne.n	1173a <_wcsnrtombs_l+0x9a>
   11746:	9501      	str	r5, [sp, #4]
   11748:	9004      	str	r0, [sp, #16]
   1174a:	9b05      	ldr	r3, [sp, #20]
   1174c:	681a      	ldr	r2, [r3, #0]
   1174e:	3204      	adds	r2, #4
   11750:	601a      	str	r2, [r3, #0]
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	681a      	ldr	r2, [r3, #0]
   11756:	2a00      	cmp	r2, #0
   11758:	d1c4      	bne.n	116e4 <_wcsnrtombs_l+0x44>
   1175a:	9b03      	ldr	r3, [sp, #12]
   1175c:	b10b      	cbz	r3, 11762 <_wcsnrtombs_l+0xc2>
   1175e:	9b05      	ldr	r3, [sp, #20]
   11760:	601a      	str	r2, [r3, #0]
   11762:	f10c 36ff 	add.w	r6, ip, #4294967295
   11766:	2200      	movs	r2, #0
   11768:	4630      	mov	r0, r6
   1176a:	f8c8 2000 	str.w	r2, [r8]
   1176e:	b00b      	add	sp, #44	; 0x2c
   11770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11774:	9b03      	ldr	r3, [sp, #12]
   11776:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1177a:	2b00      	cmp	r3, #0
   1177c:	d1a0      	bne.n	116c0 <_wcsnrtombs_l+0x20>
   1177e:	9b05      	ldr	r3, [sp, #20]
   11780:	f04f 37ff 	mov.w	r7, #4294967295
   11784:	681d      	ldr	r5, [r3, #0]
   11786:	e79f      	b.n	116c8 <_wcsnrtombs_l+0x28>
   11788:	4606      	mov	r6, r0
   1178a:	218a      	movs	r1, #138	; 0x8a
   1178c:	2200      	movs	r2, #0
   1178e:	4630      	mov	r0, r6
   11790:	f8c9 1000 	str.w	r1, [r9]
   11794:	f8c8 2000 	str.w	r2, [r8]
   11798:	b00b      	add	sp, #44	; 0x2c
   1179a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1179e:	463e      	mov	r6, r7
   117a0:	e7be      	b.n	11720 <_wcsnrtombs_l+0x80>
   117a2:	4666      	mov	r6, ip
   117a4:	e7bc      	b.n	11720 <_wcsnrtombs_l+0x80>
   117a6:	bf00      	nop

000117a8 <_wcsnrtombs_r>:
   117a8:	b510      	push	{r4, lr}
   117aa:	b084      	sub	sp, #16
   117ac:	4c05      	ldr	r4, [pc, #20]	; (117c4 <_wcsnrtombs_r+0x1c>)
   117ae:	9806      	ldr	r0, [sp, #24]
   117b0:	9000      	str	r0, [sp, #0]
   117b2:	9807      	ldr	r0, [sp, #28]
   117b4:	9001      	str	r0, [sp, #4]
   117b6:	4804      	ldr	r0, [pc, #16]	; (117c8 <_wcsnrtombs_r+0x20>)
   117b8:	6800      	ldr	r0, [r0, #0]
   117ba:	9402      	str	r4, [sp, #8]
   117bc:	f7ff ff70 	bl	116a0 <_wcsnrtombs_l>
   117c0:	b004      	add	sp, #16
   117c2:	bd10      	pop	{r4, pc}
   117c4:	20003758 	.word	0x20003758
   117c8:	20003ce0 	.word	0x20003ce0

000117cc <__smakebuf_r>:
   117cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117d0:	898b      	ldrh	r3, [r1, #12]
   117d2:	460c      	mov	r4, r1
   117d4:	0799      	lsls	r1, r3, #30
   117d6:	b096      	sub	sp, #88	; 0x58
   117d8:	d508      	bpl.n	117ec <__smakebuf_r+0x20>
   117da:	f104 0343 	add.w	r3, r4, #67	; 0x43
   117de:	2201      	movs	r2, #1
   117e0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   117e4:	6023      	str	r3, [r4, #0]
   117e6:	b016      	add	sp, #88	; 0x58
   117e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   117f0:	2900      	cmp	r1, #0
   117f2:	4606      	mov	r6, r0
   117f4:	db25      	blt.n	11842 <__smakebuf_r+0x76>
   117f6:	466a      	mov	r2, sp
   117f8:	f000 f8ac 	bl	11954 <_fstat_r>
   117fc:	2800      	cmp	r0, #0
   117fe:	db1f      	blt.n	11840 <__smakebuf_r+0x74>
   11800:	9d01      	ldr	r5, [sp, #4]
   11802:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   11806:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1180a:	fab5 f585 	clz	r5, r5
   1180e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   11812:	096d      	lsrs	r5, r5, #5
   11814:	f44f 6700 	mov.w	r7, #2048	; 0x800
   11818:	4641      	mov	r1, r8
   1181a:	4630      	mov	r0, r6
   1181c:	f7fb fcbe 	bl	d19c <_malloc_r>
   11820:	b1e0      	cbz	r0, 1185c <__smakebuf_r+0x90>
   11822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11826:	f8c4 8014 	str.w	r8, [r4, #20]
   1182a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1182e:	6020      	str	r0, [r4, #0]
   11830:	6120      	str	r0, [r4, #16]
   11832:	81a3      	strh	r3, [r4, #12]
   11834:	bb35      	cbnz	r5, 11884 <__smakebuf_r+0xb8>
   11836:	433b      	orrs	r3, r7
   11838:	81a3      	strh	r3, [r4, #12]
   1183a:	b016      	add	sp, #88	; 0x58
   1183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11840:	89a3      	ldrh	r3, [r4, #12]
   11842:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   11846:	d019      	beq.n	1187c <__smakebuf_r+0xb0>
   11848:	f04f 0840 	mov.w	r8, #64	; 0x40
   1184c:	2500      	movs	r5, #0
   1184e:	4641      	mov	r1, r8
   11850:	4630      	mov	r0, r6
   11852:	462f      	mov	r7, r5
   11854:	f7fb fca2 	bl	d19c <_malloc_r>
   11858:	2800      	cmp	r0, #0
   1185a:	d1e2      	bne.n	11822 <__smakebuf_r+0x56>
   1185c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11860:	059a      	lsls	r2, r3, #22
   11862:	d4c0      	bmi.n	117e6 <__smakebuf_r+0x1a>
   11864:	f023 0303 	bic.w	r3, r3, #3
   11868:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1186c:	f043 0302 	orr.w	r3, r3, #2
   11870:	2101      	movs	r1, #1
   11872:	e9c4 2104 	strd	r2, r1, [r4, #16]
   11876:	81a3      	strh	r3, [r4, #12]
   11878:	6022      	str	r2, [r4, #0]
   1187a:	e7b4      	b.n	117e6 <__smakebuf_r+0x1a>
   1187c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   11880:	462f      	mov	r7, r5
   11882:	e7c9      	b.n	11818 <__smakebuf_r+0x4c>
   11884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11888:	4630      	mov	r0, r6
   1188a:	f000 f879 	bl	11980 <_isatty_r>
   1188e:	b910      	cbnz	r0, 11896 <__smakebuf_r+0xca>
   11890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11894:	e7cf      	b.n	11836 <__smakebuf_r+0x6a>
   11896:	89a3      	ldrh	r3, [r4, #12]
   11898:	f023 0303 	bic.w	r3, r3, #3
   1189c:	f043 0301 	orr.w	r3, r3, #1
   118a0:	b21b      	sxth	r3, r3
   118a2:	e7c8      	b.n	11836 <__smakebuf_r+0x6a>

000118a4 <__swbuf_r>:
   118a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118a6:	460d      	mov	r5, r1
   118a8:	4614      	mov	r4, r2
   118aa:	4606      	mov	r6, r0
   118ac:	b110      	cbz	r0, 118b4 <__swbuf_r+0x10>
   118ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   118b0:	2b00      	cmp	r3, #0
   118b2:	d04c      	beq.n	1194e <__swbuf_r+0xaa>
   118b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   118b8:	69a3      	ldr	r3, [r4, #24]
   118ba:	60a3      	str	r3, [r4, #8]
   118bc:	0717      	lsls	r7, r2, #28
   118be:	b290      	uxth	r0, r2
   118c0:	d51b      	bpl.n	118fa <__swbuf_r+0x56>
   118c2:	6923      	ldr	r3, [r4, #16]
   118c4:	b1cb      	cbz	r3, 118fa <__swbuf_r+0x56>
   118c6:	b2ed      	uxtb	r5, r5
   118c8:	0481      	lsls	r1, r0, #18
   118ca:	462f      	mov	r7, r5
   118cc:	d522      	bpl.n	11914 <__swbuf_r+0x70>
   118ce:	6822      	ldr	r2, [r4, #0]
   118d0:	6961      	ldr	r1, [r4, #20]
   118d2:	1ad3      	subs	r3, r2, r3
   118d4:	4299      	cmp	r1, r3
   118d6:	dd29      	ble.n	1192c <__swbuf_r+0x88>
   118d8:	3301      	adds	r3, #1
   118da:	68a1      	ldr	r1, [r4, #8]
   118dc:	3901      	subs	r1, #1
   118de:	60a1      	str	r1, [r4, #8]
   118e0:	1c51      	adds	r1, r2, #1
   118e2:	6021      	str	r1, [r4, #0]
   118e4:	7015      	strb	r5, [r2, #0]
   118e6:	6962      	ldr	r2, [r4, #20]
   118e8:	429a      	cmp	r2, r3
   118ea:	d027      	beq.n	1193c <__swbuf_r+0x98>
   118ec:	89a3      	ldrh	r3, [r4, #12]
   118ee:	07db      	lsls	r3, r3, #31
   118f0:	d501      	bpl.n	118f6 <__swbuf_r+0x52>
   118f2:	2d0a      	cmp	r5, #10
   118f4:	d022      	beq.n	1193c <__swbuf_r+0x98>
   118f6:	4638      	mov	r0, r7
   118f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118fa:	4621      	mov	r1, r4
   118fc:	4630      	mov	r0, r6
   118fe:	f7ff fddf 	bl	114c0 <__swsetup_r>
   11902:	bb08      	cbnz	r0, 11948 <__swbuf_r+0xa4>
   11904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11908:	6923      	ldr	r3, [r4, #16]
   1190a:	b290      	uxth	r0, r2
   1190c:	b2ed      	uxtb	r5, r5
   1190e:	0481      	lsls	r1, r0, #18
   11910:	462f      	mov	r7, r5
   11912:	d4dc      	bmi.n	118ce <__swbuf_r+0x2a>
   11914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11918:	81a2      	strh	r2, [r4, #12]
   1191a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1191c:	6961      	ldr	r1, [r4, #20]
   1191e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   11922:	6662      	str	r2, [r4, #100]	; 0x64
   11924:	6822      	ldr	r2, [r4, #0]
   11926:	1ad3      	subs	r3, r2, r3
   11928:	4299      	cmp	r1, r3
   1192a:	dcd5      	bgt.n	118d8 <__swbuf_r+0x34>
   1192c:	4621      	mov	r1, r4
   1192e:	4630      	mov	r0, r6
   11930:	f7fd fbdc 	bl	f0ec <_fflush_r>
   11934:	b940      	cbnz	r0, 11948 <__swbuf_r+0xa4>
   11936:	6822      	ldr	r2, [r4, #0]
   11938:	2301      	movs	r3, #1
   1193a:	e7ce      	b.n	118da <__swbuf_r+0x36>
   1193c:	4621      	mov	r1, r4
   1193e:	4630      	mov	r0, r6
   11940:	f7fd fbd4 	bl	f0ec <_fflush_r>
   11944:	2800      	cmp	r0, #0
   11946:	d0d6      	beq.n	118f6 <__swbuf_r+0x52>
   11948:	f04f 37ff 	mov.w	r7, #4294967295
   1194c:	e7d3      	b.n	118f6 <__swbuf_r+0x52>
   1194e:	f7fc f9c9 	bl	dce4 <__sinit>
   11952:	e7af      	b.n	118b4 <__swbuf_r+0x10>

00011954 <_fstat_r>:
   11954:	b570      	push	{r4, r5, r6, lr}
   11956:	460c      	mov	r4, r1
   11958:	4d08      	ldr	r5, [pc, #32]	; (1197c <_fstat_r+0x28>)
   1195a:	4603      	mov	r3, r0
   1195c:	2600      	movs	r6, #0
   1195e:	4620      	mov	r0, r4
   11960:	4611      	mov	r1, r2
   11962:	461c      	mov	r4, r3
   11964:	602e      	str	r6, [r5, #0]
   11966:	f7f9 fdcb 	bl	b500 <_fstat>
   1196a:	1c43      	adds	r3, r0, #1
   1196c:	d000      	beq.n	11970 <_fstat_r+0x1c>
   1196e:	bd70      	pop	{r4, r5, r6, pc}
   11970:	682b      	ldr	r3, [r5, #0]
   11972:	2b00      	cmp	r3, #0
   11974:	d0fb      	beq.n	1196e <_fstat_r+0x1a>
   11976:	6023      	str	r3, [r4, #0]
   11978:	bd70      	pop	{r4, r5, r6, pc}
   1197a:	bf00      	nop
   1197c:	20004b08 	.word	0x20004b08

00011980 <_isatty_r>:
   11980:	b538      	push	{r3, r4, r5, lr}
   11982:	4d07      	ldr	r5, [pc, #28]	; (119a0 <_isatty_r+0x20>)
   11984:	2200      	movs	r2, #0
   11986:	4604      	mov	r4, r0
   11988:	4608      	mov	r0, r1
   1198a:	602a      	str	r2, [r5, #0]
   1198c:	f7f9 fdbe 	bl	b50c <_isatty>
   11990:	1c43      	adds	r3, r0, #1
   11992:	d000      	beq.n	11996 <_isatty_r+0x16>
   11994:	bd38      	pop	{r3, r4, r5, pc}
   11996:	682b      	ldr	r3, [r5, #0]
   11998:	2b00      	cmp	r3, #0
   1199a:	d0fb      	beq.n	11994 <_isatty_r+0x14>
   1199c:	6023      	str	r3, [r4, #0]
   1199e:	bd38      	pop	{r3, r4, r5, pc}
   119a0:	20004b08 	.word	0x20004b08
   119a4:	00000000 	.word	0x00000000

000119a8 <___init_veneer>:
   119a8:	f85f f000 	ldr.w	pc, [pc]	; 119ac <___init_veneer+0x4>
   119ac:	60001c29 	.word	0x60001c29

000119b0 <___ZN7TwoWire5beginEv_veneer>:
   119b0:	f85f f000 	ldr.w	pc, [pc]	; 119b4 <___ZN7TwoWire5beginEv_veneer+0x4>
   119b4:	60001785 	.word	0x60001785

000119b8 <___reboot_Teensyduino__veneer>:
   119b8:	f85f f000 	ldr.w	pc, [pc]	; 119bc <___reboot_Teensyduino__veneer+0x4>
   119bc:	60001b81 	.word	0x60001b81

Disassembly of section .fini:

000119c0 <_fini>:
   119c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119c2:	bf00      	nop
